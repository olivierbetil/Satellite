
Freertos_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004000  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08004110  08004110  00014110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041f4  080041f4  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  080041f4  080041f4  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  080041f4  080041f4  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041f4  080041f4  000141f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041f8  080041f8  000141f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080041fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001114  20000088  08004284  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000119c  08004284  0002119c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000130a2  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d60  00000000  00000000  00033153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  00035eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001170  00000000  00000000  00037140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019a8d  00000000  00000000  000382b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012967  00000000  00000000  00051d3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009496b  00000000  00000000  000646a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f900f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ffc  00000000  00000000  000f9060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000088 	.word	0x20000088
 800012c:	00000000 	.word	0x00000000
 8000130:	080040f8 	.word	0x080040f8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000008c 	.word	0x2000008c
 800014c:	080040f8 	.word	0x080040f8

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	200000a4 	.word	0x200000a4
 800017c:	20000158 	.word	0x20000158

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b08e      	sub	sp, #56	; 0x38
 8000184:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 fcc5 	bl	8000b14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f83d 	bl	8000208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f8dd 	bl	800034c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000192:	f000 f8b1 	bl	80002f8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000196:	f000 f879 	bl	800028c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  nrf24_Init();
 800019a:	f000 fa8f 	bl	80006bc <nrf24_Init>

  nrf24_TxMode(TxAddress, 10);
 800019e:	210a      	movs	r1, #10
 80001a0:	4814      	ldr	r0, [pc, #80]	; (80001f4 <main+0x74>)
 80001a2:	f000 faaf 	bl	8000704 <nrf24_TxMode>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task_Idle */
  osThreadDef(Task_Idle, Idle_App, osPriorityIdle, 0, 128);
 80001a6:	4b14      	ldr	r3, [pc, #80]	; (80001f8 <main+0x78>)
 80001a8:	f107 041c 	add.w	r4, r7, #28
 80001ac:	461d      	mov	r5, r3
 80001ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_IdleHandle = osThreadCreate(osThread(Task_Idle), NULL);
 80001ba:	f107 031c 	add.w	r3, r7, #28
 80001be:	2100      	movs	r1, #0
 80001c0:	4618      	mov	r0, r3
 80001c2:	f002 fcc5 	bl	8002b50 <osThreadCreate>
 80001c6:	4603      	mov	r3, r0
 80001c8:	4a0c      	ldr	r2, [pc, #48]	; (80001fc <main+0x7c>)
 80001ca:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_Clignote */
  osThreadDef(Task_Clignote, Clignote_App, osPriorityNormal, 0, 128);
 80001cc:	4b0c      	ldr	r3, [pc, #48]	; (8000200 <main+0x80>)
 80001ce:	463c      	mov	r4, r7
 80001d0:	461d      	mov	r5, r3
 80001d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_ClignoteHandle = osThreadCreate(osThread(Task_Clignote), NULL);
 80001de:	463b      	mov	r3, r7
 80001e0:	2100      	movs	r1, #0
 80001e2:	4618      	mov	r0, r3
 80001e4:	f002 fcb4 	bl	8002b50 <osThreadCreate>
 80001e8:	4603      	mov	r3, r0
 80001ea:	4a06      	ldr	r2, [pc, #24]	; (8000204 <main+0x84>)
 80001ec:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80001ee:	f002 fca8 	bl	8002b42 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001f2:	e7fe      	b.n	80001f2 <main+0x72>
 80001f4:	20000000 	.word	0x20000000
 80001f8:	0800412c 	.word	0x0800412c
 80001fc:	200003f4 	.word	0x200003f4
 8000200:	08004148 	.word	0x08004148
 8000204:	200003f8 	.word	0x200003f8

08000208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b090      	sub	sp, #64	; 0x40
 800020c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020e:	f107 0318 	add.w	r3, r7, #24
 8000212:	2228      	movs	r2, #40	; 0x28
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f003 fea8 	bl	8003f6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800021c:	1d3b      	adds	r3, r7, #4
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
 8000222:	605a      	str	r2, [r3, #4]
 8000224:	609a      	str	r2, [r3, #8]
 8000226:	60da      	str	r2, [r3, #12]
 8000228:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800022a:	2302      	movs	r3, #2
 800022c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800022e:	2301      	movs	r3, #1
 8000230:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000232:	2310      	movs	r3, #16
 8000234:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000236:	2302      	movs	r3, #2
 8000238:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800023a:	2300      	movs	r3, #0
 800023c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800023e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000242:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000244:	f107 0318 	add.w	r3, r7, #24
 8000248:	4618      	mov	r0, r3
 800024a:	f000 ff87 	bl	800115c <HAL_RCC_OscConfig>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d001      	beq.n	8000258 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000254:	f000 f962 	bl	800051c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000258:	230f      	movs	r3, #15
 800025a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800025c:	2302      	movs	r3, #2
 800025e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000260:	2300      	movs	r3, #0
 8000262:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000264:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000268:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800026a:	2300      	movs	r3, #0
 800026c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	2102      	movs	r1, #2
 8000272:	4618      	mov	r0, r3
 8000274:	f001 f9f4 	bl	8001660 <HAL_RCC_ClockConfig>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800027e:	f000 f94d 	bl	800051c <Error_Handler>
  }
}
 8000282:	bf00      	nop
 8000284:	3740      	adds	r7, #64	; 0x40
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
	...

0800028c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000290:	4b17      	ldr	r3, [pc, #92]	; (80002f0 <MX_SPI1_Init+0x64>)
 8000292:	4a18      	ldr	r2, [pc, #96]	; (80002f4 <MX_SPI1_Init+0x68>)
 8000294:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000296:	4b16      	ldr	r3, [pc, #88]	; (80002f0 <MX_SPI1_Init+0x64>)
 8000298:	f44f 7282 	mov.w	r2, #260	; 0x104
 800029c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800029e:	4b14      	ldr	r3, [pc, #80]	; (80002f0 <MX_SPI1_Init+0x64>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80002a4:	4b12      	ldr	r3, [pc, #72]	; (80002f0 <MX_SPI1_Init+0x64>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002aa:	4b11      	ldr	r3, [pc, #68]	; (80002f0 <MX_SPI1_Init+0x64>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002b0:	4b0f      	ldr	r3, [pc, #60]	; (80002f0 <MX_SPI1_Init+0x64>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002b6:	4b0e      	ldr	r3, [pc, #56]	; (80002f0 <MX_SPI1_Init+0x64>)
 80002b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80002be:	4b0c      	ldr	r3, [pc, #48]	; (80002f0 <MX_SPI1_Init+0x64>)
 80002c0:	2228      	movs	r2, #40	; 0x28
 80002c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002c4:	4b0a      	ldr	r3, [pc, #40]	; (80002f0 <MX_SPI1_Init+0x64>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002ca:	4b09      	ldr	r3, [pc, #36]	; (80002f0 <MX_SPI1_Init+0x64>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002d0:	4b07      	ldr	r3, [pc, #28]	; (80002f0 <MX_SPI1_Init+0x64>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80002d6:	4b06      	ldr	r3, [pc, #24]	; (80002f0 <MX_SPI1_Init+0x64>)
 80002d8:	220a      	movs	r2, #10
 80002da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <MX_SPI1_Init+0x64>)
 80002de:	f001 fb87 	bl	80019f0 <HAL_SPI_Init>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d001      	beq.n	80002ec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80002e8:	f000 f918 	bl	800051c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80002ec:	bf00      	nop
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000358 	.word	0x20000358
 80002f4:	40013000 	.word	0x40013000

080002f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002fc:	4b11      	ldr	r3, [pc, #68]	; (8000344 <MX_USART2_UART_Init+0x4c>)
 80002fe:	4a12      	ldr	r2, [pc, #72]	; (8000348 <MX_USART2_UART_Init+0x50>)
 8000300:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000302:	4b10      	ldr	r3, [pc, #64]	; (8000344 <MX_USART2_UART_Init+0x4c>)
 8000304:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000308:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800030a:	4b0e      	ldr	r3, [pc, #56]	; (8000344 <MX_USART2_UART_Init+0x4c>)
 800030c:	2200      	movs	r2, #0
 800030e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000310:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <MX_USART2_UART_Init+0x4c>)
 8000312:	2200      	movs	r2, #0
 8000314:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000316:	4b0b      	ldr	r3, [pc, #44]	; (8000344 <MX_USART2_UART_Init+0x4c>)
 8000318:	2200      	movs	r2, #0
 800031a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800031c:	4b09      	ldr	r3, [pc, #36]	; (8000344 <MX_USART2_UART_Init+0x4c>)
 800031e:	220c      	movs	r2, #12
 8000320:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000322:	4b08      	ldr	r3, [pc, #32]	; (8000344 <MX_USART2_UART_Init+0x4c>)
 8000324:	2200      	movs	r2, #0
 8000326:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000328:	4b06      	ldr	r3, [pc, #24]	; (8000344 <MX_USART2_UART_Init+0x4c>)
 800032a:	2200      	movs	r2, #0
 800032c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800032e:	4805      	ldr	r0, [pc, #20]	; (8000344 <MX_USART2_UART_Init+0x4c>)
 8000330:	f002 fb14 	bl	800295c <HAL_UART_Init>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800033a:	f000 f8ef 	bl	800051c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800033e:	bf00      	nop
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	200003b0 	.word	0x200003b0
 8000348:	40004400 	.word	0x40004400

0800034c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b088      	sub	sp, #32
 8000350:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000352:	f107 0310 	add.w	r3, r7, #16
 8000356:	2200      	movs	r2, #0
 8000358:	601a      	str	r2, [r3, #0]
 800035a:	605a      	str	r2, [r3, #4]
 800035c:	609a      	str	r2, [r3, #8]
 800035e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000360:	4b49      	ldr	r3, [pc, #292]	; (8000488 <MX_GPIO_Init+0x13c>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	4a48      	ldr	r2, [pc, #288]	; (8000488 <MX_GPIO_Init+0x13c>)
 8000366:	f043 0310 	orr.w	r3, r3, #16
 800036a:	6193      	str	r3, [r2, #24]
 800036c:	4b46      	ldr	r3, [pc, #280]	; (8000488 <MX_GPIO_Init+0x13c>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	f003 0310 	and.w	r3, r3, #16
 8000374:	60fb      	str	r3, [r7, #12]
 8000376:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000378:	4b43      	ldr	r3, [pc, #268]	; (8000488 <MX_GPIO_Init+0x13c>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	4a42      	ldr	r2, [pc, #264]	; (8000488 <MX_GPIO_Init+0x13c>)
 800037e:	f043 0320 	orr.w	r3, r3, #32
 8000382:	6193      	str	r3, [r2, #24]
 8000384:	4b40      	ldr	r3, [pc, #256]	; (8000488 <MX_GPIO_Init+0x13c>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	f003 0320 	and.w	r3, r3, #32
 800038c:	60bb      	str	r3, [r7, #8]
 800038e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000390:	4b3d      	ldr	r3, [pc, #244]	; (8000488 <MX_GPIO_Init+0x13c>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	4a3c      	ldr	r2, [pc, #240]	; (8000488 <MX_GPIO_Init+0x13c>)
 8000396:	f043 0304 	orr.w	r3, r3, #4
 800039a:	6193      	str	r3, [r2, #24]
 800039c:	4b3a      	ldr	r3, [pc, #232]	; (8000488 <MX_GPIO_Init+0x13c>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	f003 0304 	and.w	r3, r3, #4
 80003a4:	607b      	str	r3, [r7, #4]
 80003a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003a8:	4b37      	ldr	r3, [pc, #220]	; (8000488 <MX_GPIO_Init+0x13c>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	4a36      	ldr	r2, [pc, #216]	; (8000488 <MX_GPIO_Init+0x13c>)
 80003ae:	f043 0308 	orr.w	r3, r3, #8
 80003b2:	6193      	str	r3, [r2, #24]
 80003b4:	4b34      	ldr	r3, [pc, #208]	; (8000488 <MX_GPIO_Init+0x13c>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	f003 0308 	and.w	r3, r3, #8
 80003bc:	603b      	str	r3, [r7, #0]
 80003be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CE_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 80003c0:	2200      	movs	r2, #0
 80003c2:	f44f 6104 	mov.w	r1, #2112	; 0x840
 80003c6:	4831      	ldr	r0, [pc, #196]	; (800048c <MX_GPIO_Init+0x140>)
 80003c8:	f000 fe75 	bl	80010b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	2180      	movs	r1, #128	; 0x80
 80003d0:	482f      	ldr	r0, [pc, #188]	; (8000490 <MX_GPIO_Init+0x144>)
 80003d2:	f000 fe70 	bl	80010b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80003d6:	2200      	movs	r2, #0
 80003d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003dc:	482d      	ldr	r0, [pc, #180]	; (8000494 <MX_GPIO_Init+0x148>)
 80003de:	f000 fe6a 	bl	80010b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003e8:	4b2b      	ldr	r3, [pc, #172]	; (8000498 <MX_GPIO_Init+0x14c>)
 80003ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ec:	2300      	movs	r3, #0
 80003ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003f0:	f107 0310 	add.w	r3, r7, #16
 80003f4:	4619      	mov	r1, r3
 80003f6:	4826      	ldr	r0, [pc, #152]	; (8000490 <MX_GPIO_Init+0x144>)
 80003f8:	f000 fcc2 	bl	8000d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_CE_Pin PB6 */
  GPIO_InitStruct.Pin = SPI2_CE_Pin|GPIO_PIN_6;
 80003fc:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8000400:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000402:	2301      	movs	r3, #1
 8000404:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000406:	2300      	movs	r3, #0
 8000408:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800040a:	2302      	movs	r3, #2
 800040c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800040e:	f107 0310 	add.w	r3, r7, #16
 8000412:	4619      	mov	r1, r3
 8000414:	481d      	ldr	r0, [pc, #116]	; (800048c <MX_GPIO_Init+0x140>)
 8000416:	f000 fcb3 	bl	8000d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800041a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800041e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000420:	2302      	movs	r3, #2
 8000422:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000424:	2303      	movs	r3, #3
 8000426:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000428:	f107 0310 	add.w	r3, r7, #16
 800042c:	4619      	mov	r1, r3
 800042e:	4817      	ldr	r0, [pc, #92]	; (800048c <MX_GPIO_Init+0x140>)
 8000430:	f000 fca6 	bl	8000d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000434:	2380      	movs	r3, #128	; 0x80
 8000436:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000438:	2301      	movs	r3, #1
 800043a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043c:	2300      	movs	r3, #0
 800043e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000440:	2302      	movs	r3, #2
 8000442:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000444:	f107 0310 	add.w	r3, r7, #16
 8000448:	4619      	mov	r1, r3
 800044a:	4811      	ldr	r0, [pc, #68]	; (8000490 <MX_GPIO_Init+0x144>)
 800044c:	f000 fc98 	bl	8000d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000450:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000454:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000456:	2301      	movs	r3, #1
 8000458:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045a:	2300      	movs	r3, #0
 800045c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800045e:	2302      	movs	r3, #2
 8000460:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000462:	f107 0310 	add.w	r3, r7, #16
 8000466:	4619      	mov	r1, r3
 8000468:	480a      	ldr	r0, [pc, #40]	; (8000494 <MX_GPIO_Init+0x148>)
 800046a:	f000 fc89 	bl	8000d80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800046e:	2200      	movs	r2, #0
 8000470:	2105      	movs	r1, #5
 8000472:	2028      	movs	r0, #40	; 0x28
 8000474:	f000 fc59 	bl	8000d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000478:	2028      	movs	r0, #40	; 0x28
 800047a:	f000 fc72 	bl	8000d62 <HAL_NVIC_EnableIRQ>

}
 800047e:	bf00      	nop
 8000480:	3720      	adds	r7, #32
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	40021000 	.word	0x40021000
 800048c:	40010c00 	.word	0x40010c00
 8000490:	40011000 	.word	0x40011000
 8000494:	40010800 	.word	0x40010800
 8000498:	10110000 	.word	0x10110000

0800049c <Idle_App>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Idle_App */
void Idle_App(void const * argument)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	//HAL_GPIO_WritePin(LED_GREEN_GPIO, LED_GREEN_PIN, etatled_verte);
    osDelay(1);
 80004a4:	2001      	movs	r0, #1
 80004a6:	f002 fb9f 	bl	8002be8 <osDelay>
 80004aa:	e7fb      	b.n	80004a4 <Idle_App+0x8>

080004ac <Clignote_App>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Clignote_App */
void Clignote_App(void const * argument)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Clignote_App */
  /* Infinite loop */
  for(;;)
  {
    if(HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO, BLUE_BUTTON_PIN)==0){
 80004b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004b8:	480c      	ldr	r0, [pc, #48]	; (80004ec <Clignote_App+0x40>)
 80004ba:	f000 fde5 	bl	8001088 <HAL_GPIO_ReadPin>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d10f      	bne.n	80004e4 <Clignote_App+0x38>
    	if(verifReg()==10){
 80004c4:	f000 f986 	bl	80007d4 <verifReg>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b0a      	cmp	r3, #10
 80004cc:	d10a      	bne.n	80004e4 <Clignote_App+0x38>
    	if(nrf24_Transmit(TxData)==1){
 80004ce:	4808      	ldr	r0, [pc, #32]	; (80004f0 <Clignote_App+0x44>)
 80004d0:	f000 f93e 	bl	8000750 <nrf24_Transmit>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b01      	cmp	r3, #1
 80004d8:	d104      	bne.n	80004e4 <Clignote_App+0x38>
    		//etatled_verte=ALLUMER;
    		HAL_GPIO_TogglePin(LED_GREEN_GPIO, LED_GREEN_PIN);
 80004da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004de:	4805      	ldr	r0, [pc, #20]	; (80004f4 <Clignote_App+0x48>)
 80004e0:	f000 fe01 	bl	80010e6 <HAL_GPIO_TogglePin>
    	}
    	}
    	//etatled_verte=ALLUMER;
    	//HAL_GPIO_TogglePin(LED_GREEN_GPIO, LED_GREEN_PIN);
    }
    vTaskDelay(200);
 80004e4:	20c8      	movs	r0, #200	; 0xc8
 80004e6:	f002 fde3 	bl	80030b0 <vTaskDelay>
    if(HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO, BLUE_BUTTON_PIN)==0){
 80004ea:	e7e3      	b.n	80004b4 <Clignote_App+0x8>
 80004ec:	40011000 	.word	0x40011000
 80004f0:	20000008 	.word	0x20000008
 80004f4:	40010800 	.word	0x40010800

080004f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a04      	ldr	r2, [pc, #16]	; (8000518 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000506:	4293      	cmp	r3, r2
 8000508:	d101      	bne.n	800050e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800050a:	f000 fb19 	bl	8000b40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800050e:	bf00      	nop
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40000800 	.word	0x40000800

0800051c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000520:	b672      	cpsid	i
}
 8000522:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000524:	e7fe      	b.n	8000524 <Error_Handler+0x8>
	...

08000528 <selectCS>:
#define SPI_CE_PIN			GPIO_PIN_7
#define SPI_GPIO			GPIOA
#define SPI_CS_GPIO			GPIOB
#define SPI_CS_PIN			GPIO_PIN_6

void selectCS(void){
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI_CS_GPIO, SPI_CS_PIN, GPIO_PIN_RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	2140      	movs	r1, #64	; 0x40
 8000530:	4802      	ldr	r0, [pc, #8]	; (800053c <selectCS+0x14>)
 8000532:	f000 fdc0 	bl	80010b6 <HAL_GPIO_WritePin>
}
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40010c00 	.word	0x40010c00

08000540 <unselectCS>:

void unselectCS(void){
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI_CS_GPIO, SPI_CS_PIN, GPIO_PIN_SET);
 8000544:	2201      	movs	r2, #1
 8000546:	2140      	movs	r1, #64	; 0x40
 8000548:	4802      	ldr	r0, [pc, #8]	; (8000554 <unselectCS+0x14>)
 800054a:	f000 fdb4 	bl	80010b6 <HAL_GPIO_WritePin>
}
 800054e:	bf00      	nop
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40010c00 	.word	0x40010c00

08000558 <enableCE>:

void enableCE(void){
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI_CE_GPIO, SPI_CE_PIN, GPIO_PIN_SET);
 800055c:	2201      	movs	r2, #1
 800055e:	2180      	movs	r1, #128	; 0x80
 8000560:	4802      	ldr	r0, [pc, #8]	; (800056c <enableCE+0x14>)
 8000562:	f000 fda8 	bl	80010b6 <HAL_GPIO_WritePin>
}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	40011000 	.word	0x40011000

08000570 <disableCE>:

void disableCE(void){
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI_CE_GPIO, SPI_CE_PIN, GPIO_PIN_RESET);
 8000574:	2200      	movs	r2, #0
 8000576:	2180      	movs	r1, #128	; 0x80
 8000578:	4802      	ldr	r0, [pc, #8]	; (8000584 <disableCE+0x14>)
 800057a:	f000 fd9c 	bl	80010b6 <HAL_GPIO_WritePin>
}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40011000 	.word	0x40011000

08000588 <nrf24_WriteReg>:

void nrf24_WriteReg(uint8_t Reg, uint8_t Data){
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	460a      	mov	r2, r1
 8000592:	71fb      	strb	r3, [r7, #7]
 8000594:	4613      	mov	r3, r2
 8000596:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0]=Reg|1<<5;
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	f043 0320 	orr.w	r3, r3, #32
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	733b      	strb	r3, [r7, #12]
	buf[1]=Data;
 80005a2:	79bb      	ldrb	r3, [r7, #6]
 80005a4:	737b      	strb	r3, [r7, #13]

	selectCS();
 80005a6:	f7ff ffbf 	bl	8000528 <selectCS>
	HAL_SPI_Transmit(&hspi1, buf, 2, 100);
 80005aa:	f107 010c 	add.w	r1, r7, #12
 80005ae:	2364      	movs	r3, #100	; 0x64
 80005b0:	2202      	movs	r2, #2
 80005b2:	4804      	ldr	r0, [pc, #16]	; (80005c4 <nrf24_WriteReg+0x3c>)
 80005b4:	f001 faa0 	bl	8001af8 <HAL_SPI_Transmit>
	unselectCS();
 80005b8:	f7ff ffc2 	bl	8000540 <unselectCS>
}
 80005bc:	bf00      	nop
 80005be:	3710      	adds	r7, #16
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20000358 	.word	0x20000358

080005c8 <nrf24_WriteRegMulti>:

void nrf24_WriteRegMulti(uint8_t Reg, uint8_t *Data, uint8_t size){
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	6039      	str	r1, [r7, #0]
 80005d2:	71fb      	strb	r3, [r7, #7]
 80005d4:	4613      	mov	r3, r2
 80005d6:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0]=Reg|1<<5;
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	f043 0320 	orr.w	r3, r3, #32
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	733b      	strb	r3, [r7, #12]
	//buf[1]=Data;

	selectCS();
 80005e2:	f7ff ffa1 	bl	8000528 <selectCS>
	HAL_SPI_Transmit(&hspi1, &buf[0], 1, 100);
 80005e6:	f107 010c 	add.w	r1, r7, #12
 80005ea:	2364      	movs	r3, #100	; 0x64
 80005ec:	2201      	movs	r2, #1
 80005ee:	4808      	ldr	r0, [pc, #32]	; (8000610 <nrf24_WriteRegMulti+0x48>)
 80005f0:	f001 fa82 	bl	8001af8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, Data, size, 100);
 80005f4:	79bb      	ldrb	r3, [r7, #6]
 80005f6:	b29a      	uxth	r2, r3
 80005f8:	2364      	movs	r3, #100	; 0x64
 80005fa:	6839      	ldr	r1, [r7, #0]
 80005fc:	4804      	ldr	r0, [pc, #16]	; (8000610 <nrf24_WriteRegMulti+0x48>)
 80005fe:	f001 fa7b 	bl	8001af8 <HAL_SPI_Transmit>

	unselectCS();
 8000602:	f7ff ff9d 	bl	8000540 <unselectCS>
}
 8000606:	bf00      	nop
 8000608:	3710      	adds	r7, #16
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20000358 	.word	0x20000358

08000614 <nrf24_ReadReg>:

uint8_t nrf24_ReadReg(uint8_t Reg){
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 800061e:	2300      	movs	r3, #0
 8000620:	73fb      	strb	r3, [r7, #15]
	selectCS();
 8000622:	f7ff ff81 	bl	8000528 <selectCS>
	HAL_SPI_Transmit(&hspi1, &Reg, 1, 100);
 8000626:	1df9      	adds	r1, r7, #7
 8000628:	2364      	movs	r3, #100	; 0x64
 800062a:	2201      	movs	r2, #1
 800062c:	4808      	ldr	r0, [pc, #32]	; (8000650 <nrf24_ReadReg+0x3c>)
 800062e:	f001 fa63 	bl	8001af8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &data, 1, 100);
 8000632:	f107 010f 	add.w	r1, r7, #15
 8000636:	2364      	movs	r3, #100	; 0x64
 8000638:	2201      	movs	r2, #1
 800063a:	4805      	ldr	r0, [pc, #20]	; (8000650 <nrf24_ReadReg+0x3c>)
 800063c:	f001 fb98 	bl	8001d70 <HAL_SPI_Receive>
	unselectCS();
 8000640:	f7ff ff7e 	bl	8000540 <unselectCS>
	return data;
 8000644:	7bfb      	ldrb	r3, [r7, #15]
}
 8000646:	4618      	mov	r0, r3
 8000648:	3710      	adds	r7, #16
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000358 	.word	0x20000358

08000654 <nrf24_ReadRegMulti>:

void nrf24_ReadRegMulti(uint8_t Reg, uint8_t *data, uint16_t size){
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	6039      	str	r1, [r7, #0]
 800065e:	71fb      	strb	r3, [r7, #7]
 8000660:	4613      	mov	r3, r2
 8000662:	80bb      	strh	r3, [r7, #4]
	//uint8_t data=0;
	selectCS();
 8000664:	f7ff ff60 	bl	8000528 <selectCS>
	HAL_SPI_Transmit(&hspi1, &Reg, 1, 100);
 8000668:	1df9      	adds	r1, r7, #7
 800066a:	2364      	movs	r3, #100	; 0x64
 800066c:	2201      	movs	r2, #1
 800066e:	4807      	ldr	r0, [pc, #28]	; (800068c <nrf24_ReadRegMulti+0x38>)
 8000670:	f001 fa42 	bl	8001af8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, data, size, 100);
 8000674:	88ba      	ldrh	r2, [r7, #4]
 8000676:	2364      	movs	r3, #100	; 0x64
 8000678:	6839      	ldr	r1, [r7, #0]
 800067a:	4804      	ldr	r0, [pc, #16]	; (800068c <nrf24_ReadRegMulti+0x38>)
 800067c:	f001 fb78 	bl	8001d70 <HAL_SPI_Receive>
	unselectCS();
 8000680:	f7ff ff5e 	bl	8000540 <unselectCS>
}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20000358 	.word	0x20000358

08000690 <nrfsendcmd>:

void nrfsendcmd(uint8_t cmd){
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
	selectCS();
 800069a:	f7ff ff45 	bl	8000528 <selectCS>
	HAL_SPI_Transmit(&hspi1, &cmd, 1, 100);
 800069e:	1df9      	adds	r1, r7, #7
 80006a0:	2364      	movs	r3, #100	; 0x64
 80006a2:	2201      	movs	r2, #1
 80006a4:	4804      	ldr	r0, [pc, #16]	; (80006b8 <nrfsendcmd+0x28>)
 80006a6:	f001 fa27 	bl	8001af8 <HAL_SPI_Transmit>
	unselectCS();
 80006aa:	f7ff ff49 	bl	8000540 <unselectCS>
}
 80006ae:	bf00      	nop
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000358 	.word	0x20000358

080006bc <nrf24_Init>:

void nrf24_Init(void){
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	disableCE();
 80006c0:	f7ff ff56 	bl	8000570 <disableCE>
	nrf24_WriteReg(CONFIG, 0);
 80006c4:	2100      	movs	r1, #0
 80006c6:	2000      	movs	r0, #0
 80006c8:	f7ff ff5e 	bl	8000588 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0);
 80006cc:	2100      	movs	r1, #0
 80006ce:	2001      	movs	r0, #1
 80006d0:	f7ff ff5a 	bl	8000588 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0);
 80006d4:	2100      	movs	r1, #0
 80006d6:	2002      	movs	r0, #2
 80006d8:	f7ff ff56 	bl	8000588 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 80006dc:	2103      	movs	r1, #3
 80006de:	2003      	movs	r0, #3
 80006e0:	f7ff ff52 	bl	8000588 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0);
 80006e4:	2100      	movs	r1, #0
 80006e6:	2004      	movs	r0, #4
 80006e8:	f7ff ff4e 	bl	8000588 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0);
 80006ec:	2100      	movs	r1, #0
 80006ee:	2005      	movs	r0, #5
 80006f0:	f7ff ff4a 	bl	8000588 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 80006f4:	210e      	movs	r1, #14
 80006f6:	2006      	movs	r0, #6
 80006f8:	f7ff ff46 	bl	8000588 <nrf24_WriteReg>
	enableCE();
 80006fc:	f7ff ff2c 	bl	8000558 <enableCE>
}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}

08000704 <nrf24_TxMode>:

void nrf24_TxMode(uint8_t *Address, uint8_t channel){
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	460b      	mov	r3, r1
 800070e:	70fb      	strb	r3, [r7, #3]
	disableCE();
 8000710:	f7ff ff2e 	bl	8000570 <disableCE>
	nrf24_WriteReg(RF_CH, channel);
 8000714:	78fb      	ldrb	r3, [r7, #3]
 8000716:	4619      	mov	r1, r3
 8000718:	2005      	movs	r0, #5
 800071a:	f7ff ff35 	bl	8000588 <nrf24_WriteReg>
	nrf24_WriteRegMulti(TX_ADDR, Address, 5);
 800071e:	2205      	movs	r2, #5
 8000720:	6879      	ldr	r1, [r7, #4]
 8000722:	2010      	movs	r0, #16
 8000724:	f7ff ff50 	bl	80005c8 <nrf24_WriteRegMulti>

	//power up the device
	uint8_t config = nrf24_ReadReg(CONFIG);
 8000728:	2000      	movs	r0, #0
 800072a:	f7ff ff73 	bl	8000614 <nrf24_ReadReg>
 800072e:	4603      	mov	r3, r0
 8000730:	73fb      	strb	r3, [r7, #15]
	config=config|(1<<1);
 8000732:	7bfb      	ldrb	r3, [r7, #15]
 8000734:	f043 0302 	orr.w	r3, r3, #2
 8000738:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg(CONFIG, config);
 800073a:	7bfb      	ldrb	r3, [r7, #15]
 800073c:	4619      	mov	r1, r3
 800073e:	2000      	movs	r0, #0
 8000740:	f7ff ff22 	bl	8000588 <nrf24_WriteReg>
	enableCE();
 8000744:	f7ff ff08 	bl	8000558 <enableCE>
}
 8000748:	bf00      	nop
 800074a:	3710      	adds	r7, #16
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <nrf24_Transmit>:

uint8_t nrf24_Transmit(uint8_t *data){
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	73bb      	strb	r3, [r7, #14]
	selectCS();
 800075c:	f7ff fee4 	bl	8000528 <selectCS>

	cmdtosend=W_TX_PAYLOAD;
 8000760:	23a0      	movs	r3, #160	; 0xa0
 8000762:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&hspi1, &cmdtosend, 1, 100);
 8000764:	f107 010e 	add.w	r1, r7, #14
 8000768:	2364      	movs	r3, #100	; 0x64
 800076a:	2201      	movs	r2, #1
 800076c:	4818      	ldr	r0, [pc, #96]	; (80007d0 <nrf24_Transmit+0x80>)
 800076e:	f001 f9c3 	bl	8001af8 <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, data, 32, 1000);
 8000772:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000776:	2220      	movs	r2, #32
 8000778:	6879      	ldr	r1, [r7, #4]
 800077a:	4815      	ldr	r0, [pc, #84]	; (80007d0 <nrf24_Transmit+0x80>)
 800077c:	f001 f9bc 	bl	8001af8 <HAL_SPI_Transmit>

	unselectCS();
 8000780:	f7ff fede 	bl	8000540 <unselectCS>

	HAL_Delay(1);
 8000784:	2001      	movs	r0, #1
 8000786:	f000 f9f7 	bl	8000b78 <HAL_Delay>
	uint8_t txadd[5];
	nrf24_ReadRegMulti(TX_ADDR, txadd, 5);
 800078a:	f107 0308 	add.w	r3, r7, #8
 800078e:	2205      	movs	r2, #5
 8000790:	4619      	mov	r1, r3
 8000792:	2010      	movs	r0, #16
 8000794:	f7ff ff5e 	bl	8000654 <nrf24_ReadRegMulti>

	uint8_t fifostatus = nrf24_ReadReg(FIFO_STATUS);
 8000798:	2017      	movs	r0, #23
 800079a:	f7ff ff3b 	bl	8000614 <nrf24_ReadReg>
 800079e:	4603      	mov	r3, r0
 80007a0:	73fb      	strb	r3, [r7, #15]

	if((fifostatus&(1<<4)) && !(fifostatus&(1<<3))){
 80007a2:	7bfb      	ldrb	r3, [r7, #15]
 80007a4:	f003 0310 	and.w	r3, r3, #16
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d00c      	beq.n	80007c6 <nrf24_Transmit+0x76>
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	f003 0308 	and.w	r3, r3, #8
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d107      	bne.n	80007c6 <nrf24_Transmit+0x76>
		cmdtosend = FLUSH_TX;
 80007b6:	23e1      	movs	r3, #225	; 0xe1
 80007b8:	73bb      	strb	r3, [r7, #14]
		nrfsendcmd(cmdtosend);
 80007ba:	7bbb      	ldrb	r3, [r7, #14]
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff ff67 	bl	8000690 <nrfsendcmd>

		return 1;
 80007c2:	2301      	movs	r3, #1
 80007c4:	e000      	b.n	80007c8 <nrf24_Transmit+0x78>
	}
	else
		return 0;
 80007c6:	2300      	movs	r3, #0


}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3710      	adds	r7, #16
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20000358 	.word	0x20000358

080007d4 <verifReg>:

	cmdtosend=FLUSH_RX;
	nrfsendcmd(cmdtosend);
}

uint8_t verifReg(){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
	uint8_t check=nrf24_ReadReg(RF_CH);
 80007da:	2005      	movs	r0, #5
 80007dc:	f7ff ff1a 	bl	8000614 <nrf24_ReadReg>
 80007e0:	4603      	mov	r3, r0
 80007e2:	71fb      	strb	r3, [r7, #7]
	return check;
 80007e4:	79fb      	ldrb	r3, [r7, #7]
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
	...

080007f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007f6:	4b18      	ldr	r3, [pc, #96]	; (8000858 <HAL_MspInit+0x68>)
 80007f8:	699b      	ldr	r3, [r3, #24]
 80007fa:	4a17      	ldr	r2, [pc, #92]	; (8000858 <HAL_MspInit+0x68>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6193      	str	r3, [r2, #24]
 8000802:	4b15      	ldr	r3, [pc, #84]	; (8000858 <HAL_MspInit+0x68>)
 8000804:	699b      	ldr	r3, [r3, #24]
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080e:	4b12      	ldr	r3, [pc, #72]	; (8000858 <HAL_MspInit+0x68>)
 8000810:	69db      	ldr	r3, [r3, #28]
 8000812:	4a11      	ldr	r2, [pc, #68]	; (8000858 <HAL_MspInit+0x68>)
 8000814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000818:	61d3      	str	r3, [r2, #28]
 800081a:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <HAL_MspInit+0x68>)
 800081c:	69db      	ldr	r3, [r3, #28]
 800081e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	210f      	movs	r1, #15
 800082a:	f06f 0001 	mvn.w	r0, #1
 800082e:	f000 fa7c 	bl	8000d2a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000832:	4b0a      	ldr	r3, [pc, #40]	; (800085c <HAL_MspInit+0x6c>)
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	4a04      	ldr	r2, [pc, #16]	; (800085c <HAL_MspInit+0x6c>)
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084e:	bf00      	nop
 8000850:	3710      	adds	r7, #16
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40021000 	.word	0x40021000
 800085c:	40010000 	.word	0x40010000

08000860 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b088      	sub	sp, #32
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000868:	f107 0310 	add.w	r3, r7, #16
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a1b      	ldr	r2, [pc, #108]	; (80008e8 <HAL_SPI_MspInit+0x88>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d12f      	bne.n	80008e0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000880:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <HAL_SPI_MspInit+0x8c>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	4a19      	ldr	r2, [pc, #100]	; (80008ec <HAL_SPI_MspInit+0x8c>)
 8000886:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800088a:	6193      	str	r3, [r2, #24]
 800088c:	4b17      	ldr	r3, [pc, #92]	; (80008ec <HAL_SPI_MspInit+0x8c>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000898:	4b14      	ldr	r3, [pc, #80]	; (80008ec <HAL_SPI_MspInit+0x8c>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	4a13      	ldr	r2, [pc, #76]	; (80008ec <HAL_SPI_MspInit+0x8c>)
 800089e:	f043 0304 	orr.w	r3, r3, #4
 80008a2:	6193      	str	r3, [r2, #24]
 80008a4:	4b11      	ldr	r3, [pc, #68]	; (80008ec <HAL_SPI_MspInit+0x8c>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	f003 0304 	and.w	r3, r3, #4
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80008b0:	23a0      	movs	r3, #160	; 0xa0
 80008b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b4:	2302      	movs	r3, #2
 80008b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008b8:	2303      	movs	r3, #3
 80008ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008bc:	f107 0310 	add.w	r3, r7, #16
 80008c0:	4619      	mov	r1, r3
 80008c2:	480b      	ldr	r0, [pc, #44]	; (80008f0 <HAL_SPI_MspInit+0x90>)
 80008c4:	f000 fa5c 	bl	8000d80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008c8:	2340      	movs	r3, #64	; 0x40
 80008ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d4:	f107 0310 	add.w	r3, r7, #16
 80008d8:	4619      	mov	r1, r3
 80008da:	4805      	ldr	r0, [pc, #20]	; (80008f0 <HAL_SPI_MspInit+0x90>)
 80008dc:	f000 fa50 	bl	8000d80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80008e0:	bf00      	nop
 80008e2:	3720      	adds	r7, #32
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40013000 	.word	0x40013000
 80008ec:	40021000 	.word	0x40021000
 80008f0:	40010800 	.word	0x40010800

080008f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b088      	sub	sp, #32
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fc:	f107 0310 	add.w	r3, r7, #16
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a15      	ldr	r2, [pc, #84]	; (8000964 <HAL_UART_MspInit+0x70>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d123      	bne.n	800095c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000914:	4b14      	ldr	r3, [pc, #80]	; (8000968 <HAL_UART_MspInit+0x74>)
 8000916:	69db      	ldr	r3, [r3, #28]
 8000918:	4a13      	ldr	r2, [pc, #76]	; (8000968 <HAL_UART_MspInit+0x74>)
 800091a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800091e:	61d3      	str	r3, [r2, #28]
 8000920:	4b11      	ldr	r3, [pc, #68]	; (8000968 <HAL_UART_MspInit+0x74>)
 8000922:	69db      	ldr	r3, [r3, #28]
 8000924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092c:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <HAL_UART_MspInit+0x74>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	4a0d      	ldr	r2, [pc, #52]	; (8000968 <HAL_UART_MspInit+0x74>)
 8000932:	f043 0304 	orr.w	r3, r3, #4
 8000936:	6193      	str	r3, [r2, #24]
 8000938:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <HAL_UART_MspInit+0x74>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	f003 0304 	and.w	r3, r3, #4
 8000940:	60bb      	str	r3, [r7, #8]
 8000942:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000944:	230c      	movs	r3, #12
 8000946:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000948:	2302      	movs	r3, #2
 800094a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094c:	2302      	movs	r3, #2
 800094e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000950:	f107 0310 	add.w	r3, r7, #16
 8000954:	4619      	mov	r1, r3
 8000956:	4805      	ldr	r0, [pc, #20]	; (800096c <HAL_UART_MspInit+0x78>)
 8000958:	f000 fa12 	bl	8000d80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800095c:	bf00      	nop
 800095e:	3720      	adds	r7, #32
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40004400 	.word	0x40004400
 8000968:	40021000 	.word	0x40021000
 800096c:	40010800 	.word	0x40010800

08000970 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08e      	sub	sp, #56	; 0x38
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000978:	2300      	movs	r3, #0
 800097a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800097c:	2300      	movs	r3, #0
 800097e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000980:	2300      	movs	r3, #0
 8000982:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000986:	4b34      	ldr	r3, [pc, #208]	; (8000a58 <HAL_InitTick+0xe8>)
 8000988:	69db      	ldr	r3, [r3, #28]
 800098a:	4a33      	ldr	r2, [pc, #204]	; (8000a58 <HAL_InitTick+0xe8>)
 800098c:	f043 0304 	orr.w	r3, r3, #4
 8000990:	61d3      	str	r3, [r2, #28]
 8000992:	4b31      	ldr	r3, [pc, #196]	; (8000a58 <HAL_InitTick+0xe8>)
 8000994:	69db      	ldr	r3, [r3, #28]
 8000996:	f003 0304 	and.w	r3, r3, #4
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800099e:	f107 0210 	add.w	r2, r7, #16
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	4611      	mov	r1, r2
 80009a8:	4618      	mov	r0, r3
 80009aa:	f000 ffd3 	bl	8001954 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009ae:	6a3b      	ldr	r3, [r7, #32]
 80009b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d103      	bne.n	80009c0 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009b8:	f000 ffa4 	bl	8001904 <HAL_RCC_GetPCLK1Freq>
 80009bc:	6378      	str	r0, [r7, #52]	; 0x34
 80009be:	e004      	b.n	80009ca <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009c0:	f000 ffa0 	bl	8001904 <HAL_RCC_GetPCLK1Freq>
 80009c4:	4603      	mov	r3, r0
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009cc:	4a23      	ldr	r2, [pc, #140]	; (8000a5c <HAL_InitTick+0xec>)
 80009ce:	fba2 2303 	umull	r2, r3, r2, r3
 80009d2:	0c9b      	lsrs	r3, r3, #18
 80009d4:	3b01      	subs	r3, #1
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80009d8:	4b21      	ldr	r3, [pc, #132]	; (8000a60 <HAL_InitTick+0xf0>)
 80009da:	4a22      	ldr	r2, [pc, #136]	; (8000a64 <HAL_InitTick+0xf4>)
 80009dc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80009de:	4b20      	ldr	r3, [pc, #128]	; (8000a60 <HAL_InitTick+0xf0>)
 80009e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009e4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80009e6:	4a1e      	ldr	r2, [pc, #120]	; (8000a60 <HAL_InitTick+0xf0>)
 80009e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ea:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80009ec:	4b1c      	ldr	r3, [pc, #112]	; (8000a60 <HAL_InitTick+0xf0>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f2:	4b1b      	ldr	r3, [pc, #108]	; (8000a60 <HAL_InitTick+0xf0>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f8:	4b19      	ldr	r3, [pc, #100]	; (8000a60 <HAL_InitTick+0xf0>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80009fe:	4818      	ldr	r0, [pc, #96]	; (8000a60 <HAL_InitTick+0xf0>)
 8000a00:	f001 fd62 	bl	80024c8 <HAL_TIM_Base_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a0a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d11b      	bne.n	8000a4a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000a12:	4813      	ldr	r0, [pc, #76]	; (8000a60 <HAL_InitTick+0xf0>)
 8000a14:	f001 fdb0 	bl	8002578 <HAL_TIM_Base_Start_IT>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d111      	bne.n	8000a4a <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000a26:	201e      	movs	r0, #30
 8000a28:	f000 f99b 	bl	8000d62 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2b0f      	cmp	r3, #15
 8000a30:	d808      	bhi.n	8000a44 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000a32:	2200      	movs	r2, #0
 8000a34:	6879      	ldr	r1, [r7, #4]
 8000a36:	201e      	movs	r0, #30
 8000a38:	f000 f977 	bl	8000d2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a3c:	4a0a      	ldr	r2, [pc, #40]	; (8000a68 <HAL_InitTick+0xf8>)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6013      	str	r3, [r2, #0]
 8000a42:	e002      	b.n	8000a4a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000a44:	2301      	movs	r3, #1
 8000a46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a4a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3738      	adds	r7, #56	; 0x38
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40021000 	.word	0x40021000
 8000a5c:	431bde83 	.word	0x431bde83
 8000a60:	200003fc 	.word	0x200003fc
 8000a64:	40000800 	.word	0x40000800
 8000a68:	20000018 	.word	0x20000018

08000a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <NMI_Handler+0x4>

08000a72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a76:	e7fe      	b.n	8000a76 <HardFault_Handler+0x4>

08000a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <MemManage_Handler+0x4>

08000a7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a82:	e7fe      	b.n	8000a82 <BusFault_Handler+0x4>

08000a84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <UsageFault_Handler+0x4>

08000a8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bc80      	pop	{r7}
 8000a94:	4770      	bx	lr
	...

08000a98 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a9c:	4802      	ldr	r0, [pc, #8]	; (8000aa8 <TIM4_IRQHandler+0x10>)
 8000a9e:	f001 fdbd 	bl	800261c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	200003fc 	.word	0x200003fc

08000aac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ab0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ab4:	f000 fb30 	bl	8001118 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}

08000abc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr

08000ac8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ac8:	480c      	ldr	r0, [pc, #48]	; (8000afc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000aca:	490d      	ldr	r1, [pc, #52]	; (8000b00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000acc:	4a0d      	ldr	r2, [pc, #52]	; (8000b04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad0:	e002      	b.n	8000ad8 <LoopCopyDataInit>

08000ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ad6:	3304      	adds	r3, #4

08000ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000adc:	d3f9      	bcc.n	8000ad2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ade:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ae0:	4c0a      	ldr	r4, [pc, #40]	; (8000b0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae4:	e001      	b.n	8000aea <LoopFillZerobss>

08000ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae8:	3204      	adds	r2, #4

08000aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aec:	d3fb      	bcc.n	8000ae6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000aee:	f7ff ffe5 	bl	8000abc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000af2:	f003 fa15 	bl	8003f20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000af6:	f7ff fb43 	bl	8000180 <main>
  bx lr
 8000afa:	4770      	bx	lr
  ldr r0, =_sdata
 8000afc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b00:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000b04:	080041fc 	.word	0x080041fc
  ldr r2, =_sbss
 8000b08:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000b0c:	2000119c 	.word	0x2000119c

08000b10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b10:	e7fe      	b.n	8000b10 <ADC1_2_IRQHandler>
	...

08000b14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <HAL_Init+0x28>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a07      	ldr	r2, [pc, #28]	; (8000b3c <HAL_Init+0x28>)
 8000b1e:	f043 0310 	orr.w	r3, r3, #16
 8000b22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b24:	2003      	movs	r0, #3
 8000b26:	f000 f8f5 	bl	8000d14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b2a:	200f      	movs	r0, #15
 8000b2c:	f7ff ff20 	bl	8000970 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b30:	f7ff fe5e 	bl	80007f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40022000 	.word	0x40022000

08000b40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b44:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <HAL_IncTick+0x1c>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <HAL_IncTick+0x20>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4413      	add	r3, r2
 8000b50:	4a03      	ldr	r2, [pc, #12]	; (8000b60 <HAL_IncTick+0x20>)
 8000b52:	6013      	str	r3, [r2, #0]
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr
 8000b5c:	2000001c 	.word	0x2000001c
 8000b60:	20000444 	.word	0x20000444

08000b64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return uwTick;
 8000b68:	4b02      	ldr	r3, [pc, #8]	; (8000b74 <HAL_GetTick+0x10>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr
 8000b74:	20000444 	.word	0x20000444

08000b78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b80:	f7ff fff0 	bl	8000b64 <HAL_GetTick>
 8000b84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b90:	d005      	beq.n	8000b9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b92:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <HAL_Delay+0x44>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	461a      	mov	r2, r3
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b9e:	bf00      	nop
 8000ba0:	f7ff ffe0 	bl	8000b64 <HAL_GetTick>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	68fa      	ldr	r2, [r7, #12]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d8f7      	bhi.n	8000ba0 <HAL_Delay+0x28>
  {
  }
}
 8000bb0:	bf00      	nop
 8000bb2:	bf00      	nop
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	2000001c 	.word	0x2000001c

08000bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	f003 0307 	and.w	r3, r3, #7
 8000bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bd6:	68ba      	ldr	r2, [r7, #8]
 8000bd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bdc:	4013      	ands	r3, r2
 8000bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bf2:	4a04      	ldr	r2, [pc, #16]	; (8000c04 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	60d3      	str	r3, [r2, #12]
}
 8000bf8:	bf00      	nop
 8000bfa:	3714      	adds	r7, #20
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c0c:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <__NVIC_GetPriorityGrouping+0x18>)
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	0a1b      	lsrs	r3, r3, #8
 8000c12:	f003 0307 	and.w	r3, r3, #7
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	db0b      	blt.n	8000c4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	f003 021f 	and.w	r2, r3, #31
 8000c3c:	4906      	ldr	r1, [pc, #24]	; (8000c58 <__NVIC_EnableIRQ+0x34>)
 8000c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c42:	095b      	lsrs	r3, r3, #5
 8000c44:	2001      	movs	r0, #1
 8000c46:	fa00 f202 	lsl.w	r2, r0, r2
 8000c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c4e:	bf00      	nop
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bc80      	pop	{r7}
 8000c56:	4770      	bx	lr
 8000c58:	e000e100 	.word	0xe000e100

08000c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	6039      	str	r1, [r7, #0]
 8000c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	db0a      	blt.n	8000c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	490c      	ldr	r1, [pc, #48]	; (8000ca8 <__NVIC_SetPriority+0x4c>)
 8000c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7a:	0112      	lsls	r2, r2, #4
 8000c7c:	b2d2      	uxtb	r2, r2
 8000c7e:	440b      	add	r3, r1
 8000c80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c84:	e00a      	b.n	8000c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	4908      	ldr	r1, [pc, #32]	; (8000cac <__NVIC_SetPriority+0x50>)
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	f003 030f 	and.w	r3, r3, #15
 8000c92:	3b04      	subs	r3, #4
 8000c94:	0112      	lsls	r2, r2, #4
 8000c96:	b2d2      	uxtb	r2, r2
 8000c98:	440b      	add	r3, r1
 8000c9a:	761a      	strb	r2, [r3, #24]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bc80      	pop	{r7}
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	e000e100 	.word	0xe000e100
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b089      	sub	sp, #36	; 0x24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	f1c3 0307 	rsb	r3, r3, #7
 8000cca:	2b04      	cmp	r3, #4
 8000ccc:	bf28      	it	cs
 8000cce:	2304      	movcs	r3, #4
 8000cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	3304      	adds	r3, #4
 8000cd6:	2b06      	cmp	r3, #6
 8000cd8:	d902      	bls.n	8000ce0 <NVIC_EncodePriority+0x30>
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	3b03      	subs	r3, #3
 8000cde:	e000      	b.n	8000ce2 <NVIC_EncodePriority+0x32>
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	43da      	mvns	r2, r3
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	401a      	ands	r2, r3
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000d02:	43d9      	mvns	r1, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d08:	4313      	orrs	r3, r2
         );
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3724      	adds	r7, #36	; 0x24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr

08000d14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f7ff ff4f 	bl	8000bc0 <__NVIC_SetPriorityGrouping>
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b086      	sub	sp, #24
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	4603      	mov	r3, r0
 8000d32:	60b9      	str	r1, [r7, #8]
 8000d34:	607a      	str	r2, [r7, #4]
 8000d36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d3c:	f7ff ff64 	bl	8000c08 <__NVIC_GetPriorityGrouping>
 8000d40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	68b9      	ldr	r1, [r7, #8]
 8000d46:	6978      	ldr	r0, [r7, #20]
 8000d48:	f7ff ffb2 	bl	8000cb0 <NVIC_EncodePriority>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d52:	4611      	mov	r1, r2
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff ff81 	bl	8000c5c <__NVIC_SetPriority>
}
 8000d5a:	bf00      	nop
 8000d5c:	3718      	adds	r7, #24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	4603      	mov	r3, r0
 8000d6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff ff57 	bl	8000c24 <__NVIC_EnableIRQ>
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
	...

08000d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b08b      	sub	sp, #44	; 0x2c
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d92:	e169      	b.n	8001068 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d94:	2201      	movs	r2, #1
 8000d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	69fa      	ldr	r2, [r7, #28]
 8000da4:	4013      	ands	r3, r2
 8000da6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	f040 8158 	bne.w	8001062 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	4a9a      	ldr	r2, [pc, #616]	; (8001020 <HAL_GPIO_Init+0x2a0>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d05e      	beq.n	8000e7a <HAL_GPIO_Init+0xfa>
 8000dbc:	4a98      	ldr	r2, [pc, #608]	; (8001020 <HAL_GPIO_Init+0x2a0>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d875      	bhi.n	8000eae <HAL_GPIO_Init+0x12e>
 8000dc2:	4a98      	ldr	r2, [pc, #608]	; (8001024 <HAL_GPIO_Init+0x2a4>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d058      	beq.n	8000e7a <HAL_GPIO_Init+0xfa>
 8000dc8:	4a96      	ldr	r2, [pc, #600]	; (8001024 <HAL_GPIO_Init+0x2a4>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d86f      	bhi.n	8000eae <HAL_GPIO_Init+0x12e>
 8000dce:	4a96      	ldr	r2, [pc, #600]	; (8001028 <HAL_GPIO_Init+0x2a8>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d052      	beq.n	8000e7a <HAL_GPIO_Init+0xfa>
 8000dd4:	4a94      	ldr	r2, [pc, #592]	; (8001028 <HAL_GPIO_Init+0x2a8>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d869      	bhi.n	8000eae <HAL_GPIO_Init+0x12e>
 8000dda:	4a94      	ldr	r2, [pc, #592]	; (800102c <HAL_GPIO_Init+0x2ac>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d04c      	beq.n	8000e7a <HAL_GPIO_Init+0xfa>
 8000de0:	4a92      	ldr	r2, [pc, #584]	; (800102c <HAL_GPIO_Init+0x2ac>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d863      	bhi.n	8000eae <HAL_GPIO_Init+0x12e>
 8000de6:	4a92      	ldr	r2, [pc, #584]	; (8001030 <HAL_GPIO_Init+0x2b0>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d046      	beq.n	8000e7a <HAL_GPIO_Init+0xfa>
 8000dec:	4a90      	ldr	r2, [pc, #576]	; (8001030 <HAL_GPIO_Init+0x2b0>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d85d      	bhi.n	8000eae <HAL_GPIO_Init+0x12e>
 8000df2:	2b12      	cmp	r3, #18
 8000df4:	d82a      	bhi.n	8000e4c <HAL_GPIO_Init+0xcc>
 8000df6:	2b12      	cmp	r3, #18
 8000df8:	d859      	bhi.n	8000eae <HAL_GPIO_Init+0x12e>
 8000dfa:	a201      	add	r2, pc, #4	; (adr r2, 8000e00 <HAL_GPIO_Init+0x80>)
 8000dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e00:	08000e7b 	.word	0x08000e7b
 8000e04:	08000e55 	.word	0x08000e55
 8000e08:	08000e67 	.word	0x08000e67
 8000e0c:	08000ea9 	.word	0x08000ea9
 8000e10:	08000eaf 	.word	0x08000eaf
 8000e14:	08000eaf 	.word	0x08000eaf
 8000e18:	08000eaf 	.word	0x08000eaf
 8000e1c:	08000eaf 	.word	0x08000eaf
 8000e20:	08000eaf 	.word	0x08000eaf
 8000e24:	08000eaf 	.word	0x08000eaf
 8000e28:	08000eaf 	.word	0x08000eaf
 8000e2c:	08000eaf 	.word	0x08000eaf
 8000e30:	08000eaf 	.word	0x08000eaf
 8000e34:	08000eaf 	.word	0x08000eaf
 8000e38:	08000eaf 	.word	0x08000eaf
 8000e3c:	08000eaf 	.word	0x08000eaf
 8000e40:	08000eaf 	.word	0x08000eaf
 8000e44:	08000e5d 	.word	0x08000e5d
 8000e48:	08000e71 	.word	0x08000e71
 8000e4c:	4a79      	ldr	r2, [pc, #484]	; (8001034 <HAL_GPIO_Init+0x2b4>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d013      	beq.n	8000e7a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e52:	e02c      	b.n	8000eae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	623b      	str	r3, [r7, #32]
          break;
 8000e5a:	e029      	b.n	8000eb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	3304      	adds	r3, #4
 8000e62:	623b      	str	r3, [r7, #32]
          break;
 8000e64:	e024      	b.n	8000eb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	3308      	adds	r3, #8
 8000e6c:	623b      	str	r3, [r7, #32]
          break;
 8000e6e:	e01f      	b.n	8000eb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	330c      	adds	r3, #12
 8000e76:	623b      	str	r3, [r7, #32]
          break;
 8000e78:	e01a      	b.n	8000eb0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d102      	bne.n	8000e88 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e82:	2304      	movs	r3, #4
 8000e84:	623b      	str	r3, [r7, #32]
          break;
 8000e86:	e013      	b.n	8000eb0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d105      	bne.n	8000e9c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e90:	2308      	movs	r3, #8
 8000e92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	69fa      	ldr	r2, [r7, #28]
 8000e98:	611a      	str	r2, [r3, #16]
          break;
 8000e9a:	e009      	b.n	8000eb0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e9c:	2308      	movs	r3, #8
 8000e9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	69fa      	ldr	r2, [r7, #28]
 8000ea4:	615a      	str	r2, [r3, #20]
          break;
 8000ea6:	e003      	b.n	8000eb0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	623b      	str	r3, [r7, #32]
          break;
 8000eac:	e000      	b.n	8000eb0 <HAL_GPIO_Init+0x130>
          break;
 8000eae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	2bff      	cmp	r3, #255	; 0xff
 8000eb4:	d801      	bhi.n	8000eba <HAL_GPIO_Init+0x13a>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	e001      	b.n	8000ebe <HAL_GPIO_Init+0x13e>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	3304      	adds	r3, #4
 8000ebe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	2bff      	cmp	r3, #255	; 0xff
 8000ec4:	d802      	bhi.n	8000ecc <HAL_GPIO_Init+0x14c>
 8000ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	e002      	b.n	8000ed2 <HAL_GPIO_Init+0x152>
 8000ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ece:	3b08      	subs	r3, #8
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	210f      	movs	r1, #15
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	401a      	ands	r2, r3
 8000ee4:	6a39      	ldr	r1, [r7, #32]
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8000eec:	431a      	orrs	r2, r3
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	f000 80b1 	beq.w	8001062 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f00:	4b4d      	ldr	r3, [pc, #308]	; (8001038 <HAL_GPIO_Init+0x2b8>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	4a4c      	ldr	r2, [pc, #304]	; (8001038 <HAL_GPIO_Init+0x2b8>)
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	6193      	str	r3, [r2, #24]
 8000f0c:	4b4a      	ldr	r3, [pc, #296]	; (8001038 <HAL_GPIO_Init+0x2b8>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f18:	4a48      	ldr	r2, [pc, #288]	; (800103c <HAL_GPIO_Init+0x2bc>)
 8000f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1c:	089b      	lsrs	r3, r3, #2
 8000f1e:	3302      	adds	r3, #2
 8000f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f28:	f003 0303 	and.w	r3, r3, #3
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	220f      	movs	r2, #15
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	68fa      	ldr	r2, [r7, #12]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a40      	ldr	r2, [pc, #256]	; (8001040 <HAL_GPIO_Init+0x2c0>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d013      	beq.n	8000f6c <HAL_GPIO_Init+0x1ec>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a3f      	ldr	r2, [pc, #252]	; (8001044 <HAL_GPIO_Init+0x2c4>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d00d      	beq.n	8000f68 <HAL_GPIO_Init+0x1e8>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4a3e      	ldr	r2, [pc, #248]	; (8001048 <HAL_GPIO_Init+0x2c8>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d007      	beq.n	8000f64 <HAL_GPIO_Init+0x1e4>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4a3d      	ldr	r2, [pc, #244]	; (800104c <HAL_GPIO_Init+0x2cc>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d101      	bne.n	8000f60 <HAL_GPIO_Init+0x1e0>
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	e006      	b.n	8000f6e <HAL_GPIO_Init+0x1ee>
 8000f60:	2304      	movs	r3, #4
 8000f62:	e004      	b.n	8000f6e <HAL_GPIO_Init+0x1ee>
 8000f64:	2302      	movs	r3, #2
 8000f66:	e002      	b.n	8000f6e <HAL_GPIO_Init+0x1ee>
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e000      	b.n	8000f6e <HAL_GPIO_Init+0x1ee>
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f70:	f002 0203 	and.w	r2, r2, #3
 8000f74:	0092      	lsls	r2, r2, #2
 8000f76:	4093      	lsls	r3, r2
 8000f78:	68fa      	ldr	r2, [r7, #12]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f7e:	492f      	ldr	r1, [pc, #188]	; (800103c <HAL_GPIO_Init+0x2bc>)
 8000f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f82:	089b      	lsrs	r3, r3, #2
 8000f84:	3302      	adds	r3, #2
 8000f86:	68fa      	ldr	r2, [r7, #12]
 8000f88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d006      	beq.n	8000fa6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f98:	4b2d      	ldr	r3, [pc, #180]	; (8001050 <HAL_GPIO_Init+0x2d0>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	492c      	ldr	r1, [pc, #176]	; (8001050 <HAL_GPIO_Init+0x2d0>)
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	600b      	str	r3, [r1, #0]
 8000fa4:	e006      	b.n	8000fb4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fa6:	4b2a      	ldr	r3, [pc, #168]	; (8001050 <HAL_GPIO_Init+0x2d0>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	43db      	mvns	r3, r3
 8000fae:	4928      	ldr	r1, [pc, #160]	; (8001050 <HAL_GPIO_Init+0x2d0>)
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d006      	beq.n	8000fce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fc0:	4b23      	ldr	r3, [pc, #140]	; (8001050 <HAL_GPIO_Init+0x2d0>)
 8000fc2:	685a      	ldr	r2, [r3, #4]
 8000fc4:	4922      	ldr	r1, [pc, #136]	; (8001050 <HAL_GPIO_Init+0x2d0>)
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	604b      	str	r3, [r1, #4]
 8000fcc:	e006      	b.n	8000fdc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fce:	4b20      	ldr	r3, [pc, #128]	; (8001050 <HAL_GPIO_Init+0x2d0>)
 8000fd0:	685a      	ldr	r2, [r3, #4]
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	491e      	ldr	r1, [pc, #120]	; (8001050 <HAL_GPIO_Init+0x2d0>)
 8000fd8:	4013      	ands	r3, r2
 8000fda:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d006      	beq.n	8000ff6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fe8:	4b19      	ldr	r3, [pc, #100]	; (8001050 <HAL_GPIO_Init+0x2d0>)
 8000fea:	689a      	ldr	r2, [r3, #8]
 8000fec:	4918      	ldr	r1, [pc, #96]	; (8001050 <HAL_GPIO_Init+0x2d0>)
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	608b      	str	r3, [r1, #8]
 8000ff4:	e006      	b.n	8001004 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ff6:	4b16      	ldr	r3, [pc, #88]	; (8001050 <HAL_GPIO_Init+0x2d0>)
 8000ff8:	689a      	ldr	r2, [r3, #8]
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	4914      	ldr	r1, [pc, #80]	; (8001050 <HAL_GPIO_Init+0x2d0>)
 8001000:	4013      	ands	r3, r2
 8001002:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d021      	beq.n	8001054 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001010:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <HAL_GPIO_Init+0x2d0>)
 8001012:	68da      	ldr	r2, [r3, #12]
 8001014:	490e      	ldr	r1, [pc, #56]	; (8001050 <HAL_GPIO_Init+0x2d0>)
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	4313      	orrs	r3, r2
 800101a:	60cb      	str	r3, [r1, #12]
 800101c:	e021      	b.n	8001062 <HAL_GPIO_Init+0x2e2>
 800101e:	bf00      	nop
 8001020:	10320000 	.word	0x10320000
 8001024:	10310000 	.word	0x10310000
 8001028:	10220000 	.word	0x10220000
 800102c:	10210000 	.word	0x10210000
 8001030:	10120000 	.word	0x10120000
 8001034:	10110000 	.word	0x10110000
 8001038:	40021000 	.word	0x40021000
 800103c:	40010000 	.word	0x40010000
 8001040:	40010800 	.word	0x40010800
 8001044:	40010c00 	.word	0x40010c00
 8001048:	40011000 	.word	0x40011000
 800104c:	40011400 	.word	0x40011400
 8001050:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001054:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <HAL_GPIO_Init+0x304>)
 8001056:	68da      	ldr	r2, [r3, #12]
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	43db      	mvns	r3, r3
 800105c:	4909      	ldr	r1, [pc, #36]	; (8001084 <HAL_GPIO_Init+0x304>)
 800105e:	4013      	ands	r3, r2
 8001060:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001064:	3301      	adds	r3, #1
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106e:	fa22 f303 	lsr.w	r3, r2, r3
 8001072:	2b00      	cmp	r3, #0
 8001074:	f47f ae8e 	bne.w	8000d94 <HAL_GPIO_Init+0x14>
  }
}
 8001078:	bf00      	nop
 800107a:	bf00      	nop
 800107c:	372c      	adds	r7, #44	; 0x2c
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr
 8001084:	40010400 	.word	0x40010400

08001088 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	689a      	ldr	r2, [r3, #8]
 8001098:	887b      	ldrh	r3, [r7, #2]
 800109a:	4013      	ands	r3, r2
 800109c:	2b00      	cmp	r3, #0
 800109e:	d002      	beq.n	80010a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010a0:	2301      	movs	r3, #1
 80010a2:	73fb      	strb	r3, [r7, #15]
 80010a4:	e001      	b.n	80010aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010a6:	2300      	movs	r3, #0
 80010a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bc80      	pop	{r7}
 80010b4:	4770      	bx	lr

080010b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b6:	b480      	push	{r7}
 80010b8:	b083      	sub	sp, #12
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
 80010be:	460b      	mov	r3, r1
 80010c0:	807b      	strh	r3, [r7, #2]
 80010c2:	4613      	mov	r3, r2
 80010c4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010c6:	787b      	ldrb	r3, [r7, #1]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d003      	beq.n	80010d4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010cc:	887a      	ldrh	r2, [r7, #2]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80010d2:	e003      	b.n	80010dc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010d4:	887b      	ldrh	r3, [r7, #2]
 80010d6:	041a      	lsls	r2, r3, #16
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	611a      	str	r2, [r3, #16]
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bc80      	pop	{r7}
 80010e4:	4770      	bx	lr

080010e6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b085      	sub	sp, #20
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
 80010ee:	460b      	mov	r3, r1
 80010f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010f8:	887a      	ldrh	r2, [r7, #2]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	4013      	ands	r3, r2
 80010fe:	041a      	lsls	r2, r3, #16
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	43d9      	mvns	r1, r3
 8001104:	887b      	ldrh	r3, [r7, #2]
 8001106:	400b      	ands	r3, r1
 8001108:	431a      	orrs	r2, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	611a      	str	r2, [r3, #16]
}
 800110e:	bf00      	nop
 8001110:	3714      	adds	r7, #20
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr

08001118 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001122:	4b08      	ldr	r3, [pc, #32]	; (8001144 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001124:	695a      	ldr	r2, [r3, #20]
 8001126:	88fb      	ldrh	r3, [r7, #6]
 8001128:	4013      	ands	r3, r2
 800112a:	2b00      	cmp	r3, #0
 800112c:	d006      	beq.n	800113c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800112e:	4a05      	ldr	r2, [pc, #20]	; (8001144 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001130:	88fb      	ldrh	r3, [r7, #6]
 8001132:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001134:	88fb      	ldrh	r3, [r7, #6]
 8001136:	4618      	mov	r0, r3
 8001138:	f000 f806 	bl	8001148 <HAL_GPIO_EXTI_Callback>
  }
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40010400 	.word	0x40010400

08001148 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr

0800115c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d101      	bne.n	800116e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e272      	b.n	8001654 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	2b00      	cmp	r3, #0
 8001178:	f000 8087 	beq.w	800128a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800117c:	4b92      	ldr	r3, [pc, #584]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f003 030c 	and.w	r3, r3, #12
 8001184:	2b04      	cmp	r3, #4
 8001186:	d00c      	beq.n	80011a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001188:	4b8f      	ldr	r3, [pc, #572]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f003 030c 	and.w	r3, r3, #12
 8001190:	2b08      	cmp	r3, #8
 8001192:	d112      	bne.n	80011ba <HAL_RCC_OscConfig+0x5e>
 8001194:	4b8c      	ldr	r3, [pc, #560]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800119c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011a0:	d10b      	bne.n	80011ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a2:	4b89      	ldr	r3, [pc, #548]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d06c      	beq.n	8001288 <HAL_RCC_OscConfig+0x12c>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d168      	bne.n	8001288 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e24c      	b.n	8001654 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011c2:	d106      	bne.n	80011d2 <HAL_RCC_OscConfig+0x76>
 80011c4:	4b80      	ldr	r3, [pc, #512]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a7f      	ldr	r2, [pc, #508]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 80011ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ce:	6013      	str	r3, [r2, #0]
 80011d0:	e02e      	b.n	8001230 <HAL_RCC_OscConfig+0xd4>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d10c      	bne.n	80011f4 <HAL_RCC_OscConfig+0x98>
 80011da:	4b7b      	ldr	r3, [pc, #492]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a7a      	ldr	r2, [pc, #488]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 80011e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011e4:	6013      	str	r3, [r2, #0]
 80011e6:	4b78      	ldr	r3, [pc, #480]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a77      	ldr	r2, [pc, #476]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 80011ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011f0:	6013      	str	r3, [r2, #0]
 80011f2:	e01d      	b.n	8001230 <HAL_RCC_OscConfig+0xd4>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011fc:	d10c      	bne.n	8001218 <HAL_RCC_OscConfig+0xbc>
 80011fe:	4b72      	ldr	r3, [pc, #456]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a71      	ldr	r2, [pc, #452]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 8001204:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001208:	6013      	str	r3, [r2, #0]
 800120a:	4b6f      	ldr	r3, [pc, #444]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a6e      	ldr	r2, [pc, #440]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 8001210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	e00b      	b.n	8001230 <HAL_RCC_OscConfig+0xd4>
 8001218:	4b6b      	ldr	r3, [pc, #428]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a6a      	ldr	r2, [pc, #424]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 800121e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001222:	6013      	str	r3, [r2, #0]
 8001224:	4b68      	ldr	r3, [pc, #416]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a67      	ldr	r2, [pc, #412]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 800122a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800122e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d013      	beq.n	8001260 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001238:	f7ff fc94 	bl	8000b64 <HAL_GetTick>
 800123c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800123e:	e008      	b.n	8001252 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001240:	f7ff fc90 	bl	8000b64 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b64      	cmp	r3, #100	; 0x64
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e200      	b.n	8001654 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001252:	4b5d      	ldr	r3, [pc, #372]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d0f0      	beq.n	8001240 <HAL_RCC_OscConfig+0xe4>
 800125e:	e014      	b.n	800128a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001260:	f7ff fc80 	bl	8000b64 <HAL_GetTick>
 8001264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001266:	e008      	b.n	800127a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001268:	f7ff fc7c 	bl	8000b64 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b64      	cmp	r3, #100	; 0x64
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e1ec      	b.n	8001654 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800127a:	4b53      	ldr	r3, [pc, #332]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d1f0      	bne.n	8001268 <HAL_RCC_OscConfig+0x10c>
 8001286:	e000      	b.n	800128a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001288:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d063      	beq.n	800135e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001296:	4b4c      	ldr	r3, [pc, #304]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f003 030c 	and.w	r3, r3, #12
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d00b      	beq.n	80012ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012a2:	4b49      	ldr	r3, [pc, #292]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f003 030c 	and.w	r3, r3, #12
 80012aa:	2b08      	cmp	r3, #8
 80012ac:	d11c      	bne.n	80012e8 <HAL_RCC_OscConfig+0x18c>
 80012ae:	4b46      	ldr	r3, [pc, #280]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d116      	bne.n	80012e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ba:	4b43      	ldr	r3, [pc, #268]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d005      	beq.n	80012d2 <HAL_RCC_OscConfig+0x176>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	691b      	ldr	r3, [r3, #16]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d001      	beq.n	80012d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e1c0      	b.n	8001654 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d2:	4b3d      	ldr	r3, [pc, #244]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	4939      	ldr	r1, [pc, #228]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 80012e2:	4313      	orrs	r3, r2
 80012e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012e6:	e03a      	b.n	800135e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	691b      	ldr	r3, [r3, #16]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d020      	beq.n	8001332 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012f0:	4b36      	ldr	r3, [pc, #216]	; (80013cc <HAL_RCC_OscConfig+0x270>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f6:	f7ff fc35 	bl	8000b64 <HAL_GetTick>
 80012fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012fc:	e008      	b.n	8001310 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012fe:	f7ff fc31 	bl	8000b64 <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b02      	cmp	r3, #2
 800130a:	d901      	bls.n	8001310 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e1a1      	b.n	8001654 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001310:	4b2d      	ldr	r3, [pc, #180]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d0f0      	beq.n	80012fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800131c:	4b2a      	ldr	r3, [pc, #168]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	695b      	ldr	r3, [r3, #20]
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	4927      	ldr	r1, [pc, #156]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 800132c:	4313      	orrs	r3, r2
 800132e:	600b      	str	r3, [r1, #0]
 8001330:	e015      	b.n	800135e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001332:	4b26      	ldr	r3, [pc, #152]	; (80013cc <HAL_RCC_OscConfig+0x270>)
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001338:	f7ff fc14 	bl	8000b64 <HAL_GetTick>
 800133c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001340:	f7ff fc10 	bl	8000b64 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e180      	b.n	8001654 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001352:	4b1d      	ldr	r3, [pc, #116]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d1f0      	bne.n	8001340 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0308 	and.w	r3, r3, #8
 8001366:	2b00      	cmp	r3, #0
 8001368:	d03a      	beq.n	80013e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	699b      	ldr	r3, [r3, #24]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d019      	beq.n	80013a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001372:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <HAL_RCC_OscConfig+0x274>)
 8001374:	2201      	movs	r2, #1
 8001376:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001378:	f7ff fbf4 	bl	8000b64 <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001380:	f7ff fbf0 	bl	8000b64 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b02      	cmp	r3, #2
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e160      	b.n	8001654 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001392:	4b0d      	ldr	r3, [pc, #52]	; (80013c8 <HAL_RCC_OscConfig+0x26c>)
 8001394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d0f0      	beq.n	8001380 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800139e:	2001      	movs	r0, #1
 80013a0:	f000 fb08 	bl	80019b4 <RCC_Delay>
 80013a4:	e01c      	b.n	80013e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <HAL_RCC_OscConfig+0x274>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ac:	f7ff fbda 	bl	8000b64 <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b2:	e00f      	b.n	80013d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013b4:	f7ff fbd6 	bl	8000b64 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d908      	bls.n	80013d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e146      	b.n	8001654 <HAL_RCC_OscConfig+0x4f8>
 80013c6:	bf00      	nop
 80013c8:	40021000 	.word	0x40021000
 80013cc:	42420000 	.word	0x42420000
 80013d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013d4:	4b92      	ldr	r3, [pc, #584]	; (8001620 <HAL_RCC_OscConfig+0x4c4>)
 80013d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1e9      	bne.n	80013b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0304 	and.w	r3, r3, #4
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	f000 80a6 	beq.w	800153a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013ee:	2300      	movs	r3, #0
 80013f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013f2:	4b8b      	ldr	r3, [pc, #556]	; (8001620 <HAL_RCC_OscConfig+0x4c4>)
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d10d      	bne.n	800141a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013fe:	4b88      	ldr	r3, [pc, #544]	; (8001620 <HAL_RCC_OscConfig+0x4c4>)
 8001400:	69db      	ldr	r3, [r3, #28]
 8001402:	4a87      	ldr	r2, [pc, #540]	; (8001620 <HAL_RCC_OscConfig+0x4c4>)
 8001404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001408:	61d3      	str	r3, [r2, #28]
 800140a:	4b85      	ldr	r3, [pc, #532]	; (8001620 <HAL_RCC_OscConfig+0x4c4>)
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001416:	2301      	movs	r3, #1
 8001418:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800141a:	4b82      	ldr	r3, [pc, #520]	; (8001624 <HAL_RCC_OscConfig+0x4c8>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001422:	2b00      	cmp	r3, #0
 8001424:	d118      	bne.n	8001458 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001426:	4b7f      	ldr	r3, [pc, #508]	; (8001624 <HAL_RCC_OscConfig+0x4c8>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a7e      	ldr	r2, [pc, #504]	; (8001624 <HAL_RCC_OscConfig+0x4c8>)
 800142c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001430:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001432:	f7ff fb97 	bl	8000b64 <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800143a:	f7ff fb93 	bl	8000b64 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b64      	cmp	r3, #100	; 0x64
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e103      	b.n	8001654 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800144c:	4b75      	ldr	r3, [pc, #468]	; (8001624 <HAL_RCC_OscConfig+0x4c8>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0f0      	beq.n	800143a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d106      	bne.n	800146e <HAL_RCC_OscConfig+0x312>
 8001460:	4b6f      	ldr	r3, [pc, #444]	; (8001620 <HAL_RCC_OscConfig+0x4c4>)
 8001462:	6a1b      	ldr	r3, [r3, #32]
 8001464:	4a6e      	ldr	r2, [pc, #440]	; (8001620 <HAL_RCC_OscConfig+0x4c4>)
 8001466:	f043 0301 	orr.w	r3, r3, #1
 800146a:	6213      	str	r3, [r2, #32]
 800146c:	e02d      	b.n	80014ca <HAL_RCC_OscConfig+0x36e>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d10c      	bne.n	8001490 <HAL_RCC_OscConfig+0x334>
 8001476:	4b6a      	ldr	r3, [pc, #424]	; (8001620 <HAL_RCC_OscConfig+0x4c4>)
 8001478:	6a1b      	ldr	r3, [r3, #32]
 800147a:	4a69      	ldr	r2, [pc, #420]	; (8001620 <HAL_RCC_OscConfig+0x4c4>)
 800147c:	f023 0301 	bic.w	r3, r3, #1
 8001480:	6213      	str	r3, [r2, #32]
 8001482:	4b67      	ldr	r3, [pc, #412]	; (8001620 <HAL_RCC_OscConfig+0x4c4>)
 8001484:	6a1b      	ldr	r3, [r3, #32]
 8001486:	4a66      	ldr	r2, [pc, #408]	; (8001620 <HAL_RCC_OscConfig+0x4c4>)
 8001488:	f023 0304 	bic.w	r3, r3, #4
 800148c:	6213      	str	r3, [r2, #32]
 800148e:	e01c      	b.n	80014ca <HAL_RCC_OscConfig+0x36e>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	2b05      	cmp	r3, #5
 8001496:	d10c      	bne.n	80014b2 <HAL_RCC_OscConfig+0x356>
 8001498:	4b61      	ldr	r3, [pc, #388]	; (8001620 <HAL_RCC_OscConfig+0x4c4>)
 800149a:	6a1b      	ldr	r3, [r3, #32]
 800149c:	4a60      	ldr	r2, [pc, #384]	; (8001620 <HAL_RCC_OscConfig+0x4c4>)
 800149e:	f043 0304 	orr.w	r3, r3, #4
 80014a2:	6213      	str	r3, [r2, #32]
 80014a4:	4b5e      	ldr	r3, [pc, #376]	; (8001620 <HAL_RCC_OscConfig+0x4c4>)
 80014a6:	6a1b      	ldr	r3, [r3, #32]
 80014a8:	4a5d      	ldr	r2, [pc, #372]	; (8001620 <HAL_RCC_OscConfig+0x4c4>)
 80014aa:	f043 0301 	orr.w	r3, r3, #1
 80014ae:	6213      	str	r3, [r2, #32]
 80014b0:	e00b      	b.n	80014ca <HAL_RCC_OscConfig+0x36e>
 80014b2:	4b5b      	ldr	r3, [pc, #364]	; (8001620 <HAL_RCC_OscConfig+0x4c4>)
 80014b4:	6a1b      	ldr	r3, [r3, #32]
 80014b6:	4a5a      	ldr	r2, [pc, #360]	; (8001620 <HAL_RCC_OscConfig+0x4c4>)
 80014b8:	f023 0301 	bic.w	r3, r3, #1
 80014bc:	6213      	str	r3, [r2, #32]
 80014be:	4b58      	ldr	r3, [pc, #352]	; (8001620 <HAL_RCC_OscConfig+0x4c4>)
 80014c0:	6a1b      	ldr	r3, [r3, #32]
 80014c2:	4a57      	ldr	r2, [pc, #348]	; (8001620 <HAL_RCC_OscConfig+0x4c4>)
 80014c4:	f023 0304 	bic.w	r3, r3, #4
 80014c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d015      	beq.n	80014fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d2:	f7ff fb47 	bl	8000b64 <HAL_GetTick>
 80014d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014d8:	e00a      	b.n	80014f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014da:	f7ff fb43 	bl	8000b64 <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d901      	bls.n	80014f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e0b1      	b.n	8001654 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f0:	4b4b      	ldr	r3, [pc, #300]	; (8001620 <HAL_RCC_OscConfig+0x4c4>)
 80014f2:	6a1b      	ldr	r3, [r3, #32]
 80014f4:	f003 0302 	and.w	r3, r3, #2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d0ee      	beq.n	80014da <HAL_RCC_OscConfig+0x37e>
 80014fc:	e014      	b.n	8001528 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014fe:	f7ff fb31 	bl	8000b64 <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001504:	e00a      	b.n	800151c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001506:	f7ff fb2d 	bl	8000b64 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	f241 3288 	movw	r2, #5000	; 0x1388
 8001514:	4293      	cmp	r3, r2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e09b      	b.n	8001654 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800151c:	4b40      	ldr	r3, [pc, #256]	; (8001620 <HAL_RCC_OscConfig+0x4c4>)
 800151e:	6a1b      	ldr	r3, [r3, #32]
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1ee      	bne.n	8001506 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001528:	7dfb      	ldrb	r3, [r7, #23]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d105      	bne.n	800153a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800152e:	4b3c      	ldr	r3, [pc, #240]	; (8001620 <HAL_RCC_OscConfig+0x4c4>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	4a3b      	ldr	r2, [pc, #236]	; (8001620 <HAL_RCC_OscConfig+0x4c4>)
 8001534:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001538:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	2b00      	cmp	r3, #0
 8001540:	f000 8087 	beq.w	8001652 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001544:	4b36      	ldr	r3, [pc, #216]	; (8001620 <HAL_RCC_OscConfig+0x4c4>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 030c 	and.w	r3, r3, #12
 800154c:	2b08      	cmp	r3, #8
 800154e:	d061      	beq.n	8001614 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	69db      	ldr	r3, [r3, #28]
 8001554:	2b02      	cmp	r3, #2
 8001556:	d146      	bne.n	80015e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001558:	4b33      	ldr	r3, [pc, #204]	; (8001628 <HAL_RCC_OscConfig+0x4cc>)
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155e:	f7ff fb01 	bl	8000b64 <HAL_GetTick>
 8001562:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001564:	e008      	b.n	8001578 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001566:	f7ff fafd 	bl	8000b64 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e06d      	b.n	8001654 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001578:	4b29      	ldr	r3, [pc, #164]	; (8001620 <HAL_RCC_OscConfig+0x4c4>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1f0      	bne.n	8001566 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a1b      	ldr	r3, [r3, #32]
 8001588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800158c:	d108      	bne.n	80015a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800158e:	4b24      	ldr	r3, [pc, #144]	; (8001620 <HAL_RCC_OscConfig+0x4c4>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	4921      	ldr	r1, [pc, #132]	; (8001620 <HAL_RCC_OscConfig+0x4c4>)
 800159c:	4313      	orrs	r3, r2
 800159e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015a0:	4b1f      	ldr	r3, [pc, #124]	; (8001620 <HAL_RCC_OscConfig+0x4c4>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a19      	ldr	r1, [r3, #32]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b0:	430b      	orrs	r3, r1
 80015b2:	491b      	ldr	r1, [pc, #108]	; (8001620 <HAL_RCC_OscConfig+0x4c4>)
 80015b4:	4313      	orrs	r3, r2
 80015b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015b8:	4b1b      	ldr	r3, [pc, #108]	; (8001628 <HAL_RCC_OscConfig+0x4cc>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015be:	f7ff fad1 	bl	8000b64 <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015c6:	f7ff facd 	bl	8000b64 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e03d      	b.n	8001654 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015d8:	4b11      	ldr	r3, [pc, #68]	; (8001620 <HAL_RCC_OscConfig+0x4c4>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d0f0      	beq.n	80015c6 <HAL_RCC_OscConfig+0x46a>
 80015e4:	e035      	b.n	8001652 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e6:	4b10      	ldr	r3, [pc, #64]	; (8001628 <HAL_RCC_OscConfig+0x4cc>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ec:	f7ff faba 	bl	8000b64 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f4:	f7ff fab6 	bl	8000b64 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e026      	b.n	8001654 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001606:	4b06      	ldr	r3, [pc, #24]	; (8001620 <HAL_RCC_OscConfig+0x4c4>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f0      	bne.n	80015f4 <HAL_RCC_OscConfig+0x498>
 8001612:	e01e      	b.n	8001652 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	69db      	ldr	r3, [r3, #28]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d107      	bne.n	800162c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e019      	b.n	8001654 <HAL_RCC_OscConfig+0x4f8>
 8001620:	40021000 	.word	0x40021000
 8001624:	40007000 	.word	0x40007000
 8001628:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800162c:	4b0b      	ldr	r3, [pc, #44]	; (800165c <HAL_RCC_OscConfig+0x500>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a1b      	ldr	r3, [r3, #32]
 800163c:	429a      	cmp	r2, r3
 800163e:	d106      	bne.n	800164e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800164a:	429a      	cmp	r2, r3
 800164c:	d001      	beq.n	8001652 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e000      	b.n	8001654 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001652:	2300      	movs	r3, #0
}
 8001654:	4618      	mov	r0, r3
 8001656:	3718      	adds	r7, #24
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40021000 	.word	0x40021000

08001660 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d101      	bne.n	8001674 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e0d0      	b.n	8001816 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001674:	4b6a      	ldr	r3, [pc, #424]	; (8001820 <HAL_RCC_ClockConfig+0x1c0>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0307 	and.w	r3, r3, #7
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	429a      	cmp	r2, r3
 8001680:	d910      	bls.n	80016a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001682:	4b67      	ldr	r3, [pc, #412]	; (8001820 <HAL_RCC_ClockConfig+0x1c0>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f023 0207 	bic.w	r2, r3, #7
 800168a:	4965      	ldr	r1, [pc, #404]	; (8001820 <HAL_RCC_ClockConfig+0x1c0>)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	4313      	orrs	r3, r2
 8001690:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001692:	4b63      	ldr	r3, [pc, #396]	; (8001820 <HAL_RCC_ClockConfig+0x1c0>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	683a      	ldr	r2, [r7, #0]
 800169c:	429a      	cmp	r2, r3
 800169e:	d001      	beq.n	80016a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e0b8      	b.n	8001816 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d020      	beq.n	80016f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d005      	beq.n	80016c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016bc:	4b59      	ldr	r3, [pc, #356]	; (8001824 <HAL_RCC_ClockConfig+0x1c4>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	4a58      	ldr	r2, [pc, #352]	; (8001824 <HAL_RCC_ClockConfig+0x1c4>)
 80016c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0308 	and.w	r3, r3, #8
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d005      	beq.n	80016e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016d4:	4b53      	ldr	r3, [pc, #332]	; (8001824 <HAL_RCC_ClockConfig+0x1c4>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	4a52      	ldr	r2, [pc, #328]	; (8001824 <HAL_RCC_ClockConfig+0x1c4>)
 80016da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80016de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016e0:	4b50      	ldr	r3, [pc, #320]	; (8001824 <HAL_RCC_ClockConfig+0x1c4>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	494d      	ldr	r1, [pc, #308]	; (8001824 <HAL_RCC_ClockConfig+0x1c4>)
 80016ee:	4313      	orrs	r3, r2
 80016f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d040      	beq.n	8001780 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d107      	bne.n	8001716 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001706:	4b47      	ldr	r3, [pc, #284]	; (8001824 <HAL_RCC_ClockConfig+0x1c4>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d115      	bne.n	800173e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e07f      	b.n	8001816 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2b02      	cmp	r3, #2
 800171c:	d107      	bne.n	800172e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800171e:	4b41      	ldr	r3, [pc, #260]	; (8001824 <HAL_RCC_ClockConfig+0x1c4>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d109      	bne.n	800173e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e073      	b.n	8001816 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800172e:	4b3d      	ldr	r3, [pc, #244]	; (8001824 <HAL_RCC_ClockConfig+0x1c4>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e06b      	b.n	8001816 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800173e:	4b39      	ldr	r3, [pc, #228]	; (8001824 <HAL_RCC_ClockConfig+0x1c4>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f023 0203 	bic.w	r2, r3, #3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	4936      	ldr	r1, [pc, #216]	; (8001824 <HAL_RCC_ClockConfig+0x1c4>)
 800174c:	4313      	orrs	r3, r2
 800174e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001750:	f7ff fa08 	bl	8000b64 <HAL_GetTick>
 8001754:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001756:	e00a      	b.n	800176e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001758:	f7ff fa04 	bl	8000b64 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	f241 3288 	movw	r2, #5000	; 0x1388
 8001766:	4293      	cmp	r3, r2
 8001768:	d901      	bls.n	800176e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e053      	b.n	8001816 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800176e:	4b2d      	ldr	r3, [pc, #180]	; (8001824 <HAL_RCC_ClockConfig+0x1c4>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f003 020c 	and.w	r2, r3, #12
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	429a      	cmp	r2, r3
 800177e:	d1eb      	bne.n	8001758 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001780:	4b27      	ldr	r3, [pc, #156]	; (8001820 <HAL_RCC_ClockConfig+0x1c0>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0307 	and.w	r3, r3, #7
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	429a      	cmp	r2, r3
 800178c:	d210      	bcs.n	80017b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800178e:	4b24      	ldr	r3, [pc, #144]	; (8001820 <HAL_RCC_ClockConfig+0x1c0>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f023 0207 	bic.w	r2, r3, #7
 8001796:	4922      	ldr	r1, [pc, #136]	; (8001820 <HAL_RCC_ClockConfig+0x1c0>)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	4313      	orrs	r3, r2
 800179c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800179e:	4b20      	ldr	r3, [pc, #128]	; (8001820 <HAL_RCC_ClockConfig+0x1c0>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d001      	beq.n	80017b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e032      	b.n	8001816 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d008      	beq.n	80017ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017bc:	4b19      	ldr	r3, [pc, #100]	; (8001824 <HAL_RCC_ClockConfig+0x1c4>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	4916      	ldr	r1, [pc, #88]	; (8001824 <HAL_RCC_ClockConfig+0x1c4>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0308 	and.w	r3, r3, #8
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d009      	beq.n	80017ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017da:	4b12      	ldr	r3, [pc, #72]	; (8001824 <HAL_RCC_ClockConfig+0x1c4>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	691b      	ldr	r3, [r3, #16]
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	490e      	ldr	r1, [pc, #56]	; (8001824 <HAL_RCC_ClockConfig+0x1c4>)
 80017ea:	4313      	orrs	r3, r2
 80017ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017ee:	f000 f821 	bl	8001834 <HAL_RCC_GetSysClockFreq>
 80017f2:	4602      	mov	r2, r0
 80017f4:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <HAL_RCC_ClockConfig+0x1c4>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	091b      	lsrs	r3, r3, #4
 80017fa:	f003 030f 	and.w	r3, r3, #15
 80017fe:	490a      	ldr	r1, [pc, #40]	; (8001828 <HAL_RCC_ClockConfig+0x1c8>)
 8001800:	5ccb      	ldrb	r3, [r1, r3]
 8001802:	fa22 f303 	lsr.w	r3, r2, r3
 8001806:	4a09      	ldr	r2, [pc, #36]	; (800182c <HAL_RCC_ClockConfig+0x1cc>)
 8001808:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800180a:	4b09      	ldr	r3, [pc, #36]	; (8001830 <HAL_RCC_ClockConfig+0x1d0>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff f8ae 	bl	8000970 <HAL_InitTick>

  return HAL_OK;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40022000 	.word	0x40022000
 8001824:	40021000 	.word	0x40021000
 8001828:	0800417c 	.word	0x0800417c
 800182c:	20000014 	.word	0x20000014
 8001830:	20000018 	.word	0x20000018

08001834 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001834:	b490      	push	{r4, r7}
 8001836:	b08a      	sub	sp, #40	; 0x28
 8001838:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800183a:	4b29      	ldr	r3, [pc, #164]	; (80018e0 <HAL_RCC_GetSysClockFreq+0xac>)
 800183c:	1d3c      	adds	r4, r7, #4
 800183e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001840:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001844:	f240 2301 	movw	r3, #513	; 0x201
 8001848:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800184a:	2300      	movs	r3, #0
 800184c:	61fb      	str	r3, [r7, #28]
 800184e:	2300      	movs	r3, #0
 8001850:	61bb      	str	r3, [r7, #24]
 8001852:	2300      	movs	r3, #0
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
 8001856:	2300      	movs	r3, #0
 8001858:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800185a:	2300      	movs	r3, #0
 800185c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800185e:	4b21      	ldr	r3, [pc, #132]	; (80018e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	f003 030c 	and.w	r3, r3, #12
 800186a:	2b04      	cmp	r3, #4
 800186c:	d002      	beq.n	8001874 <HAL_RCC_GetSysClockFreq+0x40>
 800186e:	2b08      	cmp	r3, #8
 8001870:	d003      	beq.n	800187a <HAL_RCC_GetSysClockFreq+0x46>
 8001872:	e02b      	b.n	80018cc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001874:	4b1c      	ldr	r3, [pc, #112]	; (80018e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001876:	623b      	str	r3, [r7, #32]
      break;
 8001878:	e02b      	b.n	80018d2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	0c9b      	lsrs	r3, r3, #18
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	3328      	adds	r3, #40	; 0x28
 8001884:	443b      	add	r3, r7
 8001886:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800188a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d012      	beq.n	80018bc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001896:	4b13      	ldr	r3, [pc, #76]	; (80018e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	0c5b      	lsrs	r3, r3, #17
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	3328      	adds	r3, #40	; 0x28
 80018a2:	443b      	add	r3, r7
 80018a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80018a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	4a0e      	ldr	r2, [pc, #56]	; (80018e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80018ae:	fb03 f202 	mul.w	r2, r3, r2
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b8:	627b      	str	r3, [r7, #36]	; 0x24
 80018ba:	e004      	b.n	80018c6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	4a0b      	ldr	r2, [pc, #44]	; (80018ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80018c0:	fb02 f303 	mul.w	r3, r2, r3
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80018c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c8:	623b      	str	r3, [r7, #32]
      break;
 80018ca:	e002      	b.n	80018d2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80018ce:	623b      	str	r3, [r7, #32]
      break;
 80018d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018d2:	6a3b      	ldr	r3, [r7, #32]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3728      	adds	r7, #40	; 0x28
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc90      	pop	{r4, r7}
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	08004164 	.word	0x08004164
 80018e4:	40021000 	.word	0x40021000
 80018e8:	007a1200 	.word	0x007a1200
 80018ec:	003d0900 	.word	0x003d0900

080018f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018f4:	4b02      	ldr	r3, [pc, #8]	; (8001900 <HAL_RCC_GetHCLKFreq+0x10>)
 80018f6:	681b      	ldr	r3, [r3, #0]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc80      	pop	{r7}
 80018fe:	4770      	bx	lr
 8001900:	20000014 	.word	0x20000014

08001904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001908:	f7ff fff2 	bl	80018f0 <HAL_RCC_GetHCLKFreq>
 800190c:	4602      	mov	r2, r0
 800190e:	4b05      	ldr	r3, [pc, #20]	; (8001924 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	0a1b      	lsrs	r3, r3, #8
 8001914:	f003 0307 	and.w	r3, r3, #7
 8001918:	4903      	ldr	r1, [pc, #12]	; (8001928 <HAL_RCC_GetPCLK1Freq+0x24>)
 800191a:	5ccb      	ldrb	r3, [r1, r3]
 800191c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001920:	4618      	mov	r0, r3
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40021000 	.word	0x40021000
 8001928:	0800418c 	.word	0x0800418c

0800192c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001930:	f7ff ffde 	bl	80018f0 <HAL_RCC_GetHCLKFreq>
 8001934:	4602      	mov	r2, r0
 8001936:	4b05      	ldr	r3, [pc, #20]	; (800194c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	0adb      	lsrs	r3, r3, #11
 800193c:	f003 0307 	and.w	r3, r3, #7
 8001940:	4903      	ldr	r1, [pc, #12]	; (8001950 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001942:	5ccb      	ldrb	r3, [r1, r3]
 8001944:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001948:	4618      	mov	r0, r3
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40021000 	.word	0x40021000
 8001950:	0800418c 	.word	0x0800418c

08001954 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	220f      	movs	r2, #15
 8001962:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001964:	4b11      	ldr	r3, [pc, #68]	; (80019ac <HAL_RCC_GetClockConfig+0x58>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 0203 	and.w	r2, r3, #3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001970:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <HAL_RCC_GetClockConfig+0x58>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800197c:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <HAL_RCC_GetClockConfig+0x58>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001988:	4b08      	ldr	r3, [pc, #32]	; (80019ac <HAL_RCC_GetClockConfig+0x58>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	08db      	lsrs	r3, r3, #3
 800198e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001996:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <HAL_RCC_GetClockConfig+0x5c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0207 	and.w	r2, r3, #7
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr
 80019ac:	40021000 	.word	0x40021000
 80019b0:	40022000 	.word	0x40022000

080019b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019bc:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <RCC_Delay+0x34>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a0a      	ldr	r2, [pc, #40]	; (80019ec <RCC_Delay+0x38>)
 80019c2:	fba2 2303 	umull	r2, r3, r2, r3
 80019c6:	0a5b      	lsrs	r3, r3, #9
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	fb02 f303 	mul.w	r3, r2, r3
 80019ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019d0:	bf00      	nop
  }
  while (Delay --);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	1e5a      	subs	r2, r3, #1
 80019d6:	60fa      	str	r2, [r7, #12]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d1f9      	bne.n	80019d0 <RCC_Delay+0x1c>
}
 80019dc:	bf00      	nop
 80019de:	bf00      	nop
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr
 80019e8:	20000014 	.word	0x20000014
 80019ec:	10624dd3 	.word	0x10624dd3

080019f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e076      	b.n	8001af0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d108      	bne.n	8001a1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001a12:	d009      	beq.n	8001a28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	61da      	str	r2, [r3, #28]
 8001a1a:	e005      	b.n	8001a28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d106      	bne.n	8001a48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7fe ff0c 	bl	8000860 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001a70:	431a      	orrs	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	431a      	orrs	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a1b      	ldr	r3, [r3, #32]
 8001aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aac:	ea42 0103 	orr.w	r1, r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	430a      	orrs	r2, r1
 8001abe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	0c1a      	lsrs	r2, r3, #16
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f002 0204 	and.w	r2, r2, #4
 8001ace:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	69da      	ldr	r2, [r3, #28]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ade:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b088      	sub	sp, #32
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	603b      	str	r3, [r7, #0]
 8001b04:	4613      	mov	r3, r2
 8001b06:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d101      	bne.n	8001b1a <HAL_SPI_Transmit+0x22>
 8001b16:	2302      	movs	r3, #2
 8001b18:	e126      	b.n	8001d68 <HAL_SPI_Transmit+0x270>
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b22:	f7ff f81f 	bl	8000b64 <HAL_GetTick>
 8001b26:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001b28:	88fb      	ldrh	r3, [r7, #6]
 8001b2a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d002      	beq.n	8001b3e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001b3c:	e10b      	b.n	8001d56 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d002      	beq.n	8001b4a <HAL_SPI_Transmit+0x52>
 8001b44:	88fb      	ldrh	r3, [r7, #6]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d102      	bne.n	8001b50 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001b4e:	e102      	b.n	8001d56 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2203      	movs	r2, #3
 8001b54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	68ba      	ldr	r2, [r7, #8]
 8001b62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	88fa      	ldrh	r2, [r7, #6]
 8001b68:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	88fa      	ldrh	r2, [r7, #6]
 8001b6e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2200      	movs	r2, #0
 8001b74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2200      	movs	r2, #0
 8001b86:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b96:	d10f      	bne.n	8001bb8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ba6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bb6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bc2:	2b40      	cmp	r3, #64	; 0x40
 8001bc4:	d007      	beq.n	8001bd6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bd4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001bde:	d14b      	bne.n	8001c78 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d002      	beq.n	8001bee <HAL_SPI_Transmit+0xf6>
 8001be8:	8afb      	ldrh	r3, [r7, #22]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d13e      	bne.n	8001c6c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	881a      	ldrh	r2, [r3, #0]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	1c9a      	adds	r2, r3, #2
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001c12:	e02b      	b.n	8001c6c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d112      	bne.n	8001c48 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	881a      	ldrh	r2, [r3, #0]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	1c9a      	adds	r2, r3, #2
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	86da      	strh	r2, [r3, #54]	; 0x36
 8001c46:	e011      	b.n	8001c6c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c48:	f7fe ff8c 	bl	8000b64 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d803      	bhi.n	8001c60 <HAL_SPI_Transmit+0x168>
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c5e:	d102      	bne.n	8001c66 <HAL_SPI_Transmit+0x16e>
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d102      	bne.n	8001c6c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001c6a:	e074      	b.n	8001d56 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1ce      	bne.n	8001c14 <HAL_SPI_Transmit+0x11c>
 8001c76:	e04c      	b.n	8001d12 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d002      	beq.n	8001c86 <HAL_SPI_Transmit+0x18e>
 8001c80:	8afb      	ldrh	r3, [r7, #22]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d140      	bne.n	8001d08 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	330c      	adds	r3, #12
 8001c90:	7812      	ldrb	r2, [r2, #0]
 8001c92:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c98:	1c5a      	adds	r2, r3, #1
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001cac:	e02c      	b.n	8001d08 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d113      	bne.n	8001ce4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	330c      	adds	r3, #12
 8001cc6:	7812      	ldrb	r2, [r2, #0]
 8001cc8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	1c5a      	adds	r2, r3, #1
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	86da      	strh	r2, [r3, #54]	; 0x36
 8001ce2:	e011      	b.n	8001d08 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ce4:	f7fe ff3e 	bl	8000b64 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d803      	bhi.n	8001cfc <HAL_SPI_Transmit+0x204>
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cfa:	d102      	bne.n	8001d02 <HAL_SPI_Transmit+0x20a>
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d102      	bne.n	8001d08 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001d06:	e026      	b.n	8001d56 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1cd      	bne.n	8001cae <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	6839      	ldr	r1, [r7, #0]
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f000 fbb8 	bl	800248c <SPI_EndRxTxTransaction>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d002      	beq.n	8001d28 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2220      	movs	r2, #32
 8001d26:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d10a      	bne.n	8001d46 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001d30:	2300      	movs	r3, #0
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	613b      	str	r3, [r7, #16]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	613b      	str	r3, [r7, #16]
 8001d44:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d002      	beq.n	8001d54 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	77fb      	strb	r3, [r7, #31]
 8001d52:	e000      	b.n	8001d56 <HAL_SPI_Transmit+0x25e>
  }

error:
 8001d54:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001d66:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3720      	adds	r7, #32
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b088      	sub	sp, #32
 8001d74:	af02      	add	r7, sp, #8
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	603b      	str	r3, [r7, #0]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001d80:	2300      	movs	r3, #0
 8001d82:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d8c:	d112      	bne.n	8001db4 <HAL_SPI_Receive+0x44>
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10e      	bne.n	8001db4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2204      	movs	r2, #4
 8001d9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001d9e:	88fa      	ldrh	r2, [r7, #6]
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	4613      	mov	r3, r2
 8001da6:	68ba      	ldr	r2, [r7, #8]
 8001da8:	68b9      	ldr	r1, [r7, #8]
 8001daa:	68f8      	ldr	r0, [r7, #12]
 8001dac:	f000 f8f1 	bl	8001f92 <HAL_SPI_TransmitReceive>
 8001db0:	4603      	mov	r3, r0
 8001db2:	e0ea      	b.n	8001f8a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d101      	bne.n	8001dc2 <HAL_SPI_Receive+0x52>
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	e0e3      	b.n	8001f8a <HAL_SPI_Receive+0x21a>
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001dca:	f7fe fecb 	bl	8000b64 <HAL_GetTick>
 8001dce:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d002      	beq.n	8001de2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001de0:	e0ca      	b.n	8001f78 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d002      	beq.n	8001dee <HAL_SPI_Receive+0x7e>
 8001de8:	88fb      	ldrh	r3, [r7, #6]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d102      	bne.n	8001df4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001df2:	e0c1      	b.n	8001f78 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2204      	movs	r2, #4
 8001df8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	88fa      	ldrh	r2, [r7, #6]
 8001e0c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	88fa      	ldrh	r2, [r7, #6]
 8001e12:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2200      	movs	r2, #0
 8001e18:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2200      	movs	r2, #0
 8001e24:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e3a:	d10f      	bne.n	8001e5c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e4a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e5a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e66:	2b40      	cmp	r3, #64	; 0x40
 8001e68:	d007      	beq.n	8001e7a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e78:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d162      	bne.n	8001f48 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001e82:	e02e      	b.n	8001ee2 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d115      	bne.n	8001ebe <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f103 020c 	add.w	r2, r3, #12
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e9e:	7812      	ldrb	r2, [r2, #0]
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea8:	1c5a      	adds	r2, r3, #1
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001ebc:	e011      	b.n	8001ee2 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ebe:	f7fe fe51 	bl	8000b64 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d803      	bhi.n	8001ed6 <HAL_SPI_Receive+0x166>
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed4:	d102      	bne.n	8001edc <HAL_SPI_Receive+0x16c>
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d102      	bne.n	8001ee2 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001ee0:	e04a      	b.n	8001f78 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1cb      	bne.n	8001e84 <HAL_SPI_Receive+0x114>
 8001eec:	e031      	b.n	8001f52 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d113      	bne.n	8001f24 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68da      	ldr	r2, [r3, #12]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f06:	b292      	uxth	r2, r2
 8001f08:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f0e:	1c9a      	adds	r2, r3, #2
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001f22:	e011      	b.n	8001f48 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f24:	f7fe fe1e 	bl	8000b64 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d803      	bhi.n	8001f3c <HAL_SPI_Receive+0x1cc>
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f3a:	d102      	bne.n	8001f42 <HAL_SPI_Receive+0x1d2>
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d102      	bne.n	8001f48 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001f46:	e017      	b.n	8001f78 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1cd      	bne.n	8001eee <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	6839      	ldr	r1, [r7, #0]
 8001f56:	68f8      	ldr	r0, [r7, #12]
 8001f58:	f000 fa46 	bl	80023e8 <SPI_EndRxTransaction>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d002      	beq.n	8001f68 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2220      	movs	r2, #32
 8001f66:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d002      	beq.n	8001f76 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	75fb      	strb	r3, [r7, #23]
 8001f74:	e000      	b.n	8001f78 <HAL_SPI_Receive+0x208>
  }

error :
 8001f76:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001f88:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3718      	adds	r7, #24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b08c      	sub	sp, #48	; 0x30
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	60f8      	str	r0, [r7, #12]
 8001f9a:	60b9      	str	r1, [r7, #8]
 8001f9c:	607a      	str	r2, [r7, #4]
 8001f9e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d101      	bne.n	8001fb8 <HAL_SPI_TransmitReceive+0x26>
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	e18a      	b.n	80022ce <HAL_SPI_TransmitReceive+0x33c>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001fc0:	f7fe fdd0 	bl	8000b64 <HAL_GetTick>
 8001fc4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001fd6:	887b      	ldrh	r3, [r7, #2]
 8001fd8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001fda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d00f      	beq.n	8002002 <HAL_SPI_TransmitReceive+0x70>
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fe8:	d107      	bne.n	8001ffa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d103      	bne.n	8001ffa <HAL_SPI_TransmitReceive+0x68>
 8001ff2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	d003      	beq.n	8002002 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002000:	e15b      	b.n	80022ba <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d005      	beq.n	8002014 <HAL_SPI_TransmitReceive+0x82>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d002      	beq.n	8002014 <HAL_SPI_TransmitReceive+0x82>
 800200e:	887b      	ldrh	r3, [r7, #2]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d103      	bne.n	800201c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800201a:	e14e      	b.n	80022ba <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b04      	cmp	r3, #4
 8002026:	d003      	beq.n	8002030 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2205      	movs	r2, #5
 800202c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2200      	movs	r2, #0
 8002034:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	887a      	ldrh	r2, [r7, #2]
 8002040:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	887a      	ldrh	r2, [r7, #2]
 8002046:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	68ba      	ldr	r2, [r7, #8]
 800204c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	887a      	ldrh	r2, [r7, #2]
 8002052:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	887a      	ldrh	r2, [r7, #2]
 8002058:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002070:	2b40      	cmp	r3, #64	; 0x40
 8002072:	d007      	beq.n	8002084 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002082:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800208c:	d178      	bne.n	8002180 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d002      	beq.n	800209c <HAL_SPI_TransmitReceive+0x10a>
 8002096:	8b7b      	ldrh	r3, [r7, #26]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d166      	bne.n	800216a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a0:	881a      	ldrh	r2, [r3, #0]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ac:	1c9a      	adds	r2, r3, #2
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	3b01      	subs	r3, #1
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020c0:	e053      	b.n	800216a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d11b      	bne.n	8002108 <HAL_SPI_TransmitReceive+0x176>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d016      	beq.n	8002108 <HAL_SPI_TransmitReceive+0x176>
 80020da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d113      	bne.n	8002108 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e4:	881a      	ldrh	r2, [r3, #0]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f0:	1c9a      	adds	r2, r3, #2
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	3b01      	subs	r3, #1
 80020fe:	b29a      	uxth	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002104:	2300      	movs	r3, #0
 8002106:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b01      	cmp	r3, #1
 8002114:	d119      	bne.n	800214a <HAL_SPI_TransmitReceive+0x1b8>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800211a:	b29b      	uxth	r3, r3
 800211c:	2b00      	cmp	r3, #0
 800211e:	d014      	beq.n	800214a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68da      	ldr	r2, [r3, #12]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212a:	b292      	uxth	r2, r2
 800212c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002132:	1c9a      	adds	r2, r3, #2
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800213c:	b29b      	uxth	r3, r3
 800213e:	3b01      	subs	r3, #1
 8002140:	b29a      	uxth	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002146:	2301      	movs	r3, #1
 8002148:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800214a:	f7fe fd0b 	bl	8000b64 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002156:	429a      	cmp	r2, r3
 8002158:	d807      	bhi.n	800216a <HAL_SPI_TransmitReceive+0x1d8>
 800215a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800215c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002160:	d003      	beq.n	800216a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002168:	e0a7      	b.n	80022ba <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800216e:	b29b      	uxth	r3, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1a6      	bne.n	80020c2 <HAL_SPI_TransmitReceive+0x130>
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002178:	b29b      	uxth	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1a1      	bne.n	80020c2 <HAL_SPI_TransmitReceive+0x130>
 800217e:	e07c      	b.n	800227a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d002      	beq.n	800218e <HAL_SPI_TransmitReceive+0x1fc>
 8002188:	8b7b      	ldrh	r3, [r7, #26]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d16b      	bne.n	8002266 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	330c      	adds	r3, #12
 8002198:	7812      	ldrb	r2, [r2, #0]
 800219a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a0:	1c5a      	adds	r2, r3, #1
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	3b01      	subs	r3, #1
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021b4:	e057      	b.n	8002266 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d11c      	bne.n	80021fe <HAL_SPI_TransmitReceive+0x26c>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d017      	beq.n	80021fe <HAL_SPI_TransmitReceive+0x26c>
 80021ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d114      	bne.n	80021fe <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	330c      	adds	r3, #12
 80021de:	7812      	ldrb	r2, [r2, #0]
 80021e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	1c5a      	adds	r2, r3, #1
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	3b01      	subs	r3, #1
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80021fa:	2300      	movs	r3, #0
 80021fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b01      	cmp	r3, #1
 800220a:	d119      	bne.n	8002240 <HAL_SPI_TransmitReceive+0x2ae>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002210:	b29b      	uxth	r3, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d014      	beq.n	8002240 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68da      	ldr	r2, [r3, #12]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002220:	b2d2      	uxtb	r2, r2
 8002222:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002228:	1c5a      	adds	r2, r3, #1
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002232:	b29b      	uxth	r3, r3
 8002234:	3b01      	subs	r3, #1
 8002236:	b29a      	uxth	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800223c:	2301      	movs	r3, #1
 800223e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002240:	f7fe fc90 	bl	8000b64 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800224c:	429a      	cmp	r2, r3
 800224e:	d803      	bhi.n	8002258 <HAL_SPI_TransmitReceive+0x2c6>
 8002250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002256:	d102      	bne.n	800225e <HAL_SPI_TransmitReceive+0x2cc>
 8002258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800225a:	2b00      	cmp	r3, #0
 800225c:	d103      	bne.n	8002266 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002264:	e029      	b.n	80022ba <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800226a:	b29b      	uxth	r3, r3
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1a2      	bne.n	80021b6 <HAL_SPI_TransmitReceive+0x224>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002274:	b29b      	uxth	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d19d      	bne.n	80021b6 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800227a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800227c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f000 f904 	bl	800248c <SPI_EndRxTxTransaction>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d006      	beq.n	8002298 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2220      	movs	r2, #32
 8002294:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002296:	e010      	b.n	80022ba <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d10b      	bne.n	80022b8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	617b      	str	r3, [r7, #20]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	617b      	str	r3, [r7, #20]
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	e000      	b.n	80022ba <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80022b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80022ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3730      	adds	r7, #48	; 0x30
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
	...

080022d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b088      	sub	sp, #32
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	603b      	str	r3, [r7, #0]
 80022e4:	4613      	mov	r3, r2
 80022e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80022e8:	f7fe fc3c 	bl	8000b64 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f0:	1a9b      	subs	r3, r3, r2
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	4413      	add	r3, r2
 80022f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80022f8:	f7fe fc34 	bl	8000b64 <HAL_GetTick>
 80022fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80022fe:	4b39      	ldr	r3, [pc, #228]	; (80023e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	015b      	lsls	r3, r3, #5
 8002304:	0d1b      	lsrs	r3, r3, #20
 8002306:	69fa      	ldr	r2, [r7, #28]
 8002308:	fb02 f303 	mul.w	r3, r2, r3
 800230c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800230e:	e054      	b.n	80023ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002316:	d050      	beq.n	80023ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002318:	f7fe fc24 	bl	8000b64 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	69fa      	ldr	r2, [r7, #28]
 8002324:	429a      	cmp	r2, r3
 8002326:	d902      	bls.n	800232e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d13d      	bne.n	80023aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800233c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002346:	d111      	bne.n	800236c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002350:	d004      	beq.n	800235c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800235a:	d107      	bne.n	800236c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800236a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002370:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002374:	d10f      	bne.n	8002396 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002394:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e017      	b.n	80023da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d101      	bne.n	80023b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	4013      	ands	r3, r2
 80023c4:	68ba      	ldr	r2, [r7, #8]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	bf0c      	ite	eq
 80023ca:	2301      	moveq	r3, #1
 80023cc:	2300      	movne	r3, #0
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	461a      	mov	r2, r3
 80023d2:	79fb      	ldrb	r3, [r7, #7]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d19b      	bne.n	8002310 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3720      	adds	r7, #32
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	20000014 	.word	0x20000014

080023e8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af02      	add	r7, sp, #8
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023fc:	d111      	bne.n	8002422 <SPI_EndRxTransaction+0x3a>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002406:	d004      	beq.n	8002412 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002410:	d107      	bne.n	8002422 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002420:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800242a:	d117      	bne.n	800245c <SPI_EndRxTransaction+0x74>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002434:	d112      	bne.n	800245c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	9300      	str	r3, [sp, #0]
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	2200      	movs	r2, #0
 800243e:	2101      	movs	r1, #1
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f7ff ff49 	bl	80022d8 <SPI_WaitFlagStateUntilTimeout>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d01a      	beq.n	8002482 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002450:	f043 0220 	orr.w	r2, r3, #32
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e013      	b.n	8002484 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2200      	movs	r2, #0
 8002464:	2180      	movs	r1, #128	; 0x80
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f7ff ff36 	bl	80022d8 <SPI_WaitFlagStateUntilTimeout>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d007      	beq.n	8002482 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002476:	f043 0220 	orr.w	r2, r3, #32
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e000      	b.n	8002484 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af02      	add	r7, sp, #8
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	2200      	movs	r2, #0
 80024a0:	2180      	movs	r1, #128	; 0x80
 80024a2:	68f8      	ldr	r0, [r7, #12]
 80024a4:	f7ff ff18 	bl	80022d8 <SPI_WaitFlagStateUntilTimeout>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d007      	beq.n	80024be <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b2:	f043 0220 	orr.w	r2, r3, #32
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e000      	b.n	80024c0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e041      	b.n	800255e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d106      	bne.n	80024f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 f839 	bl	8002566 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2202      	movs	r2, #2
 80024f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3304      	adds	r3, #4
 8002504:	4619      	mov	r1, r3
 8002506:	4610      	mov	r0, r2
 8002508:	f000 f9b4 	bl	8002874 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr

08002578 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b01      	cmp	r3, #1
 800258a:	d001      	beq.n	8002590 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e03a      	b.n	8002606 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2202      	movs	r2, #2
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68da      	ldr	r2, [r3, #12]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f042 0201 	orr.w	r2, r2, #1
 80025a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a18      	ldr	r2, [pc, #96]	; (8002610 <HAL_TIM_Base_Start_IT+0x98>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d00e      	beq.n	80025d0 <HAL_TIM_Base_Start_IT+0x58>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ba:	d009      	beq.n	80025d0 <HAL_TIM_Base_Start_IT+0x58>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a14      	ldr	r2, [pc, #80]	; (8002614 <HAL_TIM_Base_Start_IT+0x9c>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d004      	beq.n	80025d0 <HAL_TIM_Base_Start_IT+0x58>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a13      	ldr	r2, [pc, #76]	; (8002618 <HAL_TIM_Base_Start_IT+0xa0>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d111      	bne.n	80025f4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2b06      	cmp	r3, #6
 80025e0:	d010      	beq.n	8002604 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f042 0201 	orr.w	r2, r2, #1
 80025f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025f2:	e007      	b.n	8002604 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f042 0201 	orr.w	r2, r2, #1
 8002602:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3714      	adds	r7, #20
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr
 8002610:	40012c00 	.word	0x40012c00
 8002614:	40000400 	.word	0x40000400
 8002618:	40000800 	.word	0x40000800

0800261c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b02      	cmp	r3, #2
 8002630:	d122      	bne.n	8002678 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b02      	cmp	r3, #2
 800263e:	d11b      	bne.n	8002678 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f06f 0202 	mvn.w	r2, #2
 8002648:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	f003 0303 	and.w	r3, r3, #3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f8ed 	bl	800283e <HAL_TIM_IC_CaptureCallback>
 8002664:	e005      	b.n	8002672 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 f8e0 	bl	800282c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 f8ef 	bl	8002850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	f003 0304 	and.w	r3, r3, #4
 8002682:	2b04      	cmp	r3, #4
 8002684:	d122      	bne.n	80026cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	2b04      	cmp	r3, #4
 8002692:	d11b      	bne.n	80026cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f06f 0204 	mvn.w	r2, #4
 800269c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2202      	movs	r2, #2
 80026a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f8c3 	bl	800283e <HAL_TIM_IC_CaptureCallback>
 80026b8:	e005      	b.n	80026c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 f8b6 	bl	800282c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 f8c5 	bl	8002850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	f003 0308 	and.w	r3, r3, #8
 80026d6:	2b08      	cmp	r3, #8
 80026d8:	d122      	bne.n	8002720 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f003 0308 	and.w	r3, r3, #8
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d11b      	bne.n	8002720 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f06f 0208 	mvn.w	r2, #8
 80026f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2204      	movs	r2, #4
 80026f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f899 	bl	800283e <HAL_TIM_IC_CaptureCallback>
 800270c:	e005      	b.n	800271a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 f88c 	bl	800282c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f000 f89b 	bl	8002850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	f003 0310 	and.w	r3, r3, #16
 800272a:	2b10      	cmp	r3, #16
 800272c:	d122      	bne.n	8002774 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	f003 0310 	and.w	r3, r3, #16
 8002738:	2b10      	cmp	r3, #16
 800273a:	d11b      	bne.n	8002774 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f06f 0210 	mvn.w	r2, #16
 8002744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2208      	movs	r2, #8
 800274a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 f86f 	bl	800283e <HAL_TIM_IC_CaptureCallback>
 8002760:	e005      	b.n	800276e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f862 	bl	800282c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 f871 	bl	8002850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b01      	cmp	r3, #1
 8002780:	d10e      	bne.n	80027a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	2b01      	cmp	r3, #1
 800278e:	d107      	bne.n	80027a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f06f 0201 	mvn.w	r2, #1
 8002798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7fd feac 	bl	80004f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027aa:	2b80      	cmp	r3, #128	; 0x80
 80027ac:	d10e      	bne.n	80027cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b8:	2b80      	cmp	r3, #128	; 0x80
 80027ba:	d107      	bne.n	80027cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 f8bf 	bl	800294a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d6:	2b40      	cmp	r3, #64	; 0x40
 80027d8:	d10e      	bne.n	80027f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e4:	2b40      	cmp	r3, #64	; 0x40
 80027e6:	d107      	bne.n	80027f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 f835 	bl	8002862 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	f003 0320 	and.w	r3, r3, #32
 8002802:	2b20      	cmp	r3, #32
 8002804:	d10e      	bne.n	8002824 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	f003 0320 	and.w	r3, r3, #32
 8002810:	2b20      	cmp	r3, #32
 8002812:	d107      	bne.n	8002824 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f06f 0220 	mvn.w	r2, #32
 800281c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f88a 	bl	8002938 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002824:	bf00      	nop
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	bc80      	pop	{r7}
 800283c:	4770      	bx	lr

0800283e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800283e:	b480      	push	{r7}
 8002840:	b083      	sub	sp, #12
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002846:	bf00      	nop
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	bc80      	pop	{r7}
 800284e:	4770      	bx	lr

08002850 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr

08002862 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr

08002874 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a29      	ldr	r2, [pc, #164]	; (800292c <TIM_Base_SetConfig+0xb8>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d00b      	beq.n	80028a4 <TIM_Base_SetConfig+0x30>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002892:	d007      	beq.n	80028a4 <TIM_Base_SetConfig+0x30>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a26      	ldr	r2, [pc, #152]	; (8002930 <TIM_Base_SetConfig+0xbc>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d003      	beq.n	80028a4 <TIM_Base_SetConfig+0x30>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a25      	ldr	r2, [pc, #148]	; (8002934 <TIM_Base_SetConfig+0xc0>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d108      	bne.n	80028b6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a1c      	ldr	r2, [pc, #112]	; (800292c <TIM_Base_SetConfig+0xb8>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d00b      	beq.n	80028d6 <TIM_Base_SetConfig+0x62>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028c4:	d007      	beq.n	80028d6 <TIM_Base_SetConfig+0x62>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a19      	ldr	r2, [pc, #100]	; (8002930 <TIM_Base_SetConfig+0xbc>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d003      	beq.n	80028d6 <TIM_Base_SetConfig+0x62>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a18      	ldr	r2, [pc, #96]	; (8002934 <TIM_Base_SetConfig+0xc0>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d108      	bne.n	80028e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a07      	ldr	r2, [pc, #28]	; (800292c <TIM_Base_SetConfig+0xb8>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d103      	bne.n	800291c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	691a      	ldr	r2, [r3, #16]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	615a      	str	r2, [r3, #20]
}
 8002922:	bf00      	nop
 8002924:	3714      	adds	r7, #20
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr
 800292c:	40012c00 	.word	0x40012c00
 8002930:	40000400 	.word	0x40000400
 8002934:	40000800 	.word	0x40000800

08002938 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	bc80      	pop	{r7}
 8002948:	4770      	bx	lr

0800294a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr

0800295c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e03f      	b.n	80029ee <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d106      	bne.n	8002988 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7fd ffb6 	bl	80008f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2224      	movs	r2, #36	; 0x24
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68da      	ldr	r2, [r3, #12]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800299e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 f829 	bl	80029f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	691a      	ldr	r2, [r3, #16]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	695a      	ldr	r2, [r3, #20]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68da      	ldr	r2, [r3, #12]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2220      	movs	r2, #32
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2220      	movs	r2, #32
 80029e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
	...

080029f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68da      	ldr	r2, [r3, #12]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689a      	ldr	r2, [r3, #8]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002a32:	f023 030c 	bic.w	r3, r3, #12
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6812      	ldr	r2, [r2, #0]
 8002a3a:	68b9      	ldr	r1, [r7, #8]
 8002a3c:	430b      	orrs	r3, r1
 8002a3e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699a      	ldr	r2, [r3, #24]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a2c      	ldr	r2, [pc, #176]	; (8002b0c <UART_SetConfig+0x114>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d103      	bne.n	8002a68 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a60:	f7fe ff64 	bl	800192c <HAL_RCC_GetPCLK2Freq>
 8002a64:	60f8      	str	r0, [r7, #12]
 8002a66:	e002      	b.n	8002a6e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a68:	f7fe ff4c 	bl	8001904 <HAL_RCC_GetPCLK1Freq>
 8002a6c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	4613      	mov	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	009a      	lsls	r2, r3, #2
 8002a78:	441a      	add	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a84:	4a22      	ldr	r2, [pc, #136]	; (8002b10 <UART_SetConfig+0x118>)
 8002a86:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8a:	095b      	lsrs	r3, r3, #5
 8002a8c:	0119      	lsls	r1, r3, #4
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	4613      	mov	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	009a      	lsls	r2, r3, #2
 8002a98:	441a      	add	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002aa4:	4b1a      	ldr	r3, [pc, #104]	; (8002b10 <UART_SetConfig+0x118>)
 8002aa6:	fba3 0302 	umull	r0, r3, r3, r2
 8002aaa:	095b      	lsrs	r3, r3, #5
 8002aac:	2064      	movs	r0, #100	; 0x64
 8002aae:	fb00 f303 	mul.w	r3, r0, r3
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	011b      	lsls	r3, r3, #4
 8002ab6:	3332      	adds	r3, #50	; 0x32
 8002ab8:	4a15      	ldr	r2, [pc, #84]	; (8002b10 <UART_SetConfig+0x118>)
 8002aba:	fba2 2303 	umull	r2, r3, r2, r3
 8002abe:	095b      	lsrs	r3, r3, #5
 8002ac0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ac4:	4419      	add	r1, r3
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	009a      	lsls	r2, r3, #2
 8002ad0:	441a      	add	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002adc:	4b0c      	ldr	r3, [pc, #48]	; (8002b10 <UART_SetConfig+0x118>)
 8002ade:	fba3 0302 	umull	r0, r3, r3, r2
 8002ae2:	095b      	lsrs	r3, r3, #5
 8002ae4:	2064      	movs	r0, #100	; 0x64
 8002ae6:	fb00 f303 	mul.w	r3, r0, r3
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	011b      	lsls	r3, r3, #4
 8002aee:	3332      	adds	r3, #50	; 0x32
 8002af0:	4a07      	ldr	r2, [pc, #28]	; (8002b10 <UART_SetConfig+0x118>)
 8002af2:	fba2 2303 	umull	r2, r3, r2, r3
 8002af6:	095b      	lsrs	r3, r3, #5
 8002af8:	f003 020f 	and.w	r2, r3, #15
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	440a      	add	r2, r1
 8002b02:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002b04:	bf00      	nop
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40013800 	.word	0x40013800
 8002b10:	51eb851f 	.word	0x51eb851f

08002b14 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002b22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b26:	2b84      	cmp	r3, #132	; 0x84
 8002b28:	d005      	beq.n	8002b36 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002b2a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	4413      	add	r3, r2
 8002b32:	3303      	adds	r3, #3
 8002b34:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002b36:	68fb      	ldr	r3, [r7, #12]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bc80      	pop	{r7}
 8002b40:	4770      	bx	lr

08002b42 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002b46:	f000 fae7 	bl	8003118 <vTaskStartScheduler>
  
  return osOK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b52:	b089      	sub	sp, #36	; 0x24
 8002b54:	af04      	add	r7, sp, #16
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d020      	beq.n	8002ba4 <osThreadCreate+0x54>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d01c      	beq.n	8002ba4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685c      	ldr	r4, [r3, #4]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681d      	ldr	r5, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	691e      	ldr	r6, [r3, #16]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff ffc9 	bl	8002b14 <makeFreeRtosPriority>
 8002b82:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b8c:	9202      	str	r2, [sp, #8]
 8002b8e:	9301      	str	r3, [sp, #4]
 8002b90:	9100      	str	r1, [sp, #0]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	4632      	mov	r2, r6
 8002b96:	4629      	mov	r1, r5
 8002b98:	4620      	mov	r0, r4
 8002b9a:	f000 f8e8 	bl	8002d6e <xTaskCreateStatic>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	e01c      	b.n	8002bde <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685c      	ldr	r4, [r3, #4]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002bb0:	b29e      	uxth	r6, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff ffab 	bl	8002b14 <makeFreeRtosPriority>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	f107 030c 	add.w	r3, r7, #12
 8002bc4:	9301      	str	r3, [sp, #4]
 8002bc6:	9200      	str	r2, [sp, #0]
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	4632      	mov	r2, r6
 8002bcc:	4629      	mov	r1, r5
 8002bce:	4620      	mov	r0, r4
 8002bd0:	f000 f929 	bl	8002e26 <xTaskCreate>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d001      	beq.n	8002bde <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	e000      	b.n	8002be0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002bde:	68fb      	ldr	r3, [r7, #12]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3714      	adds	r7, #20
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002be8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <osDelay+0x16>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	e000      	b.n	8002c00 <osDelay+0x18>
 8002bfe:	2301      	movs	r3, #1
 8002c00:	4618      	mov	r0, r3
 8002c02:	f000 fa55 	bl	80030b0 <vTaskDelay>
  
  return osOK;
 8002c06:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f103 0208 	add.w	r2, r3, #8
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f04f 32ff 	mov.w	r2, #4294967295
 8002c28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f103 0208 	add.w	r2, r3, #8
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f103 0208 	add.w	r2, r3, #8
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bc80      	pop	{r7}
 8002c4c:	4770      	bx	lr

08002c4e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b083      	sub	sp, #12
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bc80      	pop	{r7}
 8002c64:	4770      	bx	lr

08002c66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c66:	b480      	push	{r7}
 8002c68:	b085      	sub	sp, #20
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
 8002c6e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	1c5a      	adds	r2, r3, #1
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	601a      	str	r2, [r3, #0]
}
 8002ca2:	bf00      	nop
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr

08002cac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc2:	d103      	bne.n	8002ccc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	60fb      	str	r3, [r7, #12]
 8002cca:	e00c      	b.n	8002ce6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	3308      	adds	r3, #8
 8002cd0:	60fb      	str	r3, [r7, #12]
 8002cd2:	e002      	b.n	8002cda <vListInsert+0x2e>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68ba      	ldr	r2, [r7, #8]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d2f6      	bcs.n	8002cd4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	1c5a      	adds	r2, r3, #1
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	601a      	str	r2, [r3, #0]
}
 8002d12:	bf00      	nop
 8002d14:	3714      	adds	r7, #20
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr

08002d1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	6892      	ldr	r2, [r2, #8]
 8002d32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6852      	ldr	r2, [r2, #4]
 8002d3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d103      	bne.n	8002d50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	1e5a      	subs	r2, r3, #1
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3714      	adds	r7, #20
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bc80      	pop	{r7}
 8002d6c:	4770      	bx	lr

08002d6e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b08e      	sub	sp, #56	; 0x38
 8002d72:	af04      	add	r7, sp, #16
 8002d74:	60f8      	str	r0, [r7, #12]
 8002d76:	60b9      	str	r1, [r7, #8]
 8002d78:	607a      	str	r2, [r7, #4]
 8002d7a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10a      	bne.n	8002d98 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d86:	f383 8811 	msr	BASEPRI, r3
 8002d8a:	f3bf 8f6f 	isb	sy
 8002d8e:	f3bf 8f4f 	dsb	sy
 8002d92:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002d94:	bf00      	nop
 8002d96:	e7fe      	b.n	8002d96 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10a      	bne.n	8002db4 <xTaskCreateStatic+0x46>
	__asm volatile
 8002d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da2:	f383 8811 	msr	BASEPRI, r3
 8002da6:	f3bf 8f6f 	isb	sy
 8002daa:	f3bf 8f4f 	dsb	sy
 8002dae:	61fb      	str	r3, [r7, #28]
}
 8002db0:	bf00      	nop
 8002db2:	e7fe      	b.n	8002db2 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002db4:	23b4      	movs	r3, #180	; 0xb4
 8002db6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	2bb4      	cmp	r3, #180	; 0xb4
 8002dbc:	d00a      	beq.n	8002dd4 <xTaskCreateStatic+0x66>
	__asm volatile
 8002dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc2:	f383 8811 	msr	BASEPRI, r3
 8002dc6:	f3bf 8f6f 	isb	sy
 8002dca:	f3bf 8f4f 	dsb	sy
 8002dce:	61bb      	str	r3, [r7, #24]
}
 8002dd0:	bf00      	nop
 8002dd2:	e7fe      	b.n	8002dd2 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d01e      	beq.n	8002e18 <xTaskCreateStatic+0xaa>
 8002dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d01b      	beq.n	8002e18 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002de8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dec:	2202      	movs	r2, #2
 8002dee:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002df2:	2300      	movs	r3, #0
 8002df4:	9303      	str	r3, [sp, #12]
 8002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df8:	9302      	str	r3, [sp, #8]
 8002dfa:	f107 0314 	add.w	r3, r7, #20
 8002dfe:	9301      	str	r3, [sp, #4]
 8002e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e02:	9300      	str	r3, [sp, #0]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	68b9      	ldr	r1, [r7, #8]
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 f850 	bl	8002eb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e12:	f000 f8e3 	bl	8002fdc <prvAddNewTaskToReadyList>
 8002e16:	e001      	b.n	8002e1c <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002e1c:	697b      	ldr	r3, [r7, #20]
	}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3728      	adds	r7, #40	; 0x28
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b08c      	sub	sp, #48	; 0x30
 8002e2a:	af04      	add	r7, sp, #16
 8002e2c:	60f8      	str	r0, [r7, #12]
 8002e2e:	60b9      	str	r1, [r7, #8]
 8002e30:	603b      	str	r3, [r7, #0]
 8002e32:	4613      	mov	r3, r2
 8002e34:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e36:	88fb      	ldrh	r3, [r7, #6]
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 fe98 	bl	8003b70 <pvPortMalloc>
 8002e40:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00e      	beq.n	8002e66 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002e48:	20b4      	movs	r0, #180	; 0xb4
 8002e4a:	f000 fe91 	bl	8003b70 <pvPortMalloc>
 8002e4e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	631a      	str	r2, [r3, #48]	; 0x30
 8002e5c:	e005      	b.n	8002e6a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002e5e:	6978      	ldr	r0, [r7, #20]
 8002e60:	f000 ff4a 	bl	8003cf8 <vPortFree>
 8002e64:	e001      	b.n	8002e6a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002e66:	2300      	movs	r3, #0
 8002e68:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d017      	beq.n	8002ea0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e78:	88fa      	ldrh	r2, [r7, #6]
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	9303      	str	r3, [sp, #12]
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	9302      	str	r3, [sp, #8]
 8002e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e84:	9301      	str	r3, [sp, #4]
 8002e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e88:	9300      	str	r3, [sp, #0]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	68b9      	ldr	r1, [r7, #8]
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f000 f80e 	bl	8002eb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e94:	69f8      	ldr	r0, [r7, #28]
 8002e96:	f000 f8a1 	bl	8002fdc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	61bb      	str	r3, [r7, #24]
 8002e9e:	e002      	b.n	8002ea6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002ea6:	69bb      	ldr	r3, [r7, #24]
	}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3720      	adds	r7, #32
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b088      	sub	sp, #32
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
 8002ebc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4413      	add	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	f023 0307 	bic.w	r3, r3, #7
 8002ed6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00a      	beq.n	8002ef8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8002ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee6:	f383 8811 	msr	BASEPRI, r3
 8002eea:	f3bf 8f6f 	isb	sy
 8002eee:	f3bf 8f4f 	dsb	sy
 8002ef2:	617b      	str	r3, [r7, #20]
}
 8002ef4:	bf00      	nop
 8002ef6:	e7fe      	b.n	8002ef6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ef8:	2300      	movs	r3, #0
 8002efa:	61fb      	str	r3, [r7, #28]
 8002efc:	e012      	b.n	8002f24 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002efe:	68ba      	ldr	r2, [r7, #8]
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	4413      	add	r3, r2
 8002f04:	7819      	ldrb	r1, [r3, #0]
 8002f06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	3334      	adds	r3, #52	; 0x34
 8002f0e:	460a      	mov	r2, r1
 8002f10:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	4413      	add	r3, r2
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d006      	beq.n	8002f2c <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	3301      	adds	r3, #1
 8002f22:	61fb      	str	r3, [r7, #28]
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	2b0f      	cmp	r3, #15
 8002f28:	d9e9      	bls.n	8002efe <prvInitialiseNewTask+0x4e>
 8002f2a:	e000      	b.n	8002f2e <prvInitialiseNewTask+0x7e>
		{
			break;
 8002f2c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f38:	2b06      	cmp	r3, #6
 8002f3a:	d901      	bls.n	8002f40 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002f3c:	2306      	movs	r3, #6
 8002f3e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f44:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f4a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4e:	2200      	movs	r2, #0
 8002f50:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f54:	3304      	adds	r3, #4
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff fe79 	bl	8002c4e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5e:	3318      	adds	r3, #24
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff fe74 	bl	8002c4e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f6a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6e:	f1c3 0207 	rsb	r2, r3, #7
 8002f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f74:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f7a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8e:	334c      	adds	r3, #76	; 0x4c
 8002f90:	2260      	movs	r2, #96	; 0x60
 8002f92:	2100      	movs	r1, #0
 8002f94:	4618      	mov	r0, r3
 8002f96:	f000 ffe9 	bl	8003f6c <memset>
 8002f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9c:	4a0c      	ldr	r2, [pc, #48]	; (8002fd0 <prvInitialiseNewTask+0x120>)
 8002f9e:	651a      	str	r2, [r3, #80]	; 0x50
 8002fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa2:	4a0c      	ldr	r2, [pc, #48]	; (8002fd4 <prvInitialiseNewTask+0x124>)
 8002fa4:	655a      	str	r2, [r3, #84]	; 0x54
 8002fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa8:	4a0b      	ldr	r2, [pc, #44]	; (8002fd8 <prvInitialiseNewTask+0x128>)
 8002faa:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	68f9      	ldr	r1, [r7, #12]
 8002fb0:	69b8      	ldr	r0, [r7, #24]
 8002fb2:	f000 fc29 	bl	8003808 <pxPortInitialiseStack>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fba:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d002      	beq.n	8002fc8 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fc6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002fc8:	bf00      	nop
 8002fca:	3720      	adds	r7, #32
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	080041b4 	.word	0x080041b4
 8002fd4:	080041d4 	.word	0x080041d4
 8002fd8:	08004194 	.word	0x08004194

08002fdc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002fe4:	f000 fd02 	bl	80039ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002fe8:	4b2a      	ldr	r3, [pc, #168]	; (8003094 <prvAddNewTaskToReadyList+0xb8>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	3301      	adds	r3, #1
 8002fee:	4a29      	ldr	r2, [pc, #164]	; (8003094 <prvAddNewTaskToReadyList+0xb8>)
 8002ff0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002ff2:	4b29      	ldr	r3, [pc, #164]	; (8003098 <prvAddNewTaskToReadyList+0xbc>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d109      	bne.n	800300e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002ffa:	4a27      	ldr	r2, [pc, #156]	; (8003098 <prvAddNewTaskToReadyList+0xbc>)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003000:	4b24      	ldr	r3, [pc, #144]	; (8003094 <prvAddNewTaskToReadyList+0xb8>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d110      	bne.n	800302a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003008:	f000 fad2 	bl	80035b0 <prvInitialiseTaskLists>
 800300c:	e00d      	b.n	800302a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800300e:	4b23      	ldr	r3, [pc, #140]	; (800309c <prvAddNewTaskToReadyList+0xc0>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d109      	bne.n	800302a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003016:	4b20      	ldr	r3, [pc, #128]	; (8003098 <prvAddNewTaskToReadyList+0xbc>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003020:	429a      	cmp	r2, r3
 8003022:	d802      	bhi.n	800302a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003024:	4a1c      	ldr	r2, [pc, #112]	; (8003098 <prvAddNewTaskToReadyList+0xbc>)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800302a:	4b1d      	ldr	r3, [pc, #116]	; (80030a0 <prvAddNewTaskToReadyList+0xc4>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	3301      	adds	r3, #1
 8003030:	4a1b      	ldr	r2, [pc, #108]	; (80030a0 <prvAddNewTaskToReadyList+0xc4>)
 8003032:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003038:	2201      	movs	r2, #1
 800303a:	409a      	lsls	r2, r3
 800303c:	4b19      	ldr	r3, [pc, #100]	; (80030a4 <prvAddNewTaskToReadyList+0xc8>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4313      	orrs	r3, r2
 8003042:	4a18      	ldr	r2, [pc, #96]	; (80030a4 <prvAddNewTaskToReadyList+0xc8>)
 8003044:	6013      	str	r3, [r2, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800304a:	4613      	mov	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4413      	add	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4a15      	ldr	r2, [pc, #84]	; (80030a8 <prvAddNewTaskToReadyList+0xcc>)
 8003054:	441a      	add	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	3304      	adds	r3, #4
 800305a:	4619      	mov	r1, r3
 800305c:	4610      	mov	r0, r2
 800305e:	f7ff fe02 	bl	8002c66 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003062:	f000 fcf3 	bl	8003a4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003066:	4b0d      	ldr	r3, [pc, #52]	; (800309c <prvAddNewTaskToReadyList+0xc0>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00e      	beq.n	800308c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800306e:	4b0a      	ldr	r3, [pc, #40]	; (8003098 <prvAddNewTaskToReadyList+0xbc>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003078:	429a      	cmp	r2, r3
 800307a:	d207      	bcs.n	800308c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800307c:	4b0b      	ldr	r3, [pc, #44]	; (80030ac <prvAddNewTaskToReadyList+0xd0>)
 800307e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	f3bf 8f4f 	dsb	sy
 8003088:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800308c:	bf00      	nop
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	20000548 	.word	0x20000548
 8003098:	20000448 	.word	0x20000448
 800309c:	20000554 	.word	0x20000554
 80030a0:	20000564 	.word	0x20000564
 80030a4:	20000550 	.word	0x20000550
 80030a8:	2000044c 	.word	0x2000044c
 80030ac:	e000ed04 	.word	0xe000ed04

080030b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80030b8:	2300      	movs	r3, #0
 80030ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d017      	beq.n	80030f2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80030c2:	4b13      	ldr	r3, [pc, #76]	; (8003110 <vTaskDelay+0x60>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00a      	beq.n	80030e0 <vTaskDelay+0x30>
	__asm volatile
 80030ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ce:	f383 8811 	msr	BASEPRI, r3
 80030d2:	f3bf 8f6f 	isb	sy
 80030d6:	f3bf 8f4f 	dsb	sy
 80030da:	60bb      	str	r3, [r7, #8]
}
 80030dc:	bf00      	nop
 80030de:	e7fe      	b.n	80030de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80030e0:	f000 f884 	bl	80031ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80030e4:	2100      	movs	r1, #0
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 fb28 	bl	800373c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80030ec:	f000 f88c 	bl	8003208 <xTaskResumeAll>
 80030f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d107      	bne.n	8003108 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80030f8:	4b06      	ldr	r3, [pc, #24]	; (8003114 <vTaskDelay+0x64>)
 80030fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	f3bf 8f4f 	dsb	sy
 8003104:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003108:	bf00      	nop
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	20000570 	.word	0x20000570
 8003114:	e000ed04 	.word	0xe000ed04

08003118 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b08a      	sub	sp, #40	; 0x28
 800311c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800311e:	2300      	movs	r3, #0
 8003120:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003122:	2300      	movs	r3, #0
 8003124:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003126:	463a      	mov	r2, r7
 8003128:	1d39      	adds	r1, r7, #4
 800312a:	f107 0308 	add.w	r3, r7, #8
 800312e:	4618      	mov	r0, r3
 8003130:	f7fd f80e 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003134:	6839      	ldr	r1, [r7, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68ba      	ldr	r2, [r7, #8]
 800313a:	9202      	str	r2, [sp, #8]
 800313c:	9301      	str	r3, [sp, #4]
 800313e:	2300      	movs	r3, #0
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	2300      	movs	r3, #0
 8003144:	460a      	mov	r2, r1
 8003146:	4921      	ldr	r1, [pc, #132]	; (80031cc <vTaskStartScheduler+0xb4>)
 8003148:	4821      	ldr	r0, [pc, #132]	; (80031d0 <vTaskStartScheduler+0xb8>)
 800314a:	f7ff fe10 	bl	8002d6e <xTaskCreateStatic>
 800314e:	4603      	mov	r3, r0
 8003150:	4a20      	ldr	r2, [pc, #128]	; (80031d4 <vTaskStartScheduler+0xbc>)
 8003152:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003154:	4b1f      	ldr	r3, [pc, #124]	; (80031d4 <vTaskStartScheduler+0xbc>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d002      	beq.n	8003162 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800315c:	2301      	movs	r3, #1
 800315e:	617b      	str	r3, [r7, #20]
 8003160:	e001      	b.n	8003166 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003162:	2300      	movs	r3, #0
 8003164:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d11b      	bne.n	80031a4 <vTaskStartScheduler+0x8c>
	__asm volatile
 800316c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003170:	f383 8811 	msr	BASEPRI, r3
 8003174:	f3bf 8f6f 	isb	sy
 8003178:	f3bf 8f4f 	dsb	sy
 800317c:	613b      	str	r3, [r7, #16]
}
 800317e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003180:	4b15      	ldr	r3, [pc, #84]	; (80031d8 <vTaskStartScheduler+0xc0>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	334c      	adds	r3, #76	; 0x4c
 8003186:	4a15      	ldr	r2, [pc, #84]	; (80031dc <vTaskStartScheduler+0xc4>)
 8003188:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800318a:	4b15      	ldr	r3, [pc, #84]	; (80031e0 <vTaskStartScheduler+0xc8>)
 800318c:	f04f 32ff 	mov.w	r2, #4294967295
 8003190:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003192:	4b14      	ldr	r3, [pc, #80]	; (80031e4 <vTaskStartScheduler+0xcc>)
 8003194:	2201      	movs	r2, #1
 8003196:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003198:	4b13      	ldr	r3, [pc, #76]	; (80031e8 <vTaskStartScheduler+0xd0>)
 800319a:	2200      	movs	r2, #0
 800319c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800319e:	f000 fbb3 	bl	8003908 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80031a2:	e00e      	b.n	80031c2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031aa:	d10a      	bne.n	80031c2 <vTaskStartScheduler+0xaa>
	__asm volatile
 80031ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b0:	f383 8811 	msr	BASEPRI, r3
 80031b4:	f3bf 8f6f 	isb	sy
 80031b8:	f3bf 8f4f 	dsb	sy
 80031bc:	60fb      	str	r3, [r7, #12]
}
 80031be:	bf00      	nop
 80031c0:	e7fe      	b.n	80031c0 <vTaskStartScheduler+0xa8>
}
 80031c2:	bf00      	nop
 80031c4:	3718      	adds	r7, #24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	08004174 	.word	0x08004174
 80031d0:	08003581 	.word	0x08003581
 80031d4:	2000056c 	.word	0x2000056c
 80031d8:	20000448 	.word	0x20000448
 80031dc:	20000024 	.word	0x20000024
 80031e0:	20000568 	.word	0x20000568
 80031e4:	20000554 	.word	0x20000554
 80031e8:	2000054c 	.word	0x2000054c

080031ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80031f0:	4b04      	ldr	r3, [pc, #16]	; (8003204 <vTaskSuspendAll+0x18>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	3301      	adds	r3, #1
 80031f6:	4a03      	ldr	r2, [pc, #12]	; (8003204 <vTaskSuspendAll+0x18>)
 80031f8:	6013      	str	r3, [r2, #0]
}
 80031fa:	bf00      	nop
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bc80      	pop	{r7}
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	20000570 	.word	0x20000570

08003208 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800320e:	2300      	movs	r3, #0
 8003210:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003212:	2300      	movs	r3, #0
 8003214:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003216:	4b41      	ldr	r3, [pc, #260]	; (800331c <xTaskResumeAll+0x114>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10a      	bne.n	8003234 <xTaskResumeAll+0x2c>
	__asm volatile
 800321e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003222:	f383 8811 	msr	BASEPRI, r3
 8003226:	f3bf 8f6f 	isb	sy
 800322a:	f3bf 8f4f 	dsb	sy
 800322e:	603b      	str	r3, [r7, #0]
}
 8003230:	bf00      	nop
 8003232:	e7fe      	b.n	8003232 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003234:	f000 fbda 	bl	80039ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003238:	4b38      	ldr	r3, [pc, #224]	; (800331c <xTaskResumeAll+0x114>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	3b01      	subs	r3, #1
 800323e:	4a37      	ldr	r2, [pc, #220]	; (800331c <xTaskResumeAll+0x114>)
 8003240:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003242:	4b36      	ldr	r3, [pc, #216]	; (800331c <xTaskResumeAll+0x114>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d161      	bne.n	800330e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800324a:	4b35      	ldr	r3, [pc, #212]	; (8003320 <xTaskResumeAll+0x118>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d05d      	beq.n	800330e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003252:	e02e      	b.n	80032b2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003254:	4b33      	ldr	r3, [pc, #204]	; (8003324 <xTaskResumeAll+0x11c>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	3318      	adds	r3, #24
 8003260:	4618      	mov	r0, r3
 8003262:	f7ff fd5b 	bl	8002d1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	3304      	adds	r3, #4
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff fd56 	bl	8002d1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003274:	2201      	movs	r2, #1
 8003276:	409a      	lsls	r2, r3
 8003278:	4b2b      	ldr	r3, [pc, #172]	; (8003328 <xTaskResumeAll+0x120>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4313      	orrs	r3, r2
 800327e:	4a2a      	ldr	r2, [pc, #168]	; (8003328 <xTaskResumeAll+0x120>)
 8003280:	6013      	str	r3, [r2, #0]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003286:	4613      	mov	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4413      	add	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4a27      	ldr	r2, [pc, #156]	; (800332c <xTaskResumeAll+0x124>)
 8003290:	441a      	add	r2, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	3304      	adds	r3, #4
 8003296:	4619      	mov	r1, r3
 8003298:	4610      	mov	r0, r2
 800329a:	f7ff fce4 	bl	8002c66 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032a2:	4b23      	ldr	r3, [pc, #140]	; (8003330 <xTaskResumeAll+0x128>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d302      	bcc.n	80032b2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80032ac:	4b21      	ldr	r3, [pc, #132]	; (8003334 <xTaskResumeAll+0x12c>)
 80032ae:	2201      	movs	r2, #1
 80032b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032b2:	4b1c      	ldr	r3, [pc, #112]	; (8003324 <xTaskResumeAll+0x11c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1cc      	bne.n	8003254 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80032c0:	f000 fa18 	bl	80036f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80032c4:	4b1c      	ldr	r3, [pc, #112]	; (8003338 <xTaskResumeAll+0x130>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d010      	beq.n	80032f2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80032d0:	f000 f836 	bl	8003340 <xTaskIncrementTick>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d002      	beq.n	80032e0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80032da:	4b16      	ldr	r3, [pc, #88]	; (8003334 <xTaskResumeAll+0x12c>)
 80032dc:	2201      	movs	r2, #1
 80032de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3b01      	subs	r3, #1
 80032e4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1f1      	bne.n	80032d0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80032ec:	4b12      	ldr	r3, [pc, #72]	; (8003338 <xTaskResumeAll+0x130>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80032f2:	4b10      	ldr	r3, [pc, #64]	; (8003334 <xTaskResumeAll+0x12c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d009      	beq.n	800330e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80032fa:	2301      	movs	r3, #1
 80032fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80032fe:	4b0f      	ldr	r3, [pc, #60]	; (800333c <xTaskResumeAll+0x134>)
 8003300:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	f3bf 8f4f 	dsb	sy
 800330a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800330e:	f000 fb9d 	bl	8003a4c <vPortExitCritical>

	return xAlreadyYielded;
 8003312:	68bb      	ldr	r3, [r7, #8]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	20000570 	.word	0x20000570
 8003320:	20000548 	.word	0x20000548
 8003324:	20000508 	.word	0x20000508
 8003328:	20000550 	.word	0x20000550
 800332c:	2000044c 	.word	0x2000044c
 8003330:	20000448 	.word	0x20000448
 8003334:	2000055c 	.word	0x2000055c
 8003338:	20000558 	.word	0x20000558
 800333c:	e000ed04 	.word	0xe000ed04

08003340 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003346:	2300      	movs	r3, #0
 8003348:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800334a:	4b51      	ldr	r3, [pc, #324]	; (8003490 <xTaskIncrementTick+0x150>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2b00      	cmp	r3, #0
 8003350:	f040 808d 	bne.w	800346e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003354:	4b4f      	ldr	r3, [pc, #316]	; (8003494 <xTaskIncrementTick+0x154>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	3301      	adds	r3, #1
 800335a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800335c:	4a4d      	ldr	r2, [pc, #308]	; (8003494 <xTaskIncrementTick+0x154>)
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d120      	bne.n	80033aa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003368:	4b4b      	ldr	r3, [pc, #300]	; (8003498 <xTaskIncrementTick+0x158>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00a      	beq.n	8003388 <xTaskIncrementTick+0x48>
	__asm volatile
 8003372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003376:	f383 8811 	msr	BASEPRI, r3
 800337a:	f3bf 8f6f 	isb	sy
 800337e:	f3bf 8f4f 	dsb	sy
 8003382:	603b      	str	r3, [r7, #0]
}
 8003384:	bf00      	nop
 8003386:	e7fe      	b.n	8003386 <xTaskIncrementTick+0x46>
 8003388:	4b43      	ldr	r3, [pc, #268]	; (8003498 <xTaskIncrementTick+0x158>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	60fb      	str	r3, [r7, #12]
 800338e:	4b43      	ldr	r3, [pc, #268]	; (800349c <xTaskIncrementTick+0x15c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a41      	ldr	r2, [pc, #260]	; (8003498 <xTaskIncrementTick+0x158>)
 8003394:	6013      	str	r3, [r2, #0]
 8003396:	4a41      	ldr	r2, [pc, #260]	; (800349c <xTaskIncrementTick+0x15c>)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6013      	str	r3, [r2, #0]
 800339c:	4b40      	ldr	r3, [pc, #256]	; (80034a0 <xTaskIncrementTick+0x160>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	3301      	adds	r3, #1
 80033a2:	4a3f      	ldr	r2, [pc, #252]	; (80034a0 <xTaskIncrementTick+0x160>)
 80033a4:	6013      	str	r3, [r2, #0]
 80033a6:	f000 f9a5 	bl	80036f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80033aa:	4b3e      	ldr	r3, [pc, #248]	; (80034a4 <xTaskIncrementTick+0x164>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d34d      	bcc.n	8003450 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033b4:	4b38      	ldr	r3, [pc, #224]	; (8003498 <xTaskIncrementTick+0x158>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <xTaskIncrementTick+0x82>
 80033be:	2301      	movs	r3, #1
 80033c0:	e000      	b.n	80033c4 <xTaskIncrementTick+0x84>
 80033c2:	2300      	movs	r3, #0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d004      	beq.n	80033d2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033c8:	4b36      	ldr	r3, [pc, #216]	; (80034a4 <xTaskIncrementTick+0x164>)
 80033ca:	f04f 32ff 	mov.w	r2, #4294967295
 80033ce:	601a      	str	r2, [r3, #0]
					break;
 80033d0:	e03e      	b.n	8003450 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80033d2:	4b31      	ldr	r3, [pc, #196]	; (8003498 <xTaskIncrementTick+0x158>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d203      	bcs.n	80033f2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80033ea:	4a2e      	ldr	r2, [pc, #184]	; (80034a4 <xTaskIncrementTick+0x164>)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6013      	str	r3, [r2, #0]
						break;
 80033f0:	e02e      	b.n	8003450 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	3304      	adds	r3, #4
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7ff fc90 	bl	8002d1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003400:	2b00      	cmp	r3, #0
 8003402:	d004      	beq.n	800340e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	3318      	adds	r3, #24
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff fc87 	bl	8002d1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003412:	2201      	movs	r2, #1
 8003414:	409a      	lsls	r2, r3
 8003416:	4b24      	ldr	r3, [pc, #144]	; (80034a8 <xTaskIncrementTick+0x168>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4313      	orrs	r3, r2
 800341c:	4a22      	ldr	r2, [pc, #136]	; (80034a8 <xTaskIncrementTick+0x168>)
 800341e:	6013      	str	r3, [r2, #0]
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003424:	4613      	mov	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4413      	add	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4a1f      	ldr	r2, [pc, #124]	; (80034ac <xTaskIncrementTick+0x16c>)
 800342e:	441a      	add	r2, r3
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	3304      	adds	r3, #4
 8003434:	4619      	mov	r1, r3
 8003436:	4610      	mov	r0, r2
 8003438:	f7ff fc15 	bl	8002c66 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003440:	4b1b      	ldr	r3, [pc, #108]	; (80034b0 <xTaskIncrementTick+0x170>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003446:	429a      	cmp	r2, r3
 8003448:	d3b4      	bcc.n	80033b4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800344a:	2301      	movs	r3, #1
 800344c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800344e:	e7b1      	b.n	80033b4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003450:	4b17      	ldr	r3, [pc, #92]	; (80034b0 <xTaskIncrementTick+0x170>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003456:	4915      	ldr	r1, [pc, #84]	; (80034ac <xTaskIncrementTick+0x16c>)
 8003458:	4613      	mov	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4413      	add	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	440b      	add	r3, r1
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d907      	bls.n	8003478 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003468:	2301      	movs	r3, #1
 800346a:	617b      	str	r3, [r7, #20]
 800346c:	e004      	b.n	8003478 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800346e:	4b11      	ldr	r3, [pc, #68]	; (80034b4 <xTaskIncrementTick+0x174>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	3301      	adds	r3, #1
 8003474:	4a0f      	ldr	r2, [pc, #60]	; (80034b4 <xTaskIncrementTick+0x174>)
 8003476:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003478:	4b0f      	ldr	r3, [pc, #60]	; (80034b8 <xTaskIncrementTick+0x178>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003480:	2301      	movs	r3, #1
 8003482:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003484:	697b      	ldr	r3, [r7, #20]
}
 8003486:	4618      	mov	r0, r3
 8003488:	3718      	adds	r7, #24
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	20000570 	.word	0x20000570
 8003494:	2000054c 	.word	0x2000054c
 8003498:	20000500 	.word	0x20000500
 800349c:	20000504 	.word	0x20000504
 80034a0:	20000560 	.word	0x20000560
 80034a4:	20000568 	.word	0x20000568
 80034a8:	20000550 	.word	0x20000550
 80034ac:	2000044c 	.word	0x2000044c
 80034b0:	20000448 	.word	0x20000448
 80034b4:	20000558 	.word	0x20000558
 80034b8:	2000055c 	.word	0x2000055c

080034bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80034bc:	b480      	push	{r7}
 80034be:	b087      	sub	sp, #28
 80034c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80034c2:	4b29      	ldr	r3, [pc, #164]	; (8003568 <vTaskSwitchContext+0xac>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80034ca:	4b28      	ldr	r3, [pc, #160]	; (800356c <vTaskSwitchContext+0xb0>)
 80034cc:	2201      	movs	r2, #1
 80034ce:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80034d0:	e044      	b.n	800355c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80034d2:	4b26      	ldr	r3, [pc, #152]	; (800356c <vTaskSwitchContext+0xb0>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80034d8:	4b25      	ldr	r3, [pc, #148]	; (8003570 <vTaskSwitchContext+0xb4>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	fab3 f383 	clz	r3, r3
 80034e4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80034e6:	7afb      	ldrb	r3, [r7, #11]
 80034e8:	f1c3 031f 	rsb	r3, r3, #31
 80034ec:	617b      	str	r3, [r7, #20]
 80034ee:	4921      	ldr	r1, [pc, #132]	; (8003574 <vTaskSwitchContext+0xb8>)
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	4613      	mov	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	440b      	add	r3, r1
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10a      	bne.n	8003518 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003506:	f383 8811 	msr	BASEPRI, r3
 800350a:	f3bf 8f6f 	isb	sy
 800350e:	f3bf 8f4f 	dsb	sy
 8003512:	607b      	str	r3, [r7, #4]
}
 8003514:	bf00      	nop
 8003516:	e7fe      	b.n	8003516 <vTaskSwitchContext+0x5a>
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	4613      	mov	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4413      	add	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4a14      	ldr	r2, [pc, #80]	; (8003574 <vTaskSwitchContext+0xb8>)
 8003524:	4413      	add	r3, r2
 8003526:	613b      	str	r3, [r7, #16]
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	685a      	ldr	r2, [r3, #4]
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	605a      	str	r2, [r3, #4]
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	3308      	adds	r3, #8
 800353a:	429a      	cmp	r2, r3
 800353c:	d104      	bne.n	8003548 <vTaskSwitchContext+0x8c>
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	605a      	str	r2, [r3, #4]
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	4a0a      	ldr	r2, [pc, #40]	; (8003578 <vTaskSwitchContext+0xbc>)
 8003550:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003552:	4b09      	ldr	r3, [pc, #36]	; (8003578 <vTaskSwitchContext+0xbc>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	334c      	adds	r3, #76	; 0x4c
 8003558:	4a08      	ldr	r2, [pc, #32]	; (800357c <vTaskSwitchContext+0xc0>)
 800355a:	6013      	str	r3, [r2, #0]
}
 800355c:	bf00      	nop
 800355e:	371c      	adds	r7, #28
 8003560:	46bd      	mov	sp, r7
 8003562:	bc80      	pop	{r7}
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	20000570 	.word	0x20000570
 800356c:	2000055c 	.word	0x2000055c
 8003570:	20000550 	.word	0x20000550
 8003574:	2000044c 	.word	0x2000044c
 8003578:	20000448 	.word	0x20000448
 800357c:	20000024 	.word	0x20000024

08003580 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003588:	f000 f852 	bl	8003630 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800358c:	4b06      	ldr	r3, [pc, #24]	; (80035a8 <prvIdleTask+0x28>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d9f9      	bls.n	8003588 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003594:	4b05      	ldr	r3, [pc, #20]	; (80035ac <prvIdleTask+0x2c>)
 8003596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800359a:	601a      	str	r2, [r3, #0]
 800359c:	f3bf 8f4f 	dsb	sy
 80035a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80035a4:	e7f0      	b.n	8003588 <prvIdleTask+0x8>
 80035a6:	bf00      	nop
 80035a8:	2000044c 	.word	0x2000044c
 80035ac:	e000ed04 	.word	0xe000ed04

080035b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035b6:	2300      	movs	r3, #0
 80035b8:	607b      	str	r3, [r7, #4]
 80035ba:	e00c      	b.n	80035d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	4613      	mov	r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	4413      	add	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4a12      	ldr	r2, [pc, #72]	; (8003610 <prvInitialiseTaskLists+0x60>)
 80035c8:	4413      	add	r3, r2
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7ff fb20 	bl	8002c10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	3301      	adds	r3, #1
 80035d4:	607b      	str	r3, [r7, #4]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b06      	cmp	r3, #6
 80035da:	d9ef      	bls.n	80035bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80035dc:	480d      	ldr	r0, [pc, #52]	; (8003614 <prvInitialiseTaskLists+0x64>)
 80035de:	f7ff fb17 	bl	8002c10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80035e2:	480d      	ldr	r0, [pc, #52]	; (8003618 <prvInitialiseTaskLists+0x68>)
 80035e4:	f7ff fb14 	bl	8002c10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80035e8:	480c      	ldr	r0, [pc, #48]	; (800361c <prvInitialiseTaskLists+0x6c>)
 80035ea:	f7ff fb11 	bl	8002c10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80035ee:	480c      	ldr	r0, [pc, #48]	; (8003620 <prvInitialiseTaskLists+0x70>)
 80035f0:	f7ff fb0e 	bl	8002c10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80035f4:	480b      	ldr	r0, [pc, #44]	; (8003624 <prvInitialiseTaskLists+0x74>)
 80035f6:	f7ff fb0b 	bl	8002c10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80035fa:	4b0b      	ldr	r3, [pc, #44]	; (8003628 <prvInitialiseTaskLists+0x78>)
 80035fc:	4a05      	ldr	r2, [pc, #20]	; (8003614 <prvInitialiseTaskLists+0x64>)
 80035fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003600:	4b0a      	ldr	r3, [pc, #40]	; (800362c <prvInitialiseTaskLists+0x7c>)
 8003602:	4a05      	ldr	r2, [pc, #20]	; (8003618 <prvInitialiseTaskLists+0x68>)
 8003604:	601a      	str	r2, [r3, #0]
}
 8003606:	bf00      	nop
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	2000044c 	.word	0x2000044c
 8003614:	200004d8 	.word	0x200004d8
 8003618:	200004ec 	.word	0x200004ec
 800361c:	20000508 	.word	0x20000508
 8003620:	2000051c 	.word	0x2000051c
 8003624:	20000534 	.word	0x20000534
 8003628:	20000500 	.word	0x20000500
 800362c:	20000504 	.word	0x20000504

08003630 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003636:	e019      	b.n	800366c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003638:	f000 f9d8 	bl	80039ec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800363c:	4b10      	ldr	r3, [pc, #64]	; (8003680 <prvCheckTasksWaitingTermination+0x50>)
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3304      	adds	r3, #4
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff fb67 	bl	8002d1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800364e:	4b0d      	ldr	r3, [pc, #52]	; (8003684 <prvCheckTasksWaitingTermination+0x54>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	3b01      	subs	r3, #1
 8003654:	4a0b      	ldr	r2, [pc, #44]	; (8003684 <prvCheckTasksWaitingTermination+0x54>)
 8003656:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003658:	4b0b      	ldr	r3, [pc, #44]	; (8003688 <prvCheckTasksWaitingTermination+0x58>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	3b01      	subs	r3, #1
 800365e:	4a0a      	ldr	r2, [pc, #40]	; (8003688 <prvCheckTasksWaitingTermination+0x58>)
 8003660:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003662:	f000 f9f3 	bl	8003a4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f810 	bl	800368c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800366c:	4b06      	ldr	r3, [pc, #24]	; (8003688 <prvCheckTasksWaitingTermination+0x58>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1e1      	bne.n	8003638 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003674:	bf00      	nop
 8003676:	bf00      	nop
 8003678:	3708      	adds	r7, #8
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	2000051c 	.word	0x2000051c
 8003684:	20000548 	.word	0x20000548
 8003688:	20000530 	.word	0x20000530

0800368c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	334c      	adds	r3, #76	; 0x4c
 8003698:	4618      	mov	r0, r3
 800369a:	f000 fc7d 	bl	8003f98 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d108      	bne.n	80036ba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ac:	4618      	mov	r0, r3
 80036ae:	f000 fb23 	bl	8003cf8 <vPortFree>
				vPortFree( pxTCB );
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 fb20 	bl	8003cf8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80036b8:	e018      	b.n	80036ec <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d103      	bne.n	80036cc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 fb17 	bl	8003cf8 <vPortFree>
	}
 80036ca:	e00f      	b.n	80036ec <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d00a      	beq.n	80036ec <prvDeleteTCB+0x60>
	__asm volatile
 80036d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036da:	f383 8811 	msr	BASEPRI, r3
 80036de:	f3bf 8f6f 	isb	sy
 80036e2:	f3bf 8f4f 	dsb	sy
 80036e6:	60fb      	str	r3, [r7, #12]
}
 80036e8:	bf00      	nop
 80036ea:	e7fe      	b.n	80036ea <prvDeleteTCB+0x5e>
	}
 80036ec:	bf00      	nop
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036fa:	4b0e      	ldr	r3, [pc, #56]	; (8003734 <prvResetNextTaskUnblockTime+0x40>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <prvResetNextTaskUnblockTime+0x14>
 8003704:	2301      	movs	r3, #1
 8003706:	e000      	b.n	800370a <prvResetNextTaskUnblockTime+0x16>
 8003708:	2300      	movs	r3, #0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d004      	beq.n	8003718 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800370e:	4b0a      	ldr	r3, [pc, #40]	; (8003738 <prvResetNextTaskUnblockTime+0x44>)
 8003710:	f04f 32ff 	mov.w	r2, #4294967295
 8003714:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003716:	e008      	b.n	800372a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003718:	4b06      	ldr	r3, [pc, #24]	; (8003734 <prvResetNextTaskUnblockTime+0x40>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	4a04      	ldr	r2, [pc, #16]	; (8003738 <prvResetNextTaskUnblockTime+0x44>)
 8003728:	6013      	str	r3, [r2, #0]
}
 800372a:	bf00      	nop
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	bc80      	pop	{r7}
 8003732:	4770      	bx	lr
 8003734:	20000500 	.word	0x20000500
 8003738:	20000568 	.word	0x20000568

0800373c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003746:	4b29      	ldr	r3, [pc, #164]	; (80037ec <prvAddCurrentTaskToDelayedList+0xb0>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800374c:	4b28      	ldr	r3, [pc, #160]	; (80037f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	3304      	adds	r3, #4
 8003752:	4618      	mov	r0, r3
 8003754:	f7ff fae2 	bl	8002d1c <uxListRemove>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10b      	bne.n	8003776 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800375e:	4b24      	ldr	r3, [pc, #144]	; (80037f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003764:	2201      	movs	r2, #1
 8003766:	fa02 f303 	lsl.w	r3, r2, r3
 800376a:	43da      	mvns	r2, r3
 800376c:	4b21      	ldr	r3, [pc, #132]	; (80037f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4013      	ands	r3, r2
 8003772:	4a20      	ldr	r2, [pc, #128]	; (80037f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003774:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377c:	d10a      	bne.n	8003794 <prvAddCurrentTaskToDelayedList+0x58>
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d007      	beq.n	8003794 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003784:	4b1a      	ldr	r3, [pc, #104]	; (80037f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	3304      	adds	r3, #4
 800378a:	4619      	mov	r1, r3
 800378c:	481a      	ldr	r0, [pc, #104]	; (80037f8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800378e:	f7ff fa6a 	bl	8002c66 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003792:	e026      	b.n	80037e2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4413      	add	r3, r2
 800379a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800379c:	4b14      	ldr	r3, [pc, #80]	; (80037f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68ba      	ldr	r2, [r7, #8]
 80037a2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80037a4:	68ba      	ldr	r2, [r7, #8]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d209      	bcs.n	80037c0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037ac:	4b13      	ldr	r3, [pc, #76]	; (80037fc <prvAddCurrentTaskToDelayedList+0xc0>)
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	4b0f      	ldr	r3, [pc, #60]	; (80037f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	3304      	adds	r3, #4
 80037b6:	4619      	mov	r1, r3
 80037b8:	4610      	mov	r0, r2
 80037ba:	f7ff fa77 	bl	8002cac <vListInsert>
}
 80037be:	e010      	b.n	80037e2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037c0:	4b0f      	ldr	r3, [pc, #60]	; (8003800 <prvAddCurrentTaskToDelayedList+0xc4>)
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	4b0a      	ldr	r3, [pc, #40]	; (80037f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	3304      	adds	r3, #4
 80037ca:	4619      	mov	r1, r3
 80037cc:	4610      	mov	r0, r2
 80037ce:	f7ff fa6d 	bl	8002cac <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80037d2:	4b0c      	ldr	r3, [pc, #48]	; (8003804 <prvAddCurrentTaskToDelayedList+0xc8>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d202      	bcs.n	80037e2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80037dc:	4a09      	ldr	r2, [pc, #36]	; (8003804 <prvAddCurrentTaskToDelayedList+0xc8>)
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	6013      	str	r3, [r2, #0]
}
 80037e2:	bf00      	nop
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	2000054c 	.word	0x2000054c
 80037f0:	20000448 	.word	0x20000448
 80037f4:	20000550 	.word	0x20000550
 80037f8:	20000534 	.word	0x20000534
 80037fc:	20000504 	.word	0x20000504
 8003800:	20000500 	.word	0x20000500
 8003804:	20000568 	.word	0x20000568

08003808 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	3b04      	subs	r3, #4
 8003818:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003820:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	3b04      	subs	r3, #4
 8003826:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	f023 0201 	bic.w	r2, r3, #1
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	3b04      	subs	r3, #4
 8003836:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003838:	4a08      	ldr	r2, [pc, #32]	; (800385c <pxPortInitialiseStack+0x54>)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	3b14      	subs	r3, #20
 8003842:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	3b20      	subs	r3, #32
 800384e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003850:	68fb      	ldr	r3, [r7, #12]
}
 8003852:	4618      	mov	r0, r3
 8003854:	3714      	adds	r7, #20
 8003856:	46bd      	mov	sp, r7
 8003858:	bc80      	pop	{r7}
 800385a:	4770      	bx	lr
 800385c:	08003861 	.word	0x08003861

08003860 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003866:	2300      	movs	r3, #0
 8003868:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800386a:	4b12      	ldr	r3, [pc, #72]	; (80038b4 <prvTaskExitError+0x54>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003872:	d00a      	beq.n	800388a <prvTaskExitError+0x2a>
	__asm volatile
 8003874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003878:	f383 8811 	msr	BASEPRI, r3
 800387c:	f3bf 8f6f 	isb	sy
 8003880:	f3bf 8f4f 	dsb	sy
 8003884:	60fb      	str	r3, [r7, #12]
}
 8003886:	bf00      	nop
 8003888:	e7fe      	b.n	8003888 <prvTaskExitError+0x28>
	__asm volatile
 800388a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388e:	f383 8811 	msr	BASEPRI, r3
 8003892:	f3bf 8f6f 	isb	sy
 8003896:	f3bf 8f4f 	dsb	sy
 800389a:	60bb      	str	r3, [r7, #8]
}
 800389c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800389e:	bf00      	nop
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d0fc      	beq.n	80038a0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80038a6:	bf00      	nop
 80038a8:	bf00      	nop
 80038aa:	3714      	adds	r7, #20
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bc80      	pop	{r7}
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	20000020 	.word	0x20000020
	...

080038c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80038c0:	4b07      	ldr	r3, [pc, #28]	; (80038e0 <pxCurrentTCBConst2>)
 80038c2:	6819      	ldr	r1, [r3, #0]
 80038c4:	6808      	ldr	r0, [r1, #0]
 80038c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80038ca:	f380 8809 	msr	PSP, r0
 80038ce:	f3bf 8f6f 	isb	sy
 80038d2:	f04f 0000 	mov.w	r0, #0
 80038d6:	f380 8811 	msr	BASEPRI, r0
 80038da:	f04e 0e0d 	orr.w	lr, lr, #13
 80038de:	4770      	bx	lr

080038e0 <pxCurrentTCBConst2>:
 80038e0:	20000448 	.word	0x20000448
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80038e4:	bf00      	nop
 80038e6:	bf00      	nop

080038e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80038e8:	4806      	ldr	r0, [pc, #24]	; (8003904 <prvPortStartFirstTask+0x1c>)
 80038ea:	6800      	ldr	r0, [r0, #0]
 80038ec:	6800      	ldr	r0, [r0, #0]
 80038ee:	f380 8808 	msr	MSP, r0
 80038f2:	b662      	cpsie	i
 80038f4:	b661      	cpsie	f
 80038f6:	f3bf 8f4f 	dsb	sy
 80038fa:	f3bf 8f6f 	isb	sy
 80038fe:	df00      	svc	0
 8003900:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003902:	bf00      	nop
 8003904:	e000ed08 	.word	0xe000ed08

08003908 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800390e:	4b32      	ldr	r3, [pc, #200]	; (80039d8 <xPortStartScheduler+0xd0>)
 8003910:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	b2db      	uxtb	r3, r3
 8003918:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	22ff      	movs	r2, #255	; 0xff
 800391e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	b2db      	uxtb	r3, r3
 8003926:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003928:	78fb      	ldrb	r3, [r7, #3]
 800392a:	b2db      	uxtb	r3, r3
 800392c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003930:	b2da      	uxtb	r2, r3
 8003932:	4b2a      	ldr	r3, [pc, #168]	; (80039dc <xPortStartScheduler+0xd4>)
 8003934:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003936:	4b2a      	ldr	r3, [pc, #168]	; (80039e0 <xPortStartScheduler+0xd8>)
 8003938:	2207      	movs	r2, #7
 800393a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800393c:	e009      	b.n	8003952 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800393e:	4b28      	ldr	r3, [pc, #160]	; (80039e0 <xPortStartScheduler+0xd8>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	3b01      	subs	r3, #1
 8003944:	4a26      	ldr	r2, [pc, #152]	; (80039e0 <xPortStartScheduler+0xd8>)
 8003946:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003948:	78fb      	ldrb	r3, [r7, #3]
 800394a:	b2db      	uxtb	r3, r3
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	b2db      	uxtb	r3, r3
 8003950:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003952:	78fb      	ldrb	r3, [r7, #3]
 8003954:	b2db      	uxtb	r3, r3
 8003956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800395a:	2b80      	cmp	r3, #128	; 0x80
 800395c:	d0ef      	beq.n	800393e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800395e:	4b20      	ldr	r3, [pc, #128]	; (80039e0 <xPortStartScheduler+0xd8>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f1c3 0307 	rsb	r3, r3, #7
 8003966:	2b04      	cmp	r3, #4
 8003968:	d00a      	beq.n	8003980 <xPortStartScheduler+0x78>
	__asm volatile
 800396a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800396e:	f383 8811 	msr	BASEPRI, r3
 8003972:	f3bf 8f6f 	isb	sy
 8003976:	f3bf 8f4f 	dsb	sy
 800397a:	60bb      	str	r3, [r7, #8]
}
 800397c:	bf00      	nop
 800397e:	e7fe      	b.n	800397e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003980:	4b17      	ldr	r3, [pc, #92]	; (80039e0 <xPortStartScheduler+0xd8>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	021b      	lsls	r3, r3, #8
 8003986:	4a16      	ldr	r2, [pc, #88]	; (80039e0 <xPortStartScheduler+0xd8>)
 8003988:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800398a:	4b15      	ldr	r3, [pc, #84]	; (80039e0 <xPortStartScheduler+0xd8>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003992:	4a13      	ldr	r2, [pc, #76]	; (80039e0 <xPortStartScheduler+0xd8>)
 8003994:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	b2da      	uxtb	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800399e:	4b11      	ldr	r3, [pc, #68]	; (80039e4 <xPortStartScheduler+0xdc>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a10      	ldr	r2, [pc, #64]	; (80039e4 <xPortStartScheduler+0xdc>)
 80039a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80039a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80039aa:	4b0e      	ldr	r3, [pc, #56]	; (80039e4 <xPortStartScheduler+0xdc>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a0d      	ldr	r2, [pc, #52]	; (80039e4 <xPortStartScheduler+0xdc>)
 80039b0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80039b4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80039b6:	f000 f8b9 	bl	8003b2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80039ba:	4b0b      	ldr	r3, [pc, #44]	; (80039e8 <xPortStartScheduler+0xe0>)
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80039c0:	f7ff ff92 	bl	80038e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80039c4:	f7ff fd7a 	bl	80034bc <vTaskSwitchContext>
	prvTaskExitError();
 80039c8:	f7ff ff4a 	bl	8003860 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	e000e400 	.word	0xe000e400
 80039dc:	20000574 	.word	0x20000574
 80039e0:	20000578 	.word	0x20000578
 80039e4:	e000ed20 	.word	0xe000ed20
 80039e8:	20000020 	.word	0x20000020

080039ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
	__asm volatile
 80039f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f6:	f383 8811 	msr	BASEPRI, r3
 80039fa:	f3bf 8f6f 	isb	sy
 80039fe:	f3bf 8f4f 	dsb	sy
 8003a02:	607b      	str	r3, [r7, #4]
}
 8003a04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003a06:	4b0f      	ldr	r3, [pc, #60]	; (8003a44 <vPortEnterCritical+0x58>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	4a0d      	ldr	r2, [pc, #52]	; (8003a44 <vPortEnterCritical+0x58>)
 8003a0e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003a10:	4b0c      	ldr	r3, [pc, #48]	; (8003a44 <vPortEnterCritical+0x58>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d10f      	bne.n	8003a38 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003a18:	4b0b      	ldr	r3, [pc, #44]	; (8003a48 <vPortEnterCritical+0x5c>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00a      	beq.n	8003a38 <vPortEnterCritical+0x4c>
	__asm volatile
 8003a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a26:	f383 8811 	msr	BASEPRI, r3
 8003a2a:	f3bf 8f6f 	isb	sy
 8003a2e:	f3bf 8f4f 	dsb	sy
 8003a32:	603b      	str	r3, [r7, #0]
}
 8003a34:	bf00      	nop
 8003a36:	e7fe      	b.n	8003a36 <vPortEnterCritical+0x4a>
	}
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bc80      	pop	{r7}
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	20000020 	.word	0x20000020
 8003a48:	e000ed04 	.word	0xe000ed04

08003a4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003a52:	4b11      	ldr	r3, [pc, #68]	; (8003a98 <vPortExitCritical+0x4c>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10a      	bne.n	8003a70 <vPortExitCritical+0x24>
	__asm volatile
 8003a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a5e:	f383 8811 	msr	BASEPRI, r3
 8003a62:	f3bf 8f6f 	isb	sy
 8003a66:	f3bf 8f4f 	dsb	sy
 8003a6a:	607b      	str	r3, [r7, #4]
}
 8003a6c:	bf00      	nop
 8003a6e:	e7fe      	b.n	8003a6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003a70:	4b09      	ldr	r3, [pc, #36]	; (8003a98 <vPortExitCritical+0x4c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	3b01      	subs	r3, #1
 8003a76:	4a08      	ldr	r2, [pc, #32]	; (8003a98 <vPortExitCritical+0x4c>)
 8003a78:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003a7a:	4b07      	ldr	r3, [pc, #28]	; (8003a98 <vPortExitCritical+0x4c>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d105      	bne.n	8003a8e <vPortExitCritical+0x42>
 8003a82:	2300      	movs	r3, #0
 8003a84:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003a8c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003a8e:	bf00      	nop
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bc80      	pop	{r7}
 8003a96:	4770      	bx	lr
 8003a98:	20000020 	.word	0x20000020
 8003a9c:	00000000 	.word	0x00000000

08003aa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003aa0:	f3ef 8009 	mrs	r0, PSP
 8003aa4:	f3bf 8f6f 	isb	sy
 8003aa8:	4b0d      	ldr	r3, [pc, #52]	; (8003ae0 <pxCurrentTCBConst>)
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003ab0:	6010      	str	r0, [r2, #0]
 8003ab2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003ab6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003aba:	f380 8811 	msr	BASEPRI, r0
 8003abe:	f7ff fcfd 	bl	80034bc <vTaskSwitchContext>
 8003ac2:	f04f 0000 	mov.w	r0, #0
 8003ac6:	f380 8811 	msr	BASEPRI, r0
 8003aca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003ace:	6819      	ldr	r1, [r3, #0]
 8003ad0:	6808      	ldr	r0, [r1, #0]
 8003ad2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003ad6:	f380 8809 	msr	PSP, r0
 8003ada:	f3bf 8f6f 	isb	sy
 8003ade:	4770      	bx	lr

08003ae0 <pxCurrentTCBConst>:
 8003ae0:	20000448 	.word	0x20000448
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003ae4:	bf00      	nop
 8003ae6:	bf00      	nop

08003ae8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
	__asm volatile
 8003aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af2:	f383 8811 	msr	BASEPRI, r3
 8003af6:	f3bf 8f6f 	isb	sy
 8003afa:	f3bf 8f4f 	dsb	sy
 8003afe:	607b      	str	r3, [r7, #4]
}
 8003b00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003b02:	f7ff fc1d 	bl	8003340 <xTaskIncrementTick>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d003      	beq.n	8003b14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003b0c:	4b06      	ldr	r3, [pc, #24]	; (8003b28 <SysTick_Handler+0x40>)
 8003b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b12:	601a      	str	r2, [r3, #0]
 8003b14:	2300      	movs	r3, #0
 8003b16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	f383 8811 	msr	BASEPRI, r3
}
 8003b1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003b20:	bf00      	nop
 8003b22:	3708      	adds	r7, #8
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	e000ed04 	.word	0xe000ed04

08003b2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003b30:	4b0a      	ldr	r3, [pc, #40]	; (8003b5c <vPortSetupTimerInterrupt+0x30>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003b36:	4b0a      	ldr	r3, [pc, #40]	; (8003b60 <vPortSetupTimerInterrupt+0x34>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003b3c:	4b09      	ldr	r3, [pc, #36]	; (8003b64 <vPortSetupTimerInterrupt+0x38>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a09      	ldr	r2, [pc, #36]	; (8003b68 <vPortSetupTimerInterrupt+0x3c>)
 8003b42:	fba2 2303 	umull	r2, r3, r2, r3
 8003b46:	099b      	lsrs	r3, r3, #6
 8003b48:	4a08      	ldr	r2, [pc, #32]	; (8003b6c <vPortSetupTimerInterrupt+0x40>)
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003b4e:	4b03      	ldr	r3, [pc, #12]	; (8003b5c <vPortSetupTimerInterrupt+0x30>)
 8003b50:	2207      	movs	r2, #7
 8003b52:	601a      	str	r2, [r3, #0]
}
 8003b54:	bf00      	nop
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bc80      	pop	{r7}
 8003b5a:	4770      	bx	lr
 8003b5c:	e000e010 	.word	0xe000e010
 8003b60:	e000e018 	.word	0xe000e018
 8003b64:	20000014 	.word	0x20000014
 8003b68:	10624dd3 	.word	0x10624dd3
 8003b6c:	e000e014 	.word	0xe000e014

08003b70 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b08a      	sub	sp, #40	; 0x28
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003b7c:	f7ff fb36 	bl	80031ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003b80:	4b58      	ldr	r3, [pc, #352]	; (8003ce4 <pvPortMalloc+0x174>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d101      	bne.n	8003b8c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003b88:	f000 f910 	bl	8003dac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003b8c:	4b56      	ldr	r3, [pc, #344]	; (8003ce8 <pvPortMalloc+0x178>)
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4013      	ands	r3, r2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f040 808e 	bne.w	8003cb6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d01d      	beq.n	8003bdc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003ba0:	2208      	movs	r2, #8
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f003 0307 	and.w	r3, r3, #7
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d014      	beq.n	8003bdc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f023 0307 	bic.w	r3, r3, #7
 8003bb8:	3308      	adds	r3, #8
 8003bba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f003 0307 	and.w	r3, r3, #7
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00a      	beq.n	8003bdc <pvPortMalloc+0x6c>
	__asm volatile
 8003bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bca:	f383 8811 	msr	BASEPRI, r3
 8003bce:	f3bf 8f6f 	isb	sy
 8003bd2:	f3bf 8f4f 	dsb	sy
 8003bd6:	617b      	str	r3, [r7, #20]
}
 8003bd8:	bf00      	nop
 8003bda:	e7fe      	b.n	8003bda <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d069      	beq.n	8003cb6 <pvPortMalloc+0x146>
 8003be2:	4b42      	ldr	r3, [pc, #264]	; (8003cec <pvPortMalloc+0x17c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d864      	bhi.n	8003cb6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003bec:	4b40      	ldr	r3, [pc, #256]	; (8003cf0 <pvPortMalloc+0x180>)
 8003bee:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003bf0:	4b3f      	ldr	r3, [pc, #252]	; (8003cf0 <pvPortMalloc+0x180>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003bf6:	e004      	b.n	8003c02 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfa:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d903      	bls.n	8003c14 <pvPortMalloc+0xa4>
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1f1      	bne.n	8003bf8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003c14:	4b33      	ldr	r3, [pc, #204]	; (8003ce4 <pvPortMalloc+0x174>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d04b      	beq.n	8003cb6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003c1e:	6a3b      	ldr	r3, [r7, #32]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2208      	movs	r2, #8
 8003c24:	4413      	add	r3, r2
 8003c26:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	6a3b      	ldr	r3, [r7, #32]
 8003c2e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	1ad2      	subs	r2, r2, r3
 8003c38:	2308      	movs	r3, #8
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d91f      	bls.n	8003c80 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4413      	add	r3, r2
 8003c46:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00a      	beq.n	8003c68 <pvPortMalloc+0xf8>
	__asm volatile
 8003c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c56:	f383 8811 	msr	BASEPRI, r3
 8003c5a:	f3bf 8f6f 	isb	sy
 8003c5e:	f3bf 8f4f 	dsb	sy
 8003c62:	613b      	str	r3, [r7, #16]
}
 8003c64:	bf00      	nop
 8003c66:	e7fe      	b.n	8003c66 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	685a      	ldr	r2, [r3, #4]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	1ad2      	subs	r2, r2, r3
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003c7a:	69b8      	ldr	r0, [r7, #24]
 8003c7c:	f000 f8f8 	bl	8003e70 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003c80:	4b1a      	ldr	r3, [pc, #104]	; (8003cec <pvPortMalloc+0x17c>)
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	4a18      	ldr	r2, [pc, #96]	; (8003cec <pvPortMalloc+0x17c>)
 8003c8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003c8e:	4b17      	ldr	r3, [pc, #92]	; (8003cec <pvPortMalloc+0x17c>)
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	4b18      	ldr	r3, [pc, #96]	; (8003cf4 <pvPortMalloc+0x184>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d203      	bcs.n	8003ca2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003c9a:	4b14      	ldr	r3, [pc, #80]	; (8003cec <pvPortMalloc+0x17c>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a15      	ldr	r2, [pc, #84]	; (8003cf4 <pvPortMalloc+0x184>)
 8003ca0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	4b10      	ldr	r3, [pc, #64]	; (8003ce8 <pvPortMalloc+0x178>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	431a      	orrs	r2, r3
 8003cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003cb6:	f7ff faa7 	bl	8003208 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00a      	beq.n	8003cda <pvPortMalloc+0x16a>
	__asm volatile
 8003cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc8:	f383 8811 	msr	BASEPRI, r3
 8003ccc:	f3bf 8f6f 	isb	sy
 8003cd0:	f3bf 8f4f 	dsb	sy
 8003cd4:	60fb      	str	r3, [r7, #12]
}
 8003cd6:	bf00      	nop
 8003cd8:	e7fe      	b.n	8003cd8 <pvPortMalloc+0x168>
	return pvReturn;
 8003cda:	69fb      	ldr	r3, [r7, #28]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3728      	adds	r7, #40	; 0x28
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	20001184 	.word	0x20001184
 8003ce8:	20001190 	.word	0x20001190
 8003cec:	20001188 	.word	0x20001188
 8003cf0:	2000117c 	.word	0x2000117c
 8003cf4:	2000118c 	.word	0x2000118c

08003cf8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b086      	sub	sp, #24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d048      	beq.n	8003d9c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003d0a:	2308      	movs	r3, #8
 8003d0c:	425b      	negs	r3, r3
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	4413      	add	r3, r2
 8003d12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	685a      	ldr	r2, [r3, #4]
 8003d1c:	4b21      	ldr	r3, [pc, #132]	; (8003da4 <vPortFree+0xac>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4013      	ands	r3, r2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10a      	bne.n	8003d3c <vPortFree+0x44>
	__asm volatile
 8003d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d2a:	f383 8811 	msr	BASEPRI, r3
 8003d2e:	f3bf 8f6f 	isb	sy
 8003d32:	f3bf 8f4f 	dsb	sy
 8003d36:	60fb      	str	r3, [r7, #12]
}
 8003d38:	bf00      	nop
 8003d3a:	e7fe      	b.n	8003d3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00a      	beq.n	8003d5a <vPortFree+0x62>
	__asm volatile
 8003d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d48:	f383 8811 	msr	BASEPRI, r3
 8003d4c:	f3bf 8f6f 	isb	sy
 8003d50:	f3bf 8f4f 	dsb	sy
 8003d54:	60bb      	str	r3, [r7, #8]
}
 8003d56:	bf00      	nop
 8003d58:	e7fe      	b.n	8003d58 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	4b11      	ldr	r3, [pc, #68]	; (8003da4 <vPortFree+0xac>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4013      	ands	r3, r2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d019      	beq.n	8003d9c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d115      	bne.n	8003d9c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	4b0b      	ldr	r3, [pc, #44]	; (8003da4 <vPortFree+0xac>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	43db      	mvns	r3, r3
 8003d7a:	401a      	ands	r2, r3
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003d80:	f7ff fa34 	bl	80031ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	685a      	ldr	r2, [r3, #4]
 8003d88:	4b07      	ldr	r3, [pc, #28]	; (8003da8 <vPortFree+0xb0>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	4a06      	ldr	r2, [pc, #24]	; (8003da8 <vPortFree+0xb0>)
 8003d90:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003d92:	6938      	ldr	r0, [r7, #16]
 8003d94:	f000 f86c 	bl	8003e70 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003d98:	f7ff fa36 	bl	8003208 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003d9c:	bf00      	nop
 8003d9e:	3718      	adds	r7, #24
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	20001190 	.word	0x20001190
 8003da8:	20001188 	.word	0x20001188

08003dac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003db2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003db6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003db8:	4b27      	ldr	r3, [pc, #156]	; (8003e58 <prvHeapInit+0xac>)
 8003dba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f003 0307 	and.w	r3, r3, #7
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00c      	beq.n	8003de0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	3307      	adds	r3, #7
 8003dca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f023 0307 	bic.w	r3, r3, #7
 8003dd2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003dd4:	68ba      	ldr	r2, [r7, #8]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	4a1f      	ldr	r2, [pc, #124]	; (8003e58 <prvHeapInit+0xac>)
 8003ddc:	4413      	add	r3, r2
 8003dde:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003de4:	4a1d      	ldr	r2, [pc, #116]	; (8003e5c <prvHeapInit+0xb0>)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003dea:	4b1c      	ldr	r3, [pc, #112]	; (8003e5c <prvHeapInit+0xb0>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	4413      	add	r3, r2
 8003df6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003df8:	2208      	movs	r2, #8
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	1a9b      	subs	r3, r3, r2
 8003dfe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f023 0307 	bic.w	r3, r3, #7
 8003e06:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	4a15      	ldr	r2, [pc, #84]	; (8003e60 <prvHeapInit+0xb4>)
 8003e0c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003e0e:	4b14      	ldr	r3, [pc, #80]	; (8003e60 <prvHeapInit+0xb4>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2200      	movs	r2, #0
 8003e14:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003e16:	4b12      	ldr	r3, [pc, #72]	; (8003e60 <prvHeapInit+0xb4>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	1ad2      	subs	r2, r2, r3
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003e2c:	4b0c      	ldr	r3, [pc, #48]	; (8003e60 <prvHeapInit+0xb4>)
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	4a0a      	ldr	r2, [pc, #40]	; (8003e64 <prvHeapInit+0xb8>)
 8003e3a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	4a09      	ldr	r2, [pc, #36]	; (8003e68 <prvHeapInit+0xbc>)
 8003e42:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003e44:	4b09      	ldr	r3, [pc, #36]	; (8003e6c <prvHeapInit+0xc0>)
 8003e46:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003e4a:	601a      	str	r2, [r3, #0]
}
 8003e4c:	bf00      	nop
 8003e4e:	3714      	adds	r7, #20
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bc80      	pop	{r7}
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	2000057c 	.word	0x2000057c
 8003e5c:	2000117c 	.word	0x2000117c
 8003e60:	20001184 	.word	0x20001184
 8003e64:	2000118c 	.word	0x2000118c
 8003e68:	20001188 	.word	0x20001188
 8003e6c:	20001190 	.word	0x20001190

08003e70 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003e78:	4b27      	ldr	r3, [pc, #156]	; (8003f18 <prvInsertBlockIntoFreeList+0xa8>)
 8003e7a:	60fb      	str	r3, [r7, #12]
 8003e7c:	e002      	b.n	8003e84 <prvInsertBlockIntoFreeList+0x14>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	60fb      	str	r3, [r7, #12]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d8f7      	bhi.n	8003e7e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	4413      	add	r3, r2
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d108      	bne.n	8003eb2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	441a      	add	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	441a      	add	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d118      	bne.n	8003ef8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	4b14      	ldr	r3, [pc, #80]	; (8003f1c <prvInsertBlockIntoFreeList+0xac>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d00d      	beq.n	8003eee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685a      	ldr	r2, [r3, #4]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	441a      	add	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	601a      	str	r2, [r3, #0]
 8003eec:	e008      	b.n	8003f00 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003eee:	4b0b      	ldr	r3, [pc, #44]	; (8003f1c <prvInsertBlockIntoFreeList+0xac>)
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	e003      	b.n	8003f00 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d002      	beq.n	8003f0e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f0e:	bf00      	nop
 8003f10:	3714      	adds	r7, #20
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bc80      	pop	{r7}
 8003f16:	4770      	bx	lr
 8003f18:	2000117c 	.word	0x2000117c
 8003f1c:	20001184 	.word	0x20001184

08003f20 <__libc_init_array>:
 8003f20:	b570      	push	{r4, r5, r6, lr}
 8003f22:	2600      	movs	r6, #0
 8003f24:	4d0c      	ldr	r5, [pc, #48]	; (8003f58 <__libc_init_array+0x38>)
 8003f26:	4c0d      	ldr	r4, [pc, #52]	; (8003f5c <__libc_init_array+0x3c>)
 8003f28:	1b64      	subs	r4, r4, r5
 8003f2a:	10a4      	asrs	r4, r4, #2
 8003f2c:	42a6      	cmp	r6, r4
 8003f2e:	d109      	bne.n	8003f44 <__libc_init_array+0x24>
 8003f30:	f000 f8e2 	bl	80040f8 <_init>
 8003f34:	2600      	movs	r6, #0
 8003f36:	4d0a      	ldr	r5, [pc, #40]	; (8003f60 <__libc_init_array+0x40>)
 8003f38:	4c0a      	ldr	r4, [pc, #40]	; (8003f64 <__libc_init_array+0x44>)
 8003f3a:	1b64      	subs	r4, r4, r5
 8003f3c:	10a4      	asrs	r4, r4, #2
 8003f3e:	42a6      	cmp	r6, r4
 8003f40:	d105      	bne.n	8003f4e <__libc_init_array+0x2e>
 8003f42:	bd70      	pop	{r4, r5, r6, pc}
 8003f44:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f48:	4798      	blx	r3
 8003f4a:	3601      	adds	r6, #1
 8003f4c:	e7ee      	b.n	8003f2c <__libc_init_array+0xc>
 8003f4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f52:	4798      	blx	r3
 8003f54:	3601      	adds	r6, #1
 8003f56:	e7f2      	b.n	8003f3e <__libc_init_array+0x1e>
 8003f58:	080041f4 	.word	0x080041f4
 8003f5c:	080041f4 	.word	0x080041f4
 8003f60:	080041f4 	.word	0x080041f4
 8003f64:	080041f8 	.word	0x080041f8

08003f68 <__retarget_lock_acquire_recursive>:
 8003f68:	4770      	bx	lr

08003f6a <__retarget_lock_release_recursive>:
 8003f6a:	4770      	bx	lr

08003f6c <memset>:
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	4402      	add	r2, r0
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d100      	bne.n	8003f76 <memset+0xa>
 8003f74:	4770      	bx	lr
 8003f76:	f803 1b01 	strb.w	r1, [r3], #1
 8003f7a:	e7f9      	b.n	8003f70 <memset+0x4>

08003f7c <cleanup_glue>:
 8003f7c:	b538      	push	{r3, r4, r5, lr}
 8003f7e:	460c      	mov	r4, r1
 8003f80:	6809      	ldr	r1, [r1, #0]
 8003f82:	4605      	mov	r5, r0
 8003f84:	b109      	cbz	r1, 8003f8a <cleanup_glue+0xe>
 8003f86:	f7ff fff9 	bl	8003f7c <cleanup_glue>
 8003f8a:	4621      	mov	r1, r4
 8003f8c:	4628      	mov	r0, r5
 8003f8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f92:	f000 b869 	b.w	8004068 <_free_r>
	...

08003f98 <_reclaim_reent>:
 8003f98:	4b2c      	ldr	r3, [pc, #176]	; (800404c <_reclaim_reent+0xb4>)
 8003f9a:	b570      	push	{r4, r5, r6, lr}
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4604      	mov	r4, r0
 8003fa0:	4283      	cmp	r3, r0
 8003fa2:	d051      	beq.n	8004048 <_reclaim_reent+0xb0>
 8003fa4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003fa6:	b143      	cbz	r3, 8003fba <_reclaim_reent+0x22>
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d14a      	bne.n	8004044 <_reclaim_reent+0xac>
 8003fae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003fb0:	6819      	ldr	r1, [r3, #0]
 8003fb2:	b111      	cbz	r1, 8003fba <_reclaim_reent+0x22>
 8003fb4:	4620      	mov	r0, r4
 8003fb6:	f000 f857 	bl	8004068 <_free_r>
 8003fba:	6961      	ldr	r1, [r4, #20]
 8003fbc:	b111      	cbz	r1, 8003fc4 <_reclaim_reent+0x2c>
 8003fbe:	4620      	mov	r0, r4
 8003fc0:	f000 f852 	bl	8004068 <_free_r>
 8003fc4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003fc6:	b111      	cbz	r1, 8003fce <_reclaim_reent+0x36>
 8003fc8:	4620      	mov	r0, r4
 8003fca:	f000 f84d 	bl	8004068 <_free_r>
 8003fce:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003fd0:	b111      	cbz	r1, 8003fd8 <_reclaim_reent+0x40>
 8003fd2:	4620      	mov	r0, r4
 8003fd4:	f000 f848 	bl	8004068 <_free_r>
 8003fd8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003fda:	b111      	cbz	r1, 8003fe2 <_reclaim_reent+0x4a>
 8003fdc:	4620      	mov	r0, r4
 8003fde:	f000 f843 	bl	8004068 <_free_r>
 8003fe2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003fe4:	b111      	cbz	r1, 8003fec <_reclaim_reent+0x54>
 8003fe6:	4620      	mov	r0, r4
 8003fe8:	f000 f83e 	bl	8004068 <_free_r>
 8003fec:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003fee:	b111      	cbz	r1, 8003ff6 <_reclaim_reent+0x5e>
 8003ff0:	4620      	mov	r0, r4
 8003ff2:	f000 f839 	bl	8004068 <_free_r>
 8003ff6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003ff8:	b111      	cbz	r1, 8004000 <_reclaim_reent+0x68>
 8003ffa:	4620      	mov	r0, r4
 8003ffc:	f000 f834 	bl	8004068 <_free_r>
 8004000:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004002:	b111      	cbz	r1, 800400a <_reclaim_reent+0x72>
 8004004:	4620      	mov	r0, r4
 8004006:	f000 f82f 	bl	8004068 <_free_r>
 800400a:	69a3      	ldr	r3, [r4, #24]
 800400c:	b1e3      	cbz	r3, 8004048 <_reclaim_reent+0xb0>
 800400e:	4620      	mov	r0, r4
 8004010:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004012:	4798      	blx	r3
 8004014:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004016:	b1b9      	cbz	r1, 8004048 <_reclaim_reent+0xb0>
 8004018:	4620      	mov	r0, r4
 800401a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800401e:	f7ff bfad 	b.w	8003f7c <cleanup_glue>
 8004022:	5949      	ldr	r1, [r1, r5]
 8004024:	b941      	cbnz	r1, 8004038 <_reclaim_reent+0xa0>
 8004026:	3504      	adds	r5, #4
 8004028:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800402a:	2d80      	cmp	r5, #128	; 0x80
 800402c:	68d9      	ldr	r1, [r3, #12]
 800402e:	d1f8      	bne.n	8004022 <_reclaim_reent+0x8a>
 8004030:	4620      	mov	r0, r4
 8004032:	f000 f819 	bl	8004068 <_free_r>
 8004036:	e7ba      	b.n	8003fae <_reclaim_reent+0x16>
 8004038:	680e      	ldr	r6, [r1, #0]
 800403a:	4620      	mov	r0, r4
 800403c:	f000 f814 	bl	8004068 <_free_r>
 8004040:	4631      	mov	r1, r6
 8004042:	e7ef      	b.n	8004024 <_reclaim_reent+0x8c>
 8004044:	2500      	movs	r5, #0
 8004046:	e7ef      	b.n	8004028 <_reclaim_reent+0x90>
 8004048:	bd70      	pop	{r4, r5, r6, pc}
 800404a:	bf00      	nop
 800404c:	20000024 	.word	0x20000024

08004050 <__malloc_lock>:
 8004050:	4801      	ldr	r0, [pc, #4]	; (8004058 <__malloc_lock+0x8>)
 8004052:	f7ff bf89 	b.w	8003f68 <__retarget_lock_acquire_recursive>
 8004056:	bf00      	nop
 8004058:	20001194 	.word	0x20001194

0800405c <__malloc_unlock>:
 800405c:	4801      	ldr	r0, [pc, #4]	; (8004064 <__malloc_unlock+0x8>)
 800405e:	f7ff bf84 	b.w	8003f6a <__retarget_lock_release_recursive>
 8004062:	bf00      	nop
 8004064:	20001194 	.word	0x20001194

08004068 <_free_r>:
 8004068:	b538      	push	{r3, r4, r5, lr}
 800406a:	4605      	mov	r5, r0
 800406c:	2900      	cmp	r1, #0
 800406e:	d040      	beq.n	80040f2 <_free_r+0x8a>
 8004070:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004074:	1f0c      	subs	r4, r1, #4
 8004076:	2b00      	cmp	r3, #0
 8004078:	bfb8      	it	lt
 800407a:	18e4      	addlt	r4, r4, r3
 800407c:	f7ff ffe8 	bl	8004050 <__malloc_lock>
 8004080:	4a1c      	ldr	r2, [pc, #112]	; (80040f4 <_free_r+0x8c>)
 8004082:	6813      	ldr	r3, [r2, #0]
 8004084:	b933      	cbnz	r3, 8004094 <_free_r+0x2c>
 8004086:	6063      	str	r3, [r4, #4]
 8004088:	6014      	str	r4, [r2, #0]
 800408a:	4628      	mov	r0, r5
 800408c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004090:	f7ff bfe4 	b.w	800405c <__malloc_unlock>
 8004094:	42a3      	cmp	r3, r4
 8004096:	d908      	bls.n	80040aa <_free_r+0x42>
 8004098:	6820      	ldr	r0, [r4, #0]
 800409a:	1821      	adds	r1, r4, r0
 800409c:	428b      	cmp	r3, r1
 800409e:	bf01      	itttt	eq
 80040a0:	6819      	ldreq	r1, [r3, #0]
 80040a2:	685b      	ldreq	r3, [r3, #4]
 80040a4:	1809      	addeq	r1, r1, r0
 80040a6:	6021      	streq	r1, [r4, #0]
 80040a8:	e7ed      	b.n	8004086 <_free_r+0x1e>
 80040aa:	461a      	mov	r2, r3
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	b10b      	cbz	r3, 80040b4 <_free_r+0x4c>
 80040b0:	42a3      	cmp	r3, r4
 80040b2:	d9fa      	bls.n	80040aa <_free_r+0x42>
 80040b4:	6811      	ldr	r1, [r2, #0]
 80040b6:	1850      	adds	r0, r2, r1
 80040b8:	42a0      	cmp	r0, r4
 80040ba:	d10b      	bne.n	80040d4 <_free_r+0x6c>
 80040bc:	6820      	ldr	r0, [r4, #0]
 80040be:	4401      	add	r1, r0
 80040c0:	1850      	adds	r0, r2, r1
 80040c2:	4283      	cmp	r3, r0
 80040c4:	6011      	str	r1, [r2, #0]
 80040c6:	d1e0      	bne.n	800408a <_free_r+0x22>
 80040c8:	6818      	ldr	r0, [r3, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	4401      	add	r1, r0
 80040ce:	6011      	str	r1, [r2, #0]
 80040d0:	6053      	str	r3, [r2, #4]
 80040d2:	e7da      	b.n	800408a <_free_r+0x22>
 80040d4:	d902      	bls.n	80040dc <_free_r+0x74>
 80040d6:	230c      	movs	r3, #12
 80040d8:	602b      	str	r3, [r5, #0]
 80040da:	e7d6      	b.n	800408a <_free_r+0x22>
 80040dc:	6820      	ldr	r0, [r4, #0]
 80040de:	1821      	adds	r1, r4, r0
 80040e0:	428b      	cmp	r3, r1
 80040e2:	bf01      	itttt	eq
 80040e4:	6819      	ldreq	r1, [r3, #0]
 80040e6:	685b      	ldreq	r3, [r3, #4]
 80040e8:	1809      	addeq	r1, r1, r0
 80040ea:	6021      	streq	r1, [r4, #0]
 80040ec:	6063      	str	r3, [r4, #4]
 80040ee:	6054      	str	r4, [r2, #4]
 80040f0:	e7cb      	b.n	800408a <_free_r+0x22>
 80040f2:	bd38      	pop	{r3, r4, r5, pc}
 80040f4:	20001198 	.word	0x20001198

080040f8 <_init>:
 80040f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040fa:	bf00      	nop
 80040fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040fe:	bc08      	pop	{r3}
 8004100:	469e      	mov	lr, r3
 8004102:	4770      	bx	lr

08004104 <_fini>:
 8004104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004106:	bf00      	nop
 8004108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800410a:	bc08      	pop	{r3}
 800410c:	469e      	mov	lr, r3
 800410e:	4770      	bx	lr
