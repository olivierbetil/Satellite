
Turbo_Sat_CSB_Fonctionnel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008174  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080082fc  080082fc  000182fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008318  08008318  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08008318  08008318  00018318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008320  08008320  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008320  08008320  00018320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008324  08008324  00018324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08008328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020098  2**0
                  CONTENTS
 10 .bss          000008c8  20000098  20000098  00020098  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000960  20000960  00020098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017af2  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b98  00000000  00000000  00037bba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001340  00000000  00000000  0003b758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011b0  00000000  00000000  0003ca98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023eef  00000000  00000000  0003dc48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019703  00000000  00000000  00061b37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd5a8  00000000  00000000  0007b23a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001487e2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005210  00000000  00000000  00148834  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000098 	.word	0x20000098
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080082e4 	.word	0x080082e4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000009c 	.word	0x2000009c
 80001c4:	080082e4 	.word	0x080082e4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fe8e 	bl	80011f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f814 	bl	8000500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f972 	bl	80007c0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004dc:	f000 f87a 	bl	80005d4 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004e0:	f000 f8a6 	bl	8000630 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e4:	f000 f8d4 	bl	8000690 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e8:	f007 fb0c 	bl	8007b04 <MX_USB_HOST_Init>
  MX_SPI2_Init();
 80004ec:	f000 f906 	bl	80006fc <MX_SPI2_Init>
  MX_USART2_Init();
 80004f0:	f000 f93a 	bl	8000768 <MX_USART2_Init>
  /* USER CODE BEGIN 2 */
   nrf24_Init();
 80004f4:	f000 fb5c 	bl	8000bb0 <nrf24_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  stateMachine();
 80004f8:	f000 fa74 	bl	80009e4 <stateMachine>
 80004fc:	e7fc      	b.n	80004f8 <main+0x2c>
	...

08000500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b094      	sub	sp, #80	; 0x50
 8000504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000506:	f107 0320 	add.w	r3, r7, #32
 800050a:	2230      	movs	r2, #48	; 0x30
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f007 fde2 	bl	80080d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000514:	f107 030c 	add.w	r3, r7, #12
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000524:	2300      	movs	r3, #0
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	4b28      	ldr	r3, [pc, #160]	; (80005cc <SystemClock_Config+0xcc>)
 800052a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052c:	4a27      	ldr	r2, [pc, #156]	; (80005cc <SystemClock_Config+0xcc>)
 800052e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000532:	6413      	str	r3, [r2, #64]	; 0x40
 8000534:	4b25      	ldr	r3, [pc, #148]	; (80005cc <SystemClock_Config+0xcc>)
 8000536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000540:	2300      	movs	r3, #0
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	4b22      	ldr	r3, [pc, #136]	; (80005d0 <SystemClock_Config+0xd0>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a21      	ldr	r2, [pc, #132]	; (80005d0 <SystemClock_Config+0xd0>)
 800054a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800054e:	6013      	str	r3, [r2, #0]
 8000550:	4b1f      	ldr	r3, [pc, #124]	; (80005d0 <SystemClock_Config+0xd0>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000558:	607b      	str	r3, [r7, #4]
 800055a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800055c:	2301      	movs	r3, #1
 800055e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000560:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000564:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000566:	2302      	movs	r3, #2
 8000568:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800056a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800056e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000570:	2308      	movs	r3, #8
 8000572:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000574:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000578:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800057a:	2302      	movs	r3, #2
 800057c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800057e:	2307      	movs	r3, #7
 8000580:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000582:	f107 0320 	add.w	r3, r7, #32
 8000586:	4618      	mov	r0, r3
 8000588:	f003 fb62 	bl	8003c50 <HAL_RCC_OscConfig>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000592:	f000 fa5b 	bl	8000a4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000596:	230f      	movs	r3, #15
 8000598:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059a:	2302      	movs	r3, #2
 800059c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ae:	f107 030c 	add.w	r3, r7, #12
 80005b2:	2105      	movs	r1, #5
 80005b4:	4618      	mov	r0, r3
 80005b6:	f003 fdc3 	bl	8004140 <HAL_RCC_ClockConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005c0:	f000 fa44 	bl	8000a4c <Error_Handler>
  }
}
 80005c4:	bf00      	nop
 80005c6:	3750      	adds	r7, #80	; 0x50
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40023800 	.word	0x40023800
 80005d0:	40007000 	.word	0x40007000

080005d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005d8:	4b12      	ldr	r3, [pc, #72]	; (8000624 <MX_I2C1_Init+0x50>)
 80005da:	4a13      	ldr	r2, [pc, #76]	; (8000628 <MX_I2C1_Init+0x54>)
 80005dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005de:	4b11      	ldr	r3, [pc, #68]	; (8000624 <MX_I2C1_Init+0x50>)
 80005e0:	4a12      	ldr	r2, [pc, #72]	; (800062c <MX_I2C1_Init+0x58>)
 80005e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005e4:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <MX_I2C1_Init+0x50>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <MX_I2C1_Init+0x50>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005f0:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <MX_I2C1_Init+0x50>)
 80005f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005f8:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <MX_I2C1_Init+0x50>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005fe:	4b09      	ldr	r3, [pc, #36]	; (8000624 <MX_I2C1_Init+0x50>)
 8000600:	2200      	movs	r2, #0
 8000602:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000604:	4b07      	ldr	r3, [pc, #28]	; (8000624 <MX_I2C1_Init+0x50>)
 8000606:	2200      	movs	r2, #0
 8000608:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800060a:	4b06      	ldr	r3, [pc, #24]	; (8000624 <MX_I2C1_Init+0x50>)
 800060c:	2200      	movs	r2, #0
 800060e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000610:	4804      	ldr	r0, [pc, #16]	; (8000624 <MX_I2C1_Init+0x50>)
 8000612:	f002 fd39 	bl	8003088 <HAL_I2C_Init>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800061c:	f000 fa16 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}
 8000624:	200000b4 	.word	0x200000b4
 8000628:	40005400 	.word	0x40005400
 800062c:	000186a0 	.word	0x000186a0

08000630 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000634:	4b13      	ldr	r3, [pc, #76]	; (8000684 <MX_I2S3_Init+0x54>)
 8000636:	4a14      	ldr	r2, [pc, #80]	; (8000688 <MX_I2S3_Init+0x58>)
 8000638:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800063a:	4b12      	ldr	r3, [pc, #72]	; (8000684 <MX_I2S3_Init+0x54>)
 800063c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000640:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000642:	4b10      	ldr	r3, [pc, #64]	; (8000684 <MX_I2S3_Init+0x54>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000648:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <MX_I2S3_Init+0x54>)
 800064a:	2200      	movs	r2, #0
 800064c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800064e:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <MX_I2S3_Init+0x54>)
 8000650:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000654:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000656:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <MX_I2S3_Init+0x54>)
 8000658:	4a0c      	ldr	r2, [pc, #48]	; (800068c <MX_I2S3_Init+0x5c>)
 800065a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800065c:	4b09      	ldr	r3, [pc, #36]	; (8000684 <MX_I2S3_Init+0x54>)
 800065e:	2200      	movs	r2, #0
 8000660:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000662:	4b08      	ldr	r3, [pc, #32]	; (8000684 <MX_I2S3_Init+0x54>)
 8000664:	2200      	movs	r2, #0
 8000666:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <MX_I2S3_Init+0x54>)
 800066a:	2200      	movs	r2, #0
 800066c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800066e:	4805      	ldr	r0, [pc, #20]	; (8000684 <MX_I2S3_Init+0x54>)
 8000670:	f002 fe4e 	bl	8003310 <HAL_I2S_Init>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800067a:	f000 f9e7 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000108 	.word	0x20000108
 8000688:	40003c00 	.word	0x40003c00
 800068c:	00017700 	.word	0x00017700

08000690 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000694:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <MX_SPI1_Init+0x64>)
 8000696:	4a18      	ldr	r2, [pc, #96]	; (80006f8 <MX_SPI1_Init+0x68>)
 8000698:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800069a:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <MX_SPI1_Init+0x64>)
 800069c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006a2:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006a8:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006c2:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006dc:	220a      	movs	r2, #10
 80006de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006e2:	f004 f88d 	bl	8004800 <HAL_SPI_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006ec:	f000 f9ae 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000150 	.word	0x20000150
 80006f8:	40013000 	.word	0x40013000

080006fc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000700:	4b17      	ldr	r3, [pc, #92]	; (8000760 <MX_SPI2_Init+0x64>)
 8000702:	4a18      	ldr	r2, [pc, #96]	; (8000764 <MX_SPI2_Init+0x68>)
 8000704:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000706:	4b16      	ldr	r3, [pc, #88]	; (8000760 <MX_SPI2_Init+0x64>)
 8000708:	f44f 7282 	mov.w	r2, #260	; 0x104
 800070c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800070e:	4b14      	ldr	r3, [pc, #80]	; (8000760 <MX_SPI2_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <MX_SPI2_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800071a:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_SPI2_Init+0x64>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000720:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <MX_SPI2_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_SPI2_Init+0x64>)
 8000728:	f44f 7200 	mov.w	r2, #512	; 0x200
 800072c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_SPI2_Init+0x64>)
 8000730:	2218      	movs	r2, #24
 8000732:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000734:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <MX_SPI2_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_SPI2_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000740:	4b07      	ldr	r3, [pc, #28]	; (8000760 <MX_SPI2_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_SPI2_Init+0x64>)
 8000748:	220a      	movs	r2, #10
 800074a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800074c:	4804      	ldr	r0, [pc, #16]	; (8000760 <MX_SPI2_Init+0x64>)
 800074e:	f004 f857 	bl	8004800 <HAL_SPI_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000758:	f000 f978 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	200001a8 	.word	0x200001a8
 8000764:	40003800 	.word	0x40003800

08000768 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <MX_USART2_Init+0x50>)
 800076e:	4a13      	ldr	r2, [pc, #76]	; (80007bc <MX_USART2_Init+0x54>)
 8000770:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 9600;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_USART2_Init+0x50>)
 8000774:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000778:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 800077a:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <MX_USART2_Init+0x50>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 8000780:	4b0d      	ldr	r3, [pc, #52]	; (80007b8 <MX_USART2_Init+0x50>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 8000786:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <MX_USART2_Init+0x50>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 800078c:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <MX_USART2_Init+0x50>)
 800078e:	220c      	movs	r2, #12
 8000790:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_USART2_Init+0x50>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8000798:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <MX_USART2_Init+0x50>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_USART2_Init+0x50>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 80007a4:	4804      	ldr	r0, [pc, #16]	; (80007b8 <MX_USART2_Init+0x50>)
 80007a6:	f004 fdd3 	bl	8005350 <HAL_USART_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 80007b0:	f000 f94c 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000200 	.word	0x20000200
 80007bc:	40004400 	.word	0x40004400

080007c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08c      	sub	sp, #48	; 0x30
 80007c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c6:	f107 031c 	add.w	r3, r7, #28
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
 80007d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	61bb      	str	r3, [r7, #24]
 80007da:	4b7c      	ldr	r3, [pc, #496]	; (80009cc <MX_GPIO_Init+0x20c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a7b      	ldr	r2, [pc, #492]	; (80009cc <MX_GPIO_Init+0x20c>)
 80007e0:	f043 0310 	orr.w	r3, r3, #16
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b79      	ldr	r3, [pc, #484]	; (80009cc <MX_GPIO_Init+0x20c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0310 	and.w	r3, r3, #16
 80007ee:	61bb      	str	r3, [r7, #24]
 80007f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
 80007f6:	4b75      	ldr	r3, [pc, #468]	; (80009cc <MX_GPIO_Init+0x20c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a74      	ldr	r2, [pc, #464]	; (80009cc <MX_GPIO_Init+0x20c>)
 80007fc:	f043 0304 	orr.w	r3, r3, #4
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b72      	ldr	r3, [pc, #456]	; (80009cc <MX_GPIO_Init+0x20c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0304 	and.w	r3, r3, #4
 800080a:	617b      	str	r3, [r7, #20]
 800080c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
 8000812:	4b6e      	ldr	r3, [pc, #440]	; (80009cc <MX_GPIO_Init+0x20c>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a6d      	ldr	r2, [pc, #436]	; (80009cc <MX_GPIO_Init+0x20c>)
 8000818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b6b      	ldr	r3, [pc, #428]	; (80009cc <MX_GPIO_Init+0x20c>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	4b67      	ldr	r3, [pc, #412]	; (80009cc <MX_GPIO_Init+0x20c>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a66      	ldr	r2, [pc, #408]	; (80009cc <MX_GPIO_Init+0x20c>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b64      	ldr	r3, [pc, #400]	; (80009cc <MX_GPIO_Init+0x20c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	4b60      	ldr	r3, [pc, #384]	; (80009cc <MX_GPIO_Init+0x20c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a5f      	ldr	r2, [pc, #380]	; (80009cc <MX_GPIO_Init+0x20c>)
 8000850:	f043 0302 	orr.w	r3, r3, #2
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b5d      	ldr	r3, [pc, #372]	; (80009cc <MX_GPIO_Init+0x20c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0302 	and.w	r3, r3, #2
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	4b59      	ldr	r3, [pc, #356]	; (80009cc <MX_GPIO_Init+0x20c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a58      	ldr	r2, [pc, #352]	; (80009cc <MX_GPIO_Init+0x20c>)
 800086c:	f043 0308 	orr.w	r3, r3, #8
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b56      	ldr	r3, [pc, #344]	; (80009cc <MX_GPIO_Init+0x20c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0308 	and.w	r3, r3, #8
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2108      	movs	r1, #8
 8000882:	4853      	ldr	r0, [pc, #332]	; (80009d0 <MX_GPIO_Init+0x210>)
 8000884:	f000 fff8 	bl	8001878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000888:	2201      	movs	r2, #1
 800088a:	2101      	movs	r1, #1
 800088c:	4851      	ldr	r0, [pc, #324]	; (80009d4 <MX_GPIO_Init+0x214>)
 800088e:	f000 fff3 	bl	8001878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000898:	484f      	ldr	r0, [pc, #316]	; (80009d8 <MX_GPIO_Init+0x218>)
 800089a:	f000 ffed 	bl	8001878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800089e:	2200      	movs	r2, #0
 80008a0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008a4:	484d      	ldr	r0, [pc, #308]	; (80009dc <MX_GPIO_Init+0x21c>)
 80008a6:	f000 ffe7 	bl	8001878 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008aa:	2308      	movs	r3, #8
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ae:	2301      	movs	r3, #1
 80008b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	4843      	ldr	r0, [pc, #268]	; (80009d0 <MX_GPIO_Init+0x210>)
 80008c2:	f000 fe3d 	bl	8001540 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008c6:	2301      	movs	r3, #1
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ca:	2301      	movs	r3, #1
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	483d      	ldr	r0, [pc, #244]	; (80009d4 <MX_GPIO_Init+0x214>)
 80008de:	f000 fe2f 	bl	8001540 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008e2:	2308      	movs	r3, #8
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	2302      	movs	r3, #2
 80008e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008f2:	2305      	movs	r3, #5
 80008f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	4835      	ldr	r0, [pc, #212]	; (80009d4 <MX_GPIO_Init+0x214>)
 80008fe:	f000 fe1f 	bl	8001540 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000902:	2301      	movs	r3, #1
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000906:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800090a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	4619      	mov	r1, r3
 8000916:	4832      	ldr	r0, [pc, #200]	; (80009e0 <MX_GPIO_Init+0x220>)
 8000918:	f000 fe12 	bl	8001540 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800091c:	2304      	movs	r3, #4
 800091e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000920:	2300      	movs	r3, #0
 8000922:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000928:	f107 031c 	add.w	r3, r7, #28
 800092c:	4619      	mov	r1, r3
 800092e:	482a      	ldr	r0, [pc, #168]	; (80009d8 <MX_GPIO_Init+0x218>)
 8000930:	f000 fe06 	bl	8001540 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000934:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093a:	2302      	movs	r3, #2
 800093c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000946:	2305      	movs	r3, #5
 8000948:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	4619      	mov	r1, r3
 8000950:	4821      	ldr	r0, [pc, #132]	; (80009d8 <MX_GPIO_Init+0x218>)
 8000952:	f000 fdf5 	bl	8001540 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000956:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800095a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095c:	2301      	movs	r3, #1
 800095e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	2300      	movs	r3, #0
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4619      	mov	r1, r3
 800096e:	481a      	ldr	r0, [pc, #104]	; (80009d8 <MX_GPIO_Init+0x218>)
 8000970:	f000 fde6 	bl	8001540 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000974:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000978:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097a:	2301      	movs	r3, #1
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	4813      	ldr	r0, [pc, #76]	; (80009dc <MX_GPIO_Init+0x21c>)
 800098e:	f000 fdd7 	bl	8001540 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000992:	2320      	movs	r3, #32
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000996:	2300      	movs	r3, #0
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4619      	mov	r1, r3
 80009a4:	480d      	ldr	r0, [pc, #52]	; (80009dc <MX_GPIO_Init+0x21c>)
 80009a6:	f000 fdcb 	bl	8001540 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009aa:	2302      	movs	r3, #2
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009ae:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f107 031c 	add.w	r3, r7, #28
 80009bc:	4619      	mov	r1, r3
 80009be:	4804      	ldr	r0, [pc, #16]	; (80009d0 <MX_GPIO_Init+0x210>)
 80009c0:	f000 fdbe 	bl	8001540 <HAL_GPIO_Init>

}
 80009c4:	bf00      	nop
 80009c6:	3730      	adds	r7, #48	; 0x30
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40023800 	.word	0x40023800
 80009d0:	40021000 	.word	0x40021000
 80009d4:	40020800 	.word	0x40020800
 80009d8:	40020400 	.word	0x40020400
 80009dc:	40020c00 	.word	0x40020c00
 80009e0:	40020000 	.word	0x40020000

080009e4 <stateMachine>:

/* USER CODE BEGIN 4 */
void stateMachine(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
	switch(SPI_Mode)
 80009e8:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <stateMachine+0x54>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d002      	beq.n	80009f6 <stateMachine+0x12>
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d01b      	beq.n	8000a2c <stateMachine+0x48>

	case TX:
		break;

	default:
		break;
 80009f4:	e01d      	b.n	8000a32 <stateMachine+0x4e>
		if(init==1)
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <stateMachine+0x58>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d106      	bne.n	8000a0c <stateMachine+0x28>
			nrf24_RxMode(Address, 10);
 80009fe:	210a      	movs	r1, #10
 8000a00:	480f      	ldr	r0, [pc, #60]	; (8000a40 <stateMachine+0x5c>)
 8000a02:	f000 f8f9 	bl	8000bf8 <nrf24_RxMode>
			init=0;
 8000a06:	4b0d      	ldr	r3, [pc, #52]	; (8000a3c <stateMachine+0x58>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	701a      	strb	r2, [r3, #0]
		if(isDataAvailable(1))
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	f000 f92b 	bl	8000c68 <isDataAvailable>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d00b      	beq.n	8000a30 <stateMachine+0x4c>
			nrf24_Receive(buffer);
 8000a18:	480a      	ldr	r0, [pc, #40]	; (8000a44 <stateMachine+0x60>)
 8000a1a:	f000 f945 	bl	8000ca8 <nrf24_Receive>
			HAL_USART_Transmit(&husart2, buffer, 32, 100);
 8000a1e:	2364      	movs	r3, #100	; 0x64
 8000a20:	2220      	movs	r2, #32
 8000a22:	4908      	ldr	r1, [pc, #32]	; (8000a44 <stateMachine+0x60>)
 8000a24:	4808      	ldr	r0, [pc, #32]	; (8000a48 <stateMachine+0x64>)
 8000a26:	f004 fcd4 	bl	80053d2 <HAL_USART_Transmit>
		break;
 8000a2a:	e001      	b.n	8000a30 <stateMachine+0x4c>
		break;
 8000a2c:	bf00      	nop
 8000a2e:	e000      	b.n	8000a32 <stateMachine+0x4e>
		break;
 8000a30:	bf00      	nop
	}
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000264 	.word	0x20000264
 8000a3c:	20000005 	.word	0x20000005
 8000a40:	20000000 	.word	0x20000000
 8000a44:	20000244 	.word	0x20000244
 8000a48:	20000200 	.word	0x20000200

08000a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a50:	b672      	cpsid	i
}
 8000a52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <Error_Handler+0x8>
	...

08000a58 <selectCS>:
#define SPI_CS_PIN			GPIO_PIN_12

/**
 * @brief met le pin CS a 0
 */
void selectCS(void){
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI_CS_GPIO, SPI_CS_PIN, GPIO_PIN_RESET);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a62:	4802      	ldr	r0, [pc, #8]	; (8000a6c <selectCS+0x14>)
 8000a64:	f000 ff08 	bl	8001878 <HAL_GPIO_WritePin>
}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40020400 	.word	0x40020400

08000a70 <unselectCS>:

/**
 * @brief met le pin CS a 1
 */
void unselectCS(void){
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI_CS_GPIO, SPI_CS_PIN, GPIO_PIN_SET);
 8000a74:	2201      	movs	r2, #1
 8000a76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a7a:	4802      	ldr	r0, [pc, #8]	; (8000a84 <unselectCS+0x14>)
 8000a7c:	f000 fefc 	bl	8001878 <HAL_GPIO_WritePin>
}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40020400 	.word	0x40020400

08000a88 <enableCE>:

/**
 * @brief met le pin CE a 1
 */
void enableCE(void){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI_CE_GPIO, SPI_CE_PIN, GPIO_PIN_SET);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a92:	4802      	ldr	r0, [pc, #8]	; (8000a9c <enableCE+0x14>)
 8000a94:	f000 fef0 	bl	8001878 <HAL_GPIO_WritePin>
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40020400 	.word	0x40020400

08000aa0 <disableCE>:

/**
 * @brief met le pin CE a 0
 */
void disableCE(void){
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI_CE_GPIO, SPI_CE_PIN, GPIO_PIN_RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aaa:	4802      	ldr	r0, [pc, #8]	; (8000ab4 <disableCE+0x14>)
 8000aac:	f000 fee4 	bl	8001878 <HAL_GPIO_WritePin>
}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40020400 	.word	0x40020400

08000ab8 <nrf24_WriteReg>:
 * @brief Ecrit une valeur dans un registre du module
 *
 * @param Reg : Registre a modifier
 * @param Data : Donnee a ecrire dans le registre
 */
void nrf24_WriteReg(uint8_t Reg, uint8_t Data){
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	460a      	mov	r2, r1
 8000ac2:	71fb      	strb	r3, [r7, #7]
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0]=Reg|1<<5;
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	f043 0320 	orr.w	r3, r3, #32
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	733b      	strb	r3, [r7, #12]
	buf[1]=Data;
 8000ad2:	79bb      	ldrb	r3, [r7, #6]
 8000ad4:	737b      	strb	r3, [r7, #13]

	selectCS();
 8000ad6:	f7ff ffbf 	bl	8000a58 <selectCS>
	HAL_SPI_Transmit(SPI_PROTO, buf, 2, 100);
 8000ada:	f107 010c 	add.w	r1, r7, #12
 8000ade:	2364      	movs	r3, #100	; 0x64
 8000ae0:	2202      	movs	r2, #2
 8000ae2:	4804      	ldr	r0, [pc, #16]	; (8000af4 <nrf24_WriteReg+0x3c>)
 8000ae4:	f003 ff15 	bl	8004912 <HAL_SPI_Transmit>
	unselectCS();
 8000ae8:	f7ff ffc2 	bl	8000a70 <unselectCS>
}
 8000aec:	bf00      	nop
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	200001a8 	.word	0x200001a8

08000af8 <nrf24_WriteRegMulti>:
 *
 * @param Reg : Registre a modifier
 * @param Data : Donnee a ecrire dans le registre
 * @param size : Taille de la donnee (en octets)
 */
void nrf24_WriteRegMulti(uint8_t Reg, uint8_t *Data, uint8_t size){
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	6039      	str	r1, [r7, #0]
 8000b02:	71fb      	strb	r3, [r7, #7]
 8000b04:	4613      	mov	r3, r2
 8000b06:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0]=Reg|1<<5;
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	f043 0320 	orr.w	r3, r3, #32
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	733b      	strb	r3, [r7, #12]
	//buf[1]=Data;

	selectCS();
 8000b12:	f7ff ffa1 	bl	8000a58 <selectCS>
	HAL_SPI_Transmit(SPI_PROTO, &buf[0], 1, 100);
 8000b16:	f107 010c 	add.w	r1, r7, #12
 8000b1a:	2364      	movs	r3, #100	; 0x64
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	4808      	ldr	r0, [pc, #32]	; (8000b40 <nrf24_WriteRegMulti+0x48>)
 8000b20:	f003 fef7 	bl	8004912 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_PROTO, Data, size, 100);
 8000b24:	79bb      	ldrb	r3, [r7, #6]
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	2364      	movs	r3, #100	; 0x64
 8000b2a:	6839      	ldr	r1, [r7, #0]
 8000b2c:	4804      	ldr	r0, [pc, #16]	; (8000b40 <nrf24_WriteRegMulti+0x48>)
 8000b2e:	f003 fef0 	bl	8004912 <HAL_SPI_Transmit>

	unselectCS();
 8000b32:	f7ff ff9d 	bl	8000a70 <unselectCS>
}
 8000b36:	bf00      	nop
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	200001a8 	.word	0x200001a8

08000b44 <nrf24_ReadReg>:
 * @brief lit la valeur d'un registre du module
 *
 * @param Reg : Registre ou l'on veut lire la valeur
 * @return la valeur du registre
 */
uint8_t nrf24_ReadReg(uint8_t Reg){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	73fb      	strb	r3, [r7, #15]
	selectCS();
 8000b52:	f7ff ff81 	bl	8000a58 <selectCS>
	HAL_SPI_Transmit(SPI_PROTO, &Reg, 1, 100);
 8000b56:	1df9      	adds	r1, r7, #7
 8000b58:	2364      	movs	r3, #100	; 0x64
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	4808      	ldr	r0, [pc, #32]	; (8000b80 <nrf24_ReadReg+0x3c>)
 8000b5e:	f003 fed8 	bl	8004912 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_PROTO, &data, 1, 100);
 8000b62:	f107 010f 	add.w	r1, r7, #15
 8000b66:	2364      	movs	r3, #100	; 0x64
 8000b68:	2201      	movs	r2, #1
 8000b6a:	4805      	ldr	r0, [pc, #20]	; (8000b80 <nrf24_ReadReg+0x3c>)
 8000b6c:	f004 f80d 	bl	8004b8a <HAL_SPI_Receive>
	unselectCS();
 8000b70:	f7ff ff7e 	bl	8000a70 <unselectCS>
	return data;
 8000b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3710      	adds	r7, #16
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	200001a8 	.word	0x200001a8

08000b84 <nrfsendcmd>:
/**
 * @brief Envoie une commande au module
 *
 * @param cmd : Commande a envoyer (voir datasheet module pour liste des commandes)
 */
void nrfsendcmd(uint8_t cmd){
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
	selectCS();
 8000b8e:	f7ff ff63 	bl	8000a58 <selectCS>
	HAL_SPI_Transmit(SPI_PROTO, &cmd, 1, 100);
 8000b92:	1df9      	adds	r1, r7, #7
 8000b94:	2364      	movs	r3, #100	; 0x64
 8000b96:	2201      	movs	r2, #1
 8000b98:	4804      	ldr	r0, [pc, #16]	; (8000bac <nrfsendcmd+0x28>)
 8000b9a:	f003 feba 	bl	8004912 <HAL_SPI_Transmit>
	unselectCS();
 8000b9e:	f7ff ff67 	bl	8000a70 <unselectCS>
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	200001a8 	.word	0x200001a8

08000bb0 <nrf24_Init>:

/**
 * @brief Initialise les diff�rents registre du module
 */
void nrf24_Init(void){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
	disableCE();
 8000bb4:	f7ff ff74 	bl	8000aa0 <disableCE>
	nrf24_WriteReg(CONFIG, 0);
 8000bb8:	2100      	movs	r1, #0
 8000bba:	2000      	movs	r0, #0
 8000bbc:	f7ff ff7c 	bl	8000ab8 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0);
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	f7ff ff78 	bl	8000ab8 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0);
 8000bc8:	2100      	movs	r1, #0
 8000bca:	2002      	movs	r0, #2
 8000bcc:	f7ff ff74 	bl	8000ab8 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 8000bd0:	2103      	movs	r1, #3
 8000bd2:	2003      	movs	r0, #3
 8000bd4:	f7ff ff70 	bl	8000ab8 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0);
 8000bd8:	2100      	movs	r1, #0
 8000bda:	2004      	movs	r0, #4
 8000bdc:	f7ff ff6c 	bl	8000ab8 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0);
 8000be0:	2100      	movs	r1, #0
 8000be2:	2005      	movs	r0, #5
 8000be4:	f7ff ff68 	bl	8000ab8 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 8000be8:	210e      	movs	r1, #14
 8000bea:	2006      	movs	r0, #6
 8000bec:	f7ff ff64 	bl	8000ab8 <nrf24_WriteReg>
	enableCE();
 8000bf0:	f7ff ff4a 	bl	8000a88 <enableCE>
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <nrf24_RxMode>:
 * @brief initialise le module en mode Rx (reception de donnees)
 *
 * @param Address : l'adresse du module
 * @param channel : chaine du module (mettre 10)
 */
void nrf24_RxMode(uint8_t *Address, uint8_t channel){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	460b      	mov	r3, r1
 8000c02:	70fb      	strb	r3, [r7, #3]
	disableCE();
 8000c04:	f7ff ff4c 	bl	8000aa0 <disableCE>
	nrf24_WriteReg(RF_CH, channel);
 8000c08:	78fb      	ldrb	r3, [r7, #3]
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	2005      	movs	r0, #5
 8000c0e:	f7ff ff53 	bl	8000ab8 <nrf24_WriteReg>

	uint8_t en_rxaddr=nrf24_ReadReg(EN_RXADDR);
 8000c12:	2002      	movs	r0, #2
 8000c14:	f7ff ff96 	bl	8000b44 <nrf24_ReadReg>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	73fb      	strb	r3, [r7, #15]
	en_rxaddr=en_rxaddr | (1<<1);
 8000c1c:	7bfb      	ldrb	r3, [r7, #15]
 8000c1e:	f043 0302 	orr.w	r3, r3, #2
 8000c22:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg(EN_RXADDR, en_rxaddr);
 8000c24:	7bfb      	ldrb	r3, [r7, #15]
 8000c26:	4619      	mov	r1, r3
 8000c28:	2002      	movs	r0, #2
 8000c2a:	f7ff ff45 	bl	8000ab8 <nrf24_WriteReg>
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);
 8000c2e:	2205      	movs	r2, #5
 8000c30:	6879      	ldr	r1, [r7, #4]
 8000c32:	200b      	movs	r0, #11
 8000c34:	f7ff ff60 	bl	8000af8 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P1, 32); //Set up la taille maximale de la donnee a recuperer
 8000c38:	2120      	movs	r1, #32
 8000c3a:	2012      	movs	r0, #18
 8000c3c:	f7ff ff3c 	bl	8000ab8 <nrf24_WriteReg>

	//power up the device in RX mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 8000c40:	2000      	movs	r0, #0
 8000c42:	f7ff ff7f 	bl	8000b44 <nrf24_ReadReg>
 8000c46:	4603      	mov	r3, r0
 8000c48:	73bb      	strb	r3, [r7, #14]
	config=config | (1<<1) | (1<<0);
 8000c4a:	7bbb      	ldrb	r3, [r7, #14]
 8000c4c:	f043 0303 	orr.w	r3, r3, #3
 8000c50:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg(CONFIG, config);
 8000c52:	7bbb      	ldrb	r3, [r7, #14]
 8000c54:	4619      	mov	r1, r3
 8000c56:	2000      	movs	r0, #0
 8000c58:	f7ff ff2e 	bl	8000ab8 <nrf24_WriteReg>
	enableCE();
 8000c5c:	f7ff ff14 	bl	8000a88 <enableCE>
}
 8000c60:	bf00      	nop
 8000c62:	3710      	adds	r7, #16
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <isDataAvailable>:
 * @brief observe si une donnee est arrivee dans la pipe
 *
 * @param pipenum : pipe a scuter
 * @return true : donnee disponible; false : pas de donnee
 */
uint8_t isDataAvailable(uint8_t pipenum){
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	71fb      	strb	r3, [r7, #7]
	uint8_t status = nrf24_ReadReg(STATUS);
 8000c72:	2007      	movs	r0, #7
 8000c74:	f7ff ff66 	bl	8000b44 <nrf24_ReadReg>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	73fb      	strb	r3, [r7, #15]

	//uint8_t check = nrf24_ReadReg(RF_SETUP);

	if((status&(1<<6)) && (status&(pipenum<<1))){
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
 8000c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d00b      	beq.n	8000c9e <isDataAvailable+0x36>
 8000c86:	7bfa      	ldrb	r2, [r7, #15]
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d005      	beq.n	8000c9e <isDataAvailable+0x36>
		nrf24_WriteReg(STATUS, (1<<6));
 8000c92:	2140      	movs	r1, #64	; 0x40
 8000c94:	2007      	movs	r0, #7
 8000c96:	f7ff ff0f 	bl	8000ab8 <nrf24_WriteReg>
		return 1;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e000      	b.n	8000ca0 <isDataAvailable+0x38>
	}
	else
		return 0;
 8000c9e:	2300      	movs	r3, #0
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3710      	adds	r7, #16
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <nrf24_Receive>:
/**
 * @brief recupere la donnee dans la pipe 1
 *
 * @param data pointeur vers la ou l'on veut stocker la donnee (32 bits)
 */
void nrf24_Receive(uint8_t *data){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	73fb      	strb	r3, [r7, #15]
	selectCS();
 8000cb4:	f7ff fed0 	bl	8000a58 <selectCS>

	cmdtosend=R_RX_PAYLOAD;
 8000cb8:	2361      	movs	r3, #97	; 0x61
 8000cba:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(SPI_PROTO, &cmdtosend, 1, 100);
 8000cbc:	f107 010f 	add.w	r1, r7, #15
 8000cc0:	2364      	movs	r3, #100	; 0x64
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	480b      	ldr	r0, [pc, #44]	; (8000cf4 <nrf24_Receive+0x4c>)
 8000cc6:	f003 fe24 	bl	8004912 <HAL_SPI_Transmit>

	HAL_SPI_Receive(SPI_PROTO, data, 32, 5);
 8000cca:	2305      	movs	r3, #5
 8000ccc:	2220      	movs	r2, #32
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	4808      	ldr	r0, [pc, #32]	; (8000cf4 <nrf24_Receive+0x4c>)
 8000cd2:	f003 ff5a 	bl	8004b8a <HAL_SPI_Receive>

	unselectCS();
 8000cd6:	f7ff fecb 	bl	8000a70 <unselectCS>

	HAL_Delay(1);
 8000cda:	2001      	movs	r0, #1
 8000cdc:	f000 fafa 	bl	80012d4 <HAL_Delay>

	cmdtosend=FLUSH_RX;
 8000ce0:	23e2      	movs	r3, #226	; 0xe2
 8000ce2:	73fb      	strb	r3, [r7, #15]
	nrfsendcmd(cmdtosend);
 8000ce4:	7bfb      	ldrb	r3, [r7, #15]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff ff4c 	bl	8000b84 <nrfsendcmd>
}
 8000cec:	bf00      	nop
 8000cee:	3710      	adds	r7, #16
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	200001a8 	.word	0x200001a8

08000cf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	607b      	str	r3, [r7, #4]
 8000d02:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <HAL_MspInit+0x4c>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d06:	4a0f      	ldr	r2, [pc, #60]	; (8000d44 <HAL_MspInit+0x4c>)
 8000d08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d0e:	4b0d      	ldr	r3, [pc, #52]	; (8000d44 <HAL_MspInit+0x4c>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	603b      	str	r3, [r7, #0]
 8000d1e:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <HAL_MspInit+0x4c>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d22:	4a08      	ldr	r2, [pc, #32]	; (8000d44 <HAL_MspInit+0x4c>)
 8000d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d28:	6413      	str	r3, [r2, #64]	; 0x40
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <HAL_MspInit+0x4c>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d32:	603b      	str	r3, [r7, #0]
 8000d34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d36:	2007      	movs	r0, #7
 8000d38:	f000 fbc0 	bl	80014bc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40023800 	.word	0x40023800

08000d48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08a      	sub	sp, #40	; 0x28
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a19      	ldr	r2, [pc, #100]	; (8000dcc <HAL_I2C_MspInit+0x84>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d12c      	bne.n	8000dc4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	613b      	str	r3, [r7, #16]
 8000d6e:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <HAL_I2C_MspInit+0x88>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a17      	ldr	r2, [pc, #92]	; (8000dd0 <HAL_I2C_MspInit+0x88>)
 8000d74:	f043 0302 	orr.w	r3, r3, #2
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <HAL_I2C_MspInit+0x88>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0302 	and.w	r3, r3, #2
 8000d82:	613b      	str	r3, [r7, #16]
 8000d84:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d86:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d8c:	2312      	movs	r3, #18
 8000d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d90:	2301      	movs	r3, #1
 8000d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d94:	2300      	movs	r3, #0
 8000d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d98:	2304      	movs	r3, #4
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	4619      	mov	r1, r3
 8000da2:	480c      	ldr	r0, [pc, #48]	; (8000dd4 <HAL_I2C_MspInit+0x8c>)
 8000da4:	f000 fbcc 	bl	8001540 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000da8:	2300      	movs	r3, #0
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <HAL_I2C_MspInit+0x88>)
 8000dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db0:	4a07      	ldr	r2, [pc, #28]	; (8000dd0 <HAL_I2C_MspInit+0x88>)
 8000db2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000db6:	6413      	str	r3, [r2, #64]	; 0x40
 8000db8:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <HAL_I2C_MspInit+0x88>)
 8000dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000dc4:	bf00      	nop
 8000dc6:	3728      	adds	r7, #40	; 0x28
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40005400 	.word	0x40005400
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40020400 	.word	0x40020400

08000dd8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08e      	sub	sp, #56	; 0x38
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a31      	ldr	r2, [pc, #196]	; (8000ec8 <HAL_I2S_MspInit+0xf0>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d15a      	bne.n	8000ebe <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000e0c:	23c0      	movs	r3, #192	; 0xc0
 8000e0e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000e10:	2302      	movs	r3, #2
 8000e12:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f003 fbb1 	bl	8004580 <HAL_RCCEx_PeriphCLKConfig>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000e24:	f7ff fe12 	bl	8000a4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e28:	2300      	movs	r3, #0
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	4b27      	ldr	r3, [pc, #156]	; (8000ecc <HAL_I2S_MspInit+0xf4>)
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e30:	4a26      	ldr	r2, [pc, #152]	; (8000ecc <HAL_I2S_MspInit+0xf4>)
 8000e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e36:	6413      	str	r3, [r2, #64]	; 0x40
 8000e38:	4b24      	ldr	r3, [pc, #144]	; (8000ecc <HAL_I2S_MspInit+0xf4>)
 8000e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e40:	613b      	str	r3, [r7, #16]
 8000e42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e44:	2300      	movs	r3, #0
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	4b20      	ldr	r3, [pc, #128]	; (8000ecc <HAL_I2S_MspInit+0xf4>)
 8000e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4c:	4a1f      	ldr	r2, [pc, #124]	; (8000ecc <HAL_I2S_MspInit+0xf4>)
 8000e4e:	f043 0301 	orr.w	r3, r3, #1
 8000e52:	6313      	str	r3, [r2, #48]	; 0x30
 8000e54:	4b1d      	ldr	r3, [pc, #116]	; (8000ecc <HAL_I2S_MspInit+0xf4>)
 8000e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e58:	f003 0301 	and.w	r3, r3, #1
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e60:	2300      	movs	r3, #0
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	4b19      	ldr	r3, [pc, #100]	; (8000ecc <HAL_I2S_MspInit+0xf4>)
 8000e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e68:	4a18      	ldr	r2, [pc, #96]	; (8000ecc <HAL_I2S_MspInit+0xf4>)
 8000e6a:	f043 0304 	orr.w	r3, r3, #4
 8000e6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e70:	4b16      	ldr	r3, [pc, #88]	; (8000ecc <HAL_I2S_MspInit+0xf4>)
 8000e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e74:	f003 0304 	and.w	r3, r3, #4
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000e7c:	2310      	movs	r3, #16
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e80:	2302      	movs	r3, #2
 8000e82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e8c:	2306      	movs	r3, #6
 8000e8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e94:	4619      	mov	r1, r3
 8000e96:	480e      	ldr	r0, [pc, #56]	; (8000ed0 <HAL_I2S_MspInit+0xf8>)
 8000e98:	f000 fb52 	bl	8001540 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000e9c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000ea0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000eae:	2306      	movs	r3, #6
 8000eb0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4806      	ldr	r0, [pc, #24]	; (8000ed4 <HAL_I2S_MspInit+0xfc>)
 8000eba:	f000 fb41 	bl	8001540 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ebe:	bf00      	nop
 8000ec0:	3738      	adds	r7, #56	; 0x38
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40003c00 	.word	0x40003c00
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40020000 	.word	0x40020000
 8000ed4:	40020800 	.word	0x40020800

08000ed8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08c      	sub	sp, #48	; 0x30
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	f107 031c 	add.w	r3, r7, #28
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a32      	ldr	r2, [pc, #200]	; (8000fc0 <HAL_SPI_MspInit+0xe8>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d12c      	bne.n	8000f54 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	61bb      	str	r3, [r7, #24]
 8000efe:	4b31      	ldr	r3, [pc, #196]	; (8000fc4 <HAL_SPI_MspInit+0xec>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f02:	4a30      	ldr	r2, [pc, #192]	; (8000fc4 <HAL_SPI_MspInit+0xec>)
 8000f04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f08:	6453      	str	r3, [r2, #68]	; 0x44
 8000f0a:	4b2e      	ldr	r3, [pc, #184]	; (8000fc4 <HAL_SPI_MspInit+0xec>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f12:	61bb      	str	r3, [r7, #24]
 8000f14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
 8000f1a:	4b2a      	ldr	r3, [pc, #168]	; (8000fc4 <HAL_SPI_MspInit+0xec>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a29      	ldr	r2, [pc, #164]	; (8000fc4 <HAL_SPI_MspInit+0xec>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b27      	ldr	r3, [pc, #156]	; (8000fc4 <HAL_SPI_MspInit+0xec>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000f32:	23e0      	movs	r3, #224	; 0xe0
 8000f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f36:	2302      	movs	r3, #2
 8000f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f42:	2305      	movs	r3, #5
 8000f44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f46:	f107 031c 	add.w	r3, r7, #28
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	481e      	ldr	r0, [pc, #120]	; (8000fc8 <HAL_SPI_MspInit+0xf0>)
 8000f4e:	f000 faf7 	bl	8001540 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000f52:	e031      	b.n	8000fb8 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a1c      	ldr	r2, [pc, #112]	; (8000fcc <HAL_SPI_MspInit+0xf4>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d12c      	bne.n	8000fb8 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	613b      	str	r3, [r7, #16]
 8000f62:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <HAL_SPI_MspInit+0xec>)
 8000f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f66:	4a17      	ldr	r2, [pc, #92]	; (8000fc4 <HAL_SPI_MspInit+0xec>)
 8000f68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f6e:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <HAL_SPI_MspInit+0xec>)
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f76:	613b      	str	r3, [r7, #16]
 8000f78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <HAL_SPI_MspInit+0xec>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a10      	ldr	r2, [pc, #64]	; (8000fc4 <HAL_SPI_MspInit+0xec>)
 8000f84:	f043 0302 	orr.w	r3, r3, #2
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <HAL_SPI_MspInit+0xec>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000f96:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000f9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fa8:	2305      	movs	r3, #5
 8000faa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fac:	f107 031c 	add.w	r3, r7, #28
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4807      	ldr	r0, [pc, #28]	; (8000fd0 <HAL_SPI_MspInit+0xf8>)
 8000fb4:	f000 fac4 	bl	8001540 <HAL_GPIO_Init>
}
 8000fb8:	bf00      	nop
 8000fba:	3730      	adds	r7, #48	; 0x30
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40013000 	.word	0x40013000
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	40020000 	.word	0x40020000
 8000fcc:	40003800 	.word	0x40003800
 8000fd0:	40020400 	.word	0x40020400

08000fd4 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08a      	sub	sp, #40	; 0x28
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART2)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a28      	ldr	r2, [pc, #160]	; (8001094 <HAL_USART_MspInit+0xc0>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d149      	bne.n	800108a <HAL_USART_MspInit+0xb6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	613b      	str	r3, [r7, #16]
 8000ffa:	4b27      	ldr	r3, [pc, #156]	; (8001098 <HAL_USART_MspInit+0xc4>)
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	4a26      	ldr	r2, [pc, #152]	; (8001098 <HAL_USART_MspInit+0xc4>)
 8001000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001004:	6413      	str	r3, [r2, #64]	; 0x40
 8001006:	4b24      	ldr	r3, [pc, #144]	; (8001098 <HAL_USART_MspInit+0xc4>)
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	4b20      	ldr	r3, [pc, #128]	; (8001098 <HAL_USART_MspInit+0xc4>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a1f      	ldr	r2, [pc, #124]	; (8001098 <HAL_USART_MspInit+0xc4>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b1d      	ldr	r3, [pc, #116]	; (8001098 <HAL_USART_MspInit+0xc4>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	4b19      	ldr	r3, [pc, #100]	; (8001098 <HAL_USART_MspInit+0xc4>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a18      	ldr	r2, [pc, #96]	; (8001098 <HAL_USART_MspInit+0xc4>)
 8001038:	f043 0308 	orr.w	r3, r3, #8
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b16      	ldr	r3, [pc, #88]	; (8001098 <HAL_USART_MspInit+0xc4>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0308 	and.w	r3, r3, #8
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PD7     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800104a:	230c      	movs	r3, #12
 800104c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104e:	2302      	movs	r3, #2
 8001050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001056:	2303      	movs	r3, #3
 8001058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800105a:	2307      	movs	r3, #7
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	4619      	mov	r1, r3
 8001064:	480d      	ldr	r0, [pc, #52]	; (800109c <HAL_USART_MspInit+0xc8>)
 8001066:	f000 fa6b 	bl	8001540 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800106a:	2380      	movs	r3, #128	; 0x80
 800106c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106e:	2302      	movs	r3, #2
 8001070:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001076:	2303      	movs	r3, #3
 8001078:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800107a:	2307      	movs	r3, #7
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800107e:	f107 0314 	add.w	r3, r7, #20
 8001082:	4619      	mov	r1, r3
 8001084:	4806      	ldr	r0, [pc, #24]	; (80010a0 <HAL_USART_MspInit+0xcc>)
 8001086:	f000 fa5b 	bl	8001540 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800108a:	bf00      	nop
 800108c:	3728      	adds	r7, #40	; 0x28
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40004400 	.word	0x40004400
 8001098:	40023800 	.word	0x40023800
 800109c:	40020000 	.word	0x40020000
 80010a0:	40020c00 	.word	0x40020c00

080010a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <NMI_Handler+0x4>

080010aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ae:	e7fe      	b.n	80010ae <HardFault_Handler+0x4>

080010b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <MemManage_Handler+0x4>

080010b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ba:	e7fe      	b.n	80010ba <BusFault_Handler+0x4>

080010bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <UsageFault_Handler+0x4>

080010c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f0:	f000 f8d0 	bl	8001294 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80010fc:	4802      	ldr	r0, [pc, #8]	; (8001108 <OTG_FS_IRQHandler+0x10>)
 80010fe:	f000 fe3f 	bl	8001d80 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	2000064c 	.word	0x2000064c

0800110c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001114:	4a14      	ldr	r2, [pc, #80]	; (8001168 <_sbrk+0x5c>)
 8001116:	4b15      	ldr	r3, [pc, #84]	; (800116c <_sbrk+0x60>)
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001120:	4b13      	ldr	r3, [pc, #76]	; (8001170 <_sbrk+0x64>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d102      	bne.n	800112e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001128:	4b11      	ldr	r3, [pc, #68]	; (8001170 <_sbrk+0x64>)
 800112a:	4a12      	ldr	r2, [pc, #72]	; (8001174 <_sbrk+0x68>)
 800112c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800112e:	4b10      	ldr	r3, [pc, #64]	; (8001170 <_sbrk+0x64>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4413      	add	r3, r2
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	429a      	cmp	r2, r3
 800113a:	d207      	bcs.n	800114c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800113c:	f006 ff92 	bl	8008064 <__errno>
 8001140:	4603      	mov	r3, r0
 8001142:	220c      	movs	r2, #12
 8001144:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001146:	f04f 33ff 	mov.w	r3, #4294967295
 800114a:	e009      	b.n	8001160 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800114c:	4b08      	ldr	r3, [pc, #32]	; (8001170 <_sbrk+0x64>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001152:	4b07      	ldr	r3, [pc, #28]	; (8001170 <_sbrk+0x64>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4413      	add	r3, r2
 800115a:	4a05      	ldr	r2, [pc, #20]	; (8001170 <_sbrk+0x64>)
 800115c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800115e:	68fb      	ldr	r3, [r7, #12]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3718      	adds	r7, #24
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20020000 	.word	0x20020000
 800116c:	00000400 	.word	0x00000400
 8001170:	20000268 	.word	0x20000268
 8001174:	20000960 	.word	0x20000960

08001178 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <SystemInit+0x20>)
 800117e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001182:	4a05      	ldr	r2, [pc, #20]	; (8001198 <SystemInit+0x20>)
 8001184:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001188:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800119c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011a0:	480d      	ldr	r0, [pc, #52]	; (80011d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011a2:	490e      	ldr	r1, [pc, #56]	; (80011dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011a4:	4a0e      	ldr	r2, [pc, #56]	; (80011e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a8:	e002      	b.n	80011b0 <LoopCopyDataInit>

080011aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ae:	3304      	adds	r3, #4

080011b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b4:	d3f9      	bcc.n	80011aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011b6:	4a0b      	ldr	r2, [pc, #44]	; (80011e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011b8:	4c0b      	ldr	r4, [pc, #44]	; (80011e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011bc:	e001      	b.n	80011c2 <LoopFillZerobss>

080011be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c0:	3204      	adds	r2, #4

080011c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c4:	d3fb      	bcc.n	80011be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011c6:	f7ff ffd7 	bl	8001178 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ca:	f006 ff51 	bl	8008070 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ce:	f7ff f97d 	bl	80004cc <main>
  bx  lr    
 80011d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011dc:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80011e0:	08008328 	.word	0x08008328
  ldr r2, =_sbss
 80011e4:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80011e8:	20000960 	.word	0x20000960

080011ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011ec:	e7fe      	b.n	80011ec <ADC_IRQHandler>
	...

080011f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011f4:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <HAL_Init+0x40>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a0d      	ldr	r2, [pc, #52]	; (8001230 <HAL_Init+0x40>)
 80011fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001200:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <HAL_Init+0x40>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <HAL_Init+0x40>)
 8001206:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800120a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <HAL_Init+0x40>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a07      	ldr	r2, [pc, #28]	; (8001230 <HAL_Init+0x40>)
 8001212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001216:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001218:	2003      	movs	r0, #3
 800121a:	f000 f94f 	bl	80014bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800121e:	2000      	movs	r0, #0
 8001220:	f000 f808 	bl	8001234 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001224:	f7ff fd68 	bl	8000cf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40023c00 	.word	0x40023c00

08001234 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <HAL_InitTick+0x54>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <HAL_InitTick+0x58>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	4619      	mov	r1, r3
 8001246:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124a:	fbb3 f3f1 	udiv	r3, r3, r1
 800124e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001252:	4618      	mov	r0, r3
 8001254:	f000 f967 	bl	8001526 <HAL_SYSTICK_Config>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e00e      	b.n	8001280 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2b0f      	cmp	r3, #15
 8001266:	d80a      	bhi.n	800127e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001268:	2200      	movs	r2, #0
 800126a:	6879      	ldr	r1, [r7, #4]
 800126c:	f04f 30ff 	mov.w	r0, #4294967295
 8001270:	f000 f92f 	bl	80014d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001274:	4a06      	ldr	r2, [pc, #24]	; (8001290 <HAL_InitTick+0x5c>)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800127a:	2300      	movs	r3, #0
 800127c:	e000      	b.n	8001280 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
}
 8001280:	4618      	mov	r0, r3
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000008 	.word	0x20000008
 800128c:	20000010 	.word	0x20000010
 8001290:	2000000c 	.word	0x2000000c

08001294 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <HAL_IncTick+0x20>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_IncTick+0x24>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4413      	add	r3, r2
 80012a4:	4a04      	ldr	r2, [pc, #16]	; (80012b8 <HAL_IncTick+0x24>)
 80012a6:	6013      	str	r3, [r2, #0]
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	20000010 	.word	0x20000010
 80012b8:	2000026c 	.word	0x2000026c

080012bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return uwTick;
 80012c0:	4b03      	ldr	r3, [pc, #12]	; (80012d0 <HAL_GetTick+0x14>)
 80012c2:	681b      	ldr	r3, [r3, #0]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	2000026c 	.word	0x2000026c

080012d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012dc:	f7ff ffee 	bl	80012bc <HAL_GetTick>
 80012e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ec:	d005      	beq.n	80012fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ee:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <HAL_Delay+0x44>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	461a      	mov	r2, r3
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4413      	add	r3, r2
 80012f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012fa:	bf00      	nop
 80012fc:	f7ff ffde 	bl	80012bc <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	429a      	cmp	r2, r3
 800130a:	d8f7      	bhi.n	80012fc <HAL_Delay+0x28>
  {
  }
}
 800130c:	bf00      	nop
 800130e:	bf00      	nop
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000010 	.word	0x20000010

0800131c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <__NVIC_SetPriorityGrouping+0x44>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001332:	68ba      	ldr	r2, [r7, #8]
 8001334:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001338:	4013      	ands	r3, r2
 800133a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001344:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800134c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800134e:	4a04      	ldr	r2, [pc, #16]	; (8001360 <__NVIC_SetPriorityGrouping+0x44>)
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	60d3      	str	r3, [r2, #12]
}
 8001354:	bf00      	nop
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001368:	4b04      	ldr	r3, [pc, #16]	; (800137c <__NVIC_GetPriorityGrouping+0x18>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	0a1b      	lsrs	r3, r3, #8
 800136e:	f003 0307 	and.w	r3, r3, #7
}
 8001372:	4618      	mov	r0, r3
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	2b00      	cmp	r3, #0
 8001390:	db0b      	blt.n	80013aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	f003 021f 	and.w	r2, r3, #31
 8001398:	4907      	ldr	r1, [pc, #28]	; (80013b8 <__NVIC_EnableIRQ+0x38>)
 800139a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139e:	095b      	lsrs	r3, r3, #5
 80013a0:	2001      	movs	r0, #1
 80013a2:	fa00 f202 	lsl.w	r2, r0, r2
 80013a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	e000e100 	.word	0xe000e100

080013bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	6039      	str	r1, [r7, #0]
 80013c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	db0a      	blt.n	80013e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	490c      	ldr	r1, [pc, #48]	; (8001408 <__NVIC_SetPriority+0x4c>)
 80013d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013da:	0112      	lsls	r2, r2, #4
 80013dc:	b2d2      	uxtb	r2, r2
 80013de:	440b      	add	r3, r1
 80013e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e4:	e00a      	b.n	80013fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4908      	ldr	r1, [pc, #32]	; (800140c <__NVIC_SetPriority+0x50>)
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	f003 030f 	and.w	r3, r3, #15
 80013f2:	3b04      	subs	r3, #4
 80013f4:	0112      	lsls	r2, r2, #4
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	440b      	add	r3, r1
 80013fa:	761a      	strb	r2, [r3, #24]
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000e100 	.word	0xe000e100
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001410:	b480      	push	{r7}
 8001412:	b089      	sub	sp, #36	; 0x24
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	f1c3 0307 	rsb	r3, r3, #7
 800142a:	2b04      	cmp	r3, #4
 800142c:	bf28      	it	cs
 800142e:	2304      	movcs	r3, #4
 8001430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3304      	adds	r3, #4
 8001436:	2b06      	cmp	r3, #6
 8001438:	d902      	bls.n	8001440 <NVIC_EncodePriority+0x30>
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3b03      	subs	r3, #3
 800143e:	e000      	b.n	8001442 <NVIC_EncodePriority+0x32>
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001444:	f04f 32ff 	mov.w	r2, #4294967295
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43da      	mvns	r2, r3
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	401a      	ands	r2, r3
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001458:	f04f 31ff 	mov.w	r1, #4294967295
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	fa01 f303 	lsl.w	r3, r1, r3
 8001462:	43d9      	mvns	r1, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001468:	4313      	orrs	r3, r2
         );
}
 800146a:	4618      	mov	r0, r3
 800146c:	3724      	adds	r7, #36	; 0x24
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
	...

08001478 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3b01      	subs	r3, #1
 8001484:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001488:	d301      	bcc.n	800148e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800148a:	2301      	movs	r3, #1
 800148c:	e00f      	b.n	80014ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800148e:	4a0a      	ldr	r2, [pc, #40]	; (80014b8 <SysTick_Config+0x40>)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3b01      	subs	r3, #1
 8001494:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001496:	210f      	movs	r1, #15
 8001498:	f04f 30ff 	mov.w	r0, #4294967295
 800149c:	f7ff ff8e 	bl	80013bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a0:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <SysTick_Config+0x40>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014a6:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <SysTick_Config+0x40>)
 80014a8:	2207      	movs	r2, #7
 80014aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	e000e010 	.word	0xe000e010

080014bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff ff29 	bl	800131c <__NVIC_SetPriorityGrouping>
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b086      	sub	sp, #24
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	4603      	mov	r3, r0
 80014da:	60b9      	str	r1, [r7, #8]
 80014dc:	607a      	str	r2, [r7, #4]
 80014de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014e4:	f7ff ff3e 	bl	8001364 <__NVIC_GetPriorityGrouping>
 80014e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	68b9      	ldr	r1, [r7, #8]
 80014ee:	6978      	ldr	r0, [r7, #20]
 80014f0:	f7ff ff8e 	bl	8001410 <NVIC_EncodePriority>
 80014f4:	4602      	mov	r2, r0
 80014f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014fa:	4611      	mov	r1, r2
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff5d 	bl	80013bc <__NVIC_SetPriority>
}
 8001502:	bf00      	nop
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
 8001510:	4603      	mov	r3, r0
 8001512:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff ff31 	bl	8001380 <__NVIC_EnableIRQ>
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff ffa2 	bl	8001478 <SysTick_Config>
 8001534:	4603      	mov	r3, r0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001540:	b480      	push	{r7}
 8001542:	b089      	sub	sp, #36	; 0x24
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800154a:	2300      	movs	r3, #0
 800154c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800154e:	2300      	movs	r3, #0
 8001550:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001552:	2300      	movs	r3, #0
 8001554:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001556:	2300      	movs	r3, #0
 8001558:	61fb      	str	r3, [r7, #28]
 800155a:	e16b      	b.n	8001834 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800155c:	2201      	movs	r2, #1
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	697a      	ldr	r2, [r7, #20]
 800156c:	4013      	ands	r3, r2
 800156e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	429a      	cmp	r2, r3
 8001576:	f040 815a 	bne.w	800182e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f003 0303 	and.w	r3, r3, #3
 8001582:	2b01      	cmp	r3, #1
 8001584:	d005      	beq.n	8001592 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800158e:	2b02      	cmp	r3, #2
 8001590:	d130      	bne.n	80015f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	2203      	movs	r2, #3
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43db      	mvns	r3, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4013      	ands	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	68da      	ldr	r2, [r3, #12]
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015c8:	2201      	movs	r2, #1
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4013      	ands	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	091b      	lsrs	r3, r3, #4
 80015de:	f003 0201 	and.w	r2, r3, #1
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f003 0303 	and.w	r3, r3, #3
 80015fc:	2b03      	cmp	r3, #3
 80015fe:	d017      	beq.n	8001630 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	2203      	movs	r2, #3
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	43db      	mvns	r3, r3
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4013      	ands	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	689a      	ldr	r2, [r3, #8]
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4313      	orrs	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f003 0303 	and.w	r3, r3, #3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d123      	bne.n	8001684 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	08da      	lsrs	r2, r3, #3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3208      	adds	r2, #8
 8001644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001648:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	f003 0307 	and.w	r3, r3, #7
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	220f      	movs	r2, #15
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43db      	mvns	r3, r3
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	4013      	ands	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	691a      	ldr	r2, [r3, #16]
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4313      	orrs	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	08da      	lsrs	r2, r3, #3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	3208      	adds	r2, #8
 800167e:	69b9      	ldr	r1, [r7, #24]
 8001680:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	2203      	movs	r2, #3
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	43db      	mvns	r3, r3
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	4013      	ands	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f003 0203 	and.w	r2, r3, #3
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f000 80b4 	beq.w	800182e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	4b60      	ldr	r3, [pc, #384]	; (800184c <HAL_GPIO_Init+0x30c>)
 80016cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ce:	4a5f      	ldr	r2, [pc, #380]	; (800184c <HAL_GPIO_Init+0x30c>)
 80016d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d4:	6453      	str	r3, [r2, #68]	; 0x44
 80016d6:	4b5d      	ldr	r3, [pc, #372]	; (800184c <HAL_GPIO_Init+0x30c>)
 80016d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016e2:	4a5b      	ldr	r2, [pc, #364]	; (8001850 <HAL_GPIO_Init+0x310>)
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	089b      	lsrs	r3, r3, #2
 80016e8:	3302      	adds	r3, #2
 80016ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	f003 0303 	and.w	r3, r3, #3
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	220f      	movs	r2, #15
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	43db      	mvns	r3, r3
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	4013      	ands	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a52      	ldr	r2, [pc, #328]	; (8001854 <HAL_GPIO_Init+0x314>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d02b      	beq.n	8001766 <HAL_GPIO_Init+0x226>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a51      	ldr	r2, [pc, #324]	; (8001858 <HAL_GPIO_Init+0x318>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d025      	beq.n	8001762 <HAL_GPIO_Init+0x222>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a50      	ldr	r2, [pc, #320]	; (800185c <HAL_GPIO_Init+0x31c>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d01f      	beq.n	800175e <HAL_GPIO_Init+0x21e>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a4f      	ldr	r2, [pc, #316]	; (8001860 <HAL_GPIO_Init+0x320>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d019      	beq.n	800175a <HAL_GPIO_Init+0x21a>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a4e      	ldr	r2, [pc, #312]	; (8001864 <HAL_GPIO_Init+0x324>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d013      	beq.n	8001756 <HAL_GPIO_Init+0x216>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a4d      	ldr	r2, [pc, #308]	; (8001868 <HAL_GPIO_Init+0x328>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d00d      	beq.n	8001752 <HAL_GPIO_Init+0x212>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a4c      	ldr	r2, [pc, #304]	; (800186c <HAL_GPIO_Init+0x32c>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d007      	beq.n	800174e <HAL_GPIO_Init+0x20e>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a4b      	ldr	r2, [pc, #300]	; (8001870 <HAL_GPIO_Init+0x330>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d101      	bne.n	800174a <HAL_GPIO_Init+0x20a>
 8001746:	2307      	movs	r3, #7
 8001748:	e00e      	b.n	8001768 <HAL_GPIO_Init+0x228>
 800174a:	2308      	movs	r3, #8
 800174c:	e00c      	b.n	8001768 <HAL_GPIO_Init+0x228>
 800174e:	2306      	movs	r3, #6
 8001750:	e00a      	b.n	8001768 <HAL_GPIO_Init+0x228>
 8001752:	2305      	movs	r3, #5
 8001754:	e008      	b.n	8001768 <HAL_GPIO_Init+0x228>
 8001756:	2304      	movs	r3, #4
 8001758:	e006      	b.n	8001768 <HAL_GPIO_Init+0x228>
 800175a:	2303      	movs	r3, #3
 800175c:	e004      	b.n	8001768 <HAL_GPIO_Init+0x228>
 800175e:	2302      	movs	r3, #2
 8001760:	e002      	b.n	8001768 <HAL_GPIO_Init+0x228>
 8001762:	2301      	movs	r3, #1
 8001764:	e000      	b.n	8001768 <HAL_GPIO_Init+0x228>
 8001766:	2300      	movs	r3, #0
 8001768:	69fa      	ldr	r2, [r7, #28]
 800176a:	f002 0203 	and.w	r2, r2, #3
 800176e:	0092      	lsls	r2, r2, #2
 8001770:	4093      	lsls	r3, r2
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4313      	orrs	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001778:	4935      	ldr	r1, [pc, #212]	; (8001850 <HAL_GPIO_Init+0x310>)
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	089b      	lsrs	r3, r3, #2
 800177e:	3302      	adds	r3, #2
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001786:	4b3b      	ldr	r3, [pc, #236]	; (8001874 <HAL_GPIO_Init+0x334>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	43db      	mvns	r3, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4013      	ands	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017aa:	4a32      	ldr	r2, [pc, #200]	; (8001874 <HAL_GPIO_Init+0x334>)
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017b0:	4b30      	ldr	r3, [pc, #192]	; (8001874 <HAL_GPIO_Init+0x334>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	43db      	mvns	r3, r3
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4013      	ands	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d003      	beq.n	80017d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017d4:	4a27      	ldr	r2, [pc, #156]	; (8001874 <HAL_GPIO_Init+0x334>)
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017da:	4b26      	ldr	r3, [pc, #152]	; (8001874 <HAL_GPIO_Init+0x334>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	43db      	mvns	r3, r3
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4013      	ands	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d003      	beq.n	80017fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017fe:	4a1d      	ldr	r2, [pc, #116]	; (8001874 <HAL_GPIO_Init+0x334>)
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001804:	4b1b      	ldr	r3, [pc, #108]	; (8001874 <HAL_GPIO_Init+0x334>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	43db      	mvns	r3, r3
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4013      	ands	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d003      	beq.n	8001828 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	4313      	orrs	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001828:	4a12      	ldr	r2, [pc, #72]	; (8001874 <HAL_GPIO_Init+0x334>)
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	3301      	adds	r3, #1
 8001832:	61fb      	str	r3, [r7, #28]
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	2b0f      	cmp	r3, #15
 8001838:	f67f ae90 	bls.w	800155c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800183c:	bf00      	nop
 800183e:	bf00      	nop
 8001840:	3724      	adds	r7, #36	; 0x24
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	40023800 	.word	0x40023800
 8001850:	40013800 	.word	0x40013800
 8001854:	40020000 	.word	0x40020000
 8001858:	40020400 	.word	0x40020400
 800185c:	40020800 	.word	0x40020800
 8001860:	40020c00 	.word	0x40020c00
 8001864:	40021000 	.word	0x40021000
 8001868:	40021400 	.word	0x40021400
 800186c:	40021800 	.word	0x40021800
 8001870:	40021c00 	.word	0x40021c00
 8001874:	40013c00 	.word	0x40013c00

08001878 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	460b      	mov	r3, r1
 8001882:	807b      	strh	r3, [r7, #2]
 8001884:	4613      	mov	r3, r2
 8001886:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001888:	787b      	ldrb	r3, [r7, #1]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d003      	beq.n	8001896 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800188e:	887a      	ldrh	r2, [r7, #2]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001894:	e003      	b.n	800189e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001896:	887b      	ldrh	r3, [r7, #2]
 8001898:	041a      	lsls	r2, r3, #16
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	619a      	str	r2, [r3, #24]
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80018aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ac:	b08f      	sub	sp, #60	; 0x3c
 80018ae:	af0a      	add	r7, sp, #40	; 0x28
 80018b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d101      	bne.n	80018bc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e054      	b.n	8001966 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d106      	bne.n	80018dc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f006 f968 	bl	8007bac <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2203      	movs	r2, #3
 80018e0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d102      	bne.n	80018f6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f004 f95a 	bl	8005bb4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	603b      	str	r3, [r7, #0]
 8001906:	687e      	ldr	r6, [r7, #4]
 8001908:	466d      	mov	r5, sp
 800190a:	f106 0410 	add.w	r4, r6, #16
 800190e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001910:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001912:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001914:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001916:	e894 0003 	ldmia.w	r4, {r0, r1}
 800191a:	e885 0003 	stmia.w	r5, {r0, r1}
 800191e:	1d33      	adds	r3, r6, #4
 8001920:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001922:	6838      	ldr	r0, [r7, #0]
 8001924:	f004 f8d4 	bl	8005ad0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2101      	movs	r1, #1
 800192e:	4618      	mov	r0, r3
 8001930:	f004 f951 	bl	8005bd6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	603b      	str	r3, [r7, #0]
 800193a:	687e      	ldr	r6, [r7, #4]
 800193c:	466d      	mov	r5, sp
 800193e:	f106 0410 	add.w	r4, r6, #16
 8001942:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001944:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001946:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001948:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800194a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800194e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001952:	1d33      	adds	r3, r6, #4
 8001954:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001956:	6838      	ldr	r0, [r7, #0]
 8001958:	f004 fada 	bl	8005f10 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3714      	adds	r7, #20
 800196a:	46bd      	mov	sp, r7
 800196c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800196e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800196e:	b590      	push	{r4, r7, lr}
 8001970:	b089      	sub	sp, #36	; 0x24
 8001972:	af04      	add	r7, sp, #16
 8001974:	6078      	str	r0, [r7, #4]
 8001976:	4608      	mov	r0, r1
 8001978:	4611      	mov	r1, r2
 800197a:	461a      	mov	r2, r3
 800197c:	4603      	mov	r3, r0
 800197e:	70fb      	strb	r3, [r7, #3]
 8001980:	460b      	mov	r3, r1
 8001982:	70bb      	strb	r3, [r7, #2]
 8001984:	4613      	mov	r3, r2
 8001986:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800198e:	2b01      	cmp	r3, #1
 8001990:	d101      	bne.n	8001996 <HAL_HCD_HC_Init+0x28>
 8001992:	2302      	movs	r3, #2
 8001994:	e076      	b.n	8001a84 <HAL_HCD_HC_Init+0x116>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2201      	movs	r2, #1
 800199a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800199e:	78fb      	ldrb	r3, [r7, #3]
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	212c      	movs	r1, #44	; 0x2c
 80019a4:	fb01 f303 	mul.w	r3, r1, r3
 80019a8:	4413      	add	r3, r2
 80019aa:	333d      	adds	r3, #61	; 0x3d
 80019ac:	2200      	movs	r2, #0
 80019ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80019b0:	78fb      	ldrb	r3, [r7, #3]
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	212c      	movs	r1, #44	; 0x2c
 80019b6:	fb01 f303 	mul.w	r3, r1, r3
 80019ba:	4413      	add	r3, r2
 80019bc:	3338      	adds	r3, #56	; 0x38
 80019be:	787a      	ldrb	r2, [r7, #1]
 80019c0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80019c2:	78fb      	ldrb	r3, [r7, #3]
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	212c      	movs	r1, #44	; 0x2c
 80019c8:	fb01 f303 	mul.w	r3, r1, r3
 80019cc:	4413      	add	r3, r2
 80019ce:	3340      	adds	r3, #64	; 0x40
 80019d0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80019d2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019d4:	78fb      	ldrb	r3, [r7, #3]
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	212c      	movs	r1, #44	; 0x2c
 80019da:	fb01 f303 	mul.w	r3, r1, r3
 80019de:	4413      	add	r3, r2
 80019e0:	3339      	adds	r3, #57	; 0x39
 80019e2:	78fa      	ldrb	r2, [r7, #3]
 80019e4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80019e6:	78fb      	ldrb	r3, [r7, #3]
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	212c      	movs	r1, #44	; 0x2c
 80019ec:	fb01 f303 	mul.w	r3, r1, r3
 80019f0:	4413      	add	r3, r2
 80019f2:	333f      	adds	r3, #63	; 0x3f
 80019f4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80019f8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80019fa:	78fb      	ldrb	r3, [r7, #3]
 80019fc:	78ba      	ldrb	r2, [r7, #2]
 80019fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a02:	b2d0      	uxtb	r0, r2
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	212c      	movs	r1, #44	; 0x2c
 8001a08:	fb01 f303 	mul.w	r3, r1, r3
 8001a0c:	4413      	add	r3, r2
 8001a0e:	333a      	adds	r3, #58	; 0x3a
 8001a10:	4602      	mov	r2, r0
 8001a12:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001a14:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	da09      	bge.n	8001a30 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001a1c:	78fb      	ldrb	r3, [r7, #3]
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	212c      	movs	r1, #44	; 0x2c
 8001a22:	fb01 f303 	mul.w	r3, r1, r3
 8001a26:	4413      	add	r3, r2
 8001a28:	333b      	adds	r3, #59	; 0x3b
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	701a      	strb	r2, [r3, #0]
 8001a2e:	e008      	b.n	8001a42 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001a30:	78fb      	ldrb	r3, [r7, #3]
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	212c      	movs	r1, #44	; 0x2c
 8001a36:	fb01 f303 	mul.w	r3, r1, r3
 8001a3a:	4413      	add	r3, r2
 8001a3c:	333b      	adds	r3, #59	; 0x3b
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001a42:	78fb      	ldrb	r3, [r7, #3]
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	212c      	movs	r1, #44	; 0x2c
 8001a48:	fb01 f303 	mul.w	r3, r1, r3
 8001a4c:	4413      	add	r3, r2
 8001a4e:	333c      	adds	r3, #60	; 0x3c
 8001a50:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a54:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6818      	ldr	r0, [r3, #0]
 8001a5a:	787c      	ldrb	r4, [r7, #1]
 8001a5c:	78ba      	ldrb	r2, [r7, #2]
 8001a5e:	78f9      	ldrb	r1, [r7, #3]
 8001a60:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a62:	9302      	str	r3, [sp, #8]
 8001a64:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001a68:	9301      	str	r3, [sp, #4]
 8001a6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	4623      	mov	r3, r4
 8001a72:	f004 fba9 	bl	80061c8 <USB_HC_Init>
 8001a76:	4603      	mov	r3, r0
 8001a78:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd90      	pop	{r4, r7, pc}

08001a8c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	460b      	mov	r3, r1
 8001a96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d101      	bne.n	8001aaa <HAL_HCD_HC_Halt+0x1e>
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	e00f      	b.n	8001aca <HAL_HCD_HC_Halt+0x3e>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	78fa      	ldrb	r2, [r7, #3]
 8001ab8:	4611      	mov	r1, r2
 8001aba:	4618      	mov	r0, r3
 8001abc:	f004 fdf9 	bl	80066b2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
	...

08001ad4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	4608      	mov	r0, r1
 8001ade:	4611      	mov	r1, r2
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	70fb      	strb	r3, [r7, #3]
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	70bb      	strb	r3, [r7, #2]
 8001aea:	4613      	mov	r3, r2
 8001aec:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001aee:	78fb      	ldrb	r3, [r7, #3]
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	212c      	movs	r1, #44	; 0x2c
 8001af4:	fb01 f303 	mul.w	r3, r1, r3
 8001af8:	4413      	add	r3, r2
 8001afa:	333b      	adds	r3, #59	; 0x3b
 8001afc:	78ba      	ldrb	r2, [r7, #2]
 8001afe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001b00:	78fb      	ldrb	r3, [r7, #3]
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	212c      	movs	r1, #44	; 0x2c
 8001b06:	fb01 f303 	mul.w	r3, r1, r3
 8001b0a:	4413      	add	r3, r2
 8001b0c:	333f      	adds	r3, #63	; 0x3f
 8001b0e:	787a      	ldrb	r2, [r7, #1]
 8001b10:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001b12:	7c3b      	ldrb	r3, [r7, #16]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d112      	bne.n	8001b3e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001b18:	78fb      	ldrb	r3, [r7, #3]
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	212c      	movs	r1, #44	; 0x2c
 8001b1e:	fb01 f303 	mul.w	r3, r1, r3
 8001b22:	4413      	add	r3, r2
 8001b24:	3342      	adds	r3, #66	; 0x42
 8001b26:	2203      	movs	r2, #3
 8001b28:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001b2a:	78fb      	ldrb	r3, [r7, #3]
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	212c      	movs	r1, #44	; 0x2c
 8001b30:	fb01 f303 	mul.w	r3, r1, r3
 8001b34:	4413      	add	r3, r2
 8001b36:	333d      	adds	r3, #61	; 0x3d
 8001b38:	7f3a      	ldrb	r2, [r7, #28]
 8001b3a:	701a      	strb	r2, [r3, #0]
 8001b3c:	e008      	b.n	8001b50 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b3e:	78fb      	ldrb	r3, [r7, #3]
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	212c      	movs	r1, #44	; 0x2c
 8001b44:	fb01 f303 	mul.w	r3, r1, r3
 8001b48:	4413      	add	r3, r2
 8001b4a:	3342      	adds	r3, #66	; 0x42
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001b50:	787b      	ldrb	r3, [r7, #1]
 8001b52:	2b03      	cmp	r3, #3
 8001b54:	f200 80c6 	bhi.w	8001ce4 <HAL_HCD_HC_SubmitRequest+0x210>
 8001b58:	a201      	add	r2, pc, #4	; (adr r2, 8001b60 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b5e:	bf00      	nop
 8001b60:	08001b71 	.word	0x08001b71
 8001b64:	08001cd1 	.word	0x08001cd1
 8001b68:	08001bd5 	.word	0x08001bd5
 8001b6c:	08001c53 	.word	0x08001c53
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001b70:	7c3b      	ldrb	r3, [r7, #16]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	f040 80b8 	bne.w	8001ce8 <HAL_HCD_HC_SubmitRequest+0x214>
 8001b78:	78bb      	ldrb	r3, [r7, #2]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f040 80b4 	bne.w	8001ce8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001b80:	8b3b      	ldrh	r3, [r7, #24]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d108      	bne.n	8001b98 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001b86:	78fb      	ldrb	r3, [r7, #3]
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	212c      	movs	r1, #44	; 0x2c
 8001b8c:	fb01 f303 	mul.w	r3, r1, r3
 8001b90:	4413      	add	r3, r2
 8001b92:	3355      	adds	r3, #85	; 0x55
 8001b94:	2201      	movs	r2, #1
 8001b96:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b98:	78fb      	ldrb	r3, [r7, #3]
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	212c      	movs	r1, #44	; 0x2c
 8001b9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ba2:	4413      	add	r3, r2
 8001ba4:	3355      	adds	r3, #85	; 0x55
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d109      	bne.n	8001bc0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bac:	78fb      	ldrb	r3, [r7, #3]
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	212c      	movs	r1, #44	; 0x2c
 8001bb2:	fb01 f303 	mul.w	r3, r1, r3
 8001bb6:	4413      	add	r3, r2
 8001bb8:	3342      	adds	r3, #66	; 0x42
 8001bba:	2200      	movs	r2, #0
 8001bbc:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001bbe:	e093      	b.n	8001ce8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bc0:	78fb      	ldrb	r3, [r7, #3]
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	212c      	movs	r1, #44	; 0x2c
 8001bc6:	fb01 f303 	mul.w	r3, r1, r3
 8001bca:	4413      	add	r3, r2
 8001bcc:	3342      	adds	r3, #66	; 0x42
 8001bce:	2202      	movs	r2, #2
 8001bd0:	701a      	strb	r2, [r3, #0]
      break;
 8001bd2:	e089      	b.n	8001ce8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001bd4:	78bb      	ldrb	r3, [r7, #2]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d11d      	bne.n	8001c16 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001bda:	78fb      	ldrb	r3, [r7, #3]
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	212c      	movs	r1, #44	; 0x2c
 8001be0:	fb01 f303 	mul.w	r3, r1, r3
 8001be4:	4413      	add	r3, r2
 8001be6:	3355      	adds	r3, #85	; 0x55
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d109      	bne.n	8001c02 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bee:	78fb      	ldrb	r3, [r7, #3]
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	212c      	movs	r1, #44	; 0x2c
 8001bf4:	fb01 f303 	mul.w	r3, r1, r3
 8001bf8:	4413      	add	r3, r2
 8001bfa:	3342      	adds	r3, #66	; 0x42
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001c00:	e073      	b.n	8001cea <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c02:	78fb      	ldrb	r3, [r7, #3]
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	212c      	movs	r1, #44	; 0x2c
 8001c08:	fb01 f303 	mul.w	r3, r1, r3
 8001c0c:	4413      	add	r3, r2
 8001c0e:	3342      	adds	r3, #66	; 0x42
 8001c10:	2202      	movs	r2, #2
 8001c12:	701a      	strb	r2, [r3, #0]
      break;
 8001c14:	e069      	b.n	8001cea <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c16:	78fb      	ldrb	r3, [r7, #3]
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	212c      	movs	r1, #44	; 0x2c
 8001c1c:	fb01 f303 	mul.w	r3, r1, r3
 8001c20:	4413      	add	r3, r2
 8001c22:	3354      	adds	r3, #84	; 0x54
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d109      	bne.n	8001c3e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c2a:	78fb      	ldrb	r3, [r7, #3]
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	212c      	movs	r1, #44	; 0x2c
 8001c30:	fb01 f303 	mul.w	r3, r1, r3
 8001c34:	4413      	add	r3, r2
 8001c36:	3342      	adds	r3, #66	; 0x42
 8001c38:	2200      	movs	r2, #0
 8001c3a:	701a      	strb	r2, [r3, #0]
      break;
 8001c3c:	e055      	b.n	8001cea <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c3e:	78fb      	ldrb	r3, [r7, #3]
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	212c      	movs	r1, #44	; 0x2c
 8001c44:	fb01 f303 	mul.w	r3, r1, r3
 8001c48:	4413      	add	r3, r2
 8001c4a:	3342      	adds	r3, #66	; 0x42
 8001c4c:	2202      	movs	r2, #2
 8001c4e:	701a      	strb	r2, [r3, #0]
      break;
 8001c50:	e04b      	b.n	8001cea <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001c52:	78bb      	ldrb	r3, [r7, #2]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d11d      	bne.n	8001c94 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c58:	78fb      	ldrb	r3, [r7, #3]
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	212c      	movs	r1, #44	; 0x2c
 8001c5e:	fb01 f303 	mul.w	r3, r1, r3
 8001c62:	4413      	add	r3, r2
 8001c64:	3355      	adds	r3, #85	; 0x55
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d109      	bne.n	8001c80 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c6c:	78fb      	ldrb	r3, [r7, #3]
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	212c      	movs	r1, #44	; 0x2c
 8001c72:	fb01 f303 	mul.w	r3, r1, r3
 8001c76:	4413      	add	r3, r2
 8001c78:	3342      	adds	r3, #66	; 0x42
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001c7e:	e034      	b.n	8001cea <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c80:	78fb      	ldrb	r3, [r7, #3]
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	212c      	movs	r1, #44	; 0x2c
 8001c86:	fb01 f303 	mul.w	r3, r1, r3
 8001c8a:	4413      	add	r3, r2
 8001c8c:	3342      	adds	r3, #66	; 0x42
 8001c8e:	2202      	movs	r2, #2
 8001c90:	701a      	strb	r2, [r3, #0]
      break;
 8001c92:	e02a      	b.n	8001cea <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c94:	78fb      	ldrb	r3, [r7, #3]
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	212c      	movs	r1, #44	; 0x2c
 8001c9a:	fb01 f303 	mul.w	r3, r1, r3
 8001c9e:	4413      	add	r3, r2
 8001ca0:	3354      	adds	r3, #84	; 0x54
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d109      	bne.n	8001cbc <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ca8:	78fb      	ldrb	r3, [r7, #3]
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	212c      	movs	r1, #44	; 0x2c
 8001cae:	fb01 f303 	mul.w	r3, r1, r3
 8001cb2:	4413      	add	r3, r2
 8001cb4:	3342      	adds	r3, #66	; 0x42
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	701a      	strb	r2, [r3, #0]
      break;
 8001cba:	e016      	b.n	8001cea <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cbc:	78fb      	ldrb	r3, [r7, #3]
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	212c      	movs	r1, #44	; 0x2c
 8001cc2:	fb01 f303 	mul.w	r3, r1, r3
 8001cc6:	4413      	add	r3, r2
 8001cc8:	3342      	adds	r3, #66	; 0x42
 8001cca:	2202      	movs	r2, #2
 8001ccc:	701a      	strb	r2, [r3, #0]
      break;
 8001cce:	e00c      	b.n	8001cea <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cd0:	78fb      	ldrb	r3, [r7, #3]
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	212c      	movs	r1, #44	; 0x2c
 8001cd6:	fb01 f303 	mul.w	r3, r1, r3
 8001cda:	4413      	add	r3, r2
 8001cdc:	3342      	adds	r3, #66	; 0x42
 8001cde:	2200      	movs	r2, #0
 8001ce0:	701a      	strb	r2, [r3, #0]
      break;
 8001ce2:	e002      	b.n	8001cea <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001ce4:	bf00      	nop
 8001ce6:	e000      	b.n	8001cea <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001ce8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001cea:	78fb      	ldrb	r3, [r7, #3]
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	212c      	movs	r1, #44	; 0x2c
 8001cf0:	fb01 f303 	mul.w	r3, r1, r3
 8001cf4:	4413      	add	r3, r2
 8001cf6:	3344      	adds	r3, #68	; 0x44
 8001cf8:	697a      	ldr	r2, [r7, #20]
 8001cfa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001cfc:	78fb      	ldrb	r3, [r7, #3]
 8001cfe:	8b3a      	ldrh	r2, [r7, #24]
 8001d00:	6879      	ldr	r1, [r7, #4]
 8001d02:	202c      	movs	r0, #44	; 0x2c
 8001d04:	fb00 f303 	mul.w	r3, r0, r3
 8001d08:	440b      	add	r3, r1
 8001d0a:	334c      	adds	r3, #76	; 0x4c
 8001d0c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001d0e:	78fb      	ldrb	r3, [r7, #3]
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	212c      	movs	r1, #44	; 0x2c
 8001d14:	fb01 f303 	mul.w	r3, r1, r3
 8001d18:	4413      	add	r3, r2
 8001d1a:	3360      	adds	r3, #96	; 0x60
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001d20:	78fb      	ldrb	r3, [r7, #3]
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	212c      	movs	r1, #44	; 0x2c
 8001d26:	fb01 f303 	mul.w	r3, r1, r3
 8001d2a:	4413      	add	r3, r2
 8001d2c:	3350      	adds	r3, #80	; 0x50
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d32:	78fb      	ldrb	r3, [r7, #3]
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	212c      	movs	r1, #44	; 0x2c
 8001d38:	fb01 f303 	mul.w	r3, r1, r3
 8001d3c:	4413      	add	r3, r2
 8001d3e:	3339      	adds	r3, #57	; 0x39
 8001d40:	78fa      	ldrb	r2, [r7, #3]
 8001d42:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001d44:	78fb      	ldrb	r3, [r7, #3]
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	212c      	movs	r1, #44	; 0x2c
 8001d4a:	fb01 f303 	mul.w	r3, r1, r3
 8001d4e:	4413      	add	r3, r2
 8001d50:	3361      	adds	r3, #97	; 0x61
 8001d52:	2200      	movs	r2, #0
 8001d54:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6818      	ldr	r0, [r3, #0]
 8001d5a:	78fb      	ldrb	r3, [r7, #3]
 8001d5c:	222c      	movs	r2, #44	; 0x2c
 8001d5e:	fb02 f303 	mul.w	r3, r2, r3
 8001d62:	3338      	adds	r3, #56	; 0x38
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	18d1      	adds	r1, r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	461a      	mov	r2, r3
 8001d70:	f004 fb4c 	bl	800640c <USB_HC_StartXfer>
 8001d74:	4603      	mov	r3, r0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop

08001d80 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f004 f877 	bl	8005e8a <USB_GetMode>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	f040 80f6 	bne.w	8001f90 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f004 f85b 	bl	8005e64 <USB_ReadInterrupts>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	f000 80ec 	beq.w	8001f8e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f004 f852 	bl	8005e64 <USB_ReadInterrupts>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001dca:	d104      	bne.n	8001dd6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001dd4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f004 f842 	bl	8005e64 <USB_ReadInterrupts>
 8001de0:	4603      	mov	r3, r0
 8001de2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001de6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001dea:	d104      	bne.n	8001df6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001df4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f004 f832 	bl	8005e64 <USB_ReadInterrupts>
 8001e00:	4603      	mov	r3, r0
 8001e02:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e0a:	d104      	bne.n	8001e16 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e14:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f004 f822 	bl	8005e64 <USB_ReadInterrupts>
 8001e20:	4603      	mov	r3, r0
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d103      	bne.n	8001e32 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2202      	movs	r2, #2
 8001e30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f004 f814 	bl	8005e64 <USB_ReadInterrupts>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e46:	d11c      	bne.n	8001e82 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001e50:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d10f      	bne.n	8001e82 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001e62:	2110      	movs	r1, #16
 8001e64:	6938      	ldr	r0, [r7, #16]
 8001e66:	f003 ff03 	bl	8005c70 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001e6a:	6938      	ldr	r0, [r7, #16]
 8001e6c:	f003 ff34 	bl	8005cd8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2101      	movs	r1, #1
 8001e76:	4618      	mov	r0, r3
 8001e78:	f004 f90a 	bl	8006090 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f005 ff13 	bl	8007ca8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f003 ffec 	bl	8005e64 <USB_ReadInterrupts>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e92:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e96:	d102      	bne.n	8001e9e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f001 f882 	bl	8002fa2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f003 ffde 	bl	8005e64 <USB_ReadInterrupts>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	f003 0308 	and.w	r3, r3, #8
 8001eae:	2b08      	cmp	r3, #8
 8001eb0:	d106      	bne.n	8001ec0 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f005 fedc 	bl	8007c70 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2208      	movs	r2, #8
 8001ebe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f003 ffcd 	bl	8005e64 <USB_ReadInterrupts>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	f003 0310 	and.w	r3, r3, #16
 8001ed0:	2b10      	cmp	r3, #16
 8001ed2:	d101      	bne.n	8001ed8 <HAL_HCD_IRQHandler+0x158>
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e000      	b.n	8001eda <HAL_HCD_IRQHandler+0x15a>
 8001ed8:	2300      	movs	r3, #0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d012      	beq.n	8001f04 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	699a      	ldr	r2, [r3, #24]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 0210 	bic.w	r2, r2, #16
 8001eec:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 ff85 	bl	8002dfe <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	699a      	ldr	r2, [r3, #24]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f042 0210 	orr.w	r2, r2, #16
 8001f02:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f003 ffab 	bl	8005e64 <USB_ReadInterrupts>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f18:	d13a      	bne.n	8001f90 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f004 fbb6 	bl	8006690 <USB_HC_ReadInterrupt>
 8001f24:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f26:	2300      	movs	r3, #0
 8001f28:	617b      	str	r3, [r7, #20]
 8001f2a:	e025      	b.n	8001f78 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	68ba      	ldr	r2, [r7, #8]
 8001f34:	fa22 f303 	lsr.w	r3, r2, r3
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d018      	beq.n	8001f72 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	015a      	lsls	r2, r3, #5
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4413      	add	r3, r2
 8001f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f56:	d106      	bne.n	8001f66 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 f88f 	bl	8002082 <HCD_HC_IN_IRQHandler>
 8001f64:	e005      	b.n	8001f72 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 fbdd 	bl	800272c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	3301      	adds	r3, #1
 8001f76:	617b      	str	r3, [r7, #20]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	697a      	ldr	r2, [r7, #20]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d3d4      	bcc.n	8001f2c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f8a:	615a      	str	r2, [r3, #20]
 8001f8c:	e000      	b.n	8001f90 <HAL_HCD_IRQHandler+0x210>
      return;
 8001f8e:	bf00      	nop
    }
  }
}
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d101      	bne.n	8001fac <HAL_HCD_Start+0x16>
 8001fa8:	2302      	movs	r3, #2
 8001faa:	e013      	b.n	8001fd4 <HAL_HCD_Start+0x3e>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2101      	movs	r1, #1
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f004 f8a2 	bl	8006104 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f003 fde4 	bl	8005b92 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d101      	bne.n	8001ff2 <HAL_HCD_Stop+0x16>
 8001fee:	2302      	movs	r3, #2
 8001ff0:	e00d      	b.n	800200e <HAL_HCD_Stop+0x32>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f004 fc90 	bl	8006924 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002016:	b480      	push	{r7}
 8002018:	b083      	sub	sp, #12
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
 800201e:	460b      	mov	r3, r1
 8002020:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002022:	78fb      	ldrb	r3, [r7, #3]
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	212c      	movs	r1, #44	; 0x2c
 8002028:	fb01 f303 	mul.w	r3, r1, r3
 800202c:	4413      	add	r3, r2
 800202e:	3360      	adds	r3, #96	; 0x60
 8002030:	781b      	ldrb	r3, [r3, #0]
}
 8002032:	4618      	mov	r0, r3
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	460b      	mov	r3, r1
 8002048:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800204a:	78fb      	ldrb	r3, [r7, #3]
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	212c      	movs	r1, #44	; 0x2c
 8002050:	fb01 f303 	mul.w	r3, r1, r3
 8002054:	4413      	add	r3, r2
 8002056:	3350      	adds	r3, #80	; 0x50
 8002058:	681b      	ldr	r3, [r3, #0]
}
 800205a:	4618      	mov	r0, r3
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b082      	sub	sp, #8
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f004 f896 	bl	80061a4 <USB_GetCurrentFrame>
 8002078:	4603      	mov	r3, r0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b086      	sub	sp, #24
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
 800208a:	460b      	mov	r3, r1
 800208c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002098:	78fb      	ldrb	r3, [r7, #3]
 800209a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	015a      	lsls	r2, r3, #5
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	4413      	add	r3, r2
 80020a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 0304 	and.w	r3, r3, #4
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	d11a      	bne.n	80020e8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	015a      	lsls	r2, r3, #5
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	4413      	add	r3, r2
 80020ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020be:	461a      	mov	r2, r3
 80020c0:	2304      	movs	r3, #4
 80020c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	212c      	movs	r1, #44	; 0x2c
 80020ca:	fb01 f303 	mul.w	r3, r1, r3
 80020ce:	4413      	add	r3, r2
 80020d0:	3361      	adds	r3, #97	; 0x61
 80020d2:	2206      	movs	r2, #6
 80020d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	4611      	mov	r1, r2
 80020e0:	4618      	mov	r0, r3
 80020e2:	f004 fae6 	bl	80066b2 <USB_HC_Halt>
 80020e6:	e0af      	b.n	8002248 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	015a      	lsls	r2, r3, #5
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	4413      	add	r3, r2
 80020f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020fe:	d11b      	bne.n	8002138 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	015a      	lsls	r2, r3, #5
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	4413      	add	r3, r2
 8002108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800210c:	461a      	mov	r2, r3
 800210e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002112:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	212c      	movs	r1, #44	; 0x2c
 800211a:	fb01 f303 	mul.w	r3, r1, r3
 800211e:	4413      	add	r3, r2
 8002120:	3361      	adds	r3, #97	; 0x61
 8002122:	2207      	movs	r2, #7
 8002124:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	b2d2      	uxtb	r2, r2
 800212e:	4611      	mov	r1, r2
 8002130:	4618      	mov	r0, r3
 8002132:	f004 fabe 	bl	80066b2 <USB_HC_Halt>
 8002136:	e087      	b.n	8002248 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	015a      	lsls	r2, r3, #5
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	4413      	add	r3, r2
 8002140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 0320 	and.w	r3, r3, #32
 800214a:	2b20      	cmp	r3, #32
 800214c:	d109      	bne.n	8002162 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	015a      	lsls	r2, r3, #5
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	4413      	add	r3, r2
 8002156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800215a:	461a      	mov	r2, r3
 800215c:	2320      	movs	r3, #32
 800215e:	6093      	str	r3, [r2, #8]
 8002160:	e072      	b.n	8002248 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	015a      	lsls	r2, r3, #5
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	4413      	add	r3, r2
 800216a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f003 0308 	and.w	r3, r3, #8
 8002174:	2b08      	cmp	r3, #8
 8002176:	d11a      	bne.n	80021ae <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	015a      	lsls	r2, r3, #5
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	4413      	add	r3, r2
 8002180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002184:	461a      	mov	r2, r3
 8002186:	2308      	movs	r3, #8
 8002188:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	212c      	movs	r1, #44	; 0x2c
 8002190:	fb01 f303 	mul.w	r3, r1, r3
 8002194:	4413      	add	r3, r2
 8002196:	3361      	adds	r3, #97	; 0x61
 8002198:	2205      	movs	r2, #5
 800219a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	b2d2      	uxtb	r2, r2
 80021a4:	4611      	mov	r1, r2
 80021a6:	4618      	mov	r0, r3
 80021a8:	f004 fa83 	bl	80066b2 <USB_HC_Halt>
 80021ac:	e04c      	b.n	8002248 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	015a      	lsls	r2, r3, #5
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	4413      	add	r3, r2
 80021b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021c4:	d11b      	bne.n	80021fe <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	015a      	lsls	r2, r3, #5
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	4413      	add	r3, r2
 80021ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d2:	461a      	mov	r2, r3
 80021d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021d8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	212c      	movs	r1, #44	; 0x2c
 80021e0:	fb01 f303 	mul.w	r3, r1, r3
 80021e4:	4413      	add	r3, r2
 80021e6:	3361      	adds	r3, #97	; 0x61
 80021e8:	2208      	movs	r2, #8
 80021ea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	4611      	mov	r1, r2
 80021f6:	4618      	mov	r0, r3
 80021f8:	f004 fa5b 	bl	80066b2 <USB_HC_Halt>
 80021fc:	e024      	b.n	8002248 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	015a      	lsls	r2, r3, #5
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	4413      	add	r3, r2
 8002206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002210:	2b80      	cmp	r3, #128	; 0x80
 8002212:	d119      	bne.n	8002248 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	015a      	lsls	r2, r3, #5
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	4413      	add	r3, r2
 800221c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002220:	461a      	mov	r2, r3
 8002222:	2380      	movs	r3, #128	; 0x80
 8002224:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	212c      	movs	r1, #44	; 0x2c
 800222c:	fb01 f303 	mul.w	r3, r1, r3
 8002230:	4413      	add	r3, r2
 8002232:	3361      	adds	r3, #97	; 0x61
 8002234:	2206      	movs	r2, #6
 8002236:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	4611      	mov	r1, r2
 8002242:	4618      	mov	r0, r3
 8002244:	f004 fa35 	bl	80066b2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	015a      	lsls	r2, r3, #5
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	4413      	add	r3, r2
 8002250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800225a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800225e:	d112      	bne.n	8002286 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	4611      	mov	r1, r2
 800226a:	4618      	mov	r0, r3
 800226c:	f004 fa21 	bl	80066b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	015a      	lsls	r2, r3, #5
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	4413      	add	r3, r2
 8002278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800227c:	461a      	mov	r2, r3
 800227e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002282:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002284:	e24e      	b.n	8002724 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	015a      	lsls	r2, r3, #5
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	4413      	add	r3, r2
 800228e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	2b01      	cmp	r3, #1
 800229a:	f040 80df 	bne.w	800245c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d019      	beq.n	80022da <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	212c      	movs	r1, #44	; 0x2c
 80022ac:	fb01 f303 	mul.w	r3, r1, r3
 80022b0:	4413      	add	r3, r2
 80022b2:	3348      	adds	r3, #72	; 0x48
 80022b4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	0159      	lsls	r1, r3, #5
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	440b      	add	r3, r1
 80022be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80022c8:	1ad2      	subs	r2, r2, r3
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	202c      	movs	r0, #44	; 0x2c
 80022d0:	fb00 f303 	mul.w	r3, r0, r3
 80022d4:	440b      	add	r3, r1
 80022d6:	3350      	adds	r3, #80	; 0x50
 80022d8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	212c      	movs	r1, #44	; 0x2c
 80022e0:	fb01 f303 	mul.w	r3, r1, r3
 80022e4:	4413      	add	r3, r2
 80022e6:	3361      	adds	r3, #97	; 0x61
 80022e8:	2201      	movs	r2, #1
 80022ea:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	212c      	movs	r1, #44	; 0x2c
 80022f2:	fb01 f303 	mul.w	r3, r1, r3
 80022f6:	4413      	add	r3, r2
 80022f8:	335c      	adds	r3, #92	; 0x5c
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	015a      	lsls	r2, r3, #5
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	4413      	add	r3, r2
 8002306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800230a:	461a      	mov	r2, r3
 800230c:	2301      	movs	r3, #1
 800230e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	212c      	movs	r1, #44	; 0x2c
 8002316:	fb01 f303 	mul.w	r3, r1, r3
 800231a:	4413      	add	r3, r2
 800231c:	333f      	adds	r3, #63	; 0x3f
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d009      	beq.n	8002338 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	212c      	movs	r1, #44	; 0x2c
 800232a:	fb01 f303 	mul.w	r3, r1, r3
 800232e:	4413      	add	r3, r2
 8002330:	333f      	adds	r3, #63	; 0x3f
 8002332:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002334:	2b02      	cmp	r3, #2
 8002336:	d111      	bne.n	800235c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	4611      	mov	r1, r2
 8002342:	4618      	mov	r0, r3
 8002344:	f004 f9b5 	bl	80066b2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	015a      	lsls	r2, r3, #5
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	4413      	add	r3, r2
 8002350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002354:	461a      	mov	r2, r3
 8002356:	2310      	movs	r3, #16
 8002358:	6093      	str	r3, [r2, #8]
 800235a:	e03a      	b.n	80023d2 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	212c      	movs	r1, #44	; 0x2c
 8002362:	fb01 f303 	mul.w	r3, r1, r3
 8002366:	4413      	add	r3, r2
 8002368:	333f      	adds	r3, #63	; 0x3f
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b03      	cmp	r3, #3
 800236e:	d009      	beq.n	8002384 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	212c      	movs	r1, #44	; 0x2c
 8002376:	fb01 f303 	mul.w	r3, r1, r3
 800237a:	4413      	add	r3, r2
 800237c:	333f      	adds	r3, #63	; 0x3f
 800237e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002380:	2b01      	cmp	r3, #1
 8002382:	d126      	bne.n	80023d2 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	015a      	lsls	r2, r3, #5
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	4413      	add	r3, r2
 800238c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	0151      	lsls	r1, r2, #5
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	440a      	add	r2, r1
 800239a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800239e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80023a2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	212c      	movs	r1, #44	; 0x2c
 80023aa:	fb01 f303 	mul.w	r3, r1, r3
 80023ae:	4413      	add	r3, r2
 80023b0:	3360      	adds	r3, #96	; 0x60
 80023b2:	2201      	movs	r2, #1
 80023b4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	b2d9      	uxtb	r1, r3
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	202c      	movs	r0, #44	; 0x2c
 80023c0:	fb00 f303 	mul.w	r3, r0, r3
 80023c4:	4413      	add	r3, r2
 80023c6:	3360      	adds	r3, #96	; 0x60
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	461a      	mov	r2, r3
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f005 fc79 	bl	8007cc4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d12b      	bne.n	8002432 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	212c      	movs	r1, #44	; 0x2c
 80023e0:	fb01 f303 	mul.w	r3, r1, r3
 80023e4:	4413      	add	r3, r2
 80023e6:	3348      	adds	r3, #72	; 0x48
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	202c      	movs	r0, #44	; 0x2c
 80023f0:	fb00 f202 	mul.w	r2, r0, r2
 80023f4:	440a      	add	r2, r1
 80023f6:	3240      	adds	r2, #64	; 0x40
 80023f8:	8812      	ldrh	r2, [r2, #0]
 80023fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	f000 818e 	beq.w	8002724 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	212c      	movs	r1, #44	; 0x2c
 800240e:	fb01 f303 	mul.w	r3, r1, r3
 8002412:	4413      	add	r3, r2
 8002414:	3354      	adds	r3, #84	; 0x54
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	f083 0301 	eor.w	r3, r3, #1
 800241c:	b2d8      	uxtb	r0, r3
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	212c      	movs	r1, #44	; 0x2c
 8002424:	fb01 f303 	mul.w	r3, r1, r3
 8002428:	4413      	add	r3, r2
 800242a:	3354      	adds	r3, #84	; 0x54
 800242c:	4602      	mov	r2, r0
 800242e:	701a      	strb	r2, [r3, #0]
}
 8002430:	e178      	b.n	8002724 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	212c      	movs	r1, #44	; 0x2c
 8002438:	fb01 f303 	mul.w	r3, r1, r3
 800243c:	4413      	add	r3, r2
 800243e:	3354      	adds	r3, #84	; 0x54
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	f083 0301 	eor.w	r3, r3, #1
 8002446:	b2d8      	uxtb	r0, r3
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	212c      	movs	r1, #44	; 0x2c
 800244e:	fb01 f303 	mul.w	r3, r1, r3
 8002452:	4413      	add	r3, r2
 8002454:	3354      	adds	r3, #84	; 0x54
 8002456:	4602      	mov	r2, r0
 8002458:	701a      	strb	r2, [r3, #0]
}
 800245a:	e163      	b.n	8002724 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	015a      	lsls	r2, r3, #5
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	4413      	add	r3, r2
 8002464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b02      	cmp	r3, #2
 8002470:	f040 80f6 	bne.w	8002660 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	212c      	movs	r1, #44	; 0x2c
 800247a:	fb01 f303 	mul.w	r3, r1, r3
 800247e:	4413      	add	r3, r2
 8002480:	3361      	adds	r3, #97	; 0x61
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d109      	bne.n	800249c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	212c      	movs	r1, #44	; 0x2c
 800248e:	fb01 f303 	mul.w	r3, r1, r3
 8002492:	4413      	add	r3, r2
 8002494:	3360      	adds	r3, #96	; 0x60
 8002496:	2201      	movs	r2, #1
 8002498:	701a      	strb	r2, [r3, #0]
 800249a:	e0c9      	b.n	8002630 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	212c      	movs	r1, #44	; 0x2c
 80024a2:	fb01 f303 	mul.w	r3, r1, r3
 80024a6:	4413      	add	r3, r2
 80024a8:	3361      	adds	r3, #97	; 0x61
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	2b05      	cmp	r3, #5
 80024ae:	d109      	bne.n	80024c4 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	212c      	movs	r1, #44	; 0x2c
 80024b6:	fb01 f303 	mul.w	r3, r1, r3
 80024ba:	4413      	add	r3, r2
 80024bc:	3360      	adds	r3, #96	; 0x60
 80024be:	2205      	movs	r2, #5
 80024c0:	701a      	strb	r2, [r3, #0]
 80024c2:	e0b5      	b.n	8002630 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	212c      	movs	r1, #44	; 0x2c
 80024ca:	fb01 f303 	mul.w	r3, r1, r3
 80024ce:	4413      	add	r3, r2
 80024d0:	3361      	adds	r3, #97	; 0x61
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b06      	cmp	r3, #6
 80024d6:	d009      	beq.n	80024ec <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	212c      	movs	r1, #44	; 0x2c
 80024de:	fb01 f303 	mul.w	r3, r1, r3
 80024e2:	4413      	add	r3, r2
 80024e4:	3361      	adds	r3, #97	; 0x61
 80024e6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80024e8:	2b08      	cmp	r3, #8
 80024ea:	d150      	bne.n	800258e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	212c      	movs	r1, #44	; 0x2c
 80024f2:	fb01 f303 	mul.w	r3, r1, r3
 80024f6:	4413      	add	r3, r2
 80024f8:	335c      	adds	r3, #92	; 0x5c
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	1c5a      	adds	r2, r3, #1
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	202c      	movs	r0, #44	; 0x2c
 8002504:	fb00 f303 	mul.w	r3, r0, r3
 8002508:	440b      	add	r3, r1
 800250a:	335c      	adds	r3, #92	; 0x5c
 800250c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	212c      	movs	r1, #44	; 0x2c
 8002514:	fb01 f303 	mul.w	r3, r1, r3
 8002518:	4413      	add	r3, r2
 800251a:	335c      	adds	r3, #92	; 0x5c
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2b02      	cmp	r3, #2
 8002520:	d912      	bls.n	8002548 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	212c      	movs	r1, #44	; 0x2c
 8002528:	fb01 f303 	mul.w	r3, r1, r3
 800252c:	4413      	add	r3, r2
 800252e:	335c      	adds	r3, #92	; 0x5c
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	212c      	movs	r1, #44	; 0x2c
 800253a:	fb01 f303 	mul.w	r3, r1, r3
 800253e:	4413      	add	r3, r2
 8002540:	3360      	adds	r3, #96	; 0x60
 8002542:	2204      	movs	r2, #4
 8002544:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002546:	e073      	b.n	8002630 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	212c      	movs	r1, #44	; 0x2c
 800254e:	fb01 f303 	mul.w	r3, r1, r3
 8002552:	4413      	add	r3, r2
 8002554:	3360      	adds	r3, #96	; 0x60
 8002556:	2202      	movs	r2, #2
 8002558:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	015a      	lsls	r2, r3, #5
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	4413      	add	r3, r2
 8002562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002570:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002578:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	015a      	lsls	r2, r3, #5
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	4413      	add	r3, r2
 8002582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002586:	461a      	mov	r2, r3
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800258c:	e050      	b.n	8002630 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	212c      	movs	r1, #44	; 0x2c
 8002594:	fb01 f303 	mul.w	r3, r1, r3
 8002598:	4413      	add	r3, r2
 800259a:	3361      	adds	r3, #97	; 0x61
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	2b03      	cmp	r3, #3
 80025a0:	d122      	bne.n	80025e8 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	212c      	movs	r1, #44	; 0x2c
 80025a8:	fb01 f303 	mul.w	r3, r1, r3
 80025ac:	4413      	add	r3, r2
 80025ae:	3360      	adds	r3, #96	; 0x60
 80025b0:	2202      	movs	r2, #2
 80025b2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	015a      	lsls	r2, r3, #5
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	4413      	add	r3, r2
 80025bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025ca:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025d2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	015a      	lsls	r2, r3, #5
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	4413      	add	r3, r2
 80025dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e0:	461a      	mov	r2, r3
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	6013      	str	r3, [r2, #0]
 80025e6:	e023      	b.n	8002630 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	212c      	movs	r1, #44	; 0x2c
 80025ee:	fb01 f303 	mul.w	r3, r1, r3
 80025f2:	4413      	add	r3, r2
 80025f4:	3361      	adds	r3, #97	; 0x61
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b07      	cmp	r3, #7
 80025fa:	d119      	bne.n	8002630 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	212c      	movs	r1, #44	; 0x2c
 8002602:	fb01 f303 	mul.w	r3, r1, r3
 8002606:	4413      	add	r3, r2
 8002608:	335c      	adds	r3, #92	; 0x5c
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	1c5a      	adds	r2, r3, #1
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	202c      	movs	r0, #44	; 0x2c
 8002614:	fb00 f303 	mul.w	r3, r0, r3
 8002618:	440b      	add	r3, r1
 800261a:	335c      	adds	r3, #92	; 0x5c
 800261c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	212c      	movs	r1, #44	; 0x2c
 8002624:	fb01 f303 	mul.w	r3, r1, r3
 8002628:	4413      	add	r3, r2
 800262a:	3360      	adds	r3, #96	; 0x60
 800262c:	2204      	movs	r2, #4
 800262e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	015a      	lsls	r2, r3, #5
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	4413      	add	r3, r2
 8002638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800263c:	461a      	mov	r2, r3
 800263e:	2302      	movs	r3, #2
 8002640:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	b2d9      	uxtb	r1, r3
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	202c      	movs	r0, #44	; 0x2c
 800264c:	fb00 f303 	mul.w	r3, r0, r3
 8002650:	4413      	add	r3, r2
 8002652:	3360      	adds	r3, #96	; 0x60
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	461a      	mov	r2, r3
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f005 fb33 	bl	8007cc4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800265e:	e061      	b.n	8002724 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	015a      	lsls	r2, r3, #5
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	4413      	add	r3, r2
 8002668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 0310 	and.w	r3, r3, #16
 8002672:	2b10      	cmp	r3, #16
 8002674:	d156      	bne.n	8002724 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	212c      	movs	r1, #44	; 0x2c
 800267c:	fb01 f303 	mul.w	r3, r1, r3
 8002680:	4413      	add	r3, r2
 8002682:	333f      	adds	r3, #63	; 0x3f
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	2b03      	cmp	r3, #3
 8002688:	d111      	bne.n	80026ae <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	212c      	movs	r1, #44	; 0x2c
 8002690:	fb01 f303 	mul.w	r3, r1, r3
 8002694:	4413      	add	r3, r2
 8002696:	335c      	adds	r3, #92	; 0x5c
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	4611      	mov	r1, r2
 80026a6:	4618      	mov	r0, r3
 80026a8:	f004 f803 	bl	80066b2 <USB_HC_Halt>
 80026ac:	e031      	b.n	8002712 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	212c      	movs	r1, #44	; 0x2c
 80026b4:	fb01 f303 	mul.w	r3, r1, r3
 80026b8:	4413      	add	r3, r2
 80026ba:	333f      	adds	r3, #63	; 0x3f
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d009      	beq.n	80026d6 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	212c      	movs	r1, #44	; 0x2c
 80026c8:	fb01 f303 	mul.w	r3, r1, r3
 80026cc:	4413      	add	r3, r2
 80026ce:	333f      	adds	r3, #63	; 0x3f
 80026d0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d11d      	bne.n	8002712 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	212c      	movs	r1, #44	; 0x2c
 80026dc:	fb01 f303 	mul.w	r3, r1, r3
 80026e0:	4413      	add	r3, r2
 80026e2:	335c      	adds	r3, #92	; 0x5c
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d110      	bne.n	8002712 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	212c      	movs	r1, #44	; 0x2c
 80026f6:	fb01 f303 	mul.w	r3, r1, r3
 80026fa:	4413      	add	r3, r2
 80026fc:	3361      	adds	r3, #97	; 0x61
 80026fe:	2203      	movs	r2, #3
 8002700:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	b2d2      	uxtb	r2, r2
 800270a:	4611      	mov	r1, r2
 800270c:	4618      	mov	r0, r3
 800270e:	f003 ffd0 	bl	80066b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	015a      	lsls	r2, r3, #5
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	4413      	add	r3, r2
 800271a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800271e:	461a      	mov	r2, r3
 8002720:	2310      	movs	r3, #16
 8002722:	6093      	str	r3, [r2, #8]
}
 8002724:	bf00      	nop
 8002726:	3718      	adds	r7, #24
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b088      	sub	sp, #32
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	460b      	mov	r3, r1
 8002736:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002742:	78fb      	ldrb	r3, [r7, #3]
 8002744:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	015a      	lsls	r2, r3, #5
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	4413      	add	r3, r2
 800274e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f003 0304 	and.w	r3, r3, #4
 8002758:	2b04      	cmp	r3, #4
 800275a:	d11a      	bne.n	8002792 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	015a      	lsls	r2, r3, #5
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	4413      	add	r3, r2
 8002764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002768:	461a      	mov	r2, r3
 800276a:	2304      	movs	r3, #4
 800276c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	212c      	movs	r1, #44	; 0x2c
 8002774:	fb01 f303 	mul.w	r3, r1, r3
 8002778:	4413      	add	r3, r2
 800277a:	3361      	adds	r3, #97	; 0x61
 800277c:	2206      	movs	r2, #6
 800277e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	697a      	ldr	r2, [r7, #20]
 8002786:	b2d2      	uxtb	r2, r2
 8002788:	4611      	mov	r1, r2
 800278a:	4618      	mov	r0, r3
 800278c:	f003 ff91 	bl	80066b2 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002790:	e331      	b.n	8002df6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	015a      	lsls	r2, r3, #5
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	4413      	add	r3, r2
 800279a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f003 0320 	and.w	r3, r3, #32
 80027a4:	2b20      	cmp	r3, #32
 80027a6:	d12e      	bne.n	8002806 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	015a      	lsls	r2, r3, #5
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	4413      	add	r3, r2
 80027b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b4:	461a      	mov	r2, r3
 80027b6:	2320      	movs	r3, #32
 80027b8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	212c      	movs	r1, #44	; 0x2c
 80027c0:	fb01 f303 	mul.w	r3, r1, r3
 80027c4:	4413      	add	r3, r2
 80027c6:	333d      	adds	r3, #61	; 0x3d
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	f040 8313 	bne.w	8002df6 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	212c      	movs	r1, #44	; 0x2c
 80027d6:	fb01 f303 	mul.w	r3, r1, r3
 80027da:	4413      	add	r3, r2
 80027dc:	333d      	adds	r3, #61	; 0x3d
 80027de:	2200      	movs	r2, #0
 80027e0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	212c      	movs	r1, #44	; 0x2c
 80027e8:	fb01 f303 	mul.w	r3, r1, r3
 80027ec:	4413      	add	r3, r2
 80027ee:	3360      	adds	r3, #96	; 0x60
 80027f0:	2202      	movs	r2, #2
 80027f2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	4611      	mov	r1, r2
 80027fe:	4618      	mov	r0, r3
 8002800:	f003 ff57 	bl	80066b2 <USB_HC_Halt>
}
 8002804:	e2f7      	b.n	8002df6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	015a      	lsls	r2, r3, #5
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	4413      	add	r3, r2
 800280e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800281c:	d112      	bne.n	8002844 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	015a      	lsls	r2, r3, #5
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	4413      	add	r3, r2
 8002826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800282a:	461a      	mov	r2, r3
 800282c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002830:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	b2d2      	uxtb	r2, r2
 800283a:	4611      	mov	r1, r2
 800283c:	4618      	mov	r0, r3
 800283e:	f003 ff38 	bl	80066b2 <USB_HC_Halt>
}
 8002842:	e2d8      	b.n	8002df6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	015a      	lsls	r2, r3, #5
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	4413      	add	r3, r2
 800284c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	2b01      	cmp	r3, #1
 8002858:	d140      	bne.n	80028dc <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	212c      	movs	r1, #44	; 0x2c
 8002860:	fb01 f303 	mul.w	r3, r1, r3
 8002864:	4413      	add	r3, r2
 8002866:	335c      	adds	r3, #92	; 0x5c
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	015a      	lsls	r2, r3, #5
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	4413      	add	r3, r2
 8002874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800287e:	2b40      	cmp	r3, #64	; 0x40
 8002880:	d111      	bne.n	80028a6 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	212c      	movs	r1, #44	; 0x2c
 8002888:	fb01 f303 	mul.w	r3, r1, r3
 800288c:	4413      	add	r3, r2
 800288e:	333d      	adds	r3, #61	; 0x3d
 8002890:	2201      	movs	r2, #1
 8002892:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	015a      	lsls	r2, r3, #5
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	4413      	add	r3, r2
 800289c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a0:	461a      	mov	r2, r3
 80028a2:	2340      	movs	r3, #64	; 0x40
 80028a4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	015a      	lsls	r2, r3, #5
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	4413      	add	r3, r2
 80028ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b2:	461a      	mov	r2, r3
 80028b4:	2301      	movs	r3, #1
 80028b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	212c      	movs	r1, #44	; 0x2c
 80028be:	fb01 f303 	mul.w	r3, r1, r3
 80028c2:	4413      	add	r3, r2
 80028c4:	3361      	adds	r3, #97	; 0x61
 80028c6:	2201      	movs	r2, #1
 80028c8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	b2d2      	uxtb	r2, r2
 80028d2:	4611      	mov	r1, r2
 80028d4:	4618      	mov	r0, r3
 80028d6:	f003 feec 	bl	80066b2 <USB_HC_Halt>
}
 80028da:	e28c      	b.n	8002df6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	015a      	lsls	r2, r3, #5
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	4413      	add	r3, r2
 80028e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ee:	2b40      	cmp	r3, #64	; 0x40
 80028f0:	d12c      	bne.n	800294c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	212c      	movs	r1, #44	; 0x2c
 80028f8:	fb01 f303 	mul.w	r3, r1, r3
 80028fc:	4413      	add	r3, r2
 80028fe:	3361      	adds	r3, #97	; 0x61
 8002900:	2204      	movs	r2, #4
 8002902:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	212c      	movs	r1, #44	; 0x2c
 800290a:	fb01 f303 	mul.w	r3, r1, r3
 800290e:	4413      	add	r3, r2
 8002910:	333d      	adds	r3, #61	; 0x3d
 8002912:	2201      	movs	r2, #1
 8002914:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	212c      	movs	r1, #44	; 0x2c
 800291c:	fb01 f303 	mul.w	r3, r1, r3
 8002920:	4413      	add	r3, r2
 8002922:	335c      	adds	r3, #92	; 0x5c
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	4611      	mov	r1, r2
 8002932:	4618      	mov	r0, r3
 8002934:	f003 febd 	bl	80066b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	015a      	lsls	r2, r3, #5
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	4413      	add	r3, r2
 8002940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002944:	461a      	mov	r2, r3
 8002946:	2340      	movs	r3, #64	; 0x40
 8002948:	6093      	str	r3, [r2, #8]
}
 800294a:	e254      	b.n	8002df6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	015a      	lsls	r2, r3, #5
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	4413      	add	r3, r2
 8002954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f003 0308 	and.w	r3, r3, #8
 800295e:	2b08      	cmp	r3, #8
 8002960:	d11a      	bne.n	8002998 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	015a      	lsls	r2, r3, #5
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	4413      	add	r3, r2
 800296a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800296e:	461a      	mov	r2, r3
 8002970:	2308      	movs	r3, #8
 8002972:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	212c      	movs	r1, #44	; 0x2c
 800297a:	fb01 f303 	mul.w	r3, r1, r3
 800297e:	4413      	add	r3, r2
 8002980:	3361      	adds	r3, #97	; 0x61
 8002982:	2205      	movs	r2, #5
 8002984:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	b2d2      	uxtb	r2, r2
 800298e:	4611      	mov	r1, r2
 8002990:	4618      	mov	r0, r3
 8002992:	f003 fe8e 	bl	80066b2 <USB_HC_Halt>
}
 8002996:	e22e      	b.n	8002df6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	015a      	lsls	r2, r3, #5
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	4413      	add	r3, r2
 80029a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 0310 	and.w	r3, r3, #16
 80029aa:	2b10      	cmp	r3, #16
 80029ac:	d140      	bne.n	8002a30 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	212c      	movs	r1, #44	; 0x2c
 80029b4:	fb01 f303 	mul.w	r3, r1, r3
 80029b8:	4413      	add	r3, r2
 80029ba:	335c      	adds	r3, #92	; 0x5c
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	212c      	movs	r1, #44	; 0x2c
 80029c6:	fb01 f303 	mul.w	r3, r1, r3
 80029ca:	4413      	add	r3, r2
 80029cc:	3361      	adds	r3, #97	; 0x61
 80029ce:	2203      	movs	r2, #3
 80029d0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	212c      	movs	r1, #44	; 0x2c
 80029d8:	fb01 f303 	mul.w	r3, r1, r3
 80029dc:	4413      	add	r3, r2
 80029de:	333d      	adds	r3, #61	; 0x3d
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d112      	bne.n	8002a0c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	212c      	movs	r1, #44	; 0x2c
 80029ec:	fb01 f303 	mul.w	r3, r1, r3
 80029f0:	4413      	add	r3, r2
 80029f2:	333c      	adds	r3, #60	; 0x3c
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d108      	bne.n	8002a0c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	212c      	movs	r1, #44	; 0x2c
 8002a00:	fb01 f303 	mul.w	r3, r1, r3
 8002a04:	4413      	add	r3, r2
 8002a06:	333d      	adds	r3, #61	; 0x3d
 8002a08:	2201      	movs	r2, #1
 8002a0a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	697a      	ldr	r2, [r7, #20]
 8002a12:	b2d2      	uxtb	r2, r2
 8002a14:	4611      	mov	r1, r2
 8002a16:	4618      	mov	r0, r3
 8002a18:	f003 fe4b 	bl	80066b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	015a      	lsls	r2, r3, #5
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	4413      	add	r3, r2
 8002a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a28:	461a      	mov	r2, r3
 8002a2a:	2310      	movs	r3, #16
 8002a2c:	6093      	str	r3, [r2, #8]
}
 8002a2e:	e1e2      	b.n	8002df6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	015a      	lsls	r2, r3, #5
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	4413      	add	r3, r2
 8002a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a42:	2b80      	cmp	r3, #128	; 0x80
 8002a44:	d164      	bne.n	8002b10 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d111      	bne.n	8002a72 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	212c      	movs	r1, #44	; 0x2c
 8002a54:	fb01 f303 	mul.w	r3, r1, r3
 8002a58:	4413      	add	r3, r2
 8002a5a:	3361      	adds	r3, #97	; 0x61
 8002a5c:	2206      	movs	r2, #6
 8002a5e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	4611      	mov	r1, r2
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f003 fe21 	bl	80066b2 <USB_HC_Halt>
 8002a70:	e044      	b.n	8002afc <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	212c      	movs	r1, #44	; 0x2c
 8002a78:	fb01 f303 	mul.w	r3, r1, r3
 8002a7c:	4413      	add	r3, r2
 8002a7e:	335c      	adds	r3, #92	; 0x5c
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	1c5a      	adds	r2, r3, #1
 8002a84:	6879      	ldr	r1, [r7, #4]
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	202c      	movs	r0, #44	; 0x2c
 8002a8a:	fb00 f303 	mul.w	r3, r0, r3
 8002a8e:	440b      	add	r3, r1
 8002a90:	335c      	adds	r3, #92	; 0x5c
 8002a92:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	212c      	movs	r1, #44	; 0x2c
 8002a9a:	fb01 f303 	mul.w	r3, r1, r3
 8002a9e:	4413      	add	r3, r2
 8002aa0:	335c      	adds	r3, #92	; 0x5c
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d920      	bls.n	8002aea <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	212c      	movs	r1, #44	; 0x2c
 8002aae:	fb01 f303 	mul.w	r3, r1, r3
 8002ab2:	4413      	add	r3, r2
 8002ab4:	335c      	adds	r3, #92	; 0x5c
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	212c      	movs	r1, #44	; 0x2c
 8002ac0:	fb01 f303 	mul.w	r3, r1, r3
 8002ac4:	4413      	add	r3, r2
 8002ac6:	3360      	adds	r3, #96	; 0x60
 8002ac8:	2204      	movs	r2, #4
 8002aca:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	b2d9      	uxtb	r1, r3
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	202c      	movs	r0, #44	; 0x2c
 8002ad6:	fb00 f303 	mul.w	r3, r0, r3
 8002ada:	4413      	add	r3, r2
 8002adc:	3360      	adds	r3, #96	; 0x60
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f005 f8ee 	bl	8007cc4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002ae8:	e008      	b.n	8002afc <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	212c      	movs	r1, #44	; 0x2c
 8002af0:	fb01 f303 	mul.w	r3, r1, r3
 8002af4:	4413      	add	r3, r2
 8002af6:	3360      	adds	r3, #96	; 0x60
 8002af8:	2202      	movs	r2, #2
 8002afa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	015a      	lsls	r2, r3, #5
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	4413      	add	r3, r2
 8002b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b08:	461a      	mov	r2, r3
 8002b0a:	2380      	movs	r3, #128	; 0x80
 8002b0c:	6093      	str	r3, [r2, #8]
}
 8002b0e:	e172      	b.n	8002df6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	015a      	lsls	r2, r3, #5
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	4413      	add	r3, r2
 8002b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b26:	d11b      	bne.n	8002b60 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	212c      	movs	r1, #44	; 0x2c
 8002b2e:	fb01 f303 	mul.w	r3, r1, r3
 8002b32:	4413      	add	r3, r2
 8002b34:	3361      	adds	r3, #97	; 0x61
 8002b36:	2208      	movs	r2, #8
 8002b38:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	b2d2      	uxtb	r2, r2
 8002b42:	4611      	mov	r1, r2
 8002b44:	4618      	mov	r0, r3
 8002b46:	f003 fdb4 	bl	80066b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	015a      	lsls	r2, r3, #5
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	4413      	add	r3, r2
 8002b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b56:	461a      	mov	r2, r3
 8002b58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b5c:	6093      	str	r3, [r2, #8]
}
 8002b5e:	e14a      	b.n	8002df6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	015a      	lsls	r2, r3, #5
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	4413      	add	r3, r2
 8002b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	f040 813f 	bne.w	8002df6 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	212c      	movs	r1, #44	; 0x2c
 8002b7e:	fb01 f303 	mul.w	r3, r1, r3
 8002b82:	4413      	add	r3, r2
 8002b84:	3361      	adds	r3, #97	; 0x61
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d17d      	bne.n	8002c88 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	212c      	movs	r1, #44	; 0x2c
 8002b92:	fb01 f303 	mul.w	r3, r1, r3
 8002b96:	4413      	add	r3, r2
 8002b98:	3360      	adds	r3, #96	; 0x60
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	212c      	movs	r1, #44	; 0x2c
 8002ba4:	fb01 f303 	mul.w	r3, r1, r3
 8002ba8:	4413      	add	r3, r2
 8002baa:	333f      	adds	r3, #63	; 0x3f
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d00a      	beq.n	8002bc8 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	212c      	movs	r1, #44	; 0x2c
 8002bb8:	fb01 f303 	mul.w	r3, r1, r3
 8002bbc:	4413      	add	r3, r2
 8002bbe:	333f      	adds	r3, #63	; 0x3f
 8002bc0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002bc2:	2b03      	cmp	r3, #3
 8002bc4:	f040 8100 	bne.w	8002dc8 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d113      	bne.n	8002bf8 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	212c      	movs	r1, #44	; 0x2c
 8002bd6:	fb01 f303 	mul.w	r3, r1, r3
 8002bda:	4413      	add	r3, r2
 8002bdc:	3355      	adds	r3, #85	; 0x55
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	f083 0301 	eor.w	r3, r3, #1
 8002be4:	b2d8      	uxtb	r0, r3
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	212c      	movs	r1, #44	; 0x2c
 8002bec:	fb01 f303 	mul.w	r3, r1, r3
 8002bf0:	4413      	add	r3, r2
 8002bf2:	3355      	adds	r3, #85	; 0x55
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	f040 80e3 	bne.w	8002dc8 <HCD_HC_OUT_IRQHandler+0x69c>
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	212c      	movs	r1, #44	; 0x2c
 8002c08:	fb01 f303 	mul.w	r3, r1, r3
 8002c0c:	4413      	add	r3, r2
 8002c0e:	334c      	adds	r3, #76	; 0x4c
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f000 80d8 	beq.w	8002dc8 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	212c      	movs	r1, #44	; 0x2c
 8002c1e:	fb01 f303 	mul.w	r3, r1, r3
 8002c22:	4413      	add	r3, r2
 8002c24:	334c      	adds	r3, #76	; 0x4c
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6879      	ldr	r1, [r7, #4]
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	202c      	movs	r0, #44	; 0x2c
 8002c2e:	fb00 f202 	mul.w	r2, r0, r2
 8002c32:	440a      	add	r2, r1
 8002c34:	3240      	adds	r2, #64	; 0x40
 8002c36:	8812      	ldrh	r2, [r2, #0]
 8002c38:	4413      	add	r3, r2
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	6879      	ldr	r1, [r7, #4]
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	202c      	movs	r0, #44	; 0x2c
 8002c42:	fb00 f202 	mul.w	r2, r0, r2
 8002c46:	440a      	add	r2, r1
 8002c48:	3240      	adds	r2, #64	; 0x40
 8002c4a:	8812      	ldrh	r2, [r2, #0]
 8002c4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c50:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 80b5 	beq.w	8002dc8 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	212c      	movs	r1, #44	; 0x2c
 8002c64:	fb01 f303 	mul.w	r3, r1, r3
 8002c68:	4413      	add	r3, r2
 8002c6a:	3355      	adds	r3, #85	; 0x55
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	f083 0301 	eor.w	r3, r3, #1
 8002c72:	b2d8      	uxtb	r0, r3
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	212c      	movs	r1, #44	; 0x2c
 8002c7a:	fb01 f303 	mul.w	r3, r1, r3
 8002c7e:	4413      	add	r3, r2
 8002c80:	3355      	adds	r3, #85	; 0x55
 8002c82:	4602      	mov	r2, r0
 8002c84:	701a      	strb	r2, [r3, #0]
 8002c86:	e09f      	b.n	8002dc8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	212c      	movs	r1, #44	; 0x2c
 8002c8e:	fb01 f303 	mul.w	r3, r1, r3
 8002c92:	4413      	add	r3, r2
 8002c94:	3361      	adds	r3, #97	; 0x61
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	2b03      	cmp	r3, #3
 8002c9a:	d109      	bne.n	8002cb0 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	212c      	movs	r1, #44	; 0x2c
 8002ca2:	fb01 f303 	mul.w	r3, r1, r3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3360      	adds	r3, #96	; 0x60
 8002caa:	2202      	movs	r2, #2
 8002cac:	701a      	strb	r2, [r3, #0]
 8002cae:	e08b      	b.n	8002dc8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	212c      	movs	r1, #44	; 0x2c
 8002cb6:	fb01 f303 	mul.w	r3, r1, r3
 8002cba:	4413      	add	r3, r2
 8002cbc:	3361      	adds	r3, #97	; 0x61
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b04      	cmp	r3, #4
 8002cc2:	d109      	bne.n	8002cd8 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	212c      	movs	r1, #44	; 0x2c
 8002cca:	fb01 f303 	mul.w	r3, r1, r3
 8002cce:	4413      	add	r3, r2
 8002cd0:	3360      	adds	r3, #96	; 0x60
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	701a      	strb	r2, [r3, #0]
 8002cd6:	e077      	b.n	8002dc8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	212c      	movs	r1, #44	; 0x2c
 8002cde:	fb01 f303 	mul.w	r3, r1, r3
 8002ce2:	4413      	add	r3, r2
 8002ce4:	3361      	adds	r3, #97	; 0x61
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	2b05      	cmp	r3, #5
 8002cea:	d109      	bne.n	8002d00 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	212c      	movs	r1, #44	; 0x2c
 8002cf2:	fb01 f303 	mul.w	r3, r1, r3
 8002cf6:	4413      	add	r3, r2
 8002cf8:	3360      	adds	r3, #96	; 0x60
 8002cfa:	2205      	movs	r2, #5
 8002cfc:	701a      	strb	r2, [r3, #0]
 8002cfe:	e063      	b.n	8002dc8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	212c      	movs	r1, #44	; 0x2c
 8002d06:	fb01 f303 	mul.w	r3, r1, r3
 8002d0a:	4413      	add	r3, r2
 8002d0c:	3361      	adds	r3, #97	; 0x61
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b06      	cmp	r3, #6
 8002d12:	d009      	beq.n	8002d28 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	212c      	movs	r1, #44	; 0x2c
 8002d1a:	fb01 f303 	mul.w	r3, r1, r3
 8002d1e:	4413      	add	r3, r2
 8002d20:	3361      	adds	r3, #97	; 0x61
 8002d22:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d24:	2b08      	cmp	r3, #8
 8002d26:	d14f      	bne.n	8002dc8 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	212c      	movs	r1, #44	; 0x2c
 8002d2e:	fb01 f303 	mul.w	r3, r1, r3
 8002d32:	4413      	add	r3, r2
 8002d34:	335c      	adds	r3, #92	; 0x5c
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	1c5a      	adds	r2, r3, #1
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	202c      	movs	r0, #44	; 0x2c
 8002d40:	fb00 f303 	mul.w	r3, r0, r3
 8002d44:	440b      	add	r3, r1
 8002d46:	335c      	adds	r3, #92	; 0x5c
 8002d48:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	212c      	movs	r1, #44	; 0x2c
 8002d50:	fb01 f303 	mul.w	r3, r1, r3
 8002d54:	4413      	add	r3, r2
 8002d56:	335c      	adds	r3, #92	; 0x5c
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d912      	bls.n	8002d84 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	212c      	movs	r1, #44	; 0x2c
 8002d64:	fb01 f303 	mul.w	r3, r1, r3
 8002d68:	4413      	add	r3, r2
 8002d6a:	335c      	adds	r3, #92	; 0x5c
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	212c      	movs	r1, #44	; 0x2c
 8002d76:	fb01 f303 	mul.w	r3, r1, r3
 8002d7a:	4413      	add	r3, r2
 8002d7c:	3360      	adds	r3, #96	; 0x60
 8002d7e:	2204      	movs	r2, #4
 8002d80:	701a      	strb	r2, [r3, #0]
 8002d82:	e021      	b.n	8002dc8 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	212c      	movs	r1, #44	; 0x2c
 8002d8a:	fb01 f303 	mul.w	r3, r1, r3
 8002d8e:	4413      	add	r3, r2
 8002d90:	3360      	adds	r3, #96	; 0x60
 8002d92:	2202      	movs	r2, #2
 8002d94:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	015a      	lsls	r2, r3, #5
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002dac:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002db4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	015a      	lsls	r2, r3, #5
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	015a      	lsls	r2, r3, #5
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	4413      	add	r3, r2
 8002dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	b2d9      	uxtb	r1, r3
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	202c      	movs	r0, #44	; 0x2c
 8002de4:	fb00 f303 	mul.w	r3, r0, r3
 8002de8:	4413      	add	r3, r2
 8002dea:	3360      	adds	r3, #96	; 0x60
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	461a      	mov	r2, r3
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f004 ff67 	bl	8007cc4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002df6:	bf00      	nop
 8002df8:	3720      	adds	r7, #32
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b08a      	sub	sp, #40	; 0x28
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	f003 030f 	and.w	r3, r3, #15
 8002e1e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	0c5b      	lsrs	r3, r3, #17
 8002e24:	f003 030f 	and.w	r3, r3, #15
 8002e28:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	091b      	lsrs	r3, r3, #4
 8002e2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e32:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d004      	beq.n	8002e44 <HCD_RXQLVL_IRQHandler+0x46>
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	2b05      	cmp	r3, #5
 8002e3e:	f000 80a9 	beq.w	8002f94 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002e42:	e0aa      	b.n	8002f9a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f000 80a6 	beq.w	8002f98 <HCD_RXQLVL_IRQHandler+0x19a>
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	212c      	movs	r1, #44	; 0x2c
 8002e52:	fb01 f303 	mul.w	r3, r1, r3
 8002e56:	4413      	add	r3, r2
 8002e58:	3344      	adds	r3, #68	; 0x44
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 809b 	beq.w	8002f98 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	212c      	movs	r1, #44	; 0x2c
 8002e68:	fb01 f303 	mul.w	r3, r1, r3
 8002e6c:	4413      	add	r3, r2
 8002e6e:	3350      	adds	r3, #80	; 0x50
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	441a      	add	r2, r3
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	202c      	movs	r0, #44	; 0x2c
 8002e7c:	fb00 f303 	mul.w	r3, r0, r3
 8002e80:	440b      	add	r3, r1
 8002e82:	334c      	adds	r3, #76	; 0x4c
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d87a      	bhi.n	8002f80 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6818      	ldr	r0, [r3, #0]
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	212c      	movs	r1, #44	; 0x2c
 8002e94:	fb01 f303 	mul.w	r3, r1, r3
 8002e98:	4413      	add	r3, r2
 8002e9a:	3344      	adds	r3, #68	; 0x44
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	b292      	uxth	r2, r2
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	f002 ff86 	bl	8005db4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	212c      	movs	r1, #44	; 0x2c
 8002eae:	fb01 f303 	mul.w	r3, r1, r3
 8002eb2:	4413      	add	r3, r2
 8002eb4:	3344      	adds	r3, #68	; 0x44
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	441a      	add	r2, r3
 8002ebc:	6879      	ldr	r1, [r7, #4]
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	202c      	movs	r0, #44	; 0x2c
 8002ec2:	fb00 f303 	mul.w	r3, r0, r3
 8002ec6:	440b      	add	r3, r1
 8002ec8:	3344      	adds	r3, #68	; 0x44
 8002eca:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	212c      	movs	r1, #44	; 0x2c
 8002ed2:	fb01 f303 	mul.w	r3, r1, r3
 8002ed6:	4413      	add	r3, r2
 8002ed8:	3350      	adds	r3, #80	; 0x50
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	441a      	add	r2, r3
 8002ee0:	6879      	ldr	r1, [r7, #4]
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	202c      	movs	r0, #44	; 0x2c
 8002ee6:	fb00 f303 	mul.w	r3, r0, r3
 8002eea:	440b      	add	r3, r1
 8002eec:	3350      	adds	r3, #80	; 0x50
 8002eee:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	015a      	lsls	r2, r3, #5
 8002ef4:	6a3b      	ldr	r3, [r7, #32]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	0cdb      	lsrs	r3, r3, #19
 8002f00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f04:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	212c      	movs	r1, #44	; 0x2c
 8002f0c:	fb01 f303 	mul.w	r3, r1, r3
 8002f10:	4413      	add	r3, r2
 8002f12:	3340      	adds	r3, #64	; 0x40
 8002f14:	881b      	ldrh	r3, [r3, #0]
 8002f16:	461a      	mov	r2, r3
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d13c      	bne.n	8002f98 <HCD_RXQLVL_IRQHandler+0x19a>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d039      	beq.n	8002f98 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	015a      	lsls	r2, r3, #5
 8002f28:	6a3b      	ldr	r3, [r7, #32]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f3a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f42:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	015a      	lsls	r2, r3, #5
 8002f48:	6a3b      	ldr	r3, [r7, #32]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f50:	461a      	mov	r2, r3
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	212c      	movs	r1, #44	; 0x2c
 8002f5c:	fb01 f303 	mul.w	r3, r1, r3
 8002f60:	4413      	add	r3, r2
 8002f62:	3354      	adds	r3, #84	; 0x54
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	f083 0301 	eor.w	r3, r3, #1
 8002f6a:	b2d8      	uxtb	r0, r3
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	212c      	movs	r1, #44	; 0x2c
 8002f72:	fb01 f303 	mul.w	r3, r1, r3
 8002f76:	4413      	add	r3, r2
 8002f78:	3354      	adds	r3, #84	; 0x54
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	701a      	strb	r2, [r3, #0]
      break;
 8002f7e:	e00b      	b.n	8002f98 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	212c      	movs	r1, #44	; 0x2c
 8002f86:	fb01 f303 	mul.w	r3, r1, r3
 8002f8a:	4413      	add	r3, r2
 8002f8c:	3360      	adds	r3, #96	; 0x60
 8002f8e:	2204      	movs	r2, #4
 8002f90:	701a      	strb	r2, [r3, #0]
      break;
 8002f92:	e001      	b.n	8002f98 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002f94:	bf00      	nop
 8002f96:	e000      	b.n	8002f9a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002f98:	bf00      	nop
  }
}
 8002f9a:	bf00      	nop
 8002f9c:	3728      	adds	r7, #40	; 0x28
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b086      	sub	sp, #24
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002fce:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d10b      	bne.n	8002ff2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d102      	bne.n	8002fea <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f004 fe51 	bl	8007c8c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	f043 0302 	orr.w	r3, r3, #2
 8002ff0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f003 0308 	and.w	r3, r3, #8
 8002ff8:	2b08      	cmp	r3, #8
 8002ffa:	d132      	bne.n	8003062 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	f043 0308 	orr.w	r3, r3, #8
 8003002:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f003 0304 	and.w	r3, r3, #4
 800300a:	2b04      	cmp	r3, #4
 800300c:	d126      	bne.n	800305c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	2b02      	cmp	r3, #2
 8003014:	d113      	bne.n	800303e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800301c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003020:	d106      	bne.n	8003030 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2102      	movs	r1, #2
 8003028:	4618      	mov	r0, r3
 800302a:	f003 f831 	bl	8006090 <USB_InitFSLSPClkSel>
 800302e:	e011      	b.n	8003054 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2101      	movs	r1, #1
 8003036:	4618      	mov	r0, r3
 8003038:	f003 f82a 	bl	8006090 <USB_InitFSLSPClkSel>
 800303c:	e00a      	b.n	8003054 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d106      	bne.n	8003054 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800304c:	461a      	mov	r2, r3
 800304e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003052:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f004 fe43 	bl	8007ce0 <HAL_HCD_PortEnabled_Callback>
 800305a:	e002      	b.n	8003062 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f004 fe4d 	bl	8007cfc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f003 0320 	and.w	r3, r3, #32
 8003068:	2b20      	cmp	r3, #32
 800306a:	d103      	bne.n	8003074 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	f043 0320 	orr.w	r3, r3, #32
 8003072:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800307a:	461a      	mov	r2, r3
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	6013      	str	r3, [r2, #0]
}
 8003080:	bf00      	nop
 8003082:	3718      	adds	r7, #24
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e12b      	b.n	80032f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d106      	bne.n	80030b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f7fd fe4a 	bl	8000d48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2224      	movs	r2, #36	; 0x24
 80030b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f022 0201 	bic.w	r2, r2, #1
 80030ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030ec:	f001 fa20 	bl	8004530 <HAL_RCC_GetPCLK1Freq>
 80030f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	4a81      	ldr	r2, [pc, #516]	; (80032fc <HAL_I2C_Init+0x274>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d807      	bhi.n	800310c <HAL_I2C_Init+0x84>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	4a80      	ldr	r2, [pc, #512]	; (8003300 <HAL_I2C_Init+0x278>)
 8003100:	4293      	cmp	r3, r2
 8003102:	bf94      	ite	ls
 8003104:	2301      	movls	r3, #1
 8003106:	2300      	movhi	r3, #0
 8003108:	b2db      	uxtb	r3, r3
 800310a:	e006      	b.n	800311a <HAL_I2C_Init+0x92>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	4a7d      	ldr	r2, [pc, #500]	; (8003304 <HAL_I2C_Init+0x27c>)
 8003110:	4293      	cmp	r3, r2
 8003112:	bf94      	ite	ls
 8003114:	2301      	movls	r3, #1
 8003116:	2300      	movhi	r3, #0
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e0e7      	b.n	80032f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	4a78      	ldr	r2, [pc, #480]	; (8003308 <HAL_I2C_Init+0x280>)
 8003126:	fba2 2303 	umull	r2, r3, r2, r3
 800312a:	0c9b      	lsrs	r3, r3, #18
 800312c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68ba      	ldr	r2, [r7, #8]
 800313e:	430a      	orrs	r2, r1
 8003140:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	4a6a      	ldr	r2, [pc, #424]	; (80032fc <HAL_I2C_Init+0x274>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d802      	bhi.n	800315c <HAL_I2C_Init+0xd4>
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	3301      	adds	r3, #1
 800315a:	e009      	b.n	8003170 <HAL_I2C_Init+0xe8>
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003162:	fb02 f303 	mul.w	r3, r2, r3
 8003166:	4a69      	ldr	r2, [pc, #420]	; (800330c <HAL_I2C_Init+0x284>)
 8003168:	fba2 2303 	umull	r2, r3, r2, r3
 800316c:	099b      	lsrs	r3, r3, #6
 800316e:	3301      	adds	r3, #1
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	6812      	ldr	r2, [r2, #0]
 8003174:	430b      	orrs	r3, r1
 8003176:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	69db      	ldr	r3, [r3, #28]
 800317e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003182:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	495c      	ldr	r1, [pc, #368]	; (80032fc <HAL_I2C_Init+0x274>)
 800318c:	428b      	cmp	r3, r1
 800318e:	d819      	bhi.n	80031c4 <HAL_I2C_Init+0x13c>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	1e59      	subs	r1, r3, #1
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	fbb1 f3f3 	udiv	r3, r1, r3
 800319e:	1c59      	adds	r1, r3, #1
 80031a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031a4:	400b      	ands	r3, r1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00a      	beq.n	80031c0 <HAL_I2C_Init+0x138>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	1e59      	subs	r1, r3, #1
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80031b8:	3301      	adds	r3, #1
 80031ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031be:	e051      	b.n	8003264 <HAL_I2C_Init+0x1dc>
 80031c0:	2304      	movs	r3, #4
 80031c2:	e04f      	b.n	8003264 <HAL_I2C_Init+0x1dc>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d111      	bne.n	80031f0 <HAL_I2C_Init+0x168>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	1e58      	subs	r0, r3, #1
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6859      	ldr	r1, [r3, #4]
 80031d4:	460b      	mov	r3, r1
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	440b      	add	r3, r1
 80031da:	fbb0 f3f3 	udiv	r3, r0, r3
 80031de:	3301      	adds	r3, #1
 80031e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	bf0c      	ite	eq
 80031e8:	2301      	moveq	r3, #1
 80031ea:	2300      	movne	r3, #0
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	e012      	b.n	8003216 <HAL_I2C_Init+0x18e>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	1e58      	subs	r0, r3, #1
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6859      	ldr	r1, [r3, #4]
 80031f8:	460b      	mov	r3, r1
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	440b      	add	r3, r1
 80031fe:	0099      	lsls	r1, r3, #2
 8003200:	440b      	add	r3, r1
 8003202:	fbb0 f3f3 	udiv	r3, r0, r3
 8003206:	3301      	adds	r3, #1
 8003208:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800320c:	2b00      	cmp	r3, #0
 800320e:	bf0c      	ite	eq
 8003210:	2301      	moveq	r3, #1
 8003212:	2300      	movne	r3, #0
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <HAL_I2C_Init+0x196>
 800321a:	2301      	movs	r3, #1
 800321c:	e022      	b.n	8003264 <HAL_I2C_Init+0x1dc>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10e      	bne.n	8003244 <HAL_I2C_Init+0x1bc>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	1e58      	subs	r0, r3, #1
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6859      	ldr	r1, [r3, #4]
 800322e:	460b      	mov	r3, r1
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	440b      	add	r3, r1
 8003234:	fbb0 f3f3 	udiv	r3, r0, r3
 8003238:	3301      	adds	r3, #1
 800323a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800323e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003242:	e00f      	b.n	8003264 <HAL_I2C_Init+0x1dc>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	1e58      	subs	r0, r3, #1
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6859      	ldr	r1, [r3, #4]
 800324c:	460b      	mov	r3, r1
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	440b      	add	r3, r1
 8003252:	0099      	lsls	r1, r3, #2
 8003254:	440b      	add	r3, r1
 8003256:	fbb0 f3f3 	udiv	r3, r0, r3
 800325a:	3301      	adds	r3, #1
 800325c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003260:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003264:	6879      	ldr	r1, [r7, #4]
 8003266:	6809      	ldr	r1, [r1, #0]
 8003268:	4313      	orrs	r3, r2
 800326a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	69da      	ldr	r2, [r3, #28]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	431a      	orrs	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	430a      	orrs	r2, r1
 8003286:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003292:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	6911      	ldr	r1, [r2, #16]
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	68d2      	ldr	r2, [r2, #12]
 800329e:	4311      	orrs	r1, r2
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	6812      	ldr	r2, [r2, #0]
 80032a4:	430b      	orrs	r3, r1
 80032a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	695a      	ldr	r2, [r3, #20]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	431a      	orrs	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	430a      	orrs	r2, r1
 80032c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0201 	orr.w	r2, r2, #1
 80032d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2220      	movs	r2, #32
 80032de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	000186a0 	.word	0x000186a0
 8003300:	001e847f 	.word	0x001e847f
 8003304:	003d08ff 	.word	0x003d08ff
 8003308:	431bde83 	.word	0x431bde83
 800330c:	10624dd3 	.word	0x10624dd3

08003310 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b088      	sub	sp, #32
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e128      	b.n	8003574 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d109      	bne.n	8003342 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a90      	ldr	r2, [pc, #576]	; (800357c <HAL_I2S_Init+0x26c>)
 800333a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f7fd fd4b 	bl	8000dd8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2202      	movs	r2, #2
 8003346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	69db      	ldr	r3, [r3, #28]
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	6812      	ldr	r2, [r2, #0]
 8003354:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003358:	f023 030f 	bic.w	r3, r3, #15
 800335c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2202      	movs	r2, #2
 8003364:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	2b02      	cmp	r3, #2
 800336c:	d060      	beq.n	8003430 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d102      	bne.n	800337c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003376:	2310      	movs	r3, #16
 8003378:	617b      	str	r3, [r7, #20]
 800337a:	e001      	b.n	8003380 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800337c:	2320      	movs	r3, #32
 800337e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	2b20      	cmp	r3, #32
 8003386:	d802      	bhi.n	800338e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800338e:	2001      	movs	r0, #1
 8003390:	f001 f9d8 	bl	8004744 <HAL_RCCEx_GetPeriphCLKFreq>
 8003394:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800339e:	d125      	bne.n	80033ec <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d010      	beq.n	80033ca <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80033b2:	4613      	mov	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4413      	add	r3, r2
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	461a      	mov	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c4:	3305      	adds	r3, #5
 80033c6:	613b      	str	r3, [r7, #16]
 80033c8:	e01f      	b.n	800340a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80033d4:	4613      	mov	r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	4413      	add	r3, r2
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	461a      	mov	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e6:	3305      	adds	r3, #5
 80033e8:	613b      	str	r3, [r7, #16]
 80033ea:	e00e      	b.n	800340a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80033f4:	4613      	mov	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	4413      	add	r3, r2
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	461a      	mov	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	fbb2 f3f3 	udiv	r3, r2, r3
 8003406:	3305      	adds	r3, #5
 8003408:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	4a5c      	ldr	r2, [pc, #368]	; (8003580 <HAL_I2S_Init+0x270>)
 800340e:	fba2 2303 	umull	r2, r3, r2, r3
 8003412:	08db      	lsrs	r3, r3, #3
 8003414:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	085b      	lsrs	r3, r3, #1
 8003426:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	021b      	lsls	r3, r3, #8
 800342c:	61bb      	str	r3, [r7, #24]
 800342e:	e003      	b.n	8003438 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003430:	2302      	movs	r3, #2
 8003432:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003434:	2300      	movs	r3, #0
 8003436:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d902      	bls.n	8003444 <HAL_I2S_Init+0x134>
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	2bff      	cmp	r3, #255	; 0xff
 8003442:	d907      	bls.n	8003454 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003448:	f043 0210 	orr.w	r2, r3, #16
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e08f      	b.n	8003574 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	691a      	ldr	r2, [r3, #16]
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	ea42 0103 	orr.w	r1, r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	69fa      	ldr	r2, [r7, #28]
 8003464:	430a      	orrs	r2, r1
 8003466:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	69db      	ldr	r3, [r3, #28]
 800346e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003472:	f023 030f 	bic.w	r3, r3, #15
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6851      	ldr	r1, [r2, #4]
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	6892      	ldr	r2, [r2, #8]
 800347e:	4311      	orrs	r1, r2
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	68d2      	ldr	r2, [r2, #12]
 8003484:	4311      	orrs	r1, r2
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	6992      	ldr	r2, [r2, #24]
 800348a:	430a      	orrs	r2, r1
 800348c:	431a      	orrs	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003496:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d161      	bne.n	8003564 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a38      	ldr	r2, [pc, #224]	; (8003584 <HAL_I2S_Init+0x274>)
 80034a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a37      	ldr	r2, [pc, #220]	; (8003588 <HAL_I2S_Init+0x278>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d101      	bne.n	80034b4 <HAL_I2S_Init+0x1a4>
 80034b0:	4b36      	ldr	r3, [pc, #216]	; (800358c <HAL_I2S_Init+0x27c>)
 80034b2:	e001      	b.n	80034b8 <HAL_I2S_Init+0x1a8>
 80034b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	6812      	ldr	r2, [r2, #0]
 80034be:	4932      	ldr	r1, [pc, #200]	; (8003588 <HAL_I2S_Init+0x278>)
 80034c0:	428a      	cmp	r2, r1
 80034c2:	d101      	bne.n	80034c8 <HAL_I2S_Init+0x1b8>
 80034c4:	4a31      	ldr	r2, [pc, #196]	; (800358c <HAL_I2S_Init+0x27c>)
 80034c6:	e001      	b.n	80034cc <HAL_I2S_Init+0x1bc>
 80034c8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80034cc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80034d0:	f023 030f 	bic.w	r3, r3, #15
 80034d4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a2b      	ldr	r2, [pc, #172]	; (8003588 <HAL_I2S_Init+0x278>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d101      	bne.n	80034e4 <HAL_I2S_Init+0x1d4>
 80034e0:	4b2a      	ldr	r3, [pc, #168]	; (800358c <HAL_I2S_Init+0x27c>)
 80034e2:	e001      	b.n	80034e8 <HAL_I2S_Init+0x1d8>
 80034e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034e8:	2202      	movs	r2, #2
 80034ea:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a25      	ldr	r2, [pc, #148]	; (8003588 <HAL_I2S_Init+0x278>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d101      	bne.n	80034fa <HAL_I2S_Init+0x1ea>
 80034f6:	4b25      	ldr	r3, [pc, #148]	; (800358c <HAL_I2S_Init+0x27c>)
 80034f8:	e001      	b.n	80034fe <HAL_I2S_Init+0x1ee>
 80034fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034fe:	69db      	ldr	r3, [r3, #28]
 8003500:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800350a:	d003      	beq.n	8003514 <HAL_I2S_Init+0x204>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d103      	bne.n	800351c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003514:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003518:	613b      	str	r3, [r7, #16]
 800351a:	e001      	b.n	8003520 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800351c:	2300      	movs	r3, #0
 800351e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800352a:	4313      	orrs	r3, r2
 800352c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003534:	4313      	orrs	r3, r2
 8003536:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800353e:	4313      	orrs	r3, r2
 8003540:	b29a      	uxth	r2, r3
 8003542:	897b      	ldrh	r3, [r7, #10]
 8003544:	4313      	orrs	r3, r2
 8003546:	b29b      	uxth	r3, r3
 8003548:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800354c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a0d      	ldr	r2, [pc, #52]	; (8003588 <HAL_I2S_Init+0x278>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d101      	bne.n	800355c <HAL_I2S_Init+0x24c>
 8003558:	4b0c      	ldr	r3, [pc, #48]	; (800358c <HAL_I2S_Init+0x27c>)
 800355a:	e001      	b.n	8003560 <HAL_I2S_Init+0x250>
 800355c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003560:	897a      	ldrh	r2, [r7, #10]
 8003562:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3720      	adds	r7, #32
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	08003687 	.word	0x08003687
 8003580:	cccccccd 	.word	0xcccccccd
 8003584:	0800379d 	.word	0x0800379d
 8003588:	40003800 	.word	0x40003800
 800358c:	40003400 	.word	0x40003400

08003590 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80035c0:	bf00      	nop
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	881a      	ldrh	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e4:	1c9a      	adds	r2, r3, #2
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	3b01      	subs	r3, #1
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10e      	bne.n	8003620 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	685a      	ldr	r2, [r3, #4]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003610:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f7ff ffb8 	bl	8003590 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003620:	bf00      	nop
 8003622:	3708      	adds	r7, #8
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68da      	ldr	r2, [r3, #12]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363a:	b292      	uxth	r2, r2
 800363c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003642:	1c9a      	adds	r2, r3, #2
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800364c:	b29b      	uxth	r3, r3
 800364e:	3b01      	subs	r3, #1
 8003650:	b29a      	uxth	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800365a:	b29b      	uxth	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10e      	bne.n	800367e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	685a      	ldr	r2, [r3, #4]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800366e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f7ff ff93 	bl	80035a4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800367e:	bf00      	nop
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b086      	sub	sp, #24
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b04      	cmp	r3, #4
 80036a0:	d13a      	bne.n	8003718 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d109      	bne.n	80036c0 <I2S_IRQHandler+0x3a>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b6:	2b40      	cmp	r3, #64	; 0x40
 80036b8:	d102      	bne.n	80036c0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7ff ffb4 	bl	8003628 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c6:	2b40      	cmp	r3, #64	; 0x40
 80036c8:	d126      	bne.n	8003718 <I2S_IRQHandler+0x92>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f003 0320 	and.w	r3, r3, #32
 80036d4:	2b20      	cmp	r3, #32
 80036d6:	d11f      	bne.n	8003718 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036e6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80036e8:	2300      	movs	r3, #0
 80036ea:	613b      	str	r3, [r7, #16]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	613b      	str	r3, [r7, #16]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	613b      	str	r3, [r7, #16]
 80036fc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370a:	f043 0202 	orr.w	r2, r3, #2
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7ff ff50 	bl	80035b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b03      	cmp	r3, #3
 8003722:	d136      	bne.n	8003792 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b02      	cmp	r3, #2
 800372c:	d109      	bne.n	8003742 <I2S_IRQHandler+0xbc>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003738:	2b80      	cmp	r3, #128	; 0x80
 800373a:	d102      	bne.n	8003742 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f7ff ff45 	bl	80035cc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f003 0308 	and.w	r3, r3, #8
 8003748:	2b08      	cmp	r3, #8
 800374a:	d122      	bne.n	8003792 <I2S_IRQHandler+0x10c>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f003 0320 	and.w	r3, r3, #32
 8003756:	2b20      	cmp	r3, #32
 8003758:	d11b      	bne.n	8003792 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003768:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800376a:	2300      	movs	r3, #0
 800376c:	60fb      	str	r3, [r7, #12]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	60fb      	str	r3, [r7, #12]
 8003776:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003784:	f043 0204 	orr.w	r2, r3, #4
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f7ff ff13 	bl	80035b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003792:	bf00      	nop
 8003794:	3718      	adds	r7, #24
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
	...

0800379c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b088      	sub	sp, #32
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a92      	ldr	r2, [pc, #584]	; (80039fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d101      	bne.n	80037ba <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80037b6:	4b92      	ldr	r3, [pc, #584]	; (8003a00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037b8:	e001      	b.n	80037be <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80037ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a8b      	ldr	r2, [pc, #556]	; (80039fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d101      	bne.n	80037d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80037d4:	4b8a      	ldr	r3, [pc, #552]	; (8003a00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037d6:	e001      	b.n	80037dc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80037d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037e8:	d004      	beq.n	80037f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f040 8099 	bne.w	8003926 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d107      	bne.n	800380e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003804:	2b00      	cmp	r3, #0
 8003806:	d002      	beq.n	800380e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 f925 	bl	8003a58 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	2b01      	cmp	r3, #1
 8003816:	d107      	bne.n	8003828 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381e:	2b00      	cmp	r3, #0
 8003820:	d002      	beq.n	8003828 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f9c8 	bl	8003bb8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800382e:	2b40      	cmp	r3, #64	; 0x40
 8003830:	d13a      	bne.n	80038a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	f003 0320 	and.w	r3, r3, #32
 8003838:	2b00      	cmp	r3, #0
 800383a:	d035      	beq.n	80038a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a6e      	ldr	r2, [pc, #440]	; (80039fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d101      	bne.n	800384a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003846:	4b6e      	ldr	r3, [pc, #440]	; (8003a00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003848:	e001      	b.n	800384e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800384a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4969      	ldr	r1, [pc, #420]	; (80039fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003856:	428b      	cmp	r3, r1
 8003858:	d101      	bne.n	800385e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800385a:	4b69      	ldr	r3, [pc, #420]	; (8003a00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800385c:	e001      	b.n	8003862 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800385e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003862:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003866:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	685a      	ldr	r2, [r3, #4]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003876:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003878:	2300      	movs	r3, #0
 800387a:	60fb      	str	r3, [r7, #12]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	60fb      	str	r3, [r7, #12]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	60fb      	str	r3, [r7, #12]
 800388c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389a:	f043 0202 	orr.w	r2, r3, #2
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7ff fe88 	bl	80035b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	f003 0308 	and.w	r3, r3, #8
 80038ae:	2b08      	cmp	r3, #8
 80038b0:	f040 80c3 	bne.w	8003a3a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	f003 0320 	and.w	r3, r3, #32
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f000 80bd 	beq.w	8003a3a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038ce:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a49      	ldr	r2, [pc, #292]	; (80039fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d101      	bne.n	80038de <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80038da:	4b49      	ldr	r3, [pc, #292]	; (8003a00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038dc:	e001      	b.n	80038e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80038de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038e2:	685a      	ldr	r2, [r3, #4]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4944      	ldr	r1, [pc, #272]	; (80039fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038ea:	428b      	cmp	r3, r1
 80038ec:	d101      	bne.n	80038f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80038ee:	4b44      	ldr	r3, [pc, #272]	; (8003a00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038f0:	e001      	b.n	80038f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80038f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038fa:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80038fc:	2300      	movs	r3, #0
 80038fe:	60bb      	str	r3, [r7, #8]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	60bb      	str	r3, [r7, #8]
 8003908:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003916:	f043 0204 	orr.w	r2, r3, #4
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7ff fe4a 	bl	80035b8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003924:	e089      	b.n	8003a3a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b02      	cmp	r3, #2
 800392e:	d107      	bne.n	8003940 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003936:	2b00      	cmp	r3, #0
 8003938:	d002      	beq.n	8003940 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 f8be 	bl	8003abc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b01      	cmp	r3, #1
 8003948:	d107      	bne.n	800395a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003950:	2b00      	cmp	r3, #0
 8003952:	d002      	beq.n	800395a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 f8fd 	bl	8003b54 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003960:	2b40      	cmp	r3, #64	; 0x40
 8003962:	d12f      	bne.n	80039c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	f003 0320 	and.w	r3, r3, #32
 800396a:	2b00      	cmp	r3, #0
 800396c:	d02a      	beq.n	80039c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800397c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a1e      	ldr	r2, [pc, #120]	; (80039fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d101      	bne.n	800398c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003988:	4b1d      	ldr	r3, [pc, #116]	; (8003a00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800398a:	e001      	b.n	8003990 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800398c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4919      	ldr	r1, [pc, #100]	; (80039fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003998:	428b      	cmp	r3, r1
 800399a:	d101      	bne.n	80039a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800399c:	4b18      	ldr	r3, [pc, #96]	; (8003a00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800399e:	e001      	b.n	80039a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80039a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039a8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b6:	f043 0202 	orr.w	r2, r3, #2
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7ff fdfa 	bl	80035b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	f003 0308 	and.w	r3, r3, #8
 80039ca:	2b08      	cmp	r3, #8
 80039cc:	d136      	bne.n	8003a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	f003 0320 	and.w	r3, r3, #32
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d031      	beq.n	8003a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a07      	ldr	r2, [pc, #28]	; (80039fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d101      	bne.n	80039e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80039e2:	4b07      	ldr	r3, [pc, #28]	; (8003a00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039e4:	e001      	b.n	80039ea <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80039e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4902      	ldr	r1, [pc, #8]	; (80039fc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039f2:	428b      	cmp	r3, r1
 80039f4:	d106      	bne.n	8003a04 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80039f6:	4b02      	ldr	r3, [pc, #8]	; (8003a00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039f8:	e006      	b.n	8003a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80039fa:	bf00      	nop
 80039fc:	40003800 	.word	0x40003800
 8003a00:	40003400 	.word	0x40003400
 8003a04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a08:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a0c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a1c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2201      	movs	r2, #1
 8003a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2a:	f043 0204 	orr.w	r2, r3, #4
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7ff fdc0 	bl	80035b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a38:	e000      	b.n	8003a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a3a:	bf00      	nop
}
 8003a3c:	bf00      	nop
 8003a3e:	3720      	adds	r7, #32
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a64:	1c99      	adds	r1, r3, #2
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	6251      	str	r1, [r2, #36]	; 0x24
 8003a6a:	881a      	ldrh	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d113      	bne.n	8003ab2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	685a      	ldr	r2, [r3, #4]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a98:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d106      	bne.n	8003ab2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f7ff ffc9 	bl	8003a44 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ab2:	bf00      	nop
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
	...

08003abc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac8:	1c99      	adds	r1, r3, #2
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6251      	str	r1, [r2, #36]	; 0x24
 8003ace:	8819      	ldrh	r1, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a1d      	ldr	r2, [pc, #116]	; (8003b4c <I2SEx_TxISR_I2SExt+0x90>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d101      	bne.n	8003ade <I2SEx_TxISR_I2SExt+0x22>
 8003ada:	4b1d      	ldr	r3, [pc, #116]	; (8003b50 <I2SEx_TxISR_I2SExt+0x94>)
 8003adc:	e001      	b.n	8003ae2 <I2SEx_TxISR_I2SExt+0x26>
 8003ade:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ae2:	460a      	mov	r2, r1
 8003ae4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	3b01      	subs	r3, #1
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d121      	bne.n	8003b42 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a12      	ldr	r2, [pc, #72]	; (8003b4c <I2SEx_TxISR_I2SExt+0x90>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d101      	bne.n	8003b0c <I2SEx_TxISR_I2SExt+0x50>
 8003b08:	4b11      	ldr	r3, [pc, #68]	; (8003b50 <I2SEx_TxISR_I2SExt+0x94>)
 8003b0a:	e001      	b.n	8003b10 <I2SEx_TxISR_I2SExt+0x54>
 8003b0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	490d      	ldr	r1, [pc, #52]	; (8003b4c <I2SEx_TxISR_I2SExt+0x90>)
 8003b18:	428b      	cmp	r3, r1
 8003b1a:	d101      	bne.n	8003b20 <I2SEx_TxISR_I2SExt+0x64>
 8003b1c:	4b0c      	ldr	r3, [pc, #48]	; (8003b50 <I2SEx_TxISR_I2SExt+0x94>)
 8003b1e:	e001      	b.n	8003b24 <I2SEx_TxISR_I2SExt+0x68>
 8003b20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b24:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b28:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d106      	bne.n	8003b42 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f7ff ff81 	bl	8003a44 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b42:	bf00      	nop
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	40003800 	.word	0x40003800
 8003b50:	40003400 	.word	0x40003400

08003b54 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68d8      	ldr	r0, [r3, #12]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b66:	1c99      	adds	r1, r3, #2
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003b6c:	b282      	uxth	r2, r0
 8003b6e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	3b01      	subs	r3, #1
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d113      	bne.n	8003bb0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	685a      	ldr	r2, [r3, #4]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b96:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d106      	bne.n	8003bb0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f7ff ff4a 	bl	8003a44 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bb0:	bf00      	nop
 8003bb2:	3708      	adds	r7, #8
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a20      	ldr	r2, [pc, #128]	; (8003c48 <I2SEx_RxISR_I2SExt+0x90>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d101      	bne.n	8003bce <I2SEx_RxISR_I2SExt+0x16>
 8003bca:	4b20      	ldr	r3, [pc, #128]	; (8003c4c <I2SEx_RxISR_I2SExt+0x94>)
 8003bcc:	e001      	b.n	8003bd2 <I2SEx_RxISR_I2SExt+0x1a>
 8003bce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bd2:	68d8      	ldr	r0, [r3, #12]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd8:	1c99      	adds	r1, r3, #2
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003bde:	b282      	uxth	r2, r0
 8003be0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	3b01      	subs	r3, #1
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d121      	bne.n	8003c3e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a12      	ldr	r2, [pc, #72]	; (8003c48 <I2SEx_RxISR_I2SExt+0x90>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d101      	bne.n	8003c08 <I2SEx_RxISR_I2SExt+0x50>
 8003c04:	4b11      	ldr	r3, [pc, #68]	; (8003c4c <I2SEx_RxISR_I2SExt+0x94>)
 8003c06:	e001      	b.n	8003c0c <I2SEx_RxISR_I2SExt+0x54>
 8003c08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	490d      	ldr	r1, [pc, #52]	; (8003c48 <I2SEx_RxISR_I2SExt+0x90>)
 8003c14:	428b      	cmp	r3, r1
 8003c16:	d101      	bne.n	8003c1c <I2SEx_RxISR_I2SExt+0x64>
 8003c18:	4b0c      	ldr	r3, [pc, #48]	; (8003c4c <I2SEx_RxISR_I2SExt+0x94>)
 8003c1a:	e001      	b.n	8003c20 <I2SEx_RxISR_I2SExt+0x68>
 8003c1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c20:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c24:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d106      	bne.n	8003c3e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f7ff ff03 	bl	8003a44 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c3e:	bf00      	nop
 8003c40:	3708      	adds	r7, #8
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	40003800 	.word	0x40003800
 8003c4c:	40003400 	.word	0x40003400

08003c50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e267      	b.n	8004132 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d075      	beq.n	8003d5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c6e:	4b88      	ldr	r3, [pc, #544]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f003 030c 	and.w	r3, r3, #12
 8003c76:	2b04      	cmp	r3, #4
 8003c78:	d00c      	beq.n	8003c94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c7a:	4b85      	ldr	r3, [pc, #532]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c82:	2b08      	cmp	r3, #8
 8003c84:	d112      	bne.n	8003cac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c86:	4b82      	ldr	r3, [pc, #520]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c92:	d10b      	bne.n	8003cac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c94:	4b7e      	ldr	r3, [pc, #504]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d05b      	beq.n	8003d58 <HAL_RCC_OscConfig+0x108>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d157      	bne.n	8003d58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e242      	b.n	8004132 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cb4:	d106      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x74>
 8003cb6:	4b76      	ldr	r3, [pc, #472]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a75      	ldr	r2, [pc, #468]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cc0:	6013      	str	r3, [r2, #0]
 8003cc2:	e01d      	b.n	8003d00 <HAL_RCC_OscConfig+0xb0>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ccc:	d10c      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x98>
 8003cce:	4b70      	ldr	r3, [pc, #448]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a6f      	ldr	r2, [pc, #444]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003cd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cd8:	6013      	str	r3, [r2, #0]
 8003cda:	4b6d      	ldr	r3, [pc, #436]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a6c      	ldr	r2, [pc, #432]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ce4:	6013      	str	r3, [r2, #0]
 8003ce6:	e00b      	b.n	8003d00 <HAL_RCC_OscConfig+0xb0>
 8003ce8:	4b69      	ldr	r3, [pc, #420]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a68      	ldr	r2, [pc, #416]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003cee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cf2:	6013      	str	r3, [r2, #0]
 8003cf4:	4b66      	ldr	r3, [pc, #408]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a65      	ldr	r2, [pc, #404]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003cfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d013      	beq.n	8003d30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d08:	f7fd fad8 	bl	80012bc <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d0e:	e008      	b.n	8003d22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d10:	f7fd fad4 	bl	80012bc <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b64      	cmp	r3, #100	; 0x64
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e207      	b.n	8004132 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d22:	4b5b      	ldr	r3, [pc, #364]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d0f0      	beq.n	8003d10 <HAL_RCC_OscConfig+0xc0>
 8003d2e:	e014      	b.n	8003d5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d30:	f7fd fac4 	bl	80012bc <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d36:	e008      	b.n	8003d4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d38:	f7fd fac0 	bl	80012bc <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b64      	cmp	r3, #100	; 0x64
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e1f3      	b.n	8004132 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d4a:	4b51      	ldr	r3, [pc, #324]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1f0      	bne.n	8003d38 <HAL_RCC_OscConfig+0xe8>
 8003d56:	e000      	b.n	8003d5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d063      	beq.n	8003e2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d66:	4b4a      	ldr	r3, [pc, #296]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f003 030c 	and.w	r3, r3, #12
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00b      	beq.n	8003d8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d72:	4b47      	ldr	r3, [pc, #284]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d7a:	2b08      	cmp	r3, #8
 8003d7c:	d11c      	bne.n	8003db8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d7e:	4b44      	ldr	r3, [pc, #272]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d116      	bne.n	8003db8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d8a:	4b41      	ldr	r3, [pc, #260]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d005      	beq.n	8003da2 <HAL_RCC_OscConfig+0x152>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d001      	beq.n	8003da2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e1c7      	b.n	8004132 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003da2:	4b3b      	ldr	r3, [pc, #236]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	4937      	ldr	r1, [pc, #220]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003db6:	e03a      	b.n	8003e2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d020      	beq.n	8003e02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dc0:	4b34      	ldr	r3, [pc, #208]	; (8003e94 <HAL_RCC_OscConfig+0x244>)
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc6:	f7fd fa79 	bl	80012bc <HAL_GetTick>
 8003dca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dcc:	e008      	b.n	8003de0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dce:	f7fd fa75 	bl	80012bc <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d901      	bls.n	8003de0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e1a8      	b.n	8004132 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003de0:	4b2b      	ldr	r3, [pc, #172]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d0f0      	beq.n	8003dce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dec:	4b28      	ldr	r3, [pc, #160]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	00db      	lsls	r3, r3, #3
 8003dfa:	4925      	ldr	r1, [pc, #148]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	600b      	str	r3, [r1, #0]
 8003e00:	e015      	b.n	8003e2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e02:	4b24      	ldr	r3, [pc, #144]	; (8003e94 <HAL_RCC_OscConfig+0x244>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e08:	f7fd fa58 	bl	80012bc <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e0e:	e008      	b.n	8003e22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e10:	f7fd fa54 	bl	80012bc <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e187      	b.n	8004132 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e22:	4b1b      	ldr	r3, [pc, #108]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1f0      	bne.n	8003e10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0308 	and.w	r3, r3, #8
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d036      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d016      	beq.n	8003e70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e42:	4b15      	ldr	r3, [pc, #84]	; (8003e98 <HAL_RCC_OscConfig+0x248>)
 8003e44:	2201      	movs	r2, #1
 8003e46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e48:	f7fd fa38 	bl	80012bc <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e50:	f7fd fa34 	bl	80012bc <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e167      	b.n	8004132 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e62:	4b0b      	ldr	r3, [pc, #44]	; (8003e90 <HAL_RCC_OscConfig+0x240>)
 8003e64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d0f0      	beq.n	8003e50 <HAL_RCC_OscConfig+0x200>
 8003e6e:	e01b      	b.n	8003ea8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e70:	4b09      	ldr	r3, [pc, #36]	; (8003e98 <HAL_RCC_OscConfig+0x248>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e76:	f7fd fa21 	bl	80012bc <HAL_GetTick>
 8003e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e7c:	e00e      	b.n	8003e9c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e7e:	f7fd fa1d 	bl	80012bc <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d907      	bls.n	8003e9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e150      	b.n	8004132 <HAL_RCC_OscConfig+0x4e2>
 8003e90:	40023800 	.word	0x40023800
 8003e94:	42470000 	.word	0x42470000
 8003e98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e9c:	4b88      	ldr	r3, [pc, #544]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1ea      	bne.n	8003e7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0304 	and.w	r3, r3, #4
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 8097 	beq.w	8003fe4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eba:	4b81      	ldr	r3, [pc, #516]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10f      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60bb      	str	r3, [r7, #8]
 8003eca:	4b7d      	ldr	r3, [pc, #500]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	4a7c      	ldr	r2, [pc, #496]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ed6:	4b7a      	ldr	r3, [pc, #488]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ede:	60bb      	str	r3, [r7, #8]
 8003ee0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee6:	4b77      	ldr	r3, [pc, #476]	; (80040c4 <HAL_RCC_OscConfig+0x474>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d118      	bne.n	8003f24 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ef2:	4b74      	ldr	r3, [pc, #464]	; (80040c4 <HAL_RCC_OscConfig+0x474>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a73      	ldr	r2, [pc, #460]	; (80040c4 <HAL_RCC_OscConfig+0x474>)
 8003ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003efc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003efe:	f7fd f9dd 	bl	80012bc <HAL_GetTick>
 8003f02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f04:	e008      	b.n	8003f18 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f06:	f7fd f9d9 	bl	80012bc <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d901      	bls.n	8003f18 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e10c      	b.n	8004132 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f18:	4b6a      	ldr	r3, [pc, #424]	; (80040c4 <HAL_RCC_OscConfig+0x474>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d0f0      	beq.n	8003f06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d106      	bne.n	8003f3a <HAL_RCC_OscConfig+0x2ea>
 8003f2c:	4b64      	ldr	r3, [pc, #400]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f30:	4a63      	ldr	r2, [pc, #396]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003f32:	f043 0301 	orr.w	r3, r3, #1
 8003f36:	6713      	str	r3, [r2, #112]	; 0x70
 8003f38:	e01c      	b.n	8003f74 <HAL_RCC_OscConfig+0x324>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	2b05      	cmp	r3, #5
 8003f40:	d10c      	bne.n	8003f5c <HAL_RCC_OscConfig+0x30c>
 8003f42:	4b5f      	ldr	r3, [pc, #380]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f46:	4a5e      	ldr	r2, [pc, #376]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003f48:	f043 0304 	orr.w	r3, r3, #4
 8003f4c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f4e:	4b5c      	ldr	r3, [pc, #368]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f52:	4a5b      	ldr	r2, [pc, #364]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003f54:	f043 0301 	orr.w	r3, r3, #1
 8003f58:	6713      	str	r3, [r2, #112]	; 0x70
 8003f5a:	e00b      	b.n	8003f74 <HAL_RCC_OscConfig+0x324>
 8003f5c:	4b58      	ldr	r3, [pc, #352]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f60:	4a57      	ldr	r2, [pc, #348]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003f62:	f023 0301 	bic.w	r3, r3, #1
 8003f66:	6713      	str	r3, [r2, #112]	; 0x70
 8003f68:	4b55      	ldr	r3, [pc, #340]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6c:	4a54      	ldr	r2, [pc, #336]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003f6e:	f023 0304 	bic.w	r3, r3, #4
 8003f72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d015      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f7c:	f7fd f99e 	bl	80012bc <HAL_GetTick>
 8003f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f82:	e00a      	b.n	8003f9a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f84:	f7fd f99a 	bl	80012bc <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e0cb      	b.n	8004132 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f9a:	4b49      	ldr	r3, [pc, #292]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d0ee      	beq.n	8003f84 <HAL_RCC_OscConfig+0x334>
 8003fa6:	e014      	b.n	8003fd2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fa8:	f7fd f988 	bl	80012bc <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fae:	e00a      	b.n	8003fc6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fb0:	f7fd f984 	bl	80012bc <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e0b5      	b.n	8004132 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fc6:	4b3e      	ldr	r3, [pc, #248]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1ee      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fd2:	7dfb      	ldrb	r3, [r7, #23]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d105      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fd8:	4b39      	ldr	r3, [pc, #228]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fdc:	4a38      	ldr	r2, [pc, #224]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003fde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fe2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f000 80a1 	beq.w	8004130 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fee:	4b34      	ldr	r3, [pc, #208]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f003 030c 	and.w	r3, r3, #12
 8003ff6:	2b08      	cmp	r3, #8
 8003ff8:	d05c      	beq.n	80040b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d141      	bne.n	8004086 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004002:	4b31      	ldr	r3, [pc, #196]	; (80040c8 <HAL_RCC_OscConfig+0x478>)
 8004004:	2200      	movs	r2, #0
 8004006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004008:	f7fd f958 	bl	80012bc <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004010:	f7fd f954 	bl	80012bc <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e087      	b.n	8004132 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004022:	4b27      	ldr	r3, [pc, #156]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1f0      	bne.n	8004010 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	69da      	ldr	r2, [r3, #28]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	431a      	orrs	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403c:	019b      	lsls	r3, r3, #6
 800403e:	431a      	orrs	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004044:	085b      	lsrs	r3, r3, #1
 8004046:	3b01      	subs	r3, #1
 8004048:	041b      	lsls	r3, r3, #16
 800404a:	431a      	orrs	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004050:	061b      	lsls	r3, r3, #24
 8004052:	491b      	ldr	r1, [pc, #108]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 8004054:	4313      	orrs	r3, r2
 8004056:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004058:	4b1b      	ldr	r3, [pc, #108]	; (80040c8 <HAL_RCC_OscConfig+0x478>)
 800405a:	2201      	movs	r2, #1
 800405c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800405e:	f7fd f92d 	bl	80012bc <HAL_GetTick>
 8004062:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004064:	e008      	b.n	8004078 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004066:	f7fd f929 	bl	80012bc <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	2b02      	cmp	r3, #2
 8004072:	d901      	bls.n	8004078 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e05c      	b.n	8004132 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004078:	4b11      	ldr	r3, [pc, #68]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d0f0      	beq.n	8004066 <HAL_RCC_OscConfig+0x416>
 8004084:	e054      	b.n	8004130 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004086:	4b10      	ldr	r3, [pc, #64]	; (80040c8 <HAL_RCC_OscConfig+0x478>)
 8004088:	2200      	movs	r2, #0
 800408a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800408c:	f7fd f916 	bl	80012bc <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004094:	f7fd f912 	bl	80012bc <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e045      	b.n	8004132 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040a6:	4b06      	ldr	r3, [pc, #24]	; (80040c0 <HAL_RCC_OscConfig+0x470>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1f0      	bne.n	8004094 <HAL_RCC_OscConfig+0x444>
 80040b2:	e03d      	b.n	8004130 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d107      	bne.n	80040cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e038      	b.n	8004132 <HAL_RCC_OscConfig+0x4e2>
 80040c0:	40023800 	.word	0x40023800
 80040c4:	40007000 	.word	0x40007000
 80040c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040cc:	4b1b      	ldr	r3, [pc, #108]	; (800413c <HAL_RCC_OscConfig+0x4ec>)
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d028      	beq.n	800412c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d121      	bne.n	800412c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d11a      	bne.n	800412c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040fc:	4013      	ands	r3, r2
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004102:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004104:	4293      	cmp	r3, r2
 8004106:	d111      	bne.n	800412c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004112:	085b      	lsrs	r3, r3, #1
 8004114:	3b01      	subs	r3, #1
 8004116:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004118:	429a      	cmp	r2, r3
 800411a:	d107      	bne.n	800412c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004126:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004128:	429a      	cmp	r2, r3
 800412a:	d001      	beq.n	8004130 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e000      	b.n	8004132 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3718      	adds	r7, #24
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	40023800 	.word	0x40023800

08004140 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d101      	bne.n	8004154 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e0cc      	b.n	80042ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004154:	4b68      	ldr	r3, [pc, #416]	; (80042f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0307 	and.w	r3, r3, #7
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	429a      	cmp	r2, r3
 8004160:	d90c      	bls.n	800417c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004162:	4b65      	ldr	r3, [pc, #404]	; (80042f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004164:	683a      	ldr	r2, [r7, #0]
 8004166:	b2d2      	uxtb	r2, r2
 8004168:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800416a:	4b63      	ldr	r3, [pc, #396]	; (80042f8 <HAL_RCC_ClockConfig+0x1b8>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0307 	and.w	r3, r3, #7
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	429a      	cmp	r2, r3
 8004176:	d001      	beq.n	800417c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e0b8      	b.n	80042ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d020      	beq.n	80041ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0304 	and.w	r3, r3, #4
 8004190:	2b00      	cmp	r3, #0
 8004192:	d005      	beq.n	80041a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004194:	4b59      	ldr	r3, [pc, #356]	; (80042fc <HAL_RCC_ClockConfig+0x1bc>)
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	4a58      	ldr	r2, [pc, #352]	; (80042fc <HAL_RCC_ClockConfig+0x1bc>)
 800419a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800419e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0308 	and.w	r3, r3, #8
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d005      	beq.n	80041b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041ac:	4b53      	ldr	r3, [pc, #332]	; (80042fc <HAL_RCC_ClockConfig+0x1bc>)
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	4a52      	ldr	r2, [pc, #328]	; (80042fc <HAL_RCC_ClockConfig+0x1bc>)
 80041b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041b8:	4b50      	ldr	r3, [pc, #320]	; (80042fc <HAL_RCC_ClockConfig+0x1bc>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	494d      	ldr	r1, [pc, #308]	; (80042fc <HAL_RCC_ClockConfig+0x1bc>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d044      	beq.n	8004260 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d107      	bne.n	80041ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041de:	4b47      	ldr	r3, [pc, #284]	; (80042fc <HAL_RCC_ClockConfig+0x1bc>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d119      	bne.n	800421e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e07f      	b.n	80042ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d003      	beq.n	80041fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041fa:	2b03      	cmp	r3, #3
 80041fc:	d107      	bne.n	800420e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041fe:	4b3f      	ldr	r3, [pc, #252]	; (80042fc <HAL_RCC_ClockConfig+0x1bc>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d109      	bne.n	800421e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e06f      	b.n	80042ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800420e:	4b3b      	ldr	r3, [pc, #236]	; (80042fc <HAL_RCC_ClockConfig+0x1bc>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e067      	b.n	80042ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800421e:	4b37      	ldr	r3, [pc, #220]	; (80042fc <HAL_RCC_ClockConfig+0x1bc>)
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f023 0203 	bic.w	r2, r3, #3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	4934      	ldr	r1, [pc, #208]	; (80042fc <HAL_RCC_ClockConfig+0x1bc>)
 800422c:	4313      	orrs	r3, r2
 800422e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004230:	f7fd f844 	bl	80012bc <HAL_GetTick>
 8004234:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004236:	e00a      	b.n	800424e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004238:	f7fd f840 	bl	80012bc <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	f241 3288 	movw	r2, #5000	; 0x1388
 8004246:	4293      	cmp	r3, r2
 8004248:	d901      	bls.n	800424e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e04f      	b.n	80042ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800424e:	4b2b      	ldr	r3, [pc, #172]	; (80042fc <HAL_RCC_ClockConfig+0x1bc>)
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f003 020c 	and.w	r2, r3, #12
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	429a      	cmp	r2, r3
 800425e:	d1eb      	bne.n	8004238 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004260:	4b25      	ldr	r3, [pc, #148]	; (80042f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0307 	and.w	r3, r3, #7
 8004268:	683a      	ldr	r2, [r7, #0]
 800426a:	429a      	cmp	r2, r3
 800426c:	d20c      	bcs.n	8004288 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800426e:	4b22      	ldr	r3, [pc, #136]	; (80042f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004270:	683a      	ldr	r2, [r7, #0]
 8004272:	b2d2      	uxtb	r2, r2
 8004274:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004276:	4b20      	ldr	r3, [pc, #128]	; (80042f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0307 	and.w	r3, r3, #7
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	429a      	cmp	r2, r3
 8004282:	d001      	beq.n	8004288 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e032      	b.n	80042ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0304 	and.w	r3, r3, #4
 8004290:	2b00      	cmp	r3, #0
 8004292:	d008      	beq.n	80042a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004294:	4b19      	ldr	r3, [pc, #100]	; (80042fc <HAL_RCC_ClockConfig+0x1bc>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	4916      	ldr	r1, [pc, #88]	; (80042fc <HAL_RCC_ClockConfig+0x1bc>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0308 	and.w	r3, r3, #8
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d009      	beq.n	80042c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042b2:	4b12      	ldr	r3, [pc, #72]	; (80042fc <HAL_RCC_ClockConfig+0x1bc>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	490e      	ldr	r1, [pc, #56]	; (80042fc <HAL_RCC_ClockConfig+0x1bc>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042c6:	f000 f821 	bl	800430c <HAL_RCC_GetSysClockFreq>
 80042ca:	4602      	mov	r2, r0
 80042cc:	4b0b      	ldr	r3, [pc, #44]	; (80042fc <HAL_RCC_ClockConfig+0x1bc>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	091b      	lsrs	r3, r3, #4
 80042d2:	f003 030f 	and.w	r3, r3, #15
 80042d6:	490a      	ldr	r1, [pc, #40]	; (8004300 <HAL_RCC_ClockConfig+0x1c0>)
 80042d8:	5ccb      	ldrb	r3, [r1, r3]
 80042da:	fa22 f303 	lsr.w	r3, r2, r3
 80042de:	4a09      	ldr	r2, [pc, #36]	; (8004304 <HAL_RCC_ClockConfig+0x1c4>)
 80042e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042e2:	4b09      	ldr	r3, [pc, #36]	; (8004308 <HAL_RCC_ClockConfig+0x1c8>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7fc ffa4 	bl	8001234 <HAL_InitTick>

  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	40023c00 	.word	0x40023c00
 80042fc:	40023800 	.word	0x40023800
 8004300:	08008300 	.word	0x08008300
 8004304:	20000008 	.word	0x20000008
 8004308:	2000000c 	.word	0x2000000c

0800430c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800430c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004310:	b094      	sub	sp, #80	; 0x50
 8004312:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004314:	2300      	movs	r3, #0
 8004316:	647b      	str	r3, [r7, #68]	; 0x44
 8004318:	2300      	movs	r3, #0
 800431a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800431c:	2300      	movs	r3, #0
 800431e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004320:	2300      	movs	r3, #0
 8004322:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004324:	4b79      	ldr	r3, [pc, #484]	; (800450c <HAL_RCC_GetSysClockFreq+0x200>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f003 030c 	and.w	r3, r3, #12
 800432c:	2b08      	cmp	r3, #8
 800432e:	d00d      	beq.n	800434c <HAL_RCC_GetSysClockFreq+0x40>
 8004330:	2b08      	cmp	r3, #8
 8004332:	f200 80e1 	bhi.w	80044f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004336:	2b00      	cmp	r3, #0
 8004338:	d002      	beq.n	8004340 <HAL_RCC_GetSysClockFreq+0x34>
 800433a:	2b04      	cmp	r3, #4
 800433c:	d003      	beq.n	8004346 <HAL_RCC_GetSysClockFreq+0x3a>
 800433e:	e0db      	b.n	80044f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004340:	4b73      	ldr	r3, [pc, #460]	; (8004510 <HAL_RCC_GetSysClockFreq+0x204>)
 8004342:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004344:	e0db      	b.n	80044fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004346:	4b73      	ldr	r3, [pc, #460]	; (8004514 <HAL_RCC_GetSysClockFreq+0x208>)
 8004348:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800434a:	e0d8      	b.n	80044fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800434c:	4b6f      	ldr	r3, [pc, #444]	; (800450c <HAL_RCC_GetSysClockFreq+0x200>)
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004354:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004356:	4b6d      	ldr	r3, [pc, #436]	; (800450c <HAL_RCC_GetSysClockFreq+0x200>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d063      	beq.n	800442a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004362:	4b6a      	ldr	r3, [pc, #424]	; (800450c <HAL_RCC_GetSysClockFreq+0x200>)
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	099b      	lsrs	r3, r3, #6
 8004368:	2200      	movs	r2, #0
 800436a:	63bb      	str	r3, [r7, #56]	; 0x38
 800436c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800436e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004370:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004374:	633b      	str	r3, [r7, #48]	; 0x30
 8004376:	2300      	movs	r3, #0
 8004378:	637b      	str	r3, [r7, #52]	; 0x34
 800437a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800437e:	4622      	mov	r2, r4
 8004380:	462b      	mov	r3, r5
 8004382:	f04f 0000 	mov.w	r0, #0
 8004386:	f04f 0100 	mov.w	r1, #0
 800438a:	0159      	lsls	r1, r3, #5
 800438c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004390:	0150      	lsls	r0, r2, #5
 8004392:	4602      	mov	r2, r0
 8004394:	460b      	mov	r3, r1
 8004396:	4621      	mov	r1, r4
 8004398:	1a51      	subs	r1, r2, r1
 800439a:	6139      	str	r1, [r7, #16]
 800439c:	4629      	mov	r1, r5
 800439e:	eb63 0301 	sbc.w	r3, r3, r1
 80043a2:	617b      	str	r3, [r7, #20]
 80043a4:	f04f 0200 	mov.w	r2, #0
 80043a8:	f04f 0300 	mov.w	r3, #0
 80043ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043b0:	4659      	mov	r1, fp
 80043b2:	018b      	lsls	r3, r1, #6
 80043b4:	4651      	mov	r1, sl
 80043b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043ba:	4651      	mov	r1, sl
 80043bc:	018a      	lsls	r2, r1, #6
 80043be:	4651      	mov	r1, sl
 80043c0:	ebb2 0801 	subs.w	r8, r2, r1
 80043c4:	4659      	mov	r1, fp
 80043c6:	eb63 0901 	sbc.w	r9, r3, r1
 80043ca:	f04f 0200 	mov.w	r2, #0
 80043ce:	f04f 0300 	mov.w	r3, #0
 80043d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043de:	4690      	mov	r8, r2
 80043e0:	4699      	mov	r9, r3
 80043e2:	4623      	mov	r3, r4
 80043e4:	eb18 0303 	adds.w	r3, r8, r3
 80043e8:	60bb      	str	r3, [r7, #8]
 80043ea:	462b      	mov	r3, r5
 80043ec:	eb49 0303 	adc.w	r3, r9, r3
 80043f0:	60fb      	str	r3, [r7, #12]
 80043f2:	f04f 0200 	mov.w	r2, #0
 80043f6:	f04f 0300 	mov.w	r3, #0
 80043fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80043fe:	4629      	mov	r1, r5
 8004400:	024b      	lsls	r3, r1, #9
 8004402:	4621      	mov	r1, r4
 8004404:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004408:	4621      	mov	r1, r4
 800440a:	024a      	lsls	r2, r1, #9
 800440c:	4610      	mov	r0, r2
 800440e:	4619      	mov	r1, r3
 8004410:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004412:	2200      	movs	r2, #0
 8004414:	62bb      	str	r3, [r7, #40]	; 0x28
 8004416:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004418:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800441c:	f7fb fed4 	bl	80001c8 <__aeabi_uldivmod>
 8004420:	4602      	mov	r2, r0
 8004422:	460b      	mov	r3, r1
 8004424:	4613      	mov	r3, r2
 8004426:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004428:	e058      	b.n	80044dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800442a:	4b38      	ldr	r3, [pc, #224]	; (800450c <HAL_RCC_GetSysClockFreq+0x200>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	099b      	lsrs	r3, r3, #6
 8004430:	2200      	movs	r2, #0
 8004432:	4618      	mov	r0, r3
 8004434:	4611      	mov	r1, r2
 8004436:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800443a:	623b      	str	r3, [r7, #32]
 800443c:	2300      	movs	r3, #0
 800443e:	627b      	str	r3, [r7, #36]	; 0x24
 8004440:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004444:	4642      	mov	r2, r8
 8004446:	464b      	mov	r3, r9
 8004448:	f04f 0000 	mov.w	r0, #0
 800444c:	f04f 0100 	mov.w	r1, #0
 8004450:	0159      	lsls	r1, r3, #5
 8004452:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004456:	0150      	lsls	r0, r2, #5
 8004458:	4602      	mov	r2, r0
 800445a:	460b      	mov	r3, r1
 800445c:	4641      	mov	r1, r8
 800445e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004462:	4649      	mov	r1, r9
 8004464:	eb63 0b01 	sbc.w	fp, r3, r1
 8004468:	f04f 0200 	mov.w	r2, #0
 800446c:	f04f 0300 	mov.w	r3, #0
 8004470:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004474:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004478:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800447c:	ebb2 040a 	subs.w	r4, r2, sl
 8004480:	eb63 050b 	sbc.w	r5, r3, fp
 8004484:	f04f 0200 	mov.w	r2, #0
 8004488:	f04f 0300 	mov.w	r3, #0
 800448c:	00eb      	lsls	r3, r5, #3
 800448e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004492:	00e2      	lsls	r2, r4, #3
 8004494:	4614      	mov	r4, r2
 8004496:	461d      	mov	r5, r3
 8004498:	4643      	mov	r3, r8
 800449a:	18e3      	adds	r3, r4, r3
 800449c:	603b      	str	r3, [r7, #0]
 800449e:	464b      	mov	r3, r9
 80044a0:	eb45 0303 	adc.w	r3, r5, r3
 80044a4:	607b      	str	r3, [r7, #4]
 80044a6:	f04f 0200 	mov.w	r2, #0
 80044aa:	f04f 0300 	mov.w	r3, #0
 80044ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044b2:	4629      	mov	r1, r5
 80044b4:	028b      	lsls	r3, r1, #10
 80044b6:	4621      	mov	r1, r4
 80044b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044bc:	4621      	mov	r1, r4
 80044be:	028a      	lsls	r2, r1, #10
 80044c0:	4610      	mov	r0, r2
 80044c2:	4619      	mov	r1, r3
 80044c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044c6:	2200      	movs	r2, #0
 80044c8:	61bb      	str	r3, [r7, #24]
 80044ca:	61fa      	str	r2, [r7, #28]
 80044cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044d0:	f7fb fe7a 	bl	80001c8 <__aeabi_uldivmod>
 80044d4:	4602      	mov	r2, r0
 80044d6:	460b      	mov	r3, r1
 80044d8:	4613      	mov	r3, r2
 80044da:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044dc:	4b0b      	ldr	r3, [pc, #44]	; (800450c <HAL_RCC_GetSysClockFreq+0x200>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	0c1b      	lsrs	r3, r3, #16
 80044e2:	f003 0303 	and.w	r3, r3, #3
 80044e6:	3301      	adds	r3, #1
 80044e8:	005b      	lsls	r3, r3, #1
 80044ea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80044ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044f6:	e002      	b.n	80044fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044f8:	4b05      	ldr	r3, [pc, #20]	; (8004510 <HAL_RCC_GetSysClockFreq+0x204>)
 80044fa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004500:	4618      	mov	r0, r3
 8004502:	3750      	adds	r7, #80	; 0x50
 8004504:	46bd      	mov	sp, r7
 8004506:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800450a:	bf00      	nop
 800450c:	40023800 	.word	0x40023800
 8004510:	00f42400 	.word	0x00f42400
 8004514:	007a1200 	.word	0x007a1200

08004518 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800451c:	4b03      	ldr	r3, [pc, #12]	; (800452c <HAL_RCC_GetHCLKFreq+0x14>)
 800451e:	681b      	ldr	r3, [r3, #0]
}
 8004520:	4618      	mov	r0, r3
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	20000008 	.word	0x20000008

08004530 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004534:	f7ff fff0 	bl	8004518 <HAL_RCC_GetHCLKFreq>
 8004538:	4602      	mov	r2, r0
 800453a:	4b05      	ldr	r3, [pc, #20]	; (8004550 <HAL_RCC_GetPCLK1Freq+0x20>)
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	0a9b      	lsrs	r3, r3, #10
 8004540:	f003 0307 	and.w	r3, r3, #7
 8004544:	4903      	ldr	r1, [pc, #12]	; (8004554 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004546:	5ccb      	ldrb	r3, [r1, r3]
 8004548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800454c:	4618      	mov	r0, r3
 800454e:	bd80      	pop	{r7, pc}
 8004550:	40023800 	.word	0x40023800
 8004554:	08008310 	.word	0x08008310

08004558 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800455c:	f7ff ffdc 	bl	8004518 <HAL_RCC_GetHCLKFreq>
 8004560:	4602      	mov	r2, r0
 8004562:	4b05      	ldr	r3, [pc, #20]	; (8004578 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	0b5b      	lsrs	r3, r3, #13
 8004568:	f003 0307 	and.w	r3, r3, #7
 800456c:	4903      	ldr	r1, [pc, #12]	; (800457c <HAL_RCC_GetPCLK2Freq+0x24>)
 800456e:	5ccb      	ldrb	r3, [r1, r3]
 8004570:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004574:	4618      	mov	r0, r3
 8004576:	bd80      	pop	{r7, pc}
 8004578:	40023800 	.word	0x40023800
 800457c:	08008310 	.word	0x08008310

08004580 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b086      	sub	sp, #24
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004588:	2300      	movs	r3, #0
 800458a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800458c:	2300      	movs	r3, #0
 800458e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	2b00      	cmp	r3, #0
 800459a:	d105      	bne.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d035      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80045a8:	4b62      	ldr	r3, [pc, #392]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80045ae:	f7fc fe85 	bl	80012bc <HAL_GetTick>
 80045b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045b4:	e008      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80045b6:	f7fc fe81 	bl	80012bc <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d901      	bls.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e0b0      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045c8:	4b5b      	ldr	r3, [pc, #364]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1f0      	bne.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	019a      	lsls	r2, r3, #6
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	071b      	lsls	r3, r3, #28
 80045e0:	4955      	ldr	r1, [pc, #340]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80045e8:	4b52      	ldr	r3, [pc, #328]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80045ea:	2201      	movs	r2, #1
 80045ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80045ee:	f7fc fe65 	bl	80012bc <HAL_GetTick>
 80045f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045f4:	e008      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80045f6:	f7fc fe61 	bl	80012bc <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d901      	bls.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e090      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004608:	4b4b      	ldr	r3, [pc, #300]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d0f0      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0302 	and.w	r3, r3, #2
 800461c:	2b00      	cmp	r3, #0
 800461e:	f000 8083 	beq.w	8004728 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004622:	2300      	movs	r3, #0
 8004624:	60fb      	str	r3, [r7, #12]
 8004626:	4b44      	ldr	r3, [pc, #272]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462a:	4a43      	ldr	r2, [pc, #268]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800462c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004630:	6413      	str	r3, [r2, #64]	; 0x40
 8004632:	4b41      	ldr	r3, [pc, #260]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800463a:	60fb      	str	r3, [r7, #12]
 800463c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800463e:	4b3f      	ldr	r3, [pc, #252]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a3e      	ldr	r2, [pc, #248]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004648:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800464a:	f7fc fe37 	bl	80012bc <HAL_GetTick>
 800464e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004650:	e008      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004652:	f7fc fe33 	bl	80012bc <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	2b02      	cmp	r3, #2
 800465e:	d901      	bls.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e062      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004664:	4b35      	ldr	r3, [pc, #212]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800466c:	2b00      	cmp	r3, #0
 800466e:	d0f0      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004670:	4b31      	ldr	r3, [pc, #196]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004674:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004678:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d02f      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	429a      	cmp	r2, r3
 800468c:	d028      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800468e:	4b2a      	ldr	r3, [pc, #168]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004692:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004696:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004698:	4b29      	ldr	r3, [pc, #164]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800469a:	2201      	movs	r2, #1
 800469c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800469e:	4b28      	ldr	r3, [pc, #160]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80046a4:	4a24      	ldr	r2, [pc, #144]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80046aa:	4b23      	ldr	r3, [pc, #140]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d114      	bne.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80046b6:	f7fc fe01 	bl	80012bc <HAL_GetTick>
 80046ba:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046bc:	e00a      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046be:	f7fc fdfd 	bl	80012bc <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d901      	bls.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e02a      	b.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046d4:	4b18      	ldr	r3, [pc, #96]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d8:	f003 0302 	and.w	r3, r3, #2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d0ee      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046ec:	d10d      	bne.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80046ee:	4b12      	ldr	r3, [pc, #72]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80046fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004702:	490d      	ldr	r1, [pc, #52]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004704:	4313      	orrs	r3, r2
 8004706:	608b      	str	r3, [r1, #8]
 8004708:	e005      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800470a:	4b0b      	ldr	r3, [pc, #44]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	4a0a      	ldr	r2, [pc, #40]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004710:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004714:	6093      	str	r3, [r2, #8]
 8004716:	4b08      	ldr	r3, [pc, #32]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004718:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004722:	4905      	ldr	r1, [pc, #20]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004724:	4313      	orrs	r3, r2
 8004726:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3718      	adds	r7, #24
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	42470068 	.word	0x42470068
 8004738:	40023800 	.word	0x40023800
 800473c:	40007000 	.word	0x40007000
 8004740:	42470e40 	.word	0x42470e40

08004744 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004744:	b480      	push	{r7}
 8004746:	b087      	sub	sp, #28
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800474c:	2300      	movs	r3, #0
 800474e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004750:	2300      	movs	r3, #0
 8004752:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004754:	2300      	movs	r3, #0
 8004756:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004758:	2300      	movs	r3, #0
 800475a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2b01      	cmp	r3, #1
 8004760:	d13e      	bne.n	80047e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004762:	4b23      	ldr	r3, [pc, #140]	; (80047f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d005      	beq.n	800477e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d12f      	bne.n	80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004778:	4b1e      	ldr	r3, [pc, #120]	; (80047f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800477a:	617b      	str	r3, [r7, #20]
          break;
 800477c:	e02f      	b.n	80047de <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800477e:	4b1c      	ldr	r3, [pc, #112]	; (80047f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004786:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800478a:	d108      	bne.n	800479e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800478c:	4b18      	ldr	r3, [pc, #96]	; (80047f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004794:	4a18      	ldr	r2, [pc, #96]	; (80047f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004796:	fbb2 f3f3 	udiv	r3, r2, r3
 800479a:	613b      	str	r3, [r7, #16]
 800479c:	e007      	b.n	80047ae <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800479e:	4b14      	ldr	r3, [pc, #80]	; (80047f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047a6:	4a15      	ldr	r2, [pc, #84]	; (80047fc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80047a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ac:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80047ae:	4b10      	ldr	r3, [pc, #64]	; (80047f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047b4:	099b      	lsrs	r3, r3, #6
 80047b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	fb02 f303 	mul.w	r3, r2, r3
 80047c0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80047c2:	4b0b      	ldr	r3, [pc, #44]	; (80047f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047c8:	0f1b      	lsrs	r3, r3, #28
 80047ca:	f003 0307 	and.w	r3, r3, #7
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d4:	617b      	str	r3, [r7, #20]
          break;
 80047d6:	e002      	b.n	80047de <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80047d8:	2300      	movs	r3, #0
 80047da:	617b      	str	r3, [r7, #20]
          break;
 80047dc:	bf00      	nop
        }
      }
      break;
 80047de:	bf00      	nop
    }
  }
  return frequency;
 80047e0:	697b      	ldr	r3, [r7, #20]
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	371c      	adds	r7, #28
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	40023800 	.word	0x40023800
 80047f4:	00bb8000 	.word	0x00bb8000
 80047f8:	007a1200 	.word	0x007a1200
 80047fc:	00f42400 	.word	0x00f42400

08004800 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e07b      	b.n	800490a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004816:	2b00      	cmp	r3, #0
 8004818:	d108      	bne.n	800482c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004822:	d009      	beq.n	8004838 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	61da      	str	r2, [r3, #28]
 800482a:	e005      	b.n	8004838 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d106      	bne.n	8004858 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f7fc fb40 	bl	8000ed8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2202      	movs	r2, #2
 800485c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800486e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004880:	431a      	orrs	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800488a:	431a      	orrs	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	431a      	orrs	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	431a      	orrs	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048a8:	431a      	orrs	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	69db      	ldr	r3, [r3, #28]
 80048ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048b2:	431a      	orrs	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a1b      	ldr	r3, [r3, #32]
 80048b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048bc:	ea42 0103 	orr.w	r1, r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	430a      	orrs	r2, r1
 80048ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	0c1b      	lsrs	r3, r3, #16
 80048d6:	f003 0104 	and.w	r1, r3, #4
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048de:	f003 0210 	and.w	r2, r3, #16
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	69da      	ldr	r2, [r3, #28]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3708      	adds	r7, #8
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b088      	sub	sp, #32
 8004916:	af00      	add	r7, sp, #0
 8004918:	60f8      	str	r0, [r7, #12]
 800491a:	60b9      	str	r1, [r7, #8]
 800491c:	603b      	str	r3, [r7, #0]
 800491e:	4613      	mov	r3, r2
 8004920:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004922:	2300      	movs	r3, #0
 8004924:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800492c:	2b01      	cmp	r3, #1
 800492e:	d101      	bne.n	8004934 <HAL_SPI_Transmit+0x22>
 8004930:	2302      	movs	r3, #2
 8004932:	e126      	b.n	8004b82 <HAL_SPI_Transmit+0x270>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800493c:	f7fc fcbe 	bl	80012bc <HAL_GetTick>
 8004940:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004942:	88fb      	ldrh	r3, [r7, #6]
 8004944:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b01      	cmp	r3, #1
 8004950:	d002      	beq.n	8004958 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004952:	2302      	movs	r3, #2
 8004954:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004956:	e10b      	b.n	8004b70 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d002      	beq.n	8004964 <HAL_SPI_Transmit+0x52>
 800495e:	88fb      	ldrh	r3, [r7, #6]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d102      	bne.n	800496a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004968:	e102      	b.n	8004b70 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2203      	movs	r2, #3
 800496e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	68ba      	ldr	r2, [r7, #8]
 800497c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	88fa      	ldrh	r2, [r7, #6]
 8004982:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	88fa      	ldrh	r2, [r7, #6]
 8004988:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2200      	movs	r2, #0
 80049a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049b0:	d10f      	bne.n	80049d2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049dc:	2b40      	cmp	r3, #64	; 0x40
 80049de:	d007      	beq.n	80049f0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049f8:	d14b      	bne.n	8004a92 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d002      	beq.n	8004a08 <HAL_SPI_Transmit+0xf6>
 8004a02:	8afb      	ldrh	r3, [r7, #22]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d13e      	bne.n	8004a86 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0c:	881a      	ldrh	r2, [r3, #0]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a18:	1c9a      	adds	r2, r3, #2
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	3b01      	subs	r3, #1
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a2c:	e02b      	b.n	8004a86 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d112      	bne.n	8004a62 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a40:	881a      	ldrh	r2, [r3, #0]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4c:	1c9a      	adds	r2, r3, #2
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	3b01      	subs	r3, #1
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a60:	e011      	b.n	8004a86 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a62:	f7fc fc2b 	bl	80012bc <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d803      	bhi.n	8004a7a <HAL_SPI_Transmit+0x168>
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a78:	d102      	bne.n	8004a80 <HAL_SPI_Transmit+0x16e>
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d102      	bne.n	8004a86 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a84:	e074      	b.n	8004b70 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1ce      	bne.n	8004a2e <HAL_SPI_Transmit+0x11c>
 8004a90:	e04c      	b.n	8004b2c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d002      	beq.n	8004aa0 <HAL_SPI_Transmit+0x18e>
 8004a9a:	8afb      	ldrh	r3, [r7, #22]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d140      	bne.n	8004b22 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	330c      	adds	r3, #12
 8004aaa:	7812      	ldrb	r2, [r2, #0]
 8004aac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab2:	1c5a      	adds	r2, r3, #1
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004ac6:	e02c      	b.n	8004b22 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f003 0302 	and.w	r3, r3, #2
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d113      	bne.n	8004afe <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	330c      	adds	r3, #12
 8004ae0:	7812      	ldrb	r2, [r2, #0]
 8004ae2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae8:	1c5a      	adds	r2, r3, #1
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	3b01      	subs	r3, #1
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	86da      	strh	r2, [r3, #54]	; 0x36
 8004afc:	e011      	b.n	8004b22 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004afe:	f7fc fbdd 	bl	80012bc <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	683a      	ldr	r2, [r7, #0]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d803      	bhi.n	8004b16 <HAL_SPI_Transmit+0x204>
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b14:	d102      	bne.n	8004b1c <HAL_SPI_Transmit+0x20a>
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d102      	bne.n	8004b22 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b20:	e026      	b.n	8004b70 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d1cd      	bne.n	8004ac8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	6839      	ldr	r1, [r7, #0]
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	f000 fbcb 	bl	80052cc <SPI_EndRxTxTransaction>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d002      	beq.n	8004b42 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10a      	bne.n	8004b60 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	613b      	str	r3, [r7, #16]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	613b      	str	r3, [r7, #16]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	613b      	str	r3, [r7, #16]
 8004b5e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d002      	beq.n	8004b6e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	77fb      	strb	r3, [r7, #31]
 8004b6c:	e000      	b.n	8004b70 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004b6e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b80:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3720      	adds	r7, #32
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b088      	sub	sp, #32
 8004b8e:	af02      	add	r7, sp, #8
 8004b90:	60f8      	str	r0, [r7, #12]
 8004b92:	60b9      	str	r1, [r7, #8]
 8004b94:	603b      	str	r3, [r7, #0]
 8004b96:	4613      	mov	r3, r2
 8004b98:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ba6:	d112      	bne.n	8004bce <HAL_SPI_Receive+0x44>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10e      	bne.n	8004bce <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2204      	movs	r2, #4
 8004bb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004bb8:	88fa      	ldrh	r2, [r7, #6]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	9300      	str	r3, [sp, #0]
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	68ba      	ldr	r2, [r7, #8]
 8004bc2:	68b9      	ldr	r1, [r7, #8]
 8004bc4:	68f8      	ldr	r0, [r7, #12]
 8004bc6:	f000 f8f1 	bl	8004dac <HAL_SPI_TransmitReceive>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	e0ea      	b.n	8004da4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d101      	bne.n	8004bdc <HAL_SPI_Receive+0x52>
 8004bd8:	2302      	movs	r3, #2
 8004bda:	e0e3      	b.n	8004da4 <HAL_SPI_Receive+0x21a>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004be4:	f7fc fb6a 	bl	80012bc <HAL_GetTick>
 8004be8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d002      	beq.n	8004bfc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004bfa:	e0ca      	b.n	8004d92 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d002      	beq.n	8004c08 <HAL_SPI_Receive+0x7e>
 8004c02:	88fb      	ldrh	r3, [r7, #6]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d102      	bne.n	8004c0e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004c0c:	e0c1      	b.n	8004d92 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2204      	movs	r2, #4
 8004c12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	68ba      	ldr	r2, [r7, #8]
 8004c20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	88fa      	ldrh	r2, [r7, #6]
 8004c26:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	88fa      	ldrh	r2, [r7, #6]
 8004c2c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c54:	d10f      	bne.n	8004c76 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c64:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c74:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c80:	2b40      	cmp	r3, #64	; 0x40
 8004c82:	d007      	beq.n	8004c94 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c92:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d162      	bne.n	8004d62 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004c9c:	e02e      	b.n	8004cfc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d115      	bne.n	8004cd8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f103 020c 	add.w	r2, r3, #12
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb8:	7812      	ldrb	r2, [r2, #0]
 8004cba:	b2d2      	uxtb	r2, r2
 8004cbc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc2:	1c5a      	adds	r2, r3, #1
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004cd6:	e011      	b.n	8004cfc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cd8:	f7fc faf0 	bl	80012bc <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	683a      	ldr	r2, [r7, #0]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d803      	bhi.n	8004cf0 <HAL_SPI_Receive+0x166>
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cee:	d102      	bne.n	8004cf6 <HAL_SPI_Receive+0x16c>
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d102      	bne.n	8004cfc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004cfa:	e04a      	b.n	8004d92 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1cb      	bne.n	8004c9e <HAL_SPI_Receive+0x114>
 8004d06:	e031      	b.n	8004d6c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d113      	bne.n	8004d3e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68da      	ldr	r2, [r3, #12]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d20:	b292      	uxth	r2, r2
 8004d22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d28:	1c9a      	adds	r2, r3, #2
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	3b01      	subs	r3, #1
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d3c:	e011      	b.n	8004d62 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d3e:	f7fc fabd 	bl	80012bc <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	683a      	ldr	r2, [r7, #0]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d803      	bhi.n	8004d56 <HAL_SPI_Receive+0x1cc>
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d54:	d102      	bne.n	8004d5c <HAL_SPI_Receive+0x1d2>
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d102      	bne.n	8004d62 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004d60:	e017      	b.n	8004d92 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1cd      	bne.n	8004d08 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	6839      	ldr	r1, [r7, #0]
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f000 fa45 	bl	8005200 <SPI_EndRxTransaction>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d002      	beq.n	8004d82 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2220      	movs	r2, #32
 8004d80:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d002      	beq.n	8004d90 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	75fb      	strb	r3, [r7, #23]
 8004d8e:	e000      	b.n	8004d92 <HAL_SPI_Receive+0x208>
  }

error :
 8004d90:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3718      	adds	r7, #24
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b08c      	sub	sp, #48	; 0x30
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]
 8004db8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d101      	bne.n	8004dd2 <HAL_SPI_TransmitReceive+0x26>
 8004dce:	2302      	movs	r3, #2
 8004dd0:	e18a      	b.n	80050e8 <HAL_SPI_TransmitReceive+0x33c>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004dda:	f7fc fa6f 	bl	80012bc <HAL_GetTick>
 8004dde:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004df0:	887b      	ldrh	r3, [r7, #2]
 8004df2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004df4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d00f      	beq.n	8004e1c <HAL_SPI_TransmitReceive+0x70>
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e02:	d107      	bne.n	8004e14 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d103      	bne.n	8004e14 <HAL_SPI_TransmitReceive+0x68>
 8004e0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e10:	2b04      	cmp	r3, #4
 8004e12:	d003      	beq.n	8004e1c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004e14:	2302      	movs	r3, #2
 8004e16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004e1a:	e15b      	b.n	80050d4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d005      	beq.n	8004e2e <HAL_SPI_TransmitReceive+0x82>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d002      	beq.n	8004e2e <HAL_SPI_TransmitReceive+0x82>
 8004e28:	887b      	ldrh	r3, [r7, #2]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d103      	bne.n	8004e36 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004e34:	e14e      	b.n	80050d4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b04      	cmp	r3, #4
 8004e40:	d003      	beq.n	8004e4a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2205      	movs	r2, #5
 8004e46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	887a      	ldrh	r2, [r7, #2]
 8004e5a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	887a      	ldrh	r2, [r7, #2]
 8004e60:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	68ba      	ldr	r2, [r7, #8]
 8004e66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	887a      	ldrh	r2, [r7, #2]
 8004e6c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	887a      	ldrh	r2, [r7, #2]
 8004e72:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e8a:	2b40      	cmp	r3, #64	; 0x40
 8004e8c:	d007      	beq.n	8004e9e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e9c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ea6:	d178      	bne.n	8004f9a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d002      	beq.n	8004eb6 <HAL_SPI_TransmitReceive+0x10a>
 8004eb0:	8b7b      	ldrh	r3, [r7, #26]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d166      	bne.n	8004f84 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eba:	881a      	ldrh	r2, [r3, #0]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec6:	1c9a      	adds	r2, r3, #2
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004eda:	e053      	b.n	8004f84 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d11b      	bne.n	8004f22 <HAL_SPI_TransmitReceive+0x176>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d016      	beq.n	8004f22 <HAL_SPI_TransmitReceive+0x176>
 8004ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d113      	bne.n	8004f22 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efe:	881a      	ldrh	r2, [r3, #0]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0a:	1c9a      	adds	r2, r3, #2
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	3b01      	subs	r3, #1
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f003 0301 	and.w	r3, r3, #1
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d119      	bne.n	8004f64 <HAL_SPI_TransmitReceive+0x1b8>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d014      	beq.n	8004f64 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68da      	ldr	r2, [r3, #12]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f44:	b292      	uxth	r2, r2
 8004f46:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4c:	1c9a      	adds	r2, r3, #2
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f60:	2301      	movs	r3, #1
 8004f62:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004f64:	f7fc f9aa 	bl	80012bc <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d807      	bhi.n	8004f84 <HAL_SPI_TransmitReceive+0x1d8>
 8004f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f7a:	d003      	beq.n	8004f84 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004f82:	e0a7      	b.n	80050d4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1a6      	bne.n	8004edc <HAL_SPI_TransmitReceive+0x130>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1a1      	bne.n	8004edc <HAL_SPI_TransmitReceive+0x130>
 8004f98:	e07c      	b.n	8005094 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d002      	beq.n	8004fa8 <HAL_SPI_TransmitReceive+0x1fc>
 8004fa2:	8b7b      	ldrh	r3, [r7, #26]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d16b      	bne.n	8005080 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	330c      	adds	r3, #12
 8004fb2:	7812      	ldrb	r2, [r2, #0]
 8004fb4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fba:	1c5a      	adds	r2, r3, #1
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fce:	e057      	b.n	8005080 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d11c      	bne.n	8005018 <HAL_SPI_TransmitReceive+0x26c>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d017      	beq.n	8005018 <HAL_SPI_TransmitReceive+0x26c>
 8004fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d114      	bne.n	8005018 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	330c      	adds	r3, #12
 8004ff8:	7812      	ldrb	r2, [r2, #0]
 8004ffa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005000:	1c5a      	adds	r2, r3, #1
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800500a:	b29b      	uxth	r3, r3
 800500c:	3b01      	subs	r3, #1
 800500e:	b29a      	uxth	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005014:	2300      	movs	r3, #0
 8005016:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b01      	cmp	r3, #1
 8005024:	d119      	bne.n	800505a <HAL_SPI_TransmitReceive+0x2ae>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800502a:	b29b      	uxth	r3, r3
 800502c:	2b00      	cmp	r3, #0
 800502e:	d014      	beq.n	800505a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68da      	ldr	r2, [r3, #12]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503a:	b2d2      	uxtb	r2, r2
 800503c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005042:	1c5a      	adds	r2, r3, #1
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800504c:	b29b      	uxth	r3, r3
 800504e:	3b01      	subs	r3, #1
 8005050:	b29a      	uxth	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005056:	2301      	movs	r3, #1
 8005058:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800505a:	f7fc f92f 	bl	80012bc <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005066:	429a      	cmp	r2, r3
 8005068:	d803      	bhi.n	8005072 <HAL_SPI_TransmitReceive+0x2c6>
 800506a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800506c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005070:	d102      	bne.n	8005078 <HAL_SPI_TransmitReceive+0x2cc>
 8005072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005074:	2b00      	cmp	r3, #0
 8005076:	d103      	bne.n	8005080 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800507e:	e029      	b.n	80050d4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005084:	b29b      	uxth	r3, r3
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1a2      	bne.n	8004fd0 <HAL_SPI_TransmitReceive+0x224>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800508e:	b29b      	uxth	r3, r3
 8005090:	2b00      	cmp	r3, #0
 8005092:	d19d      	bne.n	8004fd0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005096:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f000 f917 	bl	80052cc <SPI_EndRxTxTransaction>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d006      	beq.n	80050b2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2220      	movs	r2, #32
 80050ae:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80050b0:	e010      	b.n	80050d4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10b      	bne.n	80050d2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050ba:	2300      	movs	r3, #0
 80050bc:	617b      	str	r3, [r7, #20]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	617b      	str	r3, [r7, #20]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	617b      	str	r3, [r7, #20]
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	e000      	b.n	80050d4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80050d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80050e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3730      	adds	r7, #48	; 0x30
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b088      	sub	sp, #32
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	603b      	str	r3, [r7, #0]
 80050fc:	4613      	mov	r3, r2
 80050fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005100:	f7fc f8dc 	bl	80012bc <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005108:	1a9b      	subs	r3, r3, r2
 800510a:	683a      	ldr	r2, [r7, #0]
 800510c:	4413      	add	r3, r2
 800510e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005110:	f7fc f8d4 	bl	80012bc <HAL_GetTick>
 8005114:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005116:	4b39      	ldr	r3, [pc, #228]	; (80051fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	015b      	lsls	r3, r3, #5
 800511c:	0d1b      	lsrs	r3, r3, #20
 800511e:	69fa      	ldr	r2, [r7, #28]
 8005120:	fb02 f303 	mul.w	r3, r2, r3
 8005124:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005126:	e054      	b.n	80051d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800512e:	d050      	beq.n	80051d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005130:	f7fc f8c4 	bl	80012bc <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	69fa      	ldr	r2, [r7, #28]
 800513c:	429a      	cmp	r2, r3
 800513e:	d902      	bls.n	8005146 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d13d      	bne.n	80051c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	685a      	ldr	r2, [r3, #4]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005154:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800515e:	d111      	bne.n	8005184 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005168:	d004      	beq.n	8005174 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005172:	d107      	bne.n	8005184 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005182:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005188:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800518c:	d10f      	bne.n	80051ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800519c:	601a      	str	r2, [r3, #0]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e017      	b.n	80051f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d101      	bne.n	80051cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80051c8:	2300      	movs	r3, #0
 80051ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	3b01      	subs	r3, #1
 80051d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	689a      	ldr	r2, [r3, #8]
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	4013      	ands	r3, r2
 80051dc:	68ba      	ldr	r2, [r7, #8]
 80051de:	429a      	cmp	r2, r3
 80051e0:	bf0c      	ite	eq
 80051e2:	2301      	moveq	r3, #1
 80051e4:	2300      	movne	r3, #0
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	461a      	mov	r2, r3
 80051ea:	79fb      	ldrb	r3, [r7, #7]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d19b      	bne.n	8005128 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3720      	adds	r7, #32
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	20000008 	.word	0x20000008

08005200 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b086      	sub	sp, #24
 8005204:	af02      	add	r7, sp, #8
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005214:	d111      	bne.n	800523a <SPI_EndRxTransaction+0x3a>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800521e:	d004      	beq.n	800522a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005228:	d107      	bne.n	800523a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005238:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005242:	d12a      	bne.n	800529a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800524c:	d012      	beq.n	8005274 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	9300      	str	r3, [sp, #0]
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	2200      	movs	r2, #0
 8005256:	2180      	movs	r1, #128	; 0x80
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f7ff ff49 	bl	80050f0 <SPI_WaitFlagStateUntilTimeout>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d02d      	beq.n	80052c0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005268:	f043 0220 	orr.w	r2, r3, #32
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e026      	b.n	80052c2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	9300      	str	r3, [sp, #0]
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	2200      	movs	r2, #0
 800527c:	2101      	movs	r1, #1
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	f7ff ff36 	bl	80050f0 <SPI_WaitFlagStateUntilTimeout>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d01a      	beq.n	80052c0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800528e:	f043 0220 	orr.w	r2, r3, #32
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e013      	b.n	80052c2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	2200      	movs	r2, #0
 80052a2:	2101      	movs	r1, #1
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f7ff ff23 	bl	80050f0 <SPI_WaitFlagStateUntilTimeout>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d007      	beq.n	80052c0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052b4:	f043 0220 	orr.w	r2, r3, #32
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e000      	b.n	80052c2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
	...

080052cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b088      	sub	sp, #32
 80052d0:	af02      	add	r7, sp, #8
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80052d8:	4b1b      	ldr	r3, [pc, #108]	; (8005348 <SPI_EndRxTxTransaction+0x7c>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a1b      	ldr	r2, [pc, #108]	; (800534c <SPI_EndRxTxTransaction+0x80>)
 80052de:	fba2 2303 	umull	r2, r3, r2, r3
 80052e2:	0d5b      	lsrs	r3, r3, #21
 80052e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80052e8:	fb02 f303 	mul.w	r3, r2, r3
 80052ec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052f6:	d112      	bne.n	800531e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	9300      	str	r3, [sp, #0]
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	2200      	movs	r2, #0
 8005300:	2180      	movs	r1, #128	; 0x80
 8005302:	68f8      	ldr	r0, [r7, #12]
 8005304:	f7ff fef4 	bl	80050f0 <SPI_WaitFlagStateUntilTimeout>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d016      	beq.n	800533c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005312:	f043 0220 	orr.w	r2, r3, #32
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e00f      	b.n	800533e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00a      	beq.n	800533a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	3b01      	subs	r3, #1
 8005328:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005334:	2b80      	cmp	r3, #128	; 0x80
 8005336:	d0f2      	beq.n	800531e <SPI_EndRxTxTransaction+0x52>
 8005338:	e000      	b.n	800533c <SPI_EndRxTxTransaction+0x70>
        break;
 800533a:	bf00      	nop
  }

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3718      	adds	r7, #24
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	20000008 	.word	0x20000008
 800534c:	165e9f81 	.word	0x165e9f81

08005350 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d101      	bne.n	8005362 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e033      	b.n	80053ca <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d106      	bne.n	800537c <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f7fb fe2c 	bl	8000fd4 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2202      	movs	r2, #2
 8005380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 f90b 	bl	80055a0 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	691a      	ldr	r2, [r3, #16]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005398:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	695a      	ldr	r2, [r3, #20]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053a8:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68da      	ldr	r2, [r3, #12]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053b8:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3708      	adds	r7, #8
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <HAL_USART_Transmit>:
  * @param  Size    Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b08a      	sub	sp, #40	; 0x28
 80053d6:	af02      	add	r7, sp, #8
 80053d8:	60f8      	str	r0, [r7, #12]
 80053da:	60b9      	str	r1, [r7, #8]
 80053dc:	603b      	str	r3, [r7, #0]
 80053de:	4613      	mov	r3, r2
 80053e0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d17c      	bne.n	80054e8 <HAL_USART_Transmit+0x116>
  {
    if ((pTxData == NULL) || (Size == 0))
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d002      	beq.n	80053fa <HAL_USART_Transmit+0x28>
 80053f4:	88fb      	ldrh	r3, [r7, #6]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d101      	bne.n	80053fe <HAL_USART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e075      	b.n	80054ea <HAL_USART_Transmit+0x118>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005404:	2b01      	cmp	r3, #1
 8005406:	d101      	bne.n	800540c <HAL_USART_Transmit+0x3a>
 8005408:	2302      	movs	r3, #2
 800540a:	e06e      	b.n	80054ea <HAL_USART_Transmit+0x118>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	641a      	str	r2, [r3, #64]	; 0x40
    husart->State = HAL_USART_STATE_BUSY_TX;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2212      	movs	r2, #18
 800541e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005422:	f7fb ff4b 	bl	80012bc <HAL_GetTick>
 8005426:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	88fa      	ldrh	r2, [r7, #6]
 800542c:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	88fa      	ldrh	r2, [r7, #6]
 8005432:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800543c:	d108      	bne.n	8005450 <HAL_USART_Transmit+0x7e>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d104      	bne.n	8005450 <HAL_USART_Transmit+0x7e>
    {
      ptxdata8bits  = NULL;
 8005446:	2300      	movs	r3, #0
 8005448:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	61bb      	str	r3, [r7, #24]
 800544e:	e003      	b.n	8005458 <HAL_USART_Transmit+0x86>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8005454:	2300      	movs	r3, #0
 8005456:	61bb      	str	r3, [r7, #24]
    }

    while (husart->TxXferCount > 0U)
 8005458:	e02a      	b.n	80054b0 <HAL_USART_Transmit+0xde>
    {
      /* Wait for TXE flag in order to write data in DR */
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	9300      	str	r3, [sp, #0]
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	2200      	movs	r2, #0
 8005462:	2180      	movs	r1, #128	; 0x80
 8005464:	68f8      	ldr	r0, [r7, #12]
 8005466:	f000 f844 	bl	80054f2 <USART_WaitOnFlagUntilTimeout>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d001      	beq.n	8005474 <HAL_USART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e03a      	b.n	80054ea <HAL_USART_Transmit+0x118>
      }
      if (ptxdata8bits == NULL)
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10b      	bne.n	8005492 <HAL_USART_Transmit+0xc0>
      {
        husart->Instance->DR = (uint16_t)(*ptxdata16bits & (uint16_t)0x01FF);
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	881b      	ldrh	r3, [r3, #0]
 800547e:	461a      	mov	r2, r3
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005488:	605a      	str	r2, [r3, #4]
        ptxdata16bits++;
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	3302      	adds	r3, #2
 800548e:	61bb      	str	r3, [r7, #24]
 8005490:	e007      	b.n	80054a2 <HAL_USART_Transmit+0xd0>
      }
      else
      {
        husart->Instance->DR = (uint8_t)(*ptxdata8bits & (uint8_t)0xFF);
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	781a      	ldrb	r2, [r3, #0]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	605a      	str	r2, [r3, #4]
        ptxdata8bits++;
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	3301      	adds	r3, #1
 80054a0:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	3b01      	subs	r3, #1
 80054aa:	b29a      	uxth	r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1cf      	bne.n	800545a <HAL_USART_Transmit+0x88>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	9300      	str	r3, [sp, #0]
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	2200      	movs	r2, #0
 80054c2:	2140      	movs	r1, #64	; 0x40
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	f000 f814 	bl	80054f2 <USART_WaitOnFlagUntilTimeout>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d001      	beq.n	80054d4 <HAL_USART_Transmit+0x102>
    {
      return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e00a      	b.n	80054ea <HAL_USART_Transmit+0x118>
    }

    husart->State = HAL_USART_STATE_READY;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80054e4:	2300      	movs	r3, #0
 80054e6:	e000      	b.n	80054ea <HAL_USART_Transmit+0x118>
  }
  else
  {
    return HAL_BUSY;
 80054e8:	2302      	movs	r3, #2
  }
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3720      	adds	r7, #32
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b084      	sub	sp, #16
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	60f8      	str	r0, [r7, #12]
 80054fa:	60b9      	str	r1, [r7, #8]
 80054fc:	603b      	str	r3, [r7, #0]
 80054fe:	4613      	mov	r3, r2
 8005500:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8005502:	e038      	b.n	8005576 <USART_WaitOnFlagUntilTimeout+0x84>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800550a:	d034      	beq.n	8005576 <USART_WaitOnFlagUntilTimeout+0x84>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d007      	beq.n	8005522 <USART_WaitOnFlagUntilTimeout+0x30>
 8005512:	f7fb fed3 	bl	80012bc <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	69ba      	ldr	r2, [r7, #24]
 800551e:	429a      	cmp	r2, r3
 8005520:	d229      	bcs.n	8005576 <USART_WaitOnFlagUntilTimeout+0x84>
      {
        /* Disable the USART Transmit Complete Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68da      	ldr	r2, [r3, #12]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005530:	60da      	str	r2, [r3, #12]

        /* Disable the USART RXNE Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68da      	ldr	r2, [r3, #12]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f022 0220 	bic.w	r2, r2, #32
 8005540:	60da      	str	r2, [r3, #12]

        /* Disable the USART Parity Error Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68da      	ldr	r2, [r3, #12]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005550:	60da      	str	r2, [r3, #12]

        /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	695a      	ldr	r2, [r3, #20]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f022 0201 	bic.w	r2, r2, #1
 8005560:	615a      	str	r2, [r3, #20]

        husart->State = HAL_USART_STATE_READY;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e00f      	b.n	8005596 <USART_WaitOnFlagUntilTimeout+0xa4>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	4013      	ands	r3, r2
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	429a      	cmp	r2, r3
 8005584:	bf0c      	ite	eq
 8005586:	2301      	moveq	r3, #1
 8005588:	2300      	movne	r3, #0
 800558a:	b2db      	uxtb	r3, r3
 800558c:	461a      	mov	r2, r3
 800558e:	79fb      	ldrb	r3, [r7, #7]
 8005590:	429a      	cmp	r2, r3
 8005592:	d0b7      	beq.n	8005504 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3710      	adds	r7, #16
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
	...

080055a0 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 80055a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055a4:	b0c6      	sub	sp, #280	; 0x118
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg = 0x00U;
 80055ac:	2300      	movs	r3, #0
 80055ae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80055b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68d9      	ldr	r1, [r3, #12]
 80055ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	f021 030c 	bic.w	r3, r1, #12
 80055c4:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 80055c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 80055d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055d6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80055da:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 80055de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055e2:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 80055e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055e8:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 80055ea:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 80055ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055f0:	6a1b      	ldr	r3, [r3, #32]
 80055f2:	431a      	orrs	r2, r3
 80055f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055f8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 80055fa:	431a      	orrs	r2, r3
 80055fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005600:	4313      	orrs	r3, r2
 8005602:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005606:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 800560a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005614:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8005616:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8005622:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005626:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800562a:	f023 030c 	bic.w	r3, r3, #12
 800562e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8005632:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005636:	689a      	ldr	r2, [r3, #8]
 8005638:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	431a      	orrs	r2, r3
 8005640:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	431a      	orrs	r2, r3
 8005648:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800564c:	4313      	orrs	r3, r2
 800564e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005652:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8005656:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005660:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8005662:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6959      	ldr	r1, [r3, #20]
 800566a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	f421 7340 	bic.w	r3, r1, #768	; 0x300
 8005674:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 8005676:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	4b8b      	ldr	r3, [pc, #556]	; (80058ac <USART_SetConfig+0x30c>)
 800567e:	429a      	cmp	r2, r3
 8005680:	d006      	beq.n	8005690 <USART_SetConfig+0xf0>
 8005682:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	4b89      	ldr	r3, [pc, #548]	; (80058b0 <USART_SetConfig+0x310>)
 800568a:	429a      	cmp	r2, r3
 800568c:	f040 8114 	bne.w	80058b8 <USART_SetConfig+0x318>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005690:	f7fe ff62 	bl	8004558 <HAL_RCC_GetPCLK2Freq>
 8005694:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8005698:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800569c:	2200      	movs	r2, #0
 800569e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80056a2:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80056a6:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80056aa:	4622      	mov	r2, r4
 80056ac:	462b      	mov	r3, r5
 80056ae:	1891      	adds	r1, r2, r2
 80056b0:	6739      	str	r1, [r7, #112]	; 0x70
 80056b2:	415b      	adcs	r3, r3
 80056b4:	677b      	str	r3, [r7, #116]	; 0x74
 80056b6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80056ba:	4621      	mov	r1, r4
 80056bc:	eb12 0801 	adds.w	r8, r2, r1
 80056c0:	4629      	mov	r1, r5
 80056c2:	eb43 0901 	adc.w	r9, r3, r1
 80056c6:	f04f 0200 	mov.w	r2, #0
 80056ca:	f04f 0300 	mov.w	r3, #0
 80056ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056da:	4690      	mov	r8, r2
 80056dc:	4699      	mov	r9, r3
 80056de:	4623      	mov	r3, r4
 80056e0:	eb18 0303 	adds.w	r3, r8, r3
 80056e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80056e8:	462b      	mov	r3, r5
 80056ea:	eb49 0303 	adc.w	r3, r9, r3
 80056ee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80056f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80056fe:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8005702:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005706:	460b      	mov	r3, r1
 8005708:	18db      	adds	r3, r3, r3
 800570a:	66bb      	str	r3, [r7, #104]	; 0x68
 800570c:	4613      	mov	r3, r2
 800570e:	eb42 0303 	adc.w	r3, r2, r3
 8005712:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005714:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8005718:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800571c:	f7fa fd54 	bl	80001c8 <__aeabi_uldivmod>
 8005720:	4602      	mov	r2, r0
 8005722:	460b      	mov	r3, r1
 8005724:	4b63      	ldr	r3, [pc, #396]	; (80058b4 <USART_SetConfig+0x314>)
 8005726:	fba3 2302 	umull	r2, r3, r3, r2
 800572a:	095b      	lsrs	r3, r3, #5
 800572c:	011c      	lsls	r4, r3, #4
 800572e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005732:	2200      	movs	r2, #0
 8005734:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005738:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800573c:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8005740:	4642      	mov	r2, r8
 8005742:	464b      	mov	r3, r9
 8005744:	1891      	adds	r1, r2, r2
 8005746:	6639      	str	r1, [r7, #96]	; 0x60
 8005748:	415b      	adcs	r3, r3
 800574a:	667b      	str	r3, [r7, #100]	; 0x64
 800574c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005750:	4641      	mov	r1, r8
 8005752:	1851      	adds	r1, r2, r1
 8005754:	65b9      	str	r1, [r7, #88]	; 0x58
 8005756:	4649      	mov	r1, r9
 8005758:	414b      	adcs	r3, r1
 800575a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800575c:	f04f 0200 	mov.w	r2, #0
 8005760:	f04f 0300 	mov.w	r3, #0
 8005764:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8005768:	4659      	mov	r1, fp
 800576a:	00cb      	lsls	r3, r1, #3
 800576c:	4651      	mov	r1, sl
 800576e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005772:	4651      	mov	r1, sl
 8005774:	00ca      	lsls	r2, r1, #3
 8005776:	4610      	mov	r0, r2
 8005778:	4619      	mov	r1, r3
 800577a:	4603      	mov	r3, r0
 800577c:	4642      	mov	r2, r8
 800577e:	189b      	adds	r3, r3, r2
 8005780:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005784:	464b      	mov	r3, r9
 8005786:	460a      	mov	r2, r1
 8005788:	eb42 0303 	adc.w	r3, r2, r3
 800578c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005790:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800579c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80057a0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80057a4:	460b      	mov	r3, r1
 80057a6:	18db      	adds	r3, r3, r3
 80057a8:	653b      	str	r3, [r7, #80]	; 0x50
 80057aa:	4613      	mov	r3, r2
 80057ac:	eb42 0303 	adc.w	r3, r2, r3
 80057b0:	657b      	str	r3, [r7, #84]	; 0x54
 80057b2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80057b6:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80057ba:	f7fa fd05 	bl	80001c8 <__aeabi_uldivmod>
 80057be:	4602      	mov	r2, r0
 80057c0:	460b      	mov	r3, r1
 80057c2:	4611      	mov	r1, r2
 80057c4:	4b3b      	ldr	r3, [pc, #236]	; (80058b4 <USART_SetConfig+0x314>)
 80057c6:	fba3 2301 	umull	r2, r3, r3, r1
 80057ca:	095b      	lsrs	r3, r3, #5
 80057cc:	2264      	movs	r2, #100	; 0x64
 80057ce:	fb02 f303 	mul.w	r3, r2, r3
 80057d2:	1acb      	subs	r3, r1, r3
 80057d4:	00db      	lsls	r3, r3, #3
 80057d6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80057da:	4b36      	ldr	r3, [pc, #216]	; (80058b4 <USART_SetConfig+0x314>)
 80057dc:	fba3 2302 	umull	r2, r3, r3, r2
 80057e0:	095b      	lsrs	r3, r3, #5
 80057e2:	005b      	lsls	r3, r3, #1
 80057e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80057e8:	441c      	add	r4, r3
 80057ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80057ee:	2200      	movs	r2, #0
 80057f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80057f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80057f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80057fc:	4642      	mov	r2, r8
 80057fe:	464b      	mov	r3, r9
 8005800:	1891      	adds	r1, r2, r2
 8005802:	64b9      	str	r1, [r7, #72]	; 0x48
 8005804:	415b      	adcs	r3, r3
 8005806:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005808:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800580c:	4641      	mov	r1, r8
 800580e:	1851      	adds	r1, r2, r1
 8005810:	6439      	str	r1, [r7, #64]	; 0x40
 8005812:	4649      	mov	r1, r9
 8005814:	414b      	adcs	r3, r1
 8005816:	647b      	str	r3, [r7, #68]	; 0x44
 8005818:	f04f 0200 	mov.w	r2, #0
 800581c:	f04f 0300 	mov.w	r3, #0
 8005820:	e9d7 ab10 	ldrd	sl, fp, [r7, #64]	; 0x40
 8005824:	4659      	mov	r1, fp
 8005826:	00cb      	lsls	r3, r1, #3
 8005828:	4651      	mov	r1, sl
 800582a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800582e:	4651      	mov	r1, sl
 8005830:	00ca      	lsls	r2, r1, #3
 8005832:	4610      	mov	r0, r2
 8005834:	4619      	mov	r1, r3
 8005836:	4603      	mov	r3, r0
 8005838:	4642      	mov	r2, r8
 800583a:	189b      	adds	r3, r3, r2
 800583c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005840:	464b      	mov	r3, r9
 8005842:	460a      	mov	r2, r1
 8005844:	eb42 0303 	adc.w	r3, r2, r3
 8005848:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800584c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005858:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800585c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005860:	460b      	mov	r3, r1
 8005862:	18db      	adds	r3, r3, r3
 8005864:	63bb      	str	r3, [r7, #56]	; 0x38
 8005866:	4613      	mov	r3, r2
 8005868:	eb42 0303 	adc.w	r3, r2, r3
 800586c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800586e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005872:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005876:	f7fa fca7 	bl	80001c8 <__aeabi_uldivmod>
 800587a:	4602      	mov	r2, r0
 800587c:	460b      	mov	r3, r1
 800587e:	4b0d      	ldr	r3, [pc, #52]	; (80058b4 <USART_SetConfig+0x314>)
 8005880:	fba3 1302 	umull	r1, r3, r3, r2
 8005884:	095b      	lsrs	r3, r3, #5
 8005886:	2164      	movs	r1, #100	; 0x64
 8005888:	fb01 f303 	mul.w	r3, r1, r3
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	00db      	lsls	r3, r3, #3
 8005890:	3332      	adds	r3, #50	; 0x32
 8005892:	4a08      	ldr	r2, [pc, #32]	; (80058b4 <USART_SetConfig+0x314>)
 8005894:	fba2 2303 	umull	r2, r3, r2, r3
 8005898:	095b      	lsrs	r3, r3, #5
 800589a:	f003 0207 	and.w	r2, r3, #7
 800589e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4422      	add	r2, r4
 80058a6:	609a      	str	r2, [r3, #8]
 80058a8:	e109      	b.n	8005abe <USART_SetConfig+0x51e>
 80058aa:	bf00      	nop
 80058ac:	40011000 	.word	0x40011000
 80058b0:	40011400 	.word	0x40011400
 80058b4:	51eb851f 	.word	0x51eb851f
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80058b8:	f7fe fe3a 	bl	8004530 <HAL_RCC_GetPCLK1Freq>
 80058bc:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 80058c0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80058c4:	2200      	movs	r2, #0
 80058c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058ca:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80058ce:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80058d2:	4642      	mov	r2, r8
 80058d4:	464b      	mov	r3, r9
 80058d6:	1891      	adds	r1, r2, r2
 80058d8:	6339      	str	r1, [r7, #48]	; 0x30
 80058da:	415b      	adcs	r3, r3
 80058dc:	637b      	str	r3, [r7, #52]	; 0x34
 80058de:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80058e2:	4641      	mov	r1, r8
 80058e4:	1854      	adds	r4, r2, r1
 80058e6:	4649      	mov	r1, r9
 80058e8:	eb43 0501 	adc.w	r5, r3, r1
 80058ec:	f04f 0200 	mov.w	r2, #0
 80058f0:	f04f 0300 	mov.w	r3, #0
 80058f4:	00eb      	lsls	r3, r5, #3
 80058f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058fa:	00e2      	lsls	r2, r4, #3
 80058fc:	4614      	mov	r4, r2
 80058fe:	461d      	mov	r5, r3
 8005900:	4643      	mov	r3, r8
 8005902:	18e3      	adds	r3, r4, r3
 8005904:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005908:	464b      	mov	r3, r9
 800590a:	eb45 0303 	adc.w	r3, r5, r3
 800590e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005912:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800591e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005922:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005926:	460b      	mov	r3, r1
 8005928:	18db      	adds	r3, r3, r3
 800592a:	62bb      	str	r3, [r7, #40]	; 0x28
 800592c:	4613      	mov	r3, r2
 800592e:	eb42 0303 	adc.w	r3, r2, r3
 8005932:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005934:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005938:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800593c:	f7fa fc44 	bl	80001c8 <__aeabi_uldivmod>
 8005940:	4602      	mov	r2, r0
 8005942:	460b      	mov	r3, r1
 8005944:	4b61      	ldr	r3, [pc, #388]	; (8005acc <USART_SetConfig+0x52c>)
 8005946:	fba3 2302 	umull	r2, r3, r3, r2
 800594a:	095b      	lsrs	r3, r3, #5
 800594c:	011c      	lsls	r4, r3, #4
 800594e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005952:	2200      	movs	r2, #0
 8005954:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005958:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800595c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005960:	4642      	mov	r2, r8
 8005962:	464b      	mov	r3, r9
 8005964:	1891      	adds	r1, r2, r2
 8005966:	6239      	str	r1, [r7, #32]
 8005968:	415b      	adcs	r3, r3
 800596a:	627b      	str	r3, [r7, #36]	; 0x24
 800596c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005970:	4641      	mov	r1, r8
 8005972:	eb12 0a01 	adds.w	sl, r2, r1
 8005976:	4649      	mov	r1, r9
 8005978:	eb43 0b01 	adc.w	fp, r3, r1
 800597c:	f04f 0200 	mov.w	r2, #0
 8005980:	f04f 0300 	mov.w	r3, #0
 8005984:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005988:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800598c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005990:	4692      	mov	sl, r2
 8005992:	469b      	mov	fp, r3
 8005994:	4643      	mov	r3, r8
 8005996:	eb1a 0303 	adds.w	r3, sl, r3
 800599a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800599e:	464b      	mov	r3, r9
 80059a0:	eb4b 0303 	adc.w	r3, fp, r3
 80059a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80059a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80059b4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80059b8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80059bc:	460b      	mov	r3, r1
 80059be:	18db      	adds	r3, r3, r3
 80059c0:	61bb      	str	r3, [r7, #24]
 80059c2:	4613      	mov	r3, r2
 80059c4:	eb42 0303 	adc.w	r3, r2, r3
 80059c8:	61fb      	str	r3, [r7, #28]
 80059ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059ce:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80059d2:	f7fa fbf9 	bl	80001c8 <__aeabi_uldivmod>
 80059d6:	4602      	mov	r2, r0
 80059d8:	460b      	mov	r3, r1
 80059da:	4611      	mov	r1, r2
 80059dc:	4b3b      	ldr	r3, [pc, #236]	; (8005acc <USART_SetConfig+0x52c>)
 80059de:	fba3 2301 	umull	r2, r3, r3, r1
 80059e2:	095b      	lsrs	r3, r3, #5
 80059e4:	2264      	movs	r2, #100	; 0x64
 80059e6:	fb02 f303 	mul.w	r3, r2, r3
 80059ea:	1acb      	subs	r3, r1, r3
 80059ec:	00db      	lsls	r3, r3, #3
 80059ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80059f2:	4b36      	ldr	r3, [pc, #216]	; (8005acc <USART_SetConfig+0x52c>)
 80059f4:	fba3 2302 	umull	r2, r3, r3, r2
 80059f8:	095b      	lsrs	r3, r3, #5
 80059fa:	005b      	lsls	r3, r3, #1
 80059fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a00:	441c      	add	r4, r3
 8005a02:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005a06:	2200      	movs	r2, #0
 8005a08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005a0c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005a10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005a14:	4642      	mov	r2, r8
 8005a16:	464b      	mov	r3, r9
 8005a18:	1891      	adds	r1, r2, r2
 8005a1a:	6139      	str	r1, [r7, #16]
 8005a1c:	415b      	adcs	r3, r3
 8005a1e:	617b      	str	r3, [r7, #20]
 8005a20:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005a24:	4641      	mov	r1, r8
 8005a26:	1851      	adds	r1, r2, r1
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	4649      	mov	r1, r9
 8005a2c:	414b      	adcs	r3, r1
 8005a2e:	60fb      	str	r3, [r7, #12]
 8005a30:	f04f 0200 	mov.w	r2, #0
 8005a34:	f04f 0300 	mov.w	r3, #0
 8005a38:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005a3c:	4659      	mov	r1, fp
 8005a3e:	00cb      	lsls	r3, r1, #3
 8005a40:	4651      	mov	r1, sl
 8005a42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a46:	4651      	mov	r1, sl
 8005a48:	00ca      	lsls	r2, r1, #3
 8005a4a:	4610      	mov	r0, r2
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	4603      	mov	r3, r0
 8005a50:	4642      	mov	r2, r8
 8005a52:	189b      	adds	r3, r3, r2
 8005a54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a58:	464b      	mov	r3, r9
 8005a5a:	460a      	mov	r2, r1
 8005a5c:	eb42 0303 	adc.w	r3, r2, r3
 8005a60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a6e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005a70:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005a74:	460b      	mov	r3, r1
 8005a76:	18db      	adds	r3, r3, r3
 8005a78:	603b      	str	r3, [r7, #0]
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	eb42 0303 	adc.w	r3, r2, r3
 8005a80:	607b      	str	r3, [r7, #4]
 8005a82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005a8a:	f7fa fb9d 	bl	80001c8 <__aeabi_uldivmod>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	460b      	mov	r3, r1
 8005a92:	4b0e      	ldr	r3, [pc, #56]	; (8005acc <USART_SetConfig+0x52c>)
 8005a94:	fba3 1302 	umull	r1, r3, r3, r2
 8005a98:	095b      	lsrs	r3, r3, #5
 8005a9a:	2164      	movs	r1, #100	; 0x64
 8005a9c:	fb01 f303 	mul.w	r3, r1, r3
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	00db      	lsls	r3, r3, #3
 8005aa4:	3332      	adds	r3, #50	; 0x32
 8005aa6:	4a09      	ldr	r2, [pc, #36]	; (8005acc <USART_SetConfig+0x52c>)
 8005aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8005aac:	095b      	lsrs	r3, r3, #5
 8005aae:	f003 0207 	and.w	r2, r3, #7
 8005ab2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4422      	add	r2, r4
 8005aba:	609a      	str	r2, [r3, #8]
  }
}
 8005abc:	bf00      	nop
 8005abe:	bf00      	nop
 8005ac0:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005aca:	bf00      	nop
 8005acc:	51eb851f 	.word	0x51eb851f

08005ad0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ad0:	b084      	sub	sp, #16
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b084      	sub	sp, #16
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
 8005ada:	f107 001c 	add.w	r0, r7, #28
 8005ade:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d122      	bne.n	8005b2e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005afc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005b10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d105      	bne.n	8005b22 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f9c0 	bl	8005ea8 <USB_CoreReset>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	73fb      	strb	r3, [r7, #15]
 8005b2c:	e01a      	b.n	8005b64 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f9b4 	bl	8005ea8 <USB_CoreReset>
 8005b40:	4603      	mov	r3, r0
 8005b42:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005b44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d106      	bne.n	8005b58 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	639a      	str	r2, [r3, #56]	; 0x38
 8005b56:	e005      	b.n	8005b64 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d10b      	bne.n	8005b82 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f043 0206 	orr.w	r2, r3, #6
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f043 0220 	orr.w	r2, r3, #32
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3710      	adds	r7, #16
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b8e:	b004      	add	sp, #16
 8005b90:	4770      	bx	lr

08005b92 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b92:	b480      	push	{r7}
 8005b94:	b083      	sub	sp, #12
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	f043 0201 	orr.w	r2, r3, #1
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	f023 0201 	bic.w	r2, r3, #1
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	370c      	adds	r7, #12
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr

08005bd6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b084      	sub	sp, #16
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
 8005bde:	460b      	mov	r3, r1
 8005be0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005be2:	2300      	movs	r3, #0
 8005be4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005bf2:	78fb      	ldrb	r3, [r7, #3]
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d115      	bne.n	8005c24 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c04:	2001      	movs	r0, #1
 8005c06:	f7fb fb65 	bl	80012d4 <HAL_Delay>
      ms++;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 f93a 	bl	8005e8a <USB_GetMode>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d01e      	beq.n	8005c5a <USB_SetCurrentMode+0x84>
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2b31      	cmp	r3, #49	; 0x31
 8005c20:	d9f0      	bls.n	8005c04 <USB_SetCurrentMode+0x2e>
 8005c22:	e01a      	b.n	8005c5a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005c24:	78fb      	ldrb	r3, [r7, #3]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d115      	bne.n	8005c56 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c36:	2001      	movs	r0, #1
 8005c38:	f7fb fb4c 	bl	80012d4 <HAL_Delay>
      ms++;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	3301      	adds	r3, #1
 8005c40:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 f921 	bl	8005e8a <USB_GetMode>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d005      	beq.n	8005c5a <USB_SetCurrentMode+0x84>
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2b31      	cmp	r3, #49	; 0x31
 8005c52:	d9f0      	bls.n	8005c36 <USB_SetCurrentMode+0x60>
 8005c54:	e001      	b.n	8005c5a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e005      	b.n	8005c66 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2b32      	cmp	r3, #50	; 0x32
 8005c5e:	d101      	bne.n	8005c64 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e000      	b.n	8005c66 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
	...

08005c70 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	3301      	adds	r3, #1
 8005c82:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	4a13      	ldr	r2, [pc, #76]	; (8005cd4 <USB_FlushTxFifo+0x64>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d901      	bls.n	8005c90 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	e01b      	b.n	8005cc8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	daf2      	bge.n	8005c7e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	019b      	lsls	r3, r3, #6
 8005ca0:	f043 0220 	orr.w	r2, r3, #32
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	3301      	adds	r3, #1
 8005cac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	4a08      	ldr	r2, [pc, #32]	; (8005cd4 <USB_FlushTxFifo+0x64>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d901      	bls.n	8005cba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e006      	b.n	8005cc8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	f003 0320 	and.w	r3, r3, #32
 8005cc2:	2b20      	cmp	r3, #32
 8005cc4:	d0f0      	beq.n	8005ca8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3714      	adds	r7, #20
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr
 8005cd4:	00030d40 	.word	0x00030d40

08005cd8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	4a11      	ldr	r2, [pc, #68]	; (8005d34 <USB_FlushRxFifo+0x5c>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d901      	bls.n	8005cf6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e018      	b.n	8005d28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	daf2      	bge.n	8005ce4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2210      	movs	r2, #16
 8005d06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	4a08      	ldr	r2, [pc, #32]	; (8005d34 <USB_FlushRxFifo+0x5c>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d901      	bls.n	8005d1a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e006      	b.n	8005d28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	f003 0310 	and.w	r3, r3, #16
 8005d22:	2b10      	cmp	r3, #16
 8005d24:	d0f0      	beq.n	8005d08 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3714      	adds	r7, #20
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr
 8005d34:	00030d40 	.word	0x00030d40

08005d38 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b089      	sub	sp, #36	; 0x24
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	4611      	mov	r1, r2
 8005d44:	461a      	mov	r2, r3
 8005d46:	460b      	mov	r3, r1
 8005d48:	71fb      	strb	r3, [r7, #7]
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005d56:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d123      	bne.n	8005da6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005d5e:	88bb      	ldrh	r3, [r7, #4]
 8005d60:	3303      	adds	r3, #3
 8005d62:	089b      	lsrs	r3, r3, #2
 8005d64:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005d66:	2300      	movs	r3, #0
 8005d68:	61bb      	str	r3, [r7, #24]
 8005d6a:	e018      	b.n	8005d9e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005d6c:	79fb      	ldrb	r3, [r7, #7]
 8005d6e:	031a      	lsls	r2, r3, #12
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	4413      	add	r3, r2
 8005d74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d78:	461a      	mov	r2, r3
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	3301      	adds	r3, #1
 8005d84:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	3301      	adds	r3, #1
 8005d90:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	3301      	adds	r3, #1
 8005d96:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	61bb      	str	r3, [r7, #24]
 8005d9e:	69ba      	ldr	r2, [r7, #24]
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d3e2      	bcc.n	8005d6c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3724      	adds	r7, #36	; 0x24
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b08b      	sub	sp, #44	; 0x2c
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005dca:	88fb      	ldrh	r3, [r7, #6]
 8005dcc:	089b      	lsrs	r3, r3, #2
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005dd2:	88fb      	ldrh	r3, [r7, #6]
 8005dd4:	f003 0303 	and.w	r3, r3, #3
 8005dd8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005dda:	2300      	movs	r3, #0
 8005ddc:	623b      	str	r3, [r7, #32]
 8005dde:	e014      	b.n	8005e0a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dea:	601a      	str	r2, [r3, #0]
    pDest++;
 8005dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dee:	3301      	adds	r3, #1
 8005df0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df4:	3301      	adds	r3, #1
 8005df6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e00:	3301      	adds	r3, #1
 8005e02:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005e04:	6a3b      	ldr	r3, [r7, #32]
 8005e06:	3301      	adds	r3, #1
 8005e08:	623b      	str	r3, [r7, #32]
 8005e0a:	6a3a      	ldr	r2, [r7, #32]
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d3e6      	bcc.n	8005de0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005e12:	8bfb      	ldrh	r3, [r7, #30]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d01e      	beq.n	8005e56 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e22:	461a      	mov	r2, r3
 8005e24:	f107 0310 	add.w	r3, r7, #16
 8005e28:	6812      	ldr	r2, [r2, #0]
 8005e2a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	6a3b      	ldr	r3, [r7, #32]
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	00db      	lsls	r3, r3, #3
 8005e34:	fa22 f303 	lsr.w	r3, r2, r3
 8005e38:	b2da      	uxtb	r2, r3
 8005e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3c:	701a      	strb	r2, [r3, #0]
      i++;
 8005e3e:	6a3b      	ldr	r3, [r7, #32]
 8005e40:	3301      	adds	r3, #1
 8005e42:	623b      	str	r3, [r7, #32]
      pDest++;
 8005e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e46:	3301      	adds	r3, #1
 8005e48:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005e4a:	8bfb      	ldrh	r3, [r7, #30]
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005e50:	8bfb      	ldrh	r3, [r7, #30]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1ea      	bne.n	8005e2c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	372c      	adds	r7, #44	; 0x2c
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	695b      	ldr	r3, [r3, #20]
 8005e70:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	699b      	ldr	r3, [r3, #24]
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	4013      	ands	r3, r2
 8005e7a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3714      	adds	r7, #20
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr

08005e8a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005e8a:	b480      	push	{r7}
 8005e8c:	b083      	sub	sp, #12
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	f003 0301 	and.w	r3, r3, #1
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	370c      	adds	r7, #12
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
	...

08005ea8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b085      	sub	sp, #20
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	4a13      	ldr	r2, [pc, #76]	; (8005f0c <USB_CoreReset+0x64>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d901      	bls.n	8005ec6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e01b      	b.n	8005efe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	daf2      	bge.n	8005eb4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	f043 0201 	orr.w	r2, r3, #1
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	4a09      	ldr	r2, [pc, #36]	; (8005f0c <USB_CoreReset+0x64>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d901      	bls.n	8005ef0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005eec:	2303      	movs	r3, #3
 8005eee:	e006      	b.n	8005efe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	f003 0301 	and.w	r3, r3, #1
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d0f0      	beq.n	8005ede <USB_CoreReset+0x36>

  return HAL_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3714      	adds	r7, #20
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	00030d40 	.word	0x00030d40

08005f10 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f10:	b084      	sub	sp, #16
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b086      	sub	sp, #24
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
 8005f1a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005f1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005f22:	2300      	movs	r3, #0
 8005f24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f30:	461a      	mov	r2, r3
 8005f32:	2300      	movs	r3, #0
 8005f34:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f46:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f52:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d018      	beq.n	8005f98 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d10a      	bne.n	8005f82 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f7a:	f043 0304 	orr.w	r3, r3, #4
 8005f7e:	6013      	str	r3, [r2, #0]
 8005f80:	e014      	b.n	8005fac <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f90:	f023 0304 	bic.w	r3, r3, #4
 8005f94:	6013      	str	r3, [r2, #0]
 8005f96:	e009      	b.n	8005fac <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005fa6:	f023 0304 	bic.w	r3, r3, #4
 8005faa:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005fac:	2110      	movs	r1, #16
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f7ff fe5e 	bl	8005c70 <USB_FlushTxFifo>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d001      	beq.n	8005fbe <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f7ff fe8a 	bl	8005cd8 <USB_FlushRxFifo>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d001      	beq.n	8005fce <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005fce:	2300      	movs	r3, #0
 8005fd0:	613b      	str	r3, [r7, #16]
 8005fd2:	e015      	b.n	8006000 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	015a      	lsls	r2, r3, #5
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	4413      	add	r3, r2
 8005fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8005fe6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	015a      	lsls	r2, r3, #5
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	4413      	add	r3, r2
 8005ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	613b      	str	r3, [r7, #16]
 8006000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	429a      	cmp	r2, r3
 8006006:	d3e5      	bcc.n	8005fd4 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f04f 32ff 	mov.w	r2, #4294967295
 8006014:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800601a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00b      	beq.n	800603a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006028:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a13      	ldr	r2, [pc, #76]	; (800607c <USB_HostInit+0x16c>)
 800602e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4a13      	ldr	r2, [pc, #76]	; (8006080 <USB_HostInit+0x170>)
 8006034:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006038:	e009      	b.n	800604e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2280      	movs	r2, #128	; 0x80
 800603e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a10      	ldr	r2, [pc, #64]	; (8006084 <USB_HostInit+0x174>)
 8006044:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a0f      	ldr	r2, [pc, #60]	; (8006088 <USB_HostInit+0x178>)
 800604a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800604e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006050:	2b00      	cmp	r3, #0
 8006052:	d105      	bne.n	8006060 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	699b      	ldr	r3, [r3, #24]
 8006058:	f043 0210 	orr.w	r2, r3, #16
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	699a      	ldr	r2, [r3, #24]
 8006064:	4b09      	ldr	r3, [pc, #36]	; (800608c <USB_HostInit+0x17c>)
 8006066:	4313      	orrs	r3, r2
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800606c:	7dfb      	ldrb	r3, [r7, #23]
}
 800606e:	4618      	mov	r0, r3
 8006070:	3718      	adds	r7, #24
 8006072:	46bd      	mov	sp, r7
 8006074:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006078:	b004      	add	sp, #16
 800607a:	4770      	bx	lr
 800607c:	01000200 	.word	0x01000200
 8006080:	00e00300 	.word	0x00e00300
 8006084:	00600080 	.word	0x00600080
 8006088:	004000e0 	.word	0x004000e0
 800608c:	a3200008 	.word	0xa3200008

08006090 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	460b      	mov	r3, r1
 800609a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80060ae:	f023 0303 	bic.w	r3, r3, #3
 80060b2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	78fb      	ldrb	r3, [r7, #3]
 80060be:	f003 0303 	and.w	r3, r3, #3
 80060c2:	68f9      	ldr	r1, [r7, #12]
 80060c4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80060c8:	4313      	orrs	r3, r2
 80060ca:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80060cc:	78fb      	ldrb	r3, [r7, #3]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d107      	bne.n	80060e2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060d8:	461a      	mov	r2, r3
 80060da:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80060de:	6053      	str	r3, [r2, #4]
 80060e0:	e009      	b.n	80060f6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80060e2:	78fb      	ldrb	r3, [r7, #3]
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d106      	bne.n	80060f6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060ee:	461a      	mov	r2, r3
 80060f0:	f241 7370 	movw	r3, #6000	; 0x1770
 80060f4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3714      	adds	r7, #20
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	460b      	mov	r3, r1
 800610e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006114:	2300      	movs	r3, #0
 8006116:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006128:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006130:	2b00      	cmp	r3, #0
 8006132:	d109      	bne.n	8006148 <USB_DriveVbus+0x44>
 8006134:	78fb      	ldrb	r3, [r7, #3]
 8006136:	2b01      	cmp	r3, #1
 8006138:	d106      	bne.n	8006148 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006142:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006146:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800614e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006152:	d109      	bne.n	8006168 <USB_DriveVbus+0x64>
 8006154:	78fb      	ldrb	r3, [r7, #3]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d106      	bne.n	8006168 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006162:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006166:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3714      	adds	r7, #20
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr

08006176 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006176:	b480      	push	{r7}
 8006178:	b085      	sub	sp, #20
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006182:	2300      	movs	r3, #0
 8006184:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	0c5b      	lsrs	r3, r3, #17
 8006194:	f003 0303 	and.w	r3, r3, #3
}
 8006198:	4618      	mov	r0, r3
 800619a:	3714      	adds	r7, #20
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	b29b      	uxth	r3, r3
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3714      	adds	r7, #20
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr
	...

080061c8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b088      	sub	sp, #32
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	4608      	mov	r0, r1
 80061d2:	4611      	mov	r1, r2
 80061d4:	461a      	mov	r2, r3
 80061d6:	4603      	mov	r3, r0
 80061d8:	70fb      	strb	r3, [r7, #3]
 80061da:	460b      	mov	r3, r1
 80061dc:	70bb      	strb	r3, [r7, #2]
 80061de:	4613      	mov	r3, r2
 80061e0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80061e2:	2300      	movs	r3, #0
 80061e4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80061ea:	78fb      	ldrb	r3, [r7, #3]
 80061ec:	015a      	lsls	r2, r3, #5
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	4413      	add	r3, r2
 80061f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061f6:	461a      	mov	r2, r3
 80061f8:	f04f 33ff 	mov.w	r3, #4294967295
 80061fc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80061fe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006202:	2b03      	cmp	r3, #3
 8006204:	d87e      	bhi.n	8006304 <USB_HC_Init+0x13c>
 8006206:	a201      	add	r2, pc, #4	; (adr r2, 800620c <USB_HC_Init+0x44>)
 8006208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800620c:	0800621d 	.word	0x0800621d
 8006210:	080062c7 	.word	0x080062c7
 8006214:	0800621d 	.word	0x0800621d
 8006218:	08006289 	.word	0x08006289
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800621c:	78fb      	ldrb	r3, [r7, #3]
 800621e:	015a      	lsls	r2, r3, #5
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	4413      	add	r3, r2
 8006224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006228:	461a      	mov	r2, r3
 800622a:	f240 439d 	movw	r3, #1181	; 0x49d
 800622e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006230:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006234:	2b00      	cmp	r3, #0
 8006236:	da10      	bge.n	800625a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006238:	78fb      	ldrb	r3, [r7, #3]
 800623a:	015a      	lsls	r2, r3, #5
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	4413      	add	r3, r2
 8006240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	78fa      	ldrb	r2, [r7, #3]
 8006248:	0151      	lsls	r1, r2, #5
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	440a      	add	r2, r1
 800624e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006252:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006256:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006258:	e057      	b.n	800630a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800625e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006262:	2b00      	cmp	r3, #0
 8006264:	d051      	beq.n	800630a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006266:	78fb      	ldrb	r3, [r7, #3]
 8006268:	015a      	lsls	r2, r3, #5
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	4413      	add	r3, r2
 800626e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	78fa      	ldrb	r2, [r7, #3]
 8006276:	0151      	lsls	r1, r2, #5
 8006278:	693a      	ldr	r2, [r7, #16]
 800627a:	440a      	add	r2, r1
 800627c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006280:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006284:	60d3      	str	r3, [r2, #12]
      break;
 8006286:	e040      	b.n	800630a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006288:	78fb      	ldrb	r3, [r7, #3]
 800628a:	015a      	lsls	r2, r3, #5
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	4413      	add	r3, r2
 8006290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006294:	461a      	mov	r2, r3
 8006296:	f240 639d 	movw	r3, #1693	; 0x69d
 800629a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800629c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	da34      	bge.n	800630e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80062a4:	78fb      	ldrb	r3, [r7, #3]
 80062a6:	015a      	lsls	r2, r3, #5
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	4413      	add	r3, r2
 80062ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	78fa      	ldrb	r2, [r7, #3]
 80062b4:	0151      	lsls	r1, r2, #5
 80062b6:	693a      	ldr	r2, [r7, #16]
 80062b8:	440a      	add	r2, r1
 80062ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062c2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80062c4:	e023      	b.n	800630e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80062c6:	78fb      	ldrb	r3, [r7, #3]
 80062c8:	015a      	lsls	r2, r3, #5
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	4413      	add	r3, r2
 80062ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062d2:	461a      	mov	r2, r3
 80062d4:	f240 2325 	movw	r3, #549	; 0x225
 80062d8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80062da:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	da17      	bge.n	8006312 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80062e2:	78fb      	ldrb	r3, [r7, #3]
 80062e4:	015a      	lsls	r2, r3, #5
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	4413      	add	r3, r2
 80062ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	78fa      	ldrb	r2, [r7, #3]
 80062f2:	0151      	lsls	r1, r2, #5
 80062f4:	693a      	ldr	r2, [r7, #16]
 80062f6:	440a      	add	r2, r1
 80062f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062fc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006300:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006302:	e006      	b.n	8006312 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	77fb      	strb	r3, [r7, #31]
      break;
 8006308:	e004      	b.n	8006314 <USB_HC_Init+0x14c>
      break;
 800630a:	bf00      	nop
 800630c:	e002      	b.n	8006314 <USB_HC_Init+0x14c>
      break;
 800630e:	bf00      	nop
 8006310:	e000      	b.n	8006314 <USB_HC_Init+0x14c>
      break;
 8006312:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006314:	78fb      	ldrb	r3, [r7, #3]
 8006316:	015a      	lsls	r2, r3, #5
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	4413      	add	r3, r2
 800631c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	78fa      	ldrb	r2, [r7, #3]
 8006324:	0151      	lsls	r1, r2, #5
 8006326:	693a      	ldr	r2, [r7, #16]
 8006328:	440a      	add	r2, r1
 800632a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800632e:	f043 0302 	orr.w	r3, r3, #2
 8006332:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800633a:	699a      	ldr	r2, [r3, #24]
 800633c:	78fb      	ldrb	r3, [r7, #3]
 800633e:	f003 030f 	and.w	r3, r3, #15
 8006342:	2101      	movs	r1, #1
 8006344:	fa01 f303 	lsl.w	r3, r1, r3
 8006348:	6939      	ldr	r1, [r7, #16]
 800634a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800634e:	4313      	orrs	r3, r2
 8006350:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800635e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006362:	2b00      	cmp	r3, #0
 8006364:	da03      	bge.n	800636e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006366:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800636a:	61bb      	str	r3, [r7, #24]
 800636c:	e001      	b.n	8006372 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800636e:	2300      	movs	r3, #0
 8006370:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f7ff feff 	bl	8006176 <USB_GetHostSpeed>
 8006378:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800637a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800637e:	2b02      	cmp	r3, #2
 8006380:	d106      	bne.n	8006390 <USB_HC_Init+0x1c8>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2b02      	cmp	r3, #2
 8006386:	d003      	beq.n	8006390 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006388:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800638c:	617b      	str	r3, [r7, #20]
 800638e:	e001      	b.n	8006394 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006390:	2300      	movs	r3, #0
 8006392:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006394:	787b      	ldrb	r3, [r7, #1]
 8006396:	059b      	lsls	r3, r3, #22
 8006398:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800639c:	78bb      	ldrb	r3, [r7, #2]
 800639e:	02db      	lsls	r3, r3, #11
 80063a0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80063a4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80063a6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80063aa:	049b      	lsls	r3, r3, #18
 80063ac:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80063b0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80063b2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80063b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80063b8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80063be:	78fb      	ldrb	r3, [r7, #3]
 80063c0:	0159      	lsls	r1, r3, #5
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	440b      	add	r3, r1
 80063c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063ca:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80063d0:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80063d2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80063d6:	2b03      	cmp	r3, #3
 80063d8:	d003      	beq.n	80063e2 <USB_HC_Init+0x21a>
 80063da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d10f      	bne.n	8006402 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80063e2:	78fb      	ldrb	r3, [r7, #3]
 80063e4:	015a      	lsls	r2, r3, #5
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	4413      	add	r3, r2
 80063ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	78fa      	ldrb	r2, [r7, #3]
 80063f2:	0151      	lsls	r1, r2, #5
 80063f4:	693a      	ldr	r2, [r7, #16]
 80063f6:	440a      	add	r2, r1
 80063f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006400:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006402:	7ffb      	ldrb	r3, [r7, #31]
}
 8006404:	4618      	mov	r0, r3
 8006406:	3720      	adds	r7, #32
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b08c      	sub	sp, #48	; 0x30
 8006410:	af02      	add	r7, sp, #8
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	4613      	mov	r3, r2
 8006418:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	785b      	ldrb	r3, [r3, #1]
 8006422:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006424:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006428:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800642e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006432:	2b00      	cmp	r3, #0
 8006434:	d02d      	beq.n	8006492 <USB_HC_StartXfer+0x86>
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	791b      	ldrb	r3, [r3, #4]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d129      	bne.n	8006492 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800643e:	79fb      	ldrb	r3, [r7, #7]
 8006440:	2b01      	cmp	r3, #1
 8006442:	d117      	bne.n	8006474 <USB_HC_StartXfer+0x68>
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	79db      	ldrb	r3, [r3, #7]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d003      	beq.n	8006454 <USB_HC_StartXfer+0x48>
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	79db      	ldrb	r3, [r3, #7]
 8006450:	2b02      	cmp	r3, #2
 8006452:	d10f      	bne.n	8006474 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	015a      	lsls	r2, r3, #5
 8006458:	6a3b      	ldr	r3, [r7, #32]
 800645a:	4413      	add	r3, r2
 800645c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	69fa      	ldr	r2, [r7, #28]
 8006464:	0151      	lsls	r1, r2, #5
 8006466:	6a3a      	ldr	r2, [r7, #32]
 8006468:	440a      	add	r2, r1
 800646a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800646e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006472:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006474:	79fb      	ldrb	r3, [r7, #7]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10b      	bne.n	8006492 <USB_HC_StartXfer+0x86>
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	795b      	ldrb	r3, [r3, #5]
 800647e:	2b01      	cmp	r3, #1
 8006480:	d107      	bne.n	8006492 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	785b      	ldrb	r3, [r3, #1]
 8006486:	4619      	mov	r1, r3
 8006488:	68f8      	ldr	r0, [r7, #12]
 800648a:	f000 fa0f 	bl	80068ac <USB_DoPing>
      return HAL_OK;
 800648e:	2300      	movs	r3, #0
 8006490:	e0f8      	b.n	8006684 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	695b      	ldr	r3, [r3, #20]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d018      	beq.n	80064cc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	695b      	ldr	r3, [r3, #20]
 800649e:	68ba      	ldr	r2, [r7, #8]
 80064a0:	8912      	ldrh	r2, [r2, #8]
 80064a2:	4413      	add	r3, r2
 80064a4:	3b01      	subs	r3, #1
 80064a6:	68ba      	ldr	r2, [r7, #8]
 80064a8:	8912      	ldrh	r2, [r2, #8]
 80064aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80064ae:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80064b0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80064b2:	8b7b      	ldrh	r3, [r7, #26]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d90b      	bls.n	80064d0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80064b8:	8b7b      	ldrh	r3, [r7, #26]
 80064ba:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80064bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80064be:	68ba      	ldr	r2, [r7, #8]
 80064c0:	8912      	ldrh	r2, [r2, #8]
 80064c2:	fb03 f202 	mul.w	r2, r3, r2
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	611a      	str	r2, [r3, #16]
 80064ca:	e001      	b.n	80064d0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80064cc:	2301      	movs	r3, #1
 80064ce:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	78db      	ldrb	r3, [r3, #3]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d007      	beq.n	80064e8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80064d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80064da:	68ba      	ldr	r2, [r7, #8]
 80064dc:	8912      	ldrh	r2, [r2, #8]
 80064de:	fb03 f202 	mul.w	r2, r3, r2
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	611a      	str	r2, [r3, #16]
 80064e6:	e003      	b.n	80064f0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	695a      	ldr	r2, [r3, #20]
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80064f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80064fa:	04d9      	lsls	r1, r3, #19
 80064fc:	4b63      	ldr	r3, [pc, #396]	; (800668c <USB_HC_StartXfer+0x280>)
 80064fe:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006500:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	7a9b      	ldrb	r3, [r3, #10]
 8006506:	075b      	lsls	r3, r3, #29
 8006508:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800650c:	69f9      	ldr	r1, [r7, #28]
 800650e:	0148      	lsls	r0, r1, #5
 8006510:	6a39      	ldr	r1, [r7, #32]
 8006512:	4401      	add	r1, r0
 8006514:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006518:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800651a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800651c:	79fb      	ldrb	r3, [r7, #7]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d009      	beq.n	8006536 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	68d9      	ldr	r1, [r3, #12]
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	015a      	lsls	r2, r3, #5
 800652a:	6a3b      	ldr	r3, [r7, #32]
 800652c:	4413      	add	r3, r2
 800652e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006532:	460a      	mov	r2, r1
 8006534:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006536:	6a3b      	ldr	r3, [r7, #32]
 8006538:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	f003 0301 	and.w	r3, r3, #1
 8006542:	2b00      	cmp	r3, #0
 8006544:	bf0c      	ite	eq
 8006546:	2301      	moveq	r3, #1
 8006548:	2300      	movne	r3, #0
 800654a:	b2db      	uxtb	r3, r3
 800654c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	015a      	lsls	r2, r3, #5
 8006552:	6a3b      	ldr	r3, [r7, #32]
 8006554:	4413      	add	r3, r2
 8006556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	69fa      	ldr	r2, [r7, #28]
 800655e:	0151      	lsls	r1, r2, #5
 8006560:	6a3a      	ldr	r2, [r7, #32]
 8006562:	440a      	add	r2, r1
 8006564:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006568:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800656c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	015a      	lsls	r2, r3, #5
 8006572:	6a3b      	ldr	r3, [r7, #32]
 8006574:	4413      	add	r3, r2
 8006576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	7e7b      	ldrb	r3, [r7, #25]
 800657e:	075b      	lsls	r3, r3, #29
 8006580:	69f9      	ldr	r1, [r7, #28]
 8006582:	0148      	lsls	r0, r1, #5
 8006584:	6a39      	ldr	r1, [r7, #32]
 8006586:	4401      	add	r1, r0
 8006588:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800658c:	4313      	orrs	r3, r2
 800658e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	015a      	lsls	r2, r3, #5
 8006594:	6a3b      	ldr	r3, [r7, #32]
 8006596:	4413      	add	r3, r2
 8006598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80065a6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	78db      	ldrb	r3, [r3, #3]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d004      	beq.n	80065ba <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065b6:	613b      	str	r3, [r7, #16]
 80065b8:	e003      	b.n	80065c2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80065c0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065c8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	015a      	lsls	r2, r3, #5
 80065ce:	6a3b      	ldr	r3, [r7, #32]
 80065d0:	4413      	add	r3, r2
 80065d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065d6:	461a      	mov	r2, r3
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80065dc:	79fb      	ldrb	r3, [r7, #7]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d001      	beq.n	80065e6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80065e2:	2300      	movs	r3, #0
 80065e4:	e04e      	b.n	8006684 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	78db      	ldrb	r3, [r3, #3]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d149      	bne.n	8006682 <USB_HC_StartXfer+0x276>
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	695b      	ldr	r3, [r3, #20]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d045      	beq.n	8006682 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	79db      	ldrb	r3, [r3, #7]
 80065fa:	2b03      	cmp	r3, #3
 80065fc:	d830      	bhi.n	8006660 <USB_HC_StartXfer+0x254>
 80065fe:	a201      	add	r2, pc, #4	; (adr r2, 8006604 <USB_HC_StartXfer+0x1f8>)
 8006600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006604:	08006615 	.word	0x08006615
 8006608:	08006639 	.word	0x08006639
 800660c:	08006615 	.word	0x08006615
 8006610:	08006639 	.word	0x08006639
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	695b      	ldr	r3, [r3, #20]
 8006618:	3303      	adds	r3, #3
 800661a:	089b      	lsrs	r3, r3, #2
 800661c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800661e:	8afa      	ldrh	r2, [r7, #22]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006624:	b29b      	uxth	r3, r3
 8006626:	429a      	cmp	r2, r3
 8006628:	d91c      	bls.n	8006664 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	699b      	ldr	r3, [r3, #24]
 800662e:	f043 0220 	orr.w	r2, r3, #32
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	619a      	str	r2, [r3, #24]
        }
        break;
 8006636:	e015      	b.n	8006664 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	695b      	ldr	r3, [r3, #20]
 800663c:	3303      	adds	r3, #3
 800663e:	089b      	lsrs	r3, r3, #2
 8006640:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006642:	8afa      	ldrh	r2, [r7, #22]
 8006644:	6a3b      	ldr	r3, [r7, #32]
 8006646:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	b29b      	uxth	r3, r3
 800664e:	429a      	cmp	r2, r3
 8006650:	d90a      	bls.n	8006668 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	699b      	ldr	r3, [r3, #24]
 8006656:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	619a      	str	r2, [r3, #24]
        }
        break;
 800665e:	e003      	b.n	8006668 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006660:	bf00      	nop
 8006662:	e002      	b.n	800666a <USB_HC_StartXfer+0x25e>
        break;
 8006664:	bf00      	nop
 8006666:	e000      	b.n	800666a <USB_HC_StartXfer+0x25e>
        break;
 8006668:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	68d9      	ldr	r1, [r3, #12]
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	785a      	ldrb	r2, [r3, #1]
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	695b      	ldr	r3, [r3, #20]
 8006676:	b29b      	uxth	r3, r3
 8006678:	2000      	movs	r0, #0
 800667a:	9000      	str	r0, [sp, #0]
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	f7ff fb5b 	bl	8005d38 <USB_WritePacket>
  }

  return HAL_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3728      	adds	r7, #40	; 0x28
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}
 800668c:	1ff80000 	.word	0x1ff80000

08006690 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006690:	b480      	push	{r7}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066a2:	695b      	ldr	r3, [r3, #20]
 80066a4:	b29b      	uxth	r3, r3
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3714      	adds	r7, #20
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr

080066b2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80066b2:	b480      	push	{r7}
 80066b4:	b089      	sub	sp, #36	; 0x24
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
 80066ba:	460b      	mov	r3, r1
 80066bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80066c2:	78fb      	ldrb	r3, [r7, #3]
 80066c4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80066c6:	2300      	movs	r3, #0
 80066c8:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	015a      	lsls	r2, r3, #5
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	4413      	add	r3, r2
 80066d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	0c9b      	lsrs	r3, r3, #18
 80066da:	f003 0303 	and.w	r3, r3, #3
 80066de:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	015a      	lsls	r2, r3, #5
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	4413      	add	r3, r2
 80066e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	0fdb      	lsrs	r3, r3, #31
 80066f0:	f003 0301 	and.w	r3, r3, #1
 80066f4:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	f003 0320 	and.w	r3, r3, #32
 80066fe:	2b20      	cmp	r3, #32
 8006700:	d104      	bne.n	800670c <USB_HC_Halt+0x5a>
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d101      	bne.n	800670c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006708:	2300      	movs	r3, #0
 800670a:	e0c8      	b.n	800689e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d002      	beq.n	8006718 <USB_HC_Halt+0x66>
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	2b02      	cmp	r3, #2
 8006716:	d163      	bne.n	80067e0 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	015a      	lsls	r2, r3, #5
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	4413      	add	r3, r2
 8006720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	69ba      	ldr	r2, [r7, #24]
 8006728:	0151      	lsls	r1, r2, #5
 800672a:	69fa      	ldr	r2, [r7, #28]
 800672c:	440a      	add	r2, r1
 800672e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006732:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006736:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	f003 0320 	and.w	r3, r3, #32
 8006740:	2b00      	cmp	r3, #0
 8006742:	f040 80ab 	bne.w	800689c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800674a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800674e:	2b00      	cmp	r3, #0
 8006750:	d133      	bne.n	80067ba <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	015a      	lsls	r2, r3, #5
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	4413      	add	r3, r2
 800675a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	69ba      	ldr	r2, [r7, #24]
 8006762:	0151      	lsls	r1, r2, #5
 8006764:	69fa      	ldr	r2, [r7, #28]
 8006766:	440a      	add	r2, r1
 8006768:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800676c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006770:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	015a      	lsls	r2, r3, #5
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	4413      	add	r3, r2
 800677a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	69ba      	ldr	r2, [r7, #24]
 8006782:	0151      	lsls	r1, r2, #5
 8006784:	69fa      	ldr	r2, [r7, #28]
 8006786:	440a      	add	r2, r1
 8006788:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800678c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006790:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	3301      	adds	r3, #1
 8006796:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800679e:	d81d      	bhi.n	80067dc <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	015a      	lsls	r2, r3, #5
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	4413      	add	r3, r2
 80067a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067b6:	d0ec      	beq.n	8006792 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80067b8:	e070      	b.n	800689c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	015a      	lsls	r2, r3, #5
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	4413      	add	r3, r2
 80067c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	69ba      	ldr	r2, [r7, #24]
 80067ca:	0151      	lsls	r1, r2, #5
 80067cc:	69fa      	ldr	r2, [r7, #28]
 80067ce:	440a      	add	r2, r1
 80067d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067d8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80067da:	e05f      	b.n	800689c <USB_HC_Halt+0x1ea>
            break;
 80067dc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80067de:	e05d      	b.n	800689c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	015a      	lsls	r2, r3, #5
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	4413      	add	r3, r2
 80067e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	69ba      	ldr	r2, [r7, #24]
 80067f0:	0151      	lsls	r1, r2, #5
 80067f2:	69fa      	ldr	r2, [r7, #28]
 80067f4:	440a      	add	r2, r1
 80067f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067fe:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006806:	691b      	ldr	r3, [r3, #16]
 8006808:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800680c:	2b00      	cmp	r3, #0
 800680e:	d133      	bne.n	8006878 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	015a      	lsls	r2, r3, #5
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	4413      	add	r3, r2
 8006818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	69ba      	ldr	r2, [r7, #24]
 8006820:	0151      	lsls	r1, r2, #5
 8006822:	69fa      	ldr	r2, [r7, #28]
 8006824:	440a      	add	r2, r1
 8006826:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800682a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800682e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	015a      	lsls	r2, r3, #5
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	4413      	add	r3, r2
 8006838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	69ba      	ldr	r2, [r7, #24]
 8006840:	0151      	lsls	r1, r2, #5
 8006842:	69fa      	ldr	r2, [r7, #28]
 8006844:	440a      	add	r2, r1
 8006846:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800684a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800684e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	3301      	adds	r3, #1
 8006854:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800685c:	d81d      	bhi.n	800689a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	015a      	lsls	r2, r3, #5
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	4413      	add	r3, r2
 8006866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006870:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006874:	d0ec      	beq.n	8006850 <USB_HC_Halt+0x19e>
 8006876:	e011      	b.n	800689c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	015a      	lsls	r2, r3, #5
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	4413      	add	r3, r2
 8006880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	69ba      	ldr	r2, [r7, #24]
 8006888:	0151      	lsls	r1, r2, #5
 800688a:	69fa      	ldr	r2, [r7, #28]
 800688c:	440a      	add	r2, r1
 800688e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006892:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006896:	6013      	str	r3, [r2, #0]
 8006898:	e000      	b.n	800689c <USB_HC_Halt+0x1ea>
          break;
 800689a:	bf00      	nop
    }
  }

  return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3724      	adds	r7, #36	; 0x24
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
	...

080068ac <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b087      	sub	sp, #28
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	460b      	mov	r3, r1
 80068b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80068bc:	78fb      	ldrb	r3, [r7, #3]
 80068be:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80068c0:	2301      	movs	r3, #1
 80068c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	04da      	lsls	r2, r3, #19
 80068c8:	4b15      	ldr	r3, [pc, #84]	; (8006920 <USB_DoPing+0x74>)
 80068ca:	4013      	ands	r3, r2
 80068cc:	693a      	ldr	r2, [r7, #16]
 80068ce:	0151      	lsls	r1, r2, #5
 80068d0:	697a      	ldr	r2, [r7, #20]
 80068d2:	440a      	add	r2, r1
 80068d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068dc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	015a      	lsls	r2, r3, #5
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	4413      	add	r3, r2
 80068e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80068f4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068fc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	015a      	lsls	r2, r3, #5
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	4413      	add	r3, r2
 8006906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800690a:	461a      	mov	r2, r3
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	371c      	adds	r7, #28
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	1ff80000 	.word	0x1ff80000

08006924 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b088      	sub	sp, #32
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800692c:	2300      	movs	r3, #0
 800692e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006934:	2300      	movs	r3, #0
 8006936:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f7ff f93b 	bl	8005bb4 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800693e:	2110      	movs	r1, #16
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f7ff f995 	bl	8005c70 <USB_FlushTxFifo>
 8006946:	4603      	mov	r3, r0
 8006948:	2b00      	cmp	r3, #0
 800694a:	d001      	beq.n	8006950 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f7ff f9c1 	bl	8005cd8 <USB_FlushRxFifo>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d001      	beq.n	8006960 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006960:	2300      	movs	r3, #0
 8006962:	61bb      	str	r3, [r7, #24]
 8006964:	e01f      	b.n	80069a6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	015a      	lsls	r2, r3, #5
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	4413      	add	r3, r2
 800696e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800697c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006984:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800698c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	015a      	lsls	r2, r3, #5
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	4413      	add	r3, r2
 8006996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800699a:	461a      	mov	r2, r3
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	3301      	adds	r3, #1
 80069a4:	61bb      	str	r3, [r7, #24]
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	2b0f      	cmp	r3, #15
 80069aa:	d9dc      	bls.n	8006966 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80069ac:	2300      	movs	r3, #0
 80069ae:	61bb      	str	r3, [r7, #24]
 80069b0:	e034      	b.n	8006a1c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	015a      	lsls	r2, r3, #5
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	4413      	add	r3, r2
 80069ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069c8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069d0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069d8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	015a      	lsls	r2, r3, #5
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	4413      	add	r3, r2
 80069e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069e6:	461a      	mov	r2, r3
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	3301      	adds	r3, #1
 80069f0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069f8:	d80c      	bhi.n	8006a14 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	015a      	lsls	r2, r3, #5
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	4413      	add	r3, r2
 8006a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a10:	d0ec      	beq.n	80069ec <USB_StopHost+0xc8>
 8006a12:	e000      	b.n	8006a16 <USB_StopHost+0xf2>
        break;
 8006a14:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	61bb      	str	r3, [r7, #24]
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	2b0f      	cmp	r3, #15
 8006a20:	d9c7      	bls.n	80069b2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a28:	461a      	mov	r2, r3
 8006a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a2e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f04f 32ff 	mov.w	r2, #4294967295
 8006a36:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f7ff f8aa 	bl	8005b92 <USB_EnableGlobalInt>

  return ret;
 8006a3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3720      	adds	r7, #32
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006a48:	b590      	push	{r4, r7, lr}
 8006a4a:	b089      	sub	sp, #36	; 0x24
 8006a4c:	af04      	add	r7, sp, #16
 8006a4e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006a50:	2301      	movs	r3, #1
 8006a52:	2202      	movs	r2, #2
 8006a54:	2102      	movs	r1, #2
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fc66 	bl	8007328 <USBH_FindInterface>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006a60:	7bfb      	ldrb	r3, [r7, #15]
 8006a62:	2bff      	cmp	r3, #255	; 0xff
 8006a64:	d002      	beq.n	8006a6c <USBH_CDC_InterfaceInit+0x24>
 8006a66:	7bfb      	ldrb	r3, [r7, #15]
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d901      	bls.n	8006a70 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	e13d      	b.n	8006cec <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006a70:	7bfb      	ldrb	r3, [r7, #15]
 8006a72:	4619      	mov	r1, r3
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 fc3b 	bl	80072f0 <USBH_SelectInterface>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006a7e:	7bbb      	ldrb	r3, [r7, #14]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d001      	beq.n	8006a88 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006a84:	2302      	movs	r3, #2
 8006a86:	e131      	b.n	8006cec <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006a8e:	2050      	movs	r0, #80	; 0x50
 8006a90:	f001 fb12 	bl	80080b8 <malloc>
 8006a94:	4603      	mov	r3, r0
 8006a96:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a9e:	69db      	ldr	r3, [r3, #28]
 8006aa0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d101      	bne.n	8006aac <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	e11f      	b.n	8006cec <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006aac:	2250      	movs	r2, #80	; 0x50
 8006aae:	2100      	movs	r1, #0
 8006ab0:	68b8      	ldr	r0, [r7, #8]
 8006ab2:	f001 fb11 	bl	80080d8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006ab6:	7bfb      	ldrb	r3, [r7, #15]
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	211a      	movs	r1, #26
 8006abc:	fb01 f303 	mul.w	r3, r1, r3
 8006ac0:	4413      	add	r3, r2
 8006ac2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	b25b      	sxtb	r3, r3
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	da15      	bge.n	8006afa <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006ace:	7bfb      	ldrb	r3, [r7, #15]
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	211a      	movs	r1, #26
 8006ad4:	fb01 f303 	mul.w	r3, r1, r3
 8006ad8:	4413      	add	r3, r2
 8006ada:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006ade:	781a      	ldrb	r2, [r3, #0]
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006ae4:	7bfb      	ldrb	r3, [r7, #15]
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	211a      	movs	r1, #26
 8006aea:	fb01 f303 	mul.w	r3, r1, r3
 8006aee:	4413      	add	r3, r2
 8006af0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006af4:	881a      	ldrh	r2, [r3, #0]
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	785b      	ldrb	r3, [r3, #1]
 8006afe:	4619      	mov	r1, r3
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 ff9c 	bl	8007a3e <USBH_AllocPipe>
 8006b06:	4603      	mov	r3, r0
 8006b08:	461a      	mov	r2, r3
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	7819      	ldrb	r1, [r3, #0]
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	7858      	ldrb	r0, [r3, #1]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006b22:	68ba      	ldr	r2, [r7, #8]
 8006b24:	8952      	ldrh	r2, [r2, #10]
 8006b26:	9202      	str	r2, [sp, #8]
 8006b28:	2203      	movs	r2, #3
 8006b2a:	9201      	str	r2, [sp, #4]
 8006b2c:	9300      	str	r3, [sp, #0]
 8006b2e:	4623      	mov	r3, r4
 8006b30:	4602      	mov	r2, r0
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 ff54 	bl	80079e0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	4619      	mov	r1, r3
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f001 fa17 	bl	8007f74 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006b46:	2300      	movs	r3, #0
 8006b48:	2200      	movs	r2, #0
 8006b4a:	210a      	movs	r1, #10
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 fbeb 	bl	8007328 <USBH_FindInterface>
 8006b52:	4603      	mov	r3, r0
 8006b54:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006b56:	7bfb      	ldrb	r3, [r7, #15]
 8006b58:	2bff      	cmp	r3, #255	; 0xff
 8006b5a:	d002      	beq.n	8006b62 <USBH_CDC_InterfaceInit+0x11a>
 8006b5c:	7bfb      	ldrb	r3, [r7, #15]
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d901      	bls.n	8006b66 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006b62:	2302      	movs	r3, #2
 8006b64:	e0c2      	b.n	8006cec <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006b66:	7bfb      	ldrb	r3, [r7, #15]
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	211a      	movs	r1, #26
 8006b6c:	fb01 f303 	mul.w	r3, r1, r3
 8006b70:	4413      	add	r3, r2
 8006b72:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	b25b      	sxtb	r3, r3
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	da16      	bge.n	8006bac <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006b7e:	7bfb      	ldrb	r3, [r7, #15]
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	211a      	movs	r1, #26
 8006b84:	fb01 f303 	mul.w	r3, r1, r3
 8006b88:	4413      	add	r3, r2
 8006b8a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006b8e:	781a      	ldrb	r2, [r3, #0]
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006b94:	7bfb      	ldrb	r3, [r7, #15]
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	211a      	movs	r1, #26
 8006b9a:	fb01 f303 	mul.w	r3, r1, r3
 8006b9e:	4413      	add	r3, r2
 8006ba0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006ba4:	881a      	ldrh	r2, [r3, #0]
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	835a      	strh	r2, [r3, #26]
 8006baa:	e015      	b.n	8006bd8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006bac:	7bfb      	ldrb	r3, [r7, #15]
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	211a      	movs	r1, #26
 8006bb2:	fb01 f303 	mul.w	r3, r1, r3
 8006bb6:	4413      	add	r3, r2
 8006bb8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006bbc:	781a      	ldrb	r2, [r3, #0]
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006bc2:	7bfb      	ldrb	r3, [r7, #15]
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	211a      	movs	r1, #26
 8006bc8:	fb01 f303 	mul.w	r3, r1, r3
 8006bcc:	4413      	add	r3, r2
 8006bce:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006bd2:	881a      	ldrh	r2, [r3, #0]
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006bd8:	7bfb      	ldrb	r3, [r7, #15]
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	211a      	movs	r1, #26
 8006bde:	fb01 f303 	mul.w	r3, r1, r3
 8006be2:	4413      	add	r3, r2
 8006be4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	b25b      	sxtb	r3, r3
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	da16      	bge.n	8006c1e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006bf0:	7bfb      	ldrb	r3, [r7, #15]
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	211a      	movs	r1, #26
 8006bf6:	fb01 f303 	mul.w	r3, r1, r3
 8006bfa:	4413      	add	r3, r2
 8006bfc:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006c00:	781a      	ldrb	r2, [r3, #0]
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006c06:	7bfb      	ldrb	r3, [r7, #15]
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	211a      	movs	r1, #26
 8006c0c:	fb01 f303 	mul.w	r3, r1, r3
 8006c10:	4413      	add	r3, r2
 8006c12:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006c16:	881a      	ldrh	r2, [r3, #0]
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	835a      	strh	r2, [r3, #26]
 8006c1c:	e015      	b.n	8006c4a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006c1e:	7bfb      	ldrb	r3, [r7, #15]
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	211a      	movs	r1, #26
 8006c24:	fb01 f303 	mul.w	r3, r1, r3
 8006c28:	4413      	add	r3, r2
 8006c2a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006c2e:	781a      	ldrb	r2, [r3, #0]
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006c34:	7bfb      	ldrb	r3, [r7, #15]
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	211a      	movs	r1, #26
 8006c3a:	fb01 f303 	mul.w	r3, r1, r3
 8006c3e:	4413      	add	r3, r2
 8006c40:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006c44:	881a      	ldrh	r2, [r3, #0]
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	7b9b      	ldrb	r3, [r3, #14]
 8006c4e:	4619      	mov	r1, r3
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 fef4 	bl	8007a3e <USBH_AllocPipe>
 8006c56:	4603      	mov	r3, r0
 8006c58:	461a      	mov	r2, r3
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	7bdb      	ldrb	r3, [r3, #15]
 8006c62:	4619      	mov	r1, r3
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 feea 	bl	8007a3e <USBH_AllocPipe>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	7b59      	ldrb	r1, [r3, #13]
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	7b98      	ldrb	r0, [r3, #14]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006c86:	68ba      	ldr	r2, [r7, #8]
 8006c88:	8b12      	ldrh	r2, [r2, #24]
 8006c8a:	9202      	str	r2, [sp, #8]
 8006c8c:	2202      	movs	r2, #2
 8006c8e:	9201      	str	r2, [sp, #4]
 8006c90:	9300      	str	r3, [sp, #0]
 8006c92:	4623      	mov	r3, r4
 8006c94:	4602      	mov	r2, r0
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 fea2 	bl	80079e0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	7b19      	ldrb	r1, [r3, #12]
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	7bd8      	ldrb	r0, [r3, #15]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006cb0:	68ba      	ldr	r2, [r7, #8]
 8006cb2:	8b52      	ldrh	r2, [r2, #26]
 8006cb4:	9202      	str	r2, [sp, #8]
 8006cb6:	2202      	movs	r2, #2
 8006cb8:	9201      	str	r2, [sp, #4]
 8006cba:	9300      	str	r3, [sp, #0]
 8006cbc:	4623      	mov	r3, r4
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 fe8d 	bl	80079e0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	7b5b      	ldrb	r3, [r3, #13]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f001 f94c 	bl	8007f74 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	7b1b      	ldrb	r3, [r3, #12]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f001 f945 	bl	8007f74 <USBH_LL_SetToggle>

  return USBH_OK;
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3714      	adds	r7, #20
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd90      	pop	{r4, r7, pc}

08006cf4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d02:	69db      	ldr	r3, [r3, #28]
 8006d04:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00e      	beq.n	8006d2c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	4619      	mov	r1, r3
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 fe82 	bl	8007a1e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	4619      	mov	r1, r3
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 fead 	bl	8007a80 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	7b1b      	ldrb	r3, [r3, #12]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00e      	beq.n	8006d52 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	7b1b      	ldrb	r3, [r3, #12]
 8006d38:	4619      	mov	r1, r3
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 fe6f 	bl	8007a1e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	7b1b      	ldrb	r3, [r3, #12]
 8006d44:	4619      	mov	r1, r3
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 fe9a 	bl	8007a80 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	7b5b      	ldrb	r3, [r3, #13]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00e      	beq.n	8006d78 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	7b5b      	ldrb	r3, [r3, #13]
 8006d5e:	4619      	mov	r1, r3
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 fe5c 	bl	8007a1e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	7b5b      	ldrb	r3, [r3, #13]
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 fe87 	bl	8007a80 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2200      	movs	r2, #0
 8006d76:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d7e:	69db      	ldr	r3, [r3, #28]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d00b      	beq.n	8006d9c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d8a:	69db      	ldr	r3, [r3, #28]
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f001 f99b 	bl	80080c8 <free>
    phost->pActiveClass->pData = 0U;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d98:	2200      	movs	r2, #0
 8006d9a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006d9c:	2300      	movs	r3, #0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3710      	adds	r7, #16
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006da6:	b580      	push	{r7, lr}
 8006da8:	b084      	sub	sp, #16
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006db4:	69db      	ldr	r3, [r3, #28]
 8006db6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	3340      	adds	r3, #64	; 0x40
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 f8b1 	bl	8006f26 <GetLineCoding>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006dc8:	7afb      	ldrb	r3, [r7, #11]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d105      	bne.n	8006dda <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006dd4:	2102      	movs	r1, #2
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006dda:	7afb      	ldrb	r3, [r7, #11]
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3710      	adds	r7, #16
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006dec:	2301      	movs	r3, #1
 8006dee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006df0:	2300      	movs	r3, #0
 8006df2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006dfa:	69db      	ldr	r3, [r3, #28]
 8006dfc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006e04:	2b04      	cmp	r3, #4
 8006e06:	d877      	bhi.n	8006ef8 <USBH_CDC_Process+0x114>
 8006e08:	a201      	add	r2, pc, #4	; (adr r2, 8006e10 <USBH_CDC_Process+0x2c>)
 8006e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e0e:	bf00      	nop
 8006e10:	08006e25 	.word	0x08006e25
 8006e14:	08006e2b 	.word	0x08006e2b
 8006e18:	08006e5b 	.word	0x08006e5b
 8006e1c:	08006ecf 	.word	0x08006ecf
 8006e20:	08006edd 	.word	0x08006edd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006e24:	2300      	movs	r3, #0
 8006e26:	73fb      	strb	r3, [r7, #15]
      break;
 8006e28:	e06d      	b.n	8006f06 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e2e:	4619      	mov	r1, r3
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 f897 	bl	8006f64 <SetLineCoding>
 8006e36:	4603      	mov	r3, r0
 8006e38:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006e3a:	7bbb      	ldrb	r3, [r7, #14]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d104      	bne.n	8006e4a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	2202      	movs	r2, #2
 8006e44:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006e48:	e058      	b.n	8006efc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006e4a:	7bbb      	ldrb	r3, [r7, #14]
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d055      	beq.n	8006efc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	2204      	movs	r2, #4
 8006e54:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006e58:	e050      	b.n	8006efc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	3340      	adds	r3, #64	; 0x40
 8006e5e:	4619      	mov	r1, r3
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 f860 	bl	8006f26 <GetLineCoding>
 8006e66:	4603      	mov	r3, r0
 8006e68:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006e6a:	7bbb      	ldrb	r3, [r7, #14]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d126      	bne.n	8006ebe <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e82:	791b      	ldrb	r3, [r3, #4]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d13b      	bne.n	8006f00 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e92:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d133      	bne.n	8006f00 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ea2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d12b      	bne.n	8006f00 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eb0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d124      	bne.n	8006f00 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 f958 	bl	800716c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006ebc:	e020      	b.n	8006f00 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006ebe:	7bbb      	ldrb	r3, [r7, #14]
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d01d      	beq.n	8006f00 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	2204      	movs	r2, #4
 8006ec8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006ecc:	e018      	b.n	8006f00 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 f867 	bl	8006fa2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 f8da 	bl	800708e <CDC_ProcessReception>
      break;
 8006eda:	e014      	b.n	8006f06 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006edc:	2100      	movs	r1, #0
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 fb08 	bl	80074f4 <USBH_ClrFeature>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006ee8:	7bbb      	ldrb	r3, [r7, #14]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d10a      	bne.n	8006f04 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006ef6:	e005      	b.n	8006f04 <USBH_CDC_Process+0x120>

    default:
      break;
 8006ef8:	bf00      	nop
 8006efa:	e004      	b.n	8006f06 <USBH_CDC_Process+0x122>
      break;
 8006efc:	bf00      	nop
 8006efe:	e002      	b.n	8006f06 <USBH_CDC_Process+0x122>
      break;
 8006f00:	bf00      	nop
 8006f02:	e000      	b.n	8006f06 <USBH_CDC_Process+0x122>
      break;
 8006f04:	bf00      	nop

  }

  return status;
 8006f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3710      	adds	r7, #16
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006f18:	2300      	movs	r3, #0
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	370c      	adds	r7, #12
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr

08006f26 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b082      	sub	sp, #8
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
 8006f2e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	22a1      	movs	r2, #161	; 0xa1
 8006f34:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2221      	movs	r2, #33	; 0x21
 8006f3a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2207      	movs	r2, #7
 8006f4c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	2207      	movs	r2, #7
 8006f52:	4619      	mov	r1, r3
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 faf1 	bl	800753c <USBH_CtlReq>
 8006f5a:	4603      	mov	r3, r0
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3708      	adds	r7, #8
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2221      	movs	r2, #33	; 0x21
 8006f72:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2220      	movs	r2, #32
 8006f78:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2207      	movs	r2, #7
 8006f8a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	2207      	movs	r2, #7
 8006f90:	4619      	mov	r1, r3
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 fad2 	bl	800753c <USBH_CtlReq>
 8006f98:	4603      	mov	r3, r0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3708      	adds	r7, #8
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b086      	sub	sp, #24
 8006fa6:	af02      	add	r7, sp, #8
 8006fa8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fb0:	69db      	ldr	r3, [r3, #28]
 8006fb2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d002      	beq.n	8006fc8 <CDC_ProcessTransmission+0x26>
 8006fc2:	2b02      	cmp	r3, #2
 8006fc4:	d023      	beq.n	800700e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006fc6:	e05e      	b.n	8007086 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	8b12      	ldrh	r2, [r2, #24]
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d90b      	bls.n	8006fec <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	69d9      	ldr	r1, [r3, #28]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	8b1a      	ldrh	r2, [r3, #24]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	7b5b      	ldrb	r3, [r3, #13]
 8006fe0:	2001      	movs	r0, #1
 8006fe2:	9000      	str	r0, [sp, #0]
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 fcb8 	bl	800795a <USBH_BulkSendData>
 8006fea:	e00b      	b.n	8007004 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006ff4:	b29a      	uxth	r2, r3
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	7b5b      	ldrb	r3, [r3, #13]
 8006ffa:	2001      	movs	r0, #1
 8006ffc:	9000      	str	r0, [sp, #0]
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 fcab 	bl	800795a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2202      	movs	r2, #2
 8007008:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800700c:	e03b      	b.n	8007086 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	7b5b      	ldrb	r3, [r3, #13]
 8007012:	4619      	mov	r1, r3
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 ff83 	bl	8007f20 <USBH_LL_GetURBState>
 800701a:	4603      	mov	r3, r0
 800701c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800701e:	7afb      	ldrb	r3, [r7, #11]
 8007020:	2b01      	cmp	r3, #1
 8007022:	d128      	bne.n	8007076 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007028:	68fa      	ldr	r2, [r7, #12]
 800702a:	8b12      	ldrh	r2, [r2, #24]
 800702c:	4293      	cmp	r3, r2
 800702e:	d90e      	bls.n	800704e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	8b12      	ldrh	r2, [r2, #24]
 8007038:	1a9a      	subs	r2, r3, r2
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	69db      	ldr	r3, [r3, #28]
 8007042:	68fa      	ldr	r2, [r7, #12]
 8007044:	8b12      	ldrh	r2, [r2, #24]
 8007046:	441a      	add	r2, r3
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	61da      	str	r2, [r3, #28]
 800704c:	e002      	b.n	8007054 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2200      	movs	r2, #0
 8007052:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007058:	2b00      	cmp	r3, #0
 800705a:	d004      	beq.n	8007066 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007064:	e00e      	b.n	8007084 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2200      	movs	r2, #0
 800706a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 f868 	bl	8007144 <USBH_CDC_TransmitCallback>
      break;
 8007074:	e006      	b.n	8007084 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007076:	7afb      	ldrb	r3, [r7, #11]
 8007078:	2b02      	cmp	r3, #2
 800707a:	d103      	bne.n	8007084 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007084:	bf00      	nop
  }
}
 8007086:	bf00      	nop
 8007088:	3710      	adds	r7, #16
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}

0800708e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800708e:	b580      	push	{r7, lr}
 8007090:	b086      	sub	sp, #24
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800709c:	69db      	ldr	r3, [r3, #28]
 800709e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80070a0:	2300      	movs	r3, #0
 80070a2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80070aa:	2b03      	cmp	r3, #3
 80070ac:	d002      	beq.n	80070b4 <CDC_ProcessReception+0x26>
 80070ae:	2b04      	cmp	r3, #4
 80070b0:	d00e      	beq.n	80070d0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80070b2:	e043      	b.n	800713c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	6a19      	ldr	r1, [r3, #32]
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	8b5a      	ldrh	r2, [r3, #26]
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	7b1b      	ldrb	r3, [r3, #12]
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 fc6f 	bl	80079a4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	2204      	movs	r2, #4
 80070ca:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80070ce:	e035      	b.n	800713c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	7b1b      	ldrb	r3, [r3, #12]
 80070d4:	4619      	mov	r1, r3
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 ff22 	bl	8007f20 <USBH_LL_GetURBState>
 80070dc:	4603      	mov	r3, r0
 80070de:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80070e0:	7cfb      	ldrb	r3, [r7, #19]
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d129      	bne.n	800713a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	7b1b      	ldrb	r3, [r3, #12]
 80070ea:	4619      	mov	r1, r3
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 fe85 	bl	8007dfc <USBH_LL_GetLastXferSize>
 80070f2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f8:	68fa      	ldr	r2, [r7, #12]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d016      	beq.n	800712c <CDC_ProcessReception+0x9e>
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	8b5b      	ldrh	r3, [r3, #26]
 8007102:	461a      	mov	r2, r3
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	4293      	cmp	r3, r2
 8007108:	d910      	bls.n	800712c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	1ad2      	subs	r2, r2, r3
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	6a1a      	ldr	r2, [r3, #32]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	441a      	add	r2, r3
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	2203      	movs	r2, #3
 8007126:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800712a:	e006      	b.n	800713a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	2200      	movs	r2, #0
 8007130:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 f80f 	bl	8007158 <USBH_CDC_ReceiveCallback>
      break;
 800713a:	bf00      	nop
  }
}
 800713c:	bf00      	nop
 800713e:	3718      	adds	r7, #24
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800714c:	bf00      	nop
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007158:	b480      	push	{r7}
 800715a:	b083      	sub	sp, #12
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007160:	bf00      	nop
 8007162:	370c      	adds	r7, #12
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007174:	bf00      	nop
 8007176:	370c      	adds	r7, #12
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	4613      	mov	r3, r2
 800718c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d101      	bne.n	8007198 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007194:	2302      	movs	r3, #2
 8007196:	e029      	b.n	80071ec <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	79fa      	ldrb	r2, [r7, #7]
 800719c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80071b0:	68f8      	ldr	r0, [r7, #12]
 80071b2:	f000 f81f 	bl	80071f4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2200      	movs	r2, #0
 80071ba:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2200      	movs	r2, #0
 80071c2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2200      	movs	r2, #0
 80071d2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d003      	beq.n	80071e4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	68ba      	ldr	r2, [r7, #8]
 80071e0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	f000 fd97 	bl	8007d18 <USBH_LL_Init>

  return USBH_OK;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b085      	sub	sp, #20
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80071fc:	2300      	movs	r3, #0
 80071fe:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007200:	2300      	movs	r3, #0
 8007202:	60fb      	str	r3, [r7, #12]
 8007204:	e009      	b.n	800721a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	33e0      	adds	r3, #224	; 0xe0
 800720c:	009b      	lsls	r3, r3, #2
 800720e:	4413      	add	r3, r2
 8007210:	2200      	movs	r2, #0
 8007212:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	3301      	adds	r3, #1
 8007218:	60fb      	str	r3, [r7, #12]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2b0f      	cmp	r3, #15
 800721e:	d9f2      	bls.n	8007206 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007220:	2300      	movs	r3, #0
 8007222:	60fb      	str	r3, [r7, #12]
 8007224:	e009      	b.n	800723a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	4413      	add	r3, r2
 800722c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007230:	2200      	movs	r2, #0
 8007232:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	3301      	adds	r3, #1
 8007238:	60fb      	str	r3, [r7, #12]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007240:	d3f1      	bcc.n	8007226 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2201      	movs	r2, #1
 8007252:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2201      	movs	r2, #1
 8007260:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2240      	movs	r2, #64	; 0x40
 8007266:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2201      	movs	r2, #1
 800727a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800728e:	2300      	movs	r3, #0
}
 8007290:	4618      	mov	r0, r3
 8007292:	3714      	adds	r7, #20
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800729c:	b480      	push	{r7}
 800729e:	b085      	sub	sp, #20
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80072a6:	2300      	movs	r3, #0
 80072a8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d016      	beq.n	80072de <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d10e      	bne.n	80072d8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80072c0:	1c59      	adds	r1, r3, #1
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	33de      	adds	r3, #222	; 0xde
 80072cc:	6839      	ldr	r1, [r7, #0]
 80072ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80072d2:	2300      	movs	r3, #0
 80072d4:	73fb      	strb	r3, [r7, #15]
 80072d6:	e004      	b.n	80072e2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80072d8:	2302      	movs	r3, #2
 80072da:	73fb      	strb	r3, [r7, #15]
 80072dc:	e001      	b.n	80072e2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80072de:	2302      	movs	r3, #2
 80072e0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80072e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3714      	adds	r7, #20
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b085      	sub	sp, #20
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	460b      	mov	r3, r1
 80072fa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80072fc:	2300      	movs	r3, #0
 80072fe:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007306:	78fa      	ldrb	r2, [r7, #3]
 8007308:	429a      	cmp	r2, r3
 800730a:	d204      	bcs.n	8007316 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	78fa      	ldrb	r2, [r7, #3]
 8007310:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007314:	e001      	b.n	800731a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007316:	2302      	movs	r3, #2
 8007318:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800731a:	7bfb      	ldrb	r3, [r7, #15]
}
 800731c:	4618      	mov	r0, r3
 800731e:	3714      	adds	r7, #20
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr

08007328 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007328:	b480      	push	{r7}
 800732a:	b087      	sub	sp, #28
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	4608      	mov	r0, r1
 8007332:	4611      	mov	r1, r2
 8007334:	461a      	mov	r2, r3
 8007336:	4603      	mov	r3, r0
 8007338:	70fb      	strb	r3, [r7, #3]
 800733a:	460b      	mov	r3, r1
 800733c:	70bb      	strb	r3, [r7, #2]
 800733e:	4613      	mov	r3, r2
 8007340:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007342:	2300      	movs	r3, #0
 8007344:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007346:	2300      	movs	r3, #0
 8007348:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007350:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007352:	e025      	b.n	80073a0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007354:	7dfb      	ldrb	r3, [r7, #23]
 8007356:	221a      	movs	r2, #26
 8007358:	fb02 f303 	mul.w	r3, r2, r3
 800735c:	3308      	adds	r3, #8
 800735e:	68fa      	ldr	r2, [r7, #12]
 8007360:	4413      	add	r3, r2
 8007362:	3302      	adds	r3, #2
 8007364:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	795b      	ldrb	r3, [r3, #5]
 800736a:	78fa      	ldrb	r2, [r7, #3]
 800736c:	429a      	cmp	r2, r3
 800736e:	d002      	beq.n	8007376 <USBH_FindInterface+0x4e>
 8007370:	78fb      	ldrb	r3, [r7, #3]
 8007372:	2bff      	cmp	r3, #255	; 0xff
 8007374:	d111      	bne.n	800739a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800737a:	78ba      	ldrb	r2, [r7, #2]
 800737c:	429a      	cmp	r2, r3
 800737e:	d002      	beq.n	8007386 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007380:	78bb      	ldrb	r3, [r7, #2]
 8007382:	2bff      	cmp	r3, #255	; 0xff
 8007384:	d109      	bne.n	800739a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800738a:	787a      	ldrb	r2, [r7, #1]
 800738c:	429a      	cmp	r2, r3
 800738e:	d002      	beq.n	8007396 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007390:	787b      	ldrb	r3, [r7, #1]
 8007392:	2bff      	cmp	r3, #255	; 0xff
 8007394:	d101      	bne.n	800739a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007396:	7dfb      	ldrb	r3, [r7, #23]
 8007398:	e006      	b.n	80073a8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800739a:	7dfb      	ldrb	r3, [r7, #23]
 800739c:	3301      	adds	r3, #1
 800739e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80073a0:	7dfb      	ldrb	r3, [r7, #23]
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d9d6      	bls.n	8007354 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80073a6:	23ff      	movs	r3, #255	; 0xff
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	371c      	adds	r7, #28
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 fce7 	bl	8007d90 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80073c2:	2101      	movs	r1, #1
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 fdbe 	bl	8007f46 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80073ca:	2300      	movs	r3, #0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3708      	adds	r7, #8
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	683a      	ldr	r2, [r7, #0]
 80073e2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80073e6:	bf00      	nop
 80073e8:	370c      	adds	r7, #12
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr

080073f2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80073f2:	b580      	push	{r7, lr}
 80073f4:	b082      	sub	sp, #8
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007400:	1c5a      	adds	r2, r3, #1
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 f804 	bl	8007416 <USBH_HandleSof>
}
 800740e:	bf00      	nop
 8007410:	3708      	adds	r7, #8
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}

08007416 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007416:	b580      	push	{r7, lr}
 8007418:	b082      	sub	sp, #8
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	b2db      	uxtb	r3, r3
 8007424:	2b0b      	cmp	r3, #11
 8007426:	d10a      	bne.n	800743e <USBH_HandleSof+0x28>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800742e:	2b00      	cmp	r3, #0
 8007430:	d005      	beq.n	800743e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007438:	699b      	ldr	r3, [r3, #24]
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	4798      	blx	r3
  }
}
 800743e:	bf00      	nop
 8007440:	3708      	adds	r7, #8
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007446:	b480      	push	{r7}
 8007448:	b083      	sub	sp, #12
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2201      	movs	r2, #1
 8007452:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007456:	bf00      	nop
}
 8007458:	370c      	adds	r7, #12
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr

08007462 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007462:	b480      	push	{r7}
 8007464:	b083      	sub	sp, #12
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007472:	bf00      	nop
}
 8007474:	370c      	adds	r7, #12
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr

0800747e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800747e:	b480      	push	{r7}
 8007480:	b083      	sub	sp, #12
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2201      	movs	r2, #1
 800748a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 fc7a 	bl	8007dc6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	791b      	ldrb	r3, [r3, #4]
 80074d6:	4619      	mov	r1, r3
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 fad1 	bl	8007a80 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	795b      	ldrb	r3, [r3, #5]
 80074e2:	4619      	mov	r1, r3
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 facb 	bl	8007a80 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3708      	adds	r7, #8
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b082      	sub	sp, #8
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	460b      	mov	r3, r1
 80074fe:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	789b      	ldrb	r3, [r3, #2]
 8007504:	2b01      	cmp	r3, #1
 8007506:	d10f      	bne.n	8007528 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2202      	movs	r2, #2
 800750c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2201      	movs	r2, #1
 8007512:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800751a:	78fb      	ldrb	r3, [r7, #3]
 800751c:	b29a      	uxth	r2, r3
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007528:	2200      	movs	r2, #0
 800752a:	2100      	movs	r1, #0
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 f805 	bl	800753c <USBH_CtlReq>
 8007532:	4603      	mov	r3, r0
}
 8007534:	4618      	mov	r0, r3
 8007536:	3708      	adds	r7, #8
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b086      	sub	sp, #24
 8007540:	af00      	add	r7, sp, #0
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	60b9      	str	r1, [r7, #8]
 8007546:	4613      	mov	r3, r2
 8007548:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800754a:	2301      	movs	r3, #1
 800754c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	789b      	ldrb	r3, [r3, #2]
 8007552:	2b01      	cmp	r3, #1
 8007554:	d002      	beq.n	800755c <USBH_CtlReq+0x20>
 8007556:	2b02      	cmp	r3, #2
 8007558:	d00f      	beq.n	800757a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800755a:	e027      	b.n	80075ac <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	68ba      	ldr	r2, [r7, #8]
 8007560:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	88fa      	ldrh	r2, [r7, #6]
 8007566:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2201      	movs	r2, #1
 800756c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2202      	movs	r2, #2
 8007572:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007574:	2301      	movs	r3, #1
 8007576:	75fb      	strb	r3, [r7, #23]
      break;
 8007578:	e018      	b.n	80075ac <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800757a:	68f8      	ldr	r0, [r7, #12]
 800757c:	f000 f81c 	bl	80075b8 <USBH_HandleControl>
 8007580:	4603      	mov	r3, r0
 8007582:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007584:	7dfb      	ldrb	r3, [r7, #23]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d002      	beq.n	8007590 <USBH_CtlReq+0x54>
 800758a:	7dfb      	ldrb	r3, [r7, #23]
 800758c:	2b03      	cmp	r3, #3
 800758e:	d106      	bne.n	800759e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2201      	movs	r2, #1
 8007594:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2200      	movs	r2, #0
 800759a:	761a      	strb	r2, [r3, #24]
      break;
 800759c:	e005      	b.n	80075aa <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800759e:	7dfb      	ldrb	r3, [r7, #23]
 80075a0:	2b02      	cmp	r3, #2
 80075a2:	d102      	bne.n	80075aa <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2201      	movs	r2, #1
 80075a8:	709a      	strb	r2, [r3, #2]
      break;
 80075aa:	bf00      	nop
  }
  return status;
 80075ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3718      	adds	r7, #24
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
	...

080075b8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b086      	sub	sp, #24
 80075bc:	af02      	add	r7, sp, #8
 80075be:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80075c0:	2301      	movs	r3, #1
 80075c2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80075c4:	2300      	movs	r3, #0
 80075c6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	7e1b      	ldrb	r3, [r3, #24]
 80075cc:	3b01      	subs	r3, #1
 80075ce:	2b0a      	cmp	r3, #10
 80075d0:	f200 8156 	bhi.w	8007880 <USBH_HandleControl+0x2c8>
 80075d4:	a201      	add	r2, pc, #4	; (adr r2, 80075dc <USBH_HandleControl+0x24>)
 80075d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075da:	bf00      	nop
 80075dc:	08007609 	.word	0x08007609
 80075e0:	08007623 	.word	0x08007623
 80075e4:	0800768d 	.word	0x0800768d
 80075e8:	080076b3 	.word	0x080076b3
 80075ec:	080076eb 	.word	0x080076eb
 80075f0:	08007715 	.word	0x08007715
 80075f4:	08007767 	.word	0x08007767
 80075f8:	08007789 	.word	0x08007789
 80075fc:	080077c5 	.word	0x080077c5
 8007600:	080077eb 	.word	0x080077eb
 8007604:	08007829 	.word	0x08007829
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f103 0110 	add.w	r1, r3, #16
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	795b      	ldrb	r3, [r3, #5]
 8007612:	461a      	mov	r2, r3
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 f943 	bl	80078a0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2202      	movs	r2, #2
 800761e:	761a      	strb	r2, [r3, #24]
      break;
 8007620:	e139      	b.n	8007896 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	795b      	ldrb	r3, [r3, #5]
 8007626:	4619      	mov	r1, r3
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 fc79 	bl	8007f20 <USBH_LL_GetURBState>
 800762e:	4603      	mov	r3, r0
 8007630:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007632:	7bbb      	ldrb	r3, [r7, #14]
 8007634:	2b01      	cmp	r3, #1
 8007636:	d11e      	bne.n	8007676 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	7c1b      	ldrb	r3, [r3, #16]
 800763c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007640:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	8adb      	ldrh	r3, [r3, #22]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d00a      	beq.n	8007660 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800764a:	7b7b      	ldrb	r3, [r7, #13]
 800764c:	2b80      	cmp	r3, #128	; 0x80
 800764e:	d103      	bne.n	8007658 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2203      	movs	r2, #3
 8007654:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007656:	e115      	b.n	8007884 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2205      	movs	r2, #5
 800765c:	761a      	strb	r2, [r3, #24]
      break;
 800765e:	e111      	b.n	8007884 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007660:	7b7b      	ldrb	r3, [r7, #13]
 8007662:	2b80      	cmp	r3, #128	; 0x80
 8007664:	d103      	bne.n	800766e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2209      	movs	r2, #9
 800766a:	761a      	strb	r2, [r3, #24]
      break;
 800766c:	e10a      	b.n	8007884 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2207      	movs	r2, #7
 8007672:	761a      	strb	r2, [r3, #24]
      break;
 8007674:	e106      	b.n	8007884 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007676:	7bbb      	ldrb	r3, [r7, #14]
 8007678:	2b04      	cmp	r3, #4
 800767a:	d003      	beq.n	8007684 <USBH_HandleControl+0xcc>
 800767c:	7bbb      	ldrb	r3, [r7, #14]
 800767e:	2b02      	cmp	r3, #2
 8007680:	f040 8100 	bne.w	8007884 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	220b      	movs	r2, #11
 8007688:	761a      	strb	r2, [r3, #24]
      break;
 800768a:	e0fb      	b.n	8007884 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007692:	b29a      	uxth	r2, r3
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6899      	ldr	r1, [r3, #8]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	899a      	ldrh	r2, [r3, #12]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	791b      	ldrb	r3, [r3, #4]
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 f93a 	bl	800791e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2204      	movs	r2, #4
 80076ae:	761a      	strb	r2, [r3, #24]
      break;
 80076b0:	e0f1      	b.n	8007896 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	791b      	ldrb	r3, [r3, #4]
 80076b6:	4619      	mov	r1, r3
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 fc31 	bl	8007f20 <USBH_LL_GetURBState>
 80076be:	4603      	mov	r3, r0
 80076c0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80076c2:	7bbb      	ldrb	r3, [r7, #14]
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d102      	bne.n	80076ce <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2209      	movs	r2, #9
 80076cc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80076ce:	7bbb      	ldrb	r3, [r7, #14]
 80076d0:	2b05      	cmp	r3, #5
 80076d2:	d102      	bne.n	80076da <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80076d4:	2303      	movs	r3, #3
 80076d6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80076d8:	e0d6      	b.n	8007888 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80076da:	7bbb      	ldrb	r3, [r7, #14]
 80076dc:	2b04      	cmp	r3, #4
 80076de:	f040 80d3 	bne.w	8007888 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	220b      	movs	r2, #11
 80076e6:	761a      	strb	r2, [r3, #24]
      break;
 80076e8:	e0ce      	b.n	8007888 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6899      	ldr	r1, [r3, #8]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	899a      	ldrh	r2, [r3, #12]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	795b      	ldrb	r3, [r3, #5]
 80076f6:	2001      	movs	r0, #1
 80076f8:	9000      	str	r0, [sp, #0]
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 f8ea 	bl	80078d4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007706:	b29a      	uxth	r2, r3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2206      	movs	r2, #6
 8007710:	761a      	strb	r2, [r3, #24]
      break;
 8007712:	e0c0      	b.n	8007896 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	795b      	ldrb	r3, [r3, #5]
 8007718:	4619      	mov	r1, r3
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 fc00 	bl	8007f20 <USBH_LL_GetURBState>
 8007720:	4603      	mov	r3, r0
 8007722:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007724:	7bbb      	ldrb	r3, [r7, #14]
 8007726:	2b01      	cmp	r3, #1
 8007728:	d103      	bne.n	8007732 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2207      	movs	r2, #7
 800772e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007730:	e0ac      	b.n	800788c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007732:	7bbb      	ldrb	r3, [r7, #14]
 8007734:	2b05      	cmp	r3, #5
 8007736:	d105      	bne.n	8007744 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	220c      	movs	r2, #12
 800773c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800773e:	2303      	movs	r3, #3
 8007740:	73fb      	strb	r3, [r7, #15]
      break;
 8007742:	e0a3      	b.n	800788c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007744:	7bbb      	ldrb	r3, [r7, #14]
 8007746:	2b02      	cmp	r3, #2
 8007748:	d103      	bne.n	8007752 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2205      	movs	r2, #5
 800774e:	761a      	strb	r2, [r3, #24]
      break;
 8007750:	e09c      	b.n	800788c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007752:	7bbb      	ldrb	r3, [r7, #14]
 8007754:	2b04      	cmp	r3, #4
 8007756:	f040 8099 	bne.w	800788c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	220b      	movs	r2, #11
 800775e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007760:	2302      	movs	r3, #2
 8007762:	73fb      	strb	r3, [r7, #15]
      break;
 8007764:	e092      	b.n	800788c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	791b      	ldrb	r3, [r3, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	2100      	movs	r1, #0
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 f8d5 	bl	800791e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800777a:	b29a      	uxth	r2, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2208      	movs	r2, #8
 8007784:	761a      	strb	r2, [r3, #24]

      break;
 8007786:	e086      	b.n	8007896 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	791b      	ldrb	r3, [r3, #4]
 800778c:	4619      	mov	r1, r3
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 fbc6 	bl	8007f20 <USBH_LL_GetURBState>
 8007794:	4603      	mov	r3, r0
 8007796:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007798:	7bbb      	ldrb	r3, [r7, #14]
 800779a:	2b01      	cmp	r3, #1
 800779c:	d105      	bne.n	80077aa <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	220d      	movs	r2, #13
 80077a2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80077a4:	2300      	movs	r3, #0
 80077a6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80077a8:	e072      	b.n	8007890 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80077aa:	7bbb      	ldrb	r3, [r7, #14]
 80077ac:	2b04      	cmp	r3, #4
 80077ae:	d103      	bne.n	80077b8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	220b      	movs	r2, #11
 80077b4:	761a      	strb	r2, [r3, #24]
      break;
 80077b6:	e06b      	b.n	8007890 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80077b8:	7bbb      	ldrb	r3, [r7, #14]
 80077ba:	2b05      	cmp	r3, #5
 80077bc:	d168      	bne.n	8007890 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80077be:	2303      	movs	r3, #3
 80077c0:	73fb      	strb	r3, [r7, #15]
      break;
 80077c2:	e065      	b.n	8007890 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	795b      	ldrb	r3, [r3, #5]
 80077c8:	2201      	movs	r2, #1
 80077ca:	9200      	str	r2, [sp, #0]
 80077cc:	2200      	movs	r2, #0
 80077ce:	2100      	movs	r1, #0
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 f87f 	bl	80078d4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80077dc:	b29a      	uxth	r2, r3
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	220a      	movs	r2, #10
 80077e6:	761a      	strb	r2, [r3, #24]
      break;
 80077e8:	e055      	b.n	8007896 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	795b      	ldrb	r3, [r3, #5]
 80077ee:	4619      	mov	r1, r3
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 fb95 	bl	8007f20 <USBH_LL_GetURBState>
 80077f6:	4603      	mov	r3, r0
 80077f8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80077fa:	7bbb      	ldrb	r3, [r7, #14]
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d105      	bne.n	800780c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007800:	2300      	movs	r3, #0
 8007802:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	220d      	movs	r2, #13
 8007808:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800780a:	e043      	b.n	8007894 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800780c:	7bbb      	ldrb	r3, [r7, #14]
 800780e:	2b02      	cmp	r3, #2
 8007810:	d103      	bne.n	800781a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2209      	movs	r2, #9
 8007816:	761a      	strb	r2, [r3, #24]
      break;
 8007818:	e03c      	b.n	8007894 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800781a:	7bbb      	ldrb	r3, [r7, #14]
 800781c:	2b04      	cmp	r3, #4
 800781e:	d139      	bne.n	8007894 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	220b      	movs	r2, #11
 8007824:	761a      	strb	r2, [r3, #24]
      break;
 8007826:	e035      	b.n	8007894 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	7e5b      	ldrb	r3, [r3, #25]
 800782c:	3301      	adds	r3, #1
 800782e:	b2da      	uxtb	r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	765a      	strb	r2, [r3, #25]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	7e5b      	ldrb	r3, [r3, #25]
 8007838:	2b02      	cmp	r3, #2
 800783a:	d806      	bhi.n	800784a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2201      	movs	r2, #1
 8007840:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2201      	movs	r2, #1
 8007846:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007848:	e025      	b.n	8007896 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007850:	2106      	movs	r1, #6
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	795b      	ldrb	r3, [r3, #5]
 8007860:	4619      	mov	r1, r3
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 f90c 	bl	8007a80 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	791b      	ldrb	r3, [r3, #4]
 800786c:	4619      	mov	r1, r3
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 f906 	bl	8007a80 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800787a:	2302      	movs	r3, #2
 800787c:	73fb      	strb	r3, [r7, #15]
      break;
 800787e:	e00a      	b.n	8007896 <USBH_HandleControl+0x2de>

    default:
      break;
 8007880:	bf00      	nop
 8007882:	e008      	b.n	8007896 <USBH_HandleControl+0x2de>
      break;
 8007884:	bf00      	nop
 8007886:	e006      	b.n	8007896 <USBH_HandleControl+0x2de>
      break;
 8007888:	bf00      	nop
 800788a:	e004      	b.n	8007896 <USBH_HandleControl+0x2de>
      break;
 800788c:	bf00      	nop
 800788e:	e002      	b.n	8007896 <USBH_HandleControl+0x2de>
      break;
 8007890:	bf00      	nop
 8007892:	e000      	b.n	8007896 <USBH_HandleControl+0x2de>
      break;
 8007894:	bf00      	nop
  }

  return status;
 8007896:	7bfb      	ldrb	r3, [r7, #15]
}
 8007898:	4618      	mov	r0, r3
 800789a:	3710      	adds	r7, #16
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b088      	sub	sp, #32
 80078a4:	af04      	add	r7, sp, #16
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	60b9      	str	r1, [r7, #8]
 80078aa:	4613      	mov	r3, r2
 80078ac:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80078ae:	79f9      	ldrb	r1, [r7, #7]
 80078b0:	2300      	movs	r3, #0
 80078b2:	9303      	str	r3, [sp, #12]
 80078b4:	2308      	movs	r3, #8
 80078b6:	9302      	str	r3, [sp, #8]
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	9301      	str	r3, [sp, #4]
 80078bc:	2300      	movs	r3, #0
 80078be:	9300      	str	r3, [sp, #0]
 80078c0:	2300      	movs	r3, #0
 80078c2:	2200      	movs	r2, #0
 80078c4:	68f8      	ldr	r0, [r7, #12]
 80078c6:	f000 fafa 	bl	8007ebe <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80078ca:	2300      	movs	r3, #0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3710      	adds	r7, #16
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b088      	sub	sp, #32
 80078d8:	af04      	add	r7, sp, #16
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	4611      	mov	r1, r2
 80078e0:	461a      	mov	r2, r3
 80078e2:	460b      	mov	r3, r1
 80078e4:	80fb      	strh	r3, [r7, #6]
 80078e6:	4613      	mov	r3, r2
 80078e8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d001      	beq.n	80078f8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80078f4:	2300      	movs	r3, #0
 80078f6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80078f8:	7979      	ldrb	r1, [r7, #5]
 80078fa:	7e3b      	ldrb	r3, [r7, #24]
 80078fc:	9303      	str	r3, [sp, #12]
 80078fe:	88fb      	ldrh	r3, [r7, #6]
 8007900:	9302      	str	r3, [sp, #8]
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	9301      	str	r3, [sp, #4]
 8007906:	2301      	movs	r3, #1
 8007908:	9300      	str	r3, [sp, #0]
 800790a:	2300      	movs	r3, #0
 800790c:	2200      	movs	r2, #0
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	f000 fad5 	bl	8007ebe <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3710      	adds	r7, #16
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b088      	sub	sp, #32
 8007922:	af04      	add	r7, sp, #16
 8007924:	60f8      	str	r0, [r7, #12]
 8007926:	60b9      	str	r1, [r7, #8]
 8007928:	4611      	mov	r1, r2
 800792a:	461a      	mov	r2, r3
 800792c:	460b      	mov	r3, r1
 800792e:	80fb      	strh	r3, [r7, #6]
 8007930:	4613      	mov	r3, r2
 8007932:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007934:	7979      	ldrb	r1, [r7, #5]
 8007936:	2300      	movs	r3, #0
 8007938:	9303      	str	r3, [sp, #12]
 800793a:	88fb      	ldrh	r3, [r7, #6]
 800793c:	9302      	str	r3, [sp, #8]
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	9301      	str	r3, [sp, #4]
 8007942:	2301      	movs	r3, #1
 8007944:	9300      	str	r3, [sp, #0]
 8007946:	2300      	movs	r3, #0
 8007948:	2201      	movs	r2, #1
 800794a:	68f8      	ldr	r0, [r7, #12]
 800794c:	f000 fab7 	bl	8007ebe <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007950:	2300      	movs	r3, #0

}
 8007952:	4618      	mov	r0, r3
 8007954:	3710      	adds	r7, #16
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}

0800795a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800795a:	b580      	push	{r7, lr}
 800795c:	b088      	sub	sp, #32
 800795e:	af04      	add	r7, sp, #16
 8007960:	60f8      	str	r0, [r7, #12]
 8007962:	60b9      	str	r1, [r7, #8]
 8007964:	4611      	mov	r1, r2
 8007966:	461a      	mov	r2, r3
 8007968:	460b      	mov	r3, r1
 800796a:	80fb      	strh	r3, [r7, #6]
 800796c:	4613      	mov	r3, r2
 800796e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007976:	2b00      	cmp	r3, #0
 8007978:	d001      	beq.n	800797e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800797a:	2300      	movs	r3, #0
 800797c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800797e:	7979      	ldrb	r1, [r7, #5]
 8007980:	7e3b      	ldrb	r3, [r7, #24]
 8007982:	9303      	str	r3, [sp, #12]
 8007984:	88fb      	ldrh	r3, [r7, #6]
 8007986:	9302      	str	r3, [sp, #8]
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	9301      	str	r3, [sp, #4]
 800798c:	2301      	movs	r3, #1
 800798e:	9300      	str	r3, [sp, #0]
 8007990:	2302      	movs	r3, #2
 8007992:	2200      	movs	r2, #0
 8007994:	68f8      	ldr	r0, [r7, #12]
 8007996:	f000 fa92 	bl	8007ebe <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800799a:	2300      	movs	r3, #0
}
 800799c:	4618      	mov	r0, r3
 800799e:	3710      	adds	r7, #16
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b088      	sub	sp, #32
 80079a8:	af04      	add	r7, sp, #16
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	60b9      	str	r1, [r7, #8]
 80079ae:	4611      	mov	r1, r2
 80079b0:	461a      	mov	r2, r3
 80079b2:	460b      	mov	r3, r1
 80079b4:	80fb      	strh	r3, [r7, #6]
 80079b6:	4613      	mov	r3, r2
 80079b8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80079ba:	7979      	ldrb	r1, [r7, #5]
 80079bc:	2300      	movs	r3, #0
 80079be:	9303      	str	r3, [sp, #12]
 80079c0:	88fb      	ldrh	r3, [r7, #6]
 80079c2:	9302      	str	r3, [sp, #8]
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	9301      	str	r3, [sp, #4]
 80079c8:	2301      	movs	r3, #1
 80079ca:	9300      	str	r3, [sp, #0]
 80079cc:	2302      	movs	r3, #2
 80079ce:	2201      	movs	r2, #1
 80079d0:	68f8      	ldr	r0, [r7, #12]
 80079d2:	f000 fa74 	bl	8007ebe <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3710      	adds	r7, #16
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b086      	sub	sp, #24
 80079e4:	af04      	add	r7, sp, #16
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	4608      	mov	r0, r1
 80079ea:	4611      	mov	r1, r2
 80079ec:	461a      	mov	r2, r3
 80079ee:	4603      	mov	r3, r0
 80079f0:	70fb      	strb	r3, [r7, #3]
 80079f2:	460b      	mov	r3, r1
 80079f4:	70bb      	strb	r3, [r7, #2]
 80079f6:	4613      	mov	r3, r2
 80079f8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80079fa:	7878      	ldrb	r0, [r7, #1]
 80079fc:	78ba      	ldrb	r2, [r7, #2]
 80079fe:	78f9      	ldrb	r1, [r7, #3]
 8007a00:	8b3b      	ldrh	r3, [r7, #24]
 8007a02:	9302      	str	r3, [sp, #8]
 8007a04:	7d3b      	ldrb	r3, [r7, #20]
 8007a06:	9301      	str	r3, [sp, #4]
 8007a08:	7c3b      	ldrb	r3, [r7, #16]
 8007a0a:	9300      	str	r3, [sp, #0]
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 fa07 	bl	8007e22 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3708      	adds	r7, #8
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}

08007a1e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007a1e:	b580      	push	{r7, lr}
 8007a20:	b082      	sub	sp, #8
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
 8007a26:	460b      	mov	r3, r1
 8007a28:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007a2a:	78fb      	ldrb	r3, [r7, #3]
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fa26 	bl	8007e80 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007a34:	2300      	movs	r3, #0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3708      	adds	r7, #8
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}

08007a3e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b084      	sub	sp, #16
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
 8007a46:	460b      	mov	r3, r1
 8007a48:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 f836 	bl	8007abc <USBH_GetFreePipe>
 8007a50:	4603      	mov	r3, r0
 8007a52:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007a54:	89fb      	ldrh	r3, [r7, #14]
 8007a56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d00a      	beq.n	8007a74 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007a5e:	78fa      	ldrb	r2, [r7, #3]
 8007a60:	89fb      	ldrh	r3, [r7, #14]
 8007a62:	f003 030f 	and.w	r3, r3, #15
 8007a66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007a6a:	6879      	ldr	r1, [r7, #4]
 8007a6c:	33e0      	adds	r3, #224	; 0xe0
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	440b      	add	r3, r1
 8007a72:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007a74:	89fb      	ldrh	r3, [r7, #14]
 8007a76:	b2db      	uxtb	r3, r3
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3710      	adds	r7, #16
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	460b      	mov	r3, r1
 8007a8a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007a8c:	78fb      	ldrb	r3, [r7, #3]
 8007a8e:	2b0f      	cmp	r3, #15
 8007a90:	d80d      	bhi.n	8007aae <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007a92:	78fb      	ldrb	r3, [r7, #3]
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	33e0      	adds	r3, #224	; 0xe0
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	4413      	add	r3, r2
 8007a9c:	685a      	ldr	r2, [r3, #4]
 8007a9e:	78fb      	ldrb	r3, [r7, #3]
 8007aa0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007aa4:	6879      	ldr	r1, [r7, #4]
 8007aa6:	33e0      	adds	r3, #224	; 0xe0
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	440b      	add	r3, r1
 8007aac:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007aae:	2300      	movs	r3, #0
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	370c      	adds	r7, #12
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007ac8:	2300      	movs	r3, #0
 8007aca:	73fb      	strb	r3, [r7, #15]
 8007acc:	e00f      	b.n	8007aee <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007ace:	7bfb      	ldrb	r3, [r7, #15]
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	33e0      	adds	r3, #224	; 0xe0
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	4413      	add	r3, r2
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d102      	bne.n	8007ae8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007ae2:	7bfb      	ldrb	r3, [r7, #15]
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	e007      	b.n	8007af8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007ae8:	7bfb      	ldrb	r3, [r7, #15]
 8007aea:	3301      	adds	r3, #1
 8007aec:	73fb      	strb	r3, [r7, #15]
 8007aee:	7bfb      	ldrb	r3, [r7, #15]
 8007af0:	2b0f      	cmp	r3, #15
 8007af2:	d9ec      	bls.n	8007ace <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007af4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3714      	adds	r7, #20
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007b08:	2201      	movs	r2, #1
 8007b0a:	490e      	ldr	r1, [pc, #56]	; (8007b44 <MX_USB_HOST_Init+0x40>)
 8007b0c:	480e      	ldr	r0, [pc, #56]	; (8007b48 <MX_USB_HOST_Init+0x44>)
 8007b0e:	f7ff fb37 	bl	8007180 <USBH_Init>
 8007b12:	4603      	mov	r3, r0
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d001      	beq.n	8007b1c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007b18:	f7f8 ff98 	bl	8000a4c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007b1c:	490b      	ldr	r1, [pc, #44]	; (8007b4c <MX_USB_HOST_Init+0x48>)
 8007b1e:	480a      	ldr	r0, [pc, #40]	; (8007b48 <MX_USB_HOST_Init+0x44>)
 8007b20:	f7ff fbbc 	bl	800729c <USBH_RegisterClass>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d001      	beq.n	8007b2e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007b2a:	f7f8 ff8f 	bl	8000a4c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007b2e:	4806      	ldr	r0, [pc, #24]	; (8007b48 <MX_USB_HOST_Init+0x44>)
 8007b30:	f7ff fc40 	bl	80073b4 <USBH_Start>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d001      	beq.n	8007b3e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007b3a:	f7f8 ff87 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007b3e:	bf00      	nop
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop
 8007b44:	08007b51 	.word	0x08007b51
 8007b48:	20000270 	.word	0x20000270
 8007b4c:	20000014 	.word	0x20000014

08007b50 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	460b      	mov	r3, r1
 8007b5a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007b5c:	78fb      	ldrb	r3, [r7, #3]
 8007b5e:	3b01      	subs	r3, #1
 8007b60:	2b04      	cmp	r3, #4
 8007b62:	d819      	bhi.n	8007b98 <USBH_UserProcess+0x48>
 8007b64:	a201      	add	r2, pc, #4	; (adr r2, 8007b6c <USBH_UserProcess+0x1c>)
 8007b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b6a:	bf00      	nop
 8007b6c:	08007b99 	.word	0x08007b99
 8007b70:	08007b89 	.word	0x08007b89
 8007b74:	08007b99 	.word	0x08007b99
 8007b78:	08007b91 	.word	0x08007b91
 8007b7c:	08007b81 	.word	0x08007b81
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007b80:	4b09      	ldr	r3, [pc, #36]	; (8007ba8 <USBH_UserProcess+0x58>)
 8007b82:	2203      	movs	r2, #3
 8007b84:	701a      	strb	r2, [r3, #0]
  break;
 8007b86:	e008      	b.n	8007b9a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007b88:	4b07      	ldr	r3, [pc, #28]	; (8007ba8 <USBH_UserProcess+0x58>)
 8007b8a:	2202      	movs	r2, #2
 8007b8c:	701a      	strb	r2, [r3, #0]
  break;
 8007b8e:	e004      	b.n	8007b9a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007b90:	4b05      	ldr	r3, [pc, #20]	; (8007ba8 <USBH_UserProcess+0x58>)
 8007b92:	2201      	movs	r2, #1
 8007b94:	701a      	strb	r2, [r3, #0]
  break;
 8007b96:	e000      	b.n	8007b9a <USBH_UserProcess+0x4a>

  default:
  break;
 8007b98:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007b9a:	bf00      	nop
 8007b9c:	370c      	adds	r7, #12
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr
 8007ba6:	bf00      	nop
 8007ba8:	20000648 	.word	0x20000648

08007bac <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b08a      	sub	sp, #40	; 0x28
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007bb4:	f107 0314 	add.w	r3, r7, #20
 8007bb8:	2200      	movs	r2, #0
 8007bba:	601a      	str	r2, [r3, #0]
 8007bbc:	605a      	str	r2, [r3, #4]
 8007bbe:	609a      	str	r2, [r3, #8]
 8007bc0:	60da      	str	r2, [r3, #12]
 8007bc2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007bcc:	d147      	bne.n	8007c5e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007bce:	2300      	movs	r3, #0
 8007bd0:	613b      	str	r3, [r7, #16]
 8007bd2:	4b25      	ldr	r3, [pc, #148]	; (8007c68 <HAL_HCD_MspInit+0xbc>)
 8007bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd6:	4a24      	ldr	r2, [pc, #144]	; (8007c68 <HAL_HCD_MspInit+0xbc>)
 8007bd8:	f043 0301 	orr.w	r3, r3, #1
 8007bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8007bde:	4b22      	ldr	r3, [pc, #136]	; (8007c68 <HAL_HCD_MspInit+0xbc>)
 8007be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007be2:	f003 0301 	and.w	r3, r3, #1
 8007be6:	613b      	str	r3, [r7, #16]
 8007be8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007bea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007bf8:	f107 0314 	add.w	r3, r7, #20
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	481b      	ldr	r0, [pc, #108]	; (8007c6c <HAL_HCD_MspInit+0xc0>)
 8007c00:	f7f9 fc9e 	bl	8001540 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007c04:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c0a:	2302      	movs	r3, #2
 8007c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c12:	2300      	movs	r3, #0
 8007c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007c16:	230a      	movs	r3, #10
 8007c18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c1a:	f107 0314 	add.w	r3, r7, #20
 8007c1e:	4619      	mov	r1, r3
 8007c20:	4812      	ldr	r0, [pc, #72]	; (8007c6c <HAL_HCD_MspInit+0xc0>)
 8007c22:	f7f9 fc8d 	bl	8001540 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007c26:	4b10      	ldr	r3, [pc, #64]	; (8007c68 <HAL_HCD_MspInit+0xbc>)
 8007c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c2a:	4a0f      	ldr	r2, [pc, #60]	; (8007c68 <HAL_HCD_MspInit+0xbc>)
 8007c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c30:	6353      	str	r3, [r2, #52]	; 0x34
 8007c32:	2300      	movs	r3, #0
 8007c34:	60fb      	str	r3, [r7, #12]
 8007c36:	4b0c      	ldr	r3, [pc, #48]	; (8007c68 <HAL_HCD_MspInit+0xbc>)
 8007c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c3a:	4a0b      	ldr	r2, [pc, #44]	; (8007c68 <HAL_HCD_MspInit+0xbc>)
 8007c3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007c40:	6453      	str	r3, [r2, #68]	; 0x44
 8007c42:	4b09      	ldr	r3, [pc, #36]	; (8007c68 <HAL_HCD_MspInit+0xbc>)
 8007c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c4a:	60fb      	str	r3, [r7, #12]
 8007c4c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007c4e:	2200      	movs	r2, #0
 8007c50:	2100      	movs	r1, #0
 8007c52:	2043      	movs	r0, #67	; 0x43
 8007c54:	f7f9 fc3d 	bl	80014d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007c58:	2043      	movs	r0, #67	; 0x43
 8007c5a:	f7f9 fc56 	bl	800150a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007c5e:	bf00      	nop
 8007c60:	3728      	adds	r7, #40	; 0x28
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	40023800 	.word	0x40023800
 8007c6c:	40020000 	.word	0x40020000

08007c70 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7ff fbb7 	bl	80073f2 <USBH_LL_IncTimer>
}
 8007c84:	bf00      	nop
 8007c86:	3708      	adds	r7, #8
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f7ff fbef 	bl	800747e <USBH_LL_Connect>
}
 8007ca0:	bf00      	nop
 8007ca2:	3708      	adds	r7, #8
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7ff fbf8 	bl	80074ac <USBH_LL_Disconnect>
}
 8007cbc:	bf00      	nop
 8007cbe:	3708      	adds	r7, #8
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	460b      	mov	r3, r1
 8007cce:	70fb      	strb	r3, [r7, #3]
 8007cd0:	4613      	mov	r3, r2
 8007cd2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007cd4:	bf00      	nop
 8007cd6:	370c      	adds	r7, #12
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f7ff fba9 	bl	8007446 <USBH_LL_PortEnabled>
}
 8007cf4:	bf00      	nop
 8007cf6:	3708      	adds	r7, #8
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b082      	sub	sp, #8
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f7ff fba9 	bl	8007462 <USBH_LL_PortDisabled>
}
 8007d10:	bf00      	nop
 8007d12:	3708      	adds	r7, #8
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	d12a      	bne.n	8007d80 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007d2a:	4a18      	ldr	r2, [pc, #96]	; (8007d8c <USBH_LL_Init+0x74>)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	4a15      	ldr	r2, [pc, #84]	; (8007d8c <USBH_LL_Init+0x74>)
 8007d36:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007d3a:	4b14      	ldr	r3, [pc, #80]	; (8007d8c <USBH_LL_Init+0x74>)
 8007d3c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007d40:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007d42:	4b12      	ldr	r3, [pc, #72]	; (8007d8c <USBH_LL_Init+0x74>)
 8007d44:	2208      	movs	r2, #8
 8007d46:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007d48:	4b10      	ldr	r3, [pc, #64]	; (8007d8c <USBH_LL_Init+0x74>)
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007d4e:	4b0f      	ldr	r3, [pc, #60]	; (8007d8c <USBH_LL_Init+0x74>)
 8007d50:	2200      	movs	r2, #0
 8007d52:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007d54:	4b0d      	ldr	r3, [pc, #52]	; (8007d8c <USBH_LL_Init+0x74>)
 8007d56:	2202      	movs	r2, #2
 8007d58:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007d5a:	4b0c      	ldr	r3, [pc, #48]	; (8007d8c <USBH_LL_Init+0x74>)
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007d60:	480a      	ldr	r0, [pc, #40]	; (8007d8c <USBH_LL_Init+0x74>)
 8007d62:	f7f9 fda2 	bl	80018aa <HAL_HCD_Init>
 8007d66:	4603      	mov	r3, r0
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d001      	beq.n	8007d70 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007d6c:	f7f8 fe6e 	bl	8000a4c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007d70:	4806      	ldr	r0, [pc, #24]	; (8007d8c <USBH_LL_Init+0x74>)
 8007d72:	f7fa f978 	bl	8002066 <HAL_HCD_GetCurrentFrame>
 8007d76:	4603      	mov	r3, r0
 8007d78:	4619      	mov	r1, r3
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f7ff fb2a 	bl	80073d4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007d80:	2300      	movs	r3, #0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3708      	adds	r7, #8
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	bf00      	nop
 8007d8c:	2000064c 	.word	0x2000064c

08007d90 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7fa f8f5 	bl	8001f96 <HAL_HCD_Start>
 8007dac:	4603      	mov	r3, r0
 8007dae:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007db0:	7bfb      	ldrb	r3, [r7, #15]
 8007db2:	4618      	mov	r0, r3
 8007db4:	f000 f90e 	bl	8007fd4 <USBH_Get_USB_Status>
 8007db8:	4603      	mov	r3, r0
 8007dba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3710      	adds	r7, #16
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b084      	sub	sp, #16
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f7fa f8fd 	bl	8001fdc <HAL_HCD_Stop>
 8007de2:	4603      	mov	r3, r0
 8007de4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007de6:	7bfb      	ldrb	r3, [r7, #15]
 8007de8:	4618      	mov	r0, r3
 8007dea:	f000 f8f3 	bl	8007fd4 <USBH_Get_USB_Status>
 8007dee:	4603      	mov	r3, r0
 8007df0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007df2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3710      	adds	r7, #16
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b082      	sub	sp, #8
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	460b      	mov	r3, r1
 8007e06:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007e0e:	78fa      	ldrb	r2, [r7, #3]
 8007e10:	4611      	mov	r1, r2
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7fa f913 	bl	800203e <HAL_HCD_HC_GetXferCount>
 8007e18:	4603      	mov	r3, r0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3708      	adds	r7, #8
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007e22:	b590      	push	{r4, r7, lr}
 8007e24:	b089      	sub	sp, #36	; 0x24
 8007e26:	af04      	add	r7, sp, #16
 8007e28:	6078      	str	r0, [r7, #4]
 8007e2a:	4608      	mov	r0, r1
 8007e2c:	4611      	mov	r1, r2
 8007e2e:	461a      	mov	r2, r3
 8007e30:	4603      	mov	r3, r0
 8007e32:	70fb      	strb	r3, [r7, #3]
 8007e34:	460b      	mov	r3, r1
 8007e36:	70bb      	strb	r3, [r7, #2]
 8007e38:	4613      	mov	r3, r2
 8007e3a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007e40:	2300      	movs	r3, #0
 8007e42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007e4a:	787c      	ldrb	r4, [r7, #1]
 8007e4c:	78ba      	ldrb	r2, [r7, #2]
 8007e4e:	78f9      	ldrb	r1, [r7, #3]
 8007e50:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007e52:	9302      	str	r3, [sp, #8]
 8007e54:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007e58:	9301      	str	r3, [sp, #4]
 8007e5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007e5e:	9300      	str	r3, [sp, #0]
 8007e60:	4623      	mov	r3, r4
 8007e62:	f7f9 fd84 	bl	800196e <HAL_HCD_HC_Init>
 8007e66:	4603      	mov	r3, r0
 8007e68:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007e6a:	7bfb      	ldrb	r3, [r7, #15]
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f000 f8b1 	bl	8007fd4 <USBH_Get_USB_Status>
 8007e72:	4603      	mov	r3, r0
 8007e74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e76:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3714      	adds	r7, #20
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd90      	pop	{r4, r7, pc}

08007e80 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	460b      	mov	r3, r1
 8007e8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007e90:	2300      	movs	r3, #0
 8007e92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007e9a:	78fa      	ldrb	r2, [r7, #3]
 8007e9c:	4611      	mov	r1, r2
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f7f9 fdf4 	bl	8001a8c <HAL_HCD_HC_Halt>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007ea8:	7bfb      	ldrb	r3, [r7, #15]
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f000 f892 	bl	8007fd4 <USBH_Get_USB_Status>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007eb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3710      	adds	r7, #16
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}

08007ebe <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007ebe:	b590      	push	{r4, r7, lr}
 8007ec0:	b089      	sub	sp, #36	; 0x24
 8007ec2:	af04      	add	r7, sp, #16
 8007ec4:	6078      	str	r0, [r7, #4]
 8007ec6:	4608      	mov	r0, r1
 8007ec8:	4611      	mov	r1, r2
 8007eca:	461a      	mov	r2, r3
 8007ecc:	4603      	mov	r3, r0
 8007ece:	70fb      	strb	r3, [r7, #3]
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	70bb      	strb	r3, [r7, #2]
 8007ed4:	4613      	mov	r3, r2
 8007ed6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007edc:	2300      	movs	r3, #0
 8007ede:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007ee6:	787c      	ldrb	r4, [r7, #1]
 8007ee8:	78ba      	ldrb	r2, [r7, #2]
 8007eea:	78f9      	ldrb	r1, [r7, #3]
 8007eec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007ef0:	9303      	str	r3, [sp, #12]
 8007ef2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007ef4:	9302      	str	r3, [sp, #8]
 8007ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef8:	9301      	str	r3, [sp, #4]
 8007efa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007efe:	9300      	str	r3, [sp, #0]
 8007f00:	4623      	mov	r3, r4
 8007f02:	f7f9 fde7 	bl	8001ad4 <HAL_HCD_HC_SubmitRequest>
 8007f06:	4603      	mov	r3, r0
 8007f08:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007f0a:	7bfb      	ldrb	r3, [r7, #15]
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f000 f861 	bl	8007fd4 <USBH_Get_USB_Status>
 8007f12:	4603      	mov	r3, r0
 8007f14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f16:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3714      	adds	r7, #20
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd90      	pop	{r4, r7, pc}

08007f20 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	460b      	mov	r3, r1
 8007f2a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007f32:	78fa      	ldrb	r2, [r7, #3]
 8007f34:	4611      	mov	r1, r2
 8007f36:	4618      	mov	r0, r3
 8007f38:	f7fa f86d 	bl	8002016 <HAL_HCD_HC_GetURBState>
 8007f3c:	4603      	mov	r3, r0
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3708      	adds	r7, #8
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007f46:	b580      	push	{r7, lr}
 8007f48:	b082      	sub	sp, #8
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
 8007f4e:	460b      	mov	r3, r1
 8007f50:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d103      	bne.n	8007f64 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007f5c:	78fb      	ldrb	r3, [r7, #3]
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f000 f864 	bl	800802c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007f64:	20c8      	movs	r0, #200	; 0xc8
 8007f66:	f7f9 f9b5 	bl	80012d4 <HAL_Delay>
  return USBH_OK;
 8007f6a:	2300      	movs	r3, #0
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3708      	adds	r7, #8
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b085      	sub	sp, #20
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	70fb      	strb	r3, [r7, #3]
 8007f80:	4613      	mov	r3, r2
 8007f82:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007f8a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007f8c:	78fb      	ldrb	r3, [r7, #3]
 8007f8e:	68fa      	ldr	r2, [r7, #12]
 8007f90:	212c      	movs	r1, #44	; 0x2c
 8007f92:	fb01 f303 	mul.w	r3, r1, r3
 8007f96:	4413      	add	r3, r2
 8007f98:	333b      	adds	r3, #59	; 0x3b
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d009      	beq.n	8007fb4 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007fa0:	78fb      	ldrb	r3, [r7, #3]
 8007fa2:	68fa      	ldr	r2, [r7, #12]
 8007fa4:	212c      	movs	r1, #44	; 0x2c
 8007fa6:	fb01 f303 	mul.w	r3, r1, r3
 8007faa:	4413      	add	r3, r2
 8007fac:	3354      	adds	r3, #84	; 0x54
 8007fae:	78ba      	ldrb	r2, [r7, #2]
 8007fb0:	701a      	strb	r2, [r3, #0]
 8007fb2:	e008      	b.n	8007fc6 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007fb4:	78fb      	ldrb	r3, [r7, #3]
 8007fb6:	68fa      	ldr	r2, [r7, #12]
 8007fb8:	212c      	movs	r1, #44	; 0x2c
 8007fba:	fb01 f303 	mul.w	r3, r1, r3
 8007fbe:	4413      	add	r3, r2
 8007fc0:	3355      	adds	r3, #85	; 0x55
 8007fc2:	78ba      	ldrb	r2, [r7, #2]
 8007fc4:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007fc6:	2300      	movs	r3, #0
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3714      	adds	r7, #20
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr

08007fd4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b085      	sub	sp, #20
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	4603      	mov	r3, r0
 8007fdc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007fe2:	79fb      	ldrb	r3, [r7, #7]
 8007fe4:	2b03      	cmp	r3, #3
 8007fe6:	d817      	bhi.n	8008018 <USBH_Get_USB_Status+0x44>
 8007fe8:	a201      	add	r2, pc, #4	; (adr r2, 8007ff0 <USBH_Get_USB_Status+0x1c>)
 8007fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fee:	bf00      	nop
 8007ff0:	08008001 	.word	0x08008001
 8007ff4:	08008007 	.word	0x08008007
 8007ff8:	0800800d 	.word	0x0800800d
 8007ffc:	08008013 	.word	0x08008013
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008000:	2300      	movs	r3, #0
 8008002:	73fb      	strb	r3, [r7, #15]
    break;
 8008004:	e00b      	b.n	800801e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008006:	2302      	movs	r3, #2
 8008008:	73fb      	strb	r3, [r7, #15]
    break;
 800800a:	e008      	b.n	800801e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800800c:	2301      	movs	r3, #1
 800800e:	73fb      	strb	r3, [r7, #15]
    break;
 8008010:	e005      	b.n	800801e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008012:	2302      	movs	r3, #2
 8008014:	73fb      	strb	r3, [r7, #15]
    break;
 8008016:	e002      	b.n	800801e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008018:	2302      	movs	r3, #2
 800801a:	73fb      	strb	r3, [r7, #15]
    break;
 800801c:	bf00      	nop
  }
  return usb_status;
 800801e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008020:	4618      	mov	r0, r3
 8008022:	3714      	adds	r7, #20
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr

0800802c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b084      	sub	sp, #16
 8008030:	af00      	add	r7, sp, #0
 8008032:	4603      	mov	r3, r0
 8008034:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008036:	79fb      	ldrb	r3, [r7, #7]
 8008038:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800803a:	79fb      	ldrb	r3, [r7, #7]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d102      	bne.n	8008046 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008040:	2300      	movs	r3, #0
 8008042:	73fb      	strb	r3, [r7, #15]
 8008044:	e001      	b.n	800804a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008046:	2301      	movs	r3, #1
 8008048:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800804a:	7bfb      	ldrb	r3, [r7, #15]
 800804c:	461a      	mov	r2, r3
 800804e:	2101      	movs	r1, #1
 8008050:	4803      	ldr	r0, [pc, #12]	; (8008060 <MX_DriverVbusFS+0x34>)
 8008052:	f7f9 fc11 	bl	8001878 <HAL_GPIO_WritePin>
}
 8008056:	bf00      	nop
 8008058:	3710      	adds	r7, #16
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	40020800 	.word	0x40020800

08008064 <__errno>:
 8008064:	4b01      	ldr	r3, [pc, #4]	; (800806c <__errno+0x8>)
 8008066:	6818      	ldr	r0, [r3, #0]
 8008068:	4770      	bx	lr
 800806a:	bf00      	nop
 800806c:	20000034 	.word	0x20000034

08008070 <__libc_init_array>:
 8008070:	b570      	push	{r4, r5, r6, lr}
 8008072:	4d0d      	ldr	r5, [pc, #52]	; (80080a8 <__libc_init_array+0x38>)
 8008074:	4c0d      	ldr	r4, [pc, #52]	; (80080ac <__libc_init_array+0x3c>)
 8008076:	1b64      	subs	r4, r4, r5
 8008078:	10a4      	asrs	r4, r4, #2
 800807a:	2600      	movs	r6, #0
 800807c:	42a6      	cmp	r6, r4
 800807e:	d109      	bne.n	8008094 <__libc_init_array+0x24>
 8008080:	4d0b      	ldr	r5, [pc, #44]	; (80080b0 <__libc_init_array+0x40>)
 8008082:	4c0c      	ldr	r4, [pc, #48]	; (80080b4 <__libc_init_array+0x44>)
 8008084:	f000 f92e 	bl	80082e4 <_init>
 8008088:	1b64      	subs	r4, r4, r5
 800808a:	10a4      	asrs	r4, r4, #2
 800808c:	2600      	movs	r6, #0
 800808e:	42a6      	cmp	r6, r4
 8008090:	d105      	bne.n	800809e <__libc_init_array+0x2e>
 8008092:	bd70      	pop	{r4, r5, r6, pc}
 8008094:	f855 3b04 	ldr.w	r3, [r5], #4
 8008098:	4798      	blx	r3
 800809a:	3601      	adds	r6, #1
 800809c:	e7ee      	b.n	800807c <__libc_init_array+0xc>
 800809e:	f855 3b04 	ldr.w	r3, [r5], #4
 80080a2:	4798      	blx	r3
 80080a4:	3601      	adds	r6, #1
 80080a6:	e7f2      	b.n	800808e <__libc_init_array+0x1e>
 80080a8:	08008320 	.word	0x08008320
 80080ac:	08008320 	.word	0x08008320
 80080b0:	08008320 	.word	0x08008320
 80080b4:	08008324 	.word	0x08008324

080080b8 <malloc>:
 80080b8:	4b02      	ldr	r3, [pc, #8]	; (80080c4 <malloc+0xc>)
 80080ba:	4601      	mov	r1, r0
 80080bc:	6818      	ldr	r0, [r3, #0]
 80080be:	f000 b87f 	b.w	80081c0 <_malloc_r>
 80080c2:	bf00      	nop
 80080c4:	20000034 	.word	0x20000034

080080c8 <free>:
 80080c8:	4b02      	ldr	r3, [pc, #8]	; (80080d4 <free+0xc>)
 80080ca:	4601      	mov	r1, r0
 80080cc:	6818      	ldr	r0, [r3, #0]
 80080ce:	f000 b80b 	b.w	80080e8 <_free_r>
 80080d2:	bf00      	nop
 80080d4:	20000034 	.word	0x20000034

080080d8 <memset>:
 80080d8:	4402      	add	r2, r0
 80080da:	4603      	mov	r3, r0
 80080dc:	4293      	cmp	r3, r2
 80080de:	d100      	bne.n	80080e2 <memset+0xa>
 80080e0:	4770      	bx	lr
 80080e2:	f803 1b01 	strb.w	r1, [r3], #1
 80080e6:	e7f9      	b.n	80080dc <memset+0x4>

080080e8 <_free_r>:
 80080e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080ea:	2900      	cmp	r1, #0
 80080ec:	d044      	beq.n	8008178 <_free_r+0x90>
 80080ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080f2:	9001      	str	r0, [sp, #4]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	f1a1 0404 	sub.w	r4, r1, #4
 80080fa:	bfb8      	it	lt
 80080fc:	18e4      	addlt	r4, r4, r3
 80080fe:	f000 f8e3 	bl	80082c8 <__malloc_lock>
 8008102:	4a1e      	ldr	r2, [pc, #120]	; (800817c <_free_r+0x94>)
 8008104:	9801      	ldr	r0, [sp, #4]
 8008106:	6813      	ldr	r3, [r2, #0]
 8008108:	b933      	cbnz	r3, 8008118 <_free_r+0x30>
 800810a:	6063      	str	r3, [r4, #4]
 800810c:	6014      	str	r4, [r2, #0]
 800810e:	b003      	add	sp, #12
 8008110:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008114:	f000 b8de 	b.w	80082d4 <__malloc_unlock>
 8008118:	42a3      	cmp	r3, r4
 800811a:	d908      	bls.n	800812e <_free_r+0x46>
 800811c:	6825      	ldr	r5, [r4, #0]
 800811e:	1961      	adds	r1, r4, r5
 8008120:	428b      	cmp	r3, r1
 8008122:	bf01      	itttt	eq
 8008124:	6819      	ldreq	r1, [r3, #0]
 8008126:	685b      	ldreq	r3, [r3, #4]
 8008128:	1949      	addeq	r1, r1, r5
 800812a:	6021      	streq	r1, [r4, #0]
 800812c:	e7ed      	b.n	800810a <_free_r+0x22>
 800812e:	461a      	mov	r2, r3
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	b10b      	cbz	r3, 8008138 <_free_r+0x50>
 8008134:	42a3      	cmp	r3, r4
 8008136:	d9fa      	bls.n	800812e <_free_r+0x46>
 8008138:	6811      	ldr	r1, [r2, #0]
 800813a:	1855      	adds	r5, r2, r1
 800813c:	42a5      	cmp	r5, r4
 800813e:	d10b      	bne.n	8008158 <_free_r+0x70>
 8008140:	6824      	ldr	r4, [r4, #0]
 8008142:	4421      	add	r1, r4
 8008144:	1854      	adds	r4, r2, r1
 8008146:	42a3      	cmp	r3, r4
 8008148:	6011      	str	r1, [r2, #0]
 800814a:	d1e0      	bne.n	800810e <_free_r+0x26>
 800814c:	681c      	ldr	r4, [r3, #0]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	6053      	str	r3, [r2, #4]
 8008152:	4421      	add	r1, r4
 8008154:	6011      	str	r1, [r2, #0]
 8008156:	e7da      	b.n	800810e <_free_r+0x26>
 8008158:	d902      	bls.n	8008160 <_free_r+0x78>
 800815a:	230c      	movs	r3, #12
 800815c:	6003      	str	r3, [r0, #0]
 800815e:	e7d6      	b.n	800810e <_free_r+0x26>
 8008160:	6825      	ldr	r5, [r4, #0]
 8008162:	1961      	adds	r1, r4, r5
 8008164:	428b      	cmp	r3, r1
 8008166:	bf04      	itt	eq
 8008168:	6819      	ldreq	r1, [r3, #0]
 800816a:	685b      	ldreq	r3, [r3, #4]
 800816c:	6063      	str	r3, [r4, #4]
 800816e:	bf04      	itt	eq
 8008170:	1949      	addeq	r1, r1, r5
 8008172:	6021      	streq	r1, [r4, #0]
 8008174:	6054      	str	r4, [r2, #4]
 8008176:	e7ca      	b.n	800810e <_free_r+0x26>
 8008178:	b003      	add	sp, #12
 800817a:	bd30      	pop	{r4, r5, pc}
 800817c:	20000950 	.word	0x20000950

08008180 <sbrk_aligned>:
 8008180:	b570      	push	{r4, r5, r6, lr}
 8008182:	4e0e      	ldr	r6, [pc, #56]	; (80081bc <sbrk_aligned+0x3c>)
 8008184:	460c      	mov	r4, r1
 8008186:	6831      	ldr	r1, [r6, #0]
 8008188:	4605      	mov	r5, r0
 800818a:	b911      	cbnz	r1, 8008192 <sbrk_aligned+0x12>
 800818c:	f000 f88c 	bl	80082a8 <_sbrk_r>
 8008190:	6030      	str	r0, [r6, #0]
 8008192:	4621      	mov	r1, r4
 8008194:	4628      	mov	r0, r5
 8008196:	f000 f887 	bl	80082a8 <_sbrk_r>
 800819a:	1c43      	adds	r3, r0, #1
 800819c:	d00a      	beq.n	80081b4 <sbrk_aligned+0x34>
 800819e:	1cc4      	adds	r4, r0, #3
 80081a0:	f024 0403 	bic.w	r4, r4, #3
 80081a4:	42a0      	cmp	r0, r4
 80081a6:	d007      	beq.n	80081b8 <sbrk_aligned+0x38>
 80081a8:	1a21      	subs	r1, r4, r0
 80081aa:	4628      	mov	r0, r5
 80081ac:	f000 f87c 	bl	80082a8 <_sbrk_r>
 80081b0:	3001      	adds	r0, #1
 80081b2:	d101      	bne.n	80081b8 <sbrk_aligned+0x38>
 80081b4:	f04f 34ff 	mov.w	r4, #4294967295
 80081b8:	4620      	mov	r0, r4
 80081ba:	bd70      	pop	{r4, r5, r6, pc}
 80081bc:	20000954 	.word	0x20000954

080081c0 <_malloc_r>:
 80081c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081c4:	1ccd      	adds	r5, r1, #3
 80081c6:	f025 0503 	bic.w	r5, r5, #3
 80081ca:	3508      	adds	r5, #8
 80081cc:	2d0c      	cmp	r5, #12
 80081ce:	bf38      	it	cc
 80081d0:	250c      	movcc	r5, #12
 80081d2:	2d00      	cmp	r5, #0
 80081d4:	4607      	mov	r7, r0
 80081d6:	db01      	blt.n	80081dc <_malloc_r+0x1c>
 80081d8:	42a9      	cmp	r1, r5
 80081da:	d905      	bls.n	80081e8 <_malloc_r+0x28>
 80081dc:	230c      	movs	r3, #12
 80081de:	603b      	str	r3, [r7, #0]
 80081e0:	2600      	movs	r6, #0
 80081e2:	4630      	mov	r0, r6
 80081e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081e8:	4e2e      	ldr	r6, [pc, #184]	; (80082a4 <_malloc_r+0xe4>)
 80081ea:	f000 f86d 	bl	80082c8 <__malloc_lock>
 80081ee:	6833      	ldr	r3, [r6, #0]
 80081f0:	461c      	mov	r4, r3
 80081f2:	bb34      	cbnz	r4, 8008242 <_malloc_r+0x82>
 80081f4:	4629      	mov	r1, r5
 80081f6:	4638      	mov	r0, r7
 80081f8:	f7ff ffc2 	bl	8008180 <sbrk_aligned>
 80081fc:	1c43      	adds	r3, r0, #1
 80081fe:	4604      	mov	r4, r0
 8008200:	d14d      	bne.n	800829e <_malloc_r+0xde>
 8008202:	6834      	ldr	r4, [r6, #0]
 8008204:	4626      	mov	r6, r4
 8008206:	2e00      	cmp	r6, #0
 8008208:	d140      	bne.n	800828c <_malloc_r+0xcc>
 800820a:	6823      	ldr	r3, [r4, #0]
 800820c:	4631      	mov	r1, r6
 800820e:	4638      	mov	r0, r7
 8008210:	eb04 0803 	add.w	r8, r4, r3
 8008214:	f000 f848 	bl	80082a8 <_sbrk_r>
 8008218:	4580      	cmp	r8, r0
 800821a:	d13a      	bne.n	8008292 <_malloc_r+0xd2>
 800821c:	6821      	ldr	r1, [r4, #0]
 800821e:	3503      	adds	r5, #3
 8008220:	1a6d      	subs	r5, r5, r1
 8008222:	f025 0503 	bic.w	r5, r5, #3
 8008226:	3508      	adds	r5, #8
 8008228:	2d0c      	cmp	r5, #12
 800822a:	bf38      	it	cc
 800822c:	250c      	movcc	r5, #12
 800822e:	4629      	mov	r1, r5
 8008230:	4638      	mov	r0, r7
 8008232:	f7ff ffa5 	bl	8008180 <sbrk_aligned>
 8008236:	3001      	adds	r0, #1
 8008238:	d02b      	beq.n	8008292 <_malloc_r+0xd2>
 800823a:	6823      	ldr	r3, [r4, #0]
 800823c:	442b      	add	r3, r5
 800823e:	6023      	str	r3, [r4, #0]
 8008240:	e00e      	b.n	8008260 <_malloc_r+0xa0>
 8008242:	6822      	ldr	r2, [r4, #0]
 8008244:	1b52      	subs	r2, r2, r5
 8008246:	d41e      	bmi.n	8008286 <_malloc_r+0xc6>
 8008248:	2a0b      	cmp	r2, #11
 800824a:	d916      	bls.n	800827a <_malloc_r+0xba>
 800824c:	1961      	adds	r1, r4, r5
 800824e:	42a3      	cmp	r3, r4
 8008250:	6025      	str	r5, [r4, #0]
 8008252:	bf18      	it	ne
 8008254:	6059      	strne	r1, [r3, #4]
 8008256:	6863      	ldr	r3, [r4, #4]
 8008258:	bf08      	it	eq
 800825a:	6031      	streq	r1, [r6, #0]
 800825c:	5162      	str	r2, [r4, r5]
 800825e:	604b      	str	r3, [r1, #4]
 8008260:	4638      	mov	r0, r7
 8008262:	f104 060b 	add.w	r6, r4, #11
 8008266:	f000 f835 	bl	80082d4 <__malloc_unlock>
 800826a:	f026 0607 	bic.w	r6, r6, #7
 800826e:	1d23      	adds	r3, r4, #4
 8008270:	1af2      	subs	r2, r6, r3
 8008272:	d0b6      	beq.n	80081e2 <_malloc_r+0x22>
 8008274:	1b9b      	subs	r3, r3, r6
 8008276:	50a3      	str	r3, [r4, r2]
 8008278:	e7b3      	b.n	80081e2 <_malloc_r+0x22>
 800827a:	6862      	ldr	r2, [r4, #4]
 800827c:	42a3      	cmp	r3, r4
 800827e:	bf0c      	ite	eq
 8008280:	6032      	streq	r2, [r6, #0]
 8008282:	605a      	strne	r2, [r3, #4]
 8008284:	e7ec      	b.n	8008260 <_malloc_r+0xa0>
 8008286:	4623      	mov	r3, r4
 8008288:	6864      	ldr	r4, [r4, #4]
 800828a:	e7b2      	b.n	80081f2 <_malloc_r+0x32>
 800828c:	4634      	mov	r4, r6
 800828e:	6876      	ldr	r6, [r6, #4]
 8008290:	e7b9      	b.n	8008206 <_malloc_r+0x46>
 8008292:	230c      	movs	r3, #12
 8008294:	603b      	str	r3, [r7, #0]
 8008296:	4638      	mov	r0, r7
 8008298:	f000 f81c 	bl	80082d4 <__malloc_unlock>
 800829c:	e7a1      	b.n	80081e2 <_malloc_r+0x22>
 800829e:	6025      	str	r5, [r4, #0]
 80082a0:	e7de      	b.n	8008260 <_malloc_r+0xa0>
 80082a2:	bf00      	nop
 80082a4:	20000950 	.word	0x20000950

080082a8 <_sbrk_r>:
 80082a8:	b538      	push	{r3, r4, r5, lr}
 80082aa:	4d06      	ldr	r5, [pc, #24]	; (80082c4 <_sbrk_r+0x1c>)
 80082ac:	2300      	movs	r3, #0
 80082ae:	4604      	mov	r4, r0
 80082b0:	4608      	mov	r0, r1
 80082b2:	602b      	str	r3, [r5, #0]
 80082b4:	f7f8 ff2a 	bl	800110c <_sbrk>
 80082b8:	1c43      	adds	r3, r0, #1
 80082ba:	d102      	bne.n	80082c2 <_sbrk_r+0x1a>
 80082bc:	682b      	ldr	r3, [r5, #0]
 80082be:	b103      	cbz	r3, 80082c2 <_sbrk_r+0x1a>
 80082c0:	6023      	str	r3, [r4, #0]
 80082c2:	bd38      	pop	{r3, r4, r5, pc}
 80082c4:	20000958 	.word	0x20000958

080082c8 <__malloc_lock>:
 80082c8:	4801      	ldr	r0, [pc, #4]	; (80082d0 <__malloc_lock+0x8>)
 80082ca:	f000 b809 	b.w	80082e0 <__retarget_lock_acquire_recursive>
 80082ce:	bf00      	nop
 80082d0:	2000095c 	.word	0x2000095c

080082d4 <__malloc_unlock>:
 80082d4:	4801      	ldr	r0, [pc, #4]	; (80082dc <__malloc_unlock+0x8>)
 80082d6:	f000 b804 	b.w	80082e2 <__retarget_lock_release_recursive>
 80082da:	bf00      	nop
 80082dc:	2000095c 	.word	0x2000095c

080082e0 <__retarget_lock_acquire_recursive>:
 80082e0:	4770      	bx	lr

080082e2 <__retarget_lock_release_recursive>:
 80082e2:	4770      	bx	lr

080082e4 <_init>:
 80082e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082e6:	bf00      	nop
 80082e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ea:	bc08      	pop	{r3}
 80082ec:	469e      	mov	lr, r3
 80082ee:	4770      	bx	lr

080082f0 <_fini>:
 80082f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082f2:	bf00      	nop
 80082f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082f6:	bc08      	pop	{r3}
 80082f8:	469e      	mov	lr, r3
 80082fa:	4770      	bx	lr
