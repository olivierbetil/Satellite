
Turbo_Sat_CSB_Fonctionnel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008af4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008c7c  08008c7c  00018c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c98  08008c98  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08008c98  08008c98  00018c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ca0  08008ca0  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ca0  08008ca0  00018ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ca4  08008ca4  00018ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08008ca8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020098  2**0
                  CONTENTS
 10 .bss          000008c8  20000098  20000098  00020098  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000960  20000960  00020098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ab83  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ea2  00000000  00000000  0003ac4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001458  00000000  00000000  0003eaf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012e8  00000000  00000000  0003ff48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024175  00000000  00000000  00041230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b80d  00000000  00000000  000653a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce161  00000000  00000000  00080bb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014ed13  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000056e0  00000000  00000000  0014ed64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000098 	.word	0x20000098
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008c64 	.word	0x08008c64

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000009c 	.word	0x2000009c
 80001c4:	08008c64 	.word	0x08008c64

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fe68 	bl	80011a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f832 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f98e 	bl	80007f8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004dc:	f000 f898 	bl	8000610 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004e0:	f000 f8c4 	bl	800066c <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e4:	f000 f8f2 	bl	80006cc <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e8:	f007 ffcc 	bl	8008484 <MX_USB_HOST_Init>
  MX_SPI2_Init();
 80004ec:	f000 f924 	bl	8000738 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80004f0:	f000 f958 	bl	80007a4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
   nrf24_Init();
 80004f4:	f000 fb44 	bl	8000b80 <nrf24_Init>
   nrf24_RxMode(Address, 10);
 80004f8:	210a      	movs	r1, #10
 80004fa:	480c      	ldr	r0, [pc, #48]	; (800052c <main+0x60>)
 80004fc:	f000 fb64 	bl	8000bc8 <nrf24_RxMode>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(isDataAvailable(1))
 8000500:	2001      	movs	r0, #1
 8000502:	f000 fb99 	bl	8000c38 <isDataAvailable>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d0f9      	beq.n	8000500 <main+0x34>
	  {
	  	nrf24_Receive(buffer);
 800050c:	4808      	ldr	r0, [pc, #32]	; (8000530 <main+0x64>)
 800050e:	f000 fbb3 	bl	8000c78 <nrf24_Receive>
	  	compteur+=1;
 8000512:	4b08      	ldr	r3, [pc, #32]	; (8000534 <main+0x68>)
 8000514:	881b      	ldrh	r3, [r3, #0]
 8000516:	3301      	adds	r3, #1
 8000518:	b29a      	uxth	r2, r3
 800051a:	4b06      	ldr	r3, [pc, #24]	; (8000534 <main+0x68>)
 800051c:	801a      	strh	r2, [r3, #0]
	  	HAL_UART_Transmit(&huart2, buffer, 32, 100);
 800051e:	2364      	movs	r3, #100	; 0x64
 8000520:	2220      	movs	r2, #32
 8000522:	4903      	ldr	r1, [pc, #12]	; (8000530 <main+0x64>)
 8000524:	4804      	ldr	r0, [pc, #16]	; (8000538 <main+0x6c>)
 8000526:	f004 ffcc 	bl	80054c2 <HAL_UART_Transmit>
	  if(isDataAvailable(1))
 800052a:	e7e9      	b.n	8000500 <main+0x34>
 800052c:	20000000 	.word	0x20000000
 8000530:	20000244 	.word	0x20000244
 8000534:	20000264 	.word	0x20000264
 8000538:	20000200 	.word	0x20000200

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b094      	sub	sp, #80	; 0x50
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0320 	add.w	r3, r7, #32
 8000546:	2230      	movs	r2, #48	; 0x30
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f008 fa84 	bl	8008a58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000560:	2300      	movs	r3, #0
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	4b28      	ldr	r3, [pc, #160]	; (8000608 <SystemClock_Config+0xcc>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	4a27      	ldr	r2, [pc, #156]	; (8000608 <SystemClock_Config+0xcc>)
 800056a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056e:	6413      	str	r3, [r2, #64]	; 0x40
 8000570:	4b25      	ldr	r3, [pc, #148]	; (8000608 <SystemClock_Config+0xcc>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800057c:	2300      	movs	r3, #0
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	4b22      	ldr	r3, [pc, #136]	; (800060c <SystemClock_Config+0xd0>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a21      	ldr	r2, [pc, #132]	; (800060c <SystemClock_Config+0xd0>)
 8000586:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800058a:	6013      	str	r3, [r2, #0]
 800058c:	4b1f      	ldr	r3, [pc, #124]	; (800060c <SystemClock_Config+0xd0>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000598:	2301      	movs	r3, #1
 800059a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800059c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a2:	2302      	movs	r3, #2
 80005a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005ac:	2308      	movs	r3, #8
 80005ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005b0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b6:	2302      	movs	r3, #2
 80005b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ba:	2307      	movs	r3, #7
 80005bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005be:	f107 0320 	add.w	r3, r7, #32
 80005c2:	4618      	mov	r0, r3
 80005c4:	f003 fbb0 	bl	8003d28 <HAL_RCC_OscConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005ce:	f000 fa25 	bl	8000a1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d2:	230f      	movs	r3, #15
 80005d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d6:	2302      	movs	r3, #2
 80005d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	2105      	movs	r1, #5
 80005f0:	4618      	mov	r0, r3
 80005f2:	f003 fe11 	bl	8004218 <HAL_RCC_ClockConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005fc:	f000 fa0e 	bl	8000a1c <Error_Handler>
  }
}
 8000600:	bf00      	nop
 8000602:	3750      	adds	r7, #80	; 0x50
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40023800 	.word	0x40023800
 800060c:	40007000 	.word	0x40007000

08000610 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <MX_I2C1_Init+0x50>)
 8000616:	4a13      	ldr	r2, [pc, #76]	; (8000664 <MX_I2C1_Init+0x54>)
 8000618:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800061a:	4b11      	ldr	r3, [pc, #68]	; (8000660 <MX_I2C1_Init+0x50>)
 800061c:	4a12      	ldr	r2, [pc, #72]	; (8000668 <MX_I2C1_Init+0x58>)
 800061e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000620:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <MX_I2C1_Init+0x50>)
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000626:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <MX_I2C1_Init+0x50>)
 8000628:	2200      	movs	r2, #0
 800062a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800062c:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <MX_I2C1_Init+0x50>)
 800062e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000632:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000634:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <MX_I2C1_Init+0x50>)
 8000636:	2200      	movs	r2, #0
 8000638:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <MX_I2C1_Init+0x50>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000640:	4b07      	ldr	r3, [pc, #28]	; (8000660 <MX_I2C1_Init+0x50>)
 8000642:	2200      	movs	r2, #0
 8000644:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000646:	4b06      	ldr	r3, [pc, #24]	; (8000660 <MX_I2C1_Init+0x50>)
 8000648:	2200      	movs	r2, #0
 800064a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800064c:	4804      	ldr	r0, [pc, #16]	; (8000660 <MX_I2C1_Init+0x50>)
 800064e:	f002 fd87 	bl	8003160 <HAL_I2C_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000658:	f000 f9e0 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	200000b4 	.word	0x200000b4
 8000664:	40005400 	.word	0x40005400
 8000668:	000186a0 	.word	0x000186a0

0800066c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000670:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <MX_I2S3_Init+0x54>)
 8000672:	4a14      	ldr	r2, [pc, #80]	; (80006c4 <MX_I2S3_Init+0x58>)
 8000674:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000676:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <MX_I2S3_Init+0x54>)
 8000678:	f44f 7200 	mov.w	r2, #512	; 0x200
 800067c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800067e:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <MX_I2S3_Init+0x54>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000684:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <MX_I2S3_Init+0x54>)
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800068a:	4b0d      	ldr	r3, [pc, #52]	; (80006c0 <MX_I2S3_Init+0x54>)
 800068c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000690:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000692:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <MX_I2S3_Init+0x54>)
 8000694:	4a0c      	ldr	r2, [pc, #48]	; (80006c8 <MX_I2S3_Init+0x5c>)
 8000696:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000698:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <MX_I2S3_Init+0x54>)
 800069a:	2200      	movs	r2, #0
 800069c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800069e:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <MX_I2S3_Init+0x54>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <MX_I2S3_Init+0x54>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006aa:	4805      	ldr	r0, [pc, #20]	; (80006c0 <MX_I2S3_Init+0x54>)
 80006ac:	f002 fe9c 	bl	80033e8 <HAL_I2S_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006b6:	f000 f9b1 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000108 	.word	0x20000108
 80006c4:	40003c00 	.word	0x40003c00
 80006c8:	00017700 	.word	0x00017700

080006cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006d0:	4b17      	ldr	r3, [pc, #92]	; (8000730 <MX_SPI1_Init+0x64>)
 80006d2:	4a18      	ldr	r2, [pc, #96]	; (8000734 <MX_SPI1_Init+0x68>)
 80006d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006d6:	4b16      	ldr	r3, [pc, #88]	; (8000730 <MX_SPI1_Init+0x64>)
 80006d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006de:	4b14      	ldr	r3, [pc, #80]	; (8000730 <MX_SPI1_Init+0x64>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <MX_SPI1_Init+0x64>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ea:	4b11      	ldr	r3, [pc, #68]	; (8000730 <MX_SPI1_Init+0x64>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006f0:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <MX_SPI1_Init+0x64>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <MX_SPI1_Init+0x64>)
 80006f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006fe:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <MX_SPI1_Init+0x64>)
 8000700:	2200      	movs	r2, #0
 8000702:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000704:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <MX_SPI1_Init+0x64>)
 8000706:	2200      	movs	r2, #0
 8000708:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800070a:	4b09      	ldr	r3, [pc, #36]	; (8000730 <MX_SPI1_Init+0x64>)
 800070c:	2200      	movs	r2, #0
 800070e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000710:	4b07      	ldr	r3, [pc, #28]	; (8000730 <MX_SPI1_Init+0x64>)
 8000712:	2200      	movs	r2, #0
 8000714:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <MX_SPI1_Init+0x64>)
 8000718:	220a      	movs	r2, #10
 800071a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800071c:	4804      	ldr	r0, [pc, #16]	; (8000730 <MX_SPI1_Init+0x64>)
 800071e:	f004 f8db 	bl	80048d8 <HAL_SPI_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000728:	f000 f978 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000150 	.word	0x20000150
 8000734:	40013000 	.word	0x40013000

08000738 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800073c:	4b17      	ldr	r3, [pc, #92]	; (800079c <MX_SPI2_Init+0x64>)
 800073e:	4a18      	ldr	r2, [pc, #96]	; (80007a0 <MX_SPI2_Init+0x68>)
 8000740:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000742:	4b16      	ldr	r3, [pc, #88]	; (800079c <MX_SPI2_Init+0x64>)
 8000744:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000748:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800074a:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_SPI2_Init+0x64>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <MX_SPI2_Init+0x64>)
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_SPI2_Init+0x64>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_SPI2_Init+0x64>)
 800075e:	2200      	movs	r2, #0
 8000760:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_SPI2_Init+0x64>)
 8000764:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000768:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800076a:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_SPI2_Init+0x64>)
 800076c:	2218      	movs	r2, #24
 800076e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000770:	4b0a      	ldr	r3, [pc, #40]	; (800079c <MX_SPI2_Init+0x64>)
 8000772:	2200      	movs	r2, #0
 8000774:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_SPI2_Init+0x64>)
 8000778:	2200      	movs	r2, #0
 800077a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800077c:	4b07      	ldr	r3, [pc, #28]	; (800079c <MX_SPI2_Init+0x64>)
 800077e:	2200      	movs	r2, #0
 8000780:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_SPI2_Init+0x64>)
 8000784:	220a      	movs	r2, #10
 8000786:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000788:	4804      	ldr	r0, [pc, #16]	; (800079c <MX_SPI2_Init+0x64>)
 800078a:	f004 f8a5 	bl	80048d8 <HAL_SPI_Init>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000794:	f000 f942 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	200001a8 	.word	0x200001a8
 80007a0:	40003800 	.word	0x40003800

080007a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007a8:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007aa:	4a12      	ldr	r2, [pc, #72]	; (80007f4 <MX_USART2_UART_Init+0x50>)
 80007ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ae:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c8:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007ca:	220c      	movs	r2, #12
 80007cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ce:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007da:	4805      	ldr	r0, [pc, #20]	; (80007f0 <MX_USART2_UART_Init+0x4c>)
 80007dc:	f004 fe24 	bl	8005428 <HAL_UART_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007e6:	f000 f919 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000200 	.word	0x20000200
 80007f4:	40004400 	.word	0x40004400

080007f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08c      	sub	sp, #48	; 0x30
 80007fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	61bb      	str	r3, [r7, #24]
 8000812:	4b7c      	ldr	r3, [pc, #496]	; (8000a04 <MX_GPIO_Init+0x20c>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a7b      	ldr	r2, [pc, #492]	; (8000a04 <MX_GPIO_Init+0x20c>)
 8000818:	f043 0310 	orr.w	r3, r3, #16
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b79      	ldr	r3, [pc, #484]	; (8000a04 <MX_GPIO_Init+0x20c>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0310 	and.w	r3, r3, #16
 8000826:	61bb      	str	r3, [r7, #24]
 8000828:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
 800082e:	4b75      	ldr	r3, [pc, #468]	; (8000a04 <MX_GPIO_Init+0x20c>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a74      	ldr	r2, [pc, #464]	; (8000a04 <MX_GPIO_Init+0x20c>)
 8000834:	f043 0304 	orr.w	r3, r3, #4
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b72      	ldr	r3, [pc, #456]	; (8000a04 <MX_GPIO_Init+0x20c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0304 	and.w	r3, r3, #4
 8000842:	617b      	str	r3, [r7, #20]
 8000844:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]
 800084a:	4b6e      	ldr	r3, [pc, #440]	; (8000a04 <MX_GPIO_Init+0x20c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a6d      	ldr	r2, [pc, #436]	; (8000a04 <MX_GPIO_Init+0x20c>)
 8000850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b6b      	ldr	r3, [pc, #428]	; (8000a04 <MX_GPIO_Init+0x20c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	4b67      	ldr	r3, [pc, #412]	; (8000a04 <MX_GPIO_Init+0x20c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a66      	ldr	r2, [pc, #408]	; (8000a04 <MX_GPIO_Init+0x20c>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b64      	ldr	r3, [pc, #400]	; (8000a04 <MX_GPIO_Init+0x20c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	4b60      	ldr	r3, [pc, #384]	; (8000a04 <MX_GPIO_Init+0x20c>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a5f      	ldr	r2, [pc, #380]	; (8000a04 <MX_GPIO_Init+0x20c>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b5d      	ldr	r3, [pc, #372]	; (8000a04 <MX_GPIO_Init+0x20c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0302 	and.w	r3, r3, #2
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	4b59      	ldr	r3, [pc, #356]	; (8000a04 <MX_GPIO_Init+0x20c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a58      	ldr	r2, [pc, #352]	; (8000a04 <MX_GPIO_Init+0x20c>)
 80008a4:	f043 0308 	orr.w	r3, r3, #8
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b56      	ldr	r3, [pc, #344]	; (8000a04 <MX_GPIO_Init+0x20c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0308 	and.w	r3, r3, #8
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2108      	movs	r1, #8
 80008ba:	4853      	ldr	r0, [pc, #332]	; (8000a08 <MX_GPIO_Init+0x210>)
 80008bc:	f001 f848 	bl	8001950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008c0:	2201      	movs	r2, #1
 80008c2:	2101      	movs	r1, #1
 80008c4:	4851      	ldr	r0, [pc, #324]	; (8000a0c <MX_GPIO_Init+0x214>)
 80008c6:	f001 f843 	bl	8001950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80008d0:	484f      	ldr	r0, [pc, #316]	; (8000a10 <MX_GPIO_Init+0x218>)
 80008d2:	f001 f83d 	bl	8001950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008d6:	2200      	movs	r2, #0
 80008d8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008dc:	484d      	ldr	r0, [pc, #308]	; (8000a14 <MX_GPIO_Init+0x21c>)
 80008de:	f001 f837 	bl	8001950 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008e2:	2308      	movs	r3, #8
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e6:	2301      	movs	r3, #1
 80008e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	4619      	mov	r1, r3
 80008f8:	4843      	ldr	r0, [pc, #268]	; (8000a08 <MX_GPIO_Init+0x210>)
 80008fa:	f000 fe8d 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008fe:	2301      	movs	r3, #1
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000902:	2301      	movs	r3, #1
 8000904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	483d      	ldr	r0, [pc, #244]	; (8000a0c <MX_GPIO_Init+0x214>)
 8000916:	f000 fe7f 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800091a:	2308      	movs	r3, #8
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091e:	2302      	movs	r3, #2
 8000920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800092a:	2305      	movs	r3, #5
 800092c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	4835      	ldr	r0, [pc, #212]	; (8000a0c <MX_GPIO_Init+0x214>)
 8000936:	f000 fe6f 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800093a:	2301      	movs	r3, #1
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800093e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	4832      	ldr	r0, [pc, #200]	; (8000a18 <MX_GPIO_Init+0x220>)
 8000950:	f000 fe62 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000954:	2304      	movs	r3, #4
 8000956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000958:	2300      	movs	r3, #0
 800095a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	4619      	mov	r1, r3
 8000966:	482a      	ldr	r0, [pc, #168]	; (8000a10 <MX_GPIO_Init+0x218>)
 8000968:	f000 fe56 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800096c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000972:	2302      	movs	r3, #2
 8000974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800097e:	2305      	movs	r3, #5
 8000980:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4619      	mov	r1, r3
 8000988:	4821      	ldr	r0, [pc, #132]	; (8000a10 <MX_GPIO_Init+0x218>)
 800098a:	f000 fe45 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800098e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000994:	2301      	movs	r3, #1
 8000996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099c:	2300      	movs	r3, #0
 800099e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	4619      	mov	r1, r3
 80009a6:	481a      	ldr	r0, [pc, #104]	; (8000a10 <MX_GPIO_Init+0x218>)
 80009a8:	f000 fe36 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009ac:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009b0:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	4813      	ldr	r0, [pc, #76]	; (8000a14 <MX_GPIO_Init+0x21c>)
 80009c6:	f000 fe27 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009ca:	2320      	movs	r3, #32
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ce:	2300      	movs	r3, #0
 80009d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4619      	mov	r1, r3
 80009dc:	480d      	ldr	r0, [pc, #52]	; (8000a14 <MX_GPIO_Init+0x21c>)
 80009de:	f000 fe1b 	bl	8001618 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009e2:	2302      	movs	r3, #2
 80009e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009e6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	4619      	mov	r1, r3
 80009f6:	4804      	ldr	r0, [pc, #16]	; (8000a08 <MX_GPIO_Init+0x210>)
 80009f8:	f000 fe0e 	bl	8001618 <HAL_GPIO_Init>

}
 80009fc:	bf00      	nop
 80009fe:	3730      	adds	r7, #48	; 0x30
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	40020800 	.word	0x40020800
 8000a10:	40020400 	.word	0x40020400
 8000a14:	40020c00 	.word	0x40020c00
 8000a18:	40020000 	.word	0x40020000

08000a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a20:	b672      	cpsid	i
}
 8000a22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <Error_Handler+0x8>
	...

08000a28 <selectCS>:
#define SPI_CS_PIN			GPIO_PIN_12

/**
 * @brief met le pin CS a 0
 */
void selectCS(void){
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI_CS_GPIO, SPI_CS_PIN, GPIO_PIN_RESET);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a32:	4802      	ldr	r0, [pc, #8]	; (8000a3c <selectCS+0x14>)
 8000a34:	f000 ff8c 	bl	8001950 <HAL_GPIO_WritePin>
}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40020400 	.word	0x40020400

08000a40 <unselectCS>:

/**
 * @brief met le pin CS a 1
 */
void unselectCS(void){
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI_CS_GPIO, SPI_CS_PIN, GPIO_PIN_SET);
 8000a44:	2201      	movs	r2, #1
 8000a46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a4a:	4802      	ldr	r0, [pc, #8]	; (8000a54 <unselectCS+0x14>)
 8000a4c:	f000 ff80 	bl	8001950 <HAL_GPIO_WritePin>
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40020400 	.word	0x40020400

08000a58 <enableCE>:

/**
 * @brief met le pin CE a 1
 */
void enableCE(void){
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI_CE_GPIO, SPI_CE_PIN, GPIO_PIN_SET);
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a62:	4802      	ldr	r0, [pc, #8]	; (8000a6c <enableCE+0x14>)
 8000a64:	f000 ff74 	bl	8001950 <HAL_GPIO_WritePin>
}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40020400 	.word	0x40020400

08000a70 <disableCE>:

/**
 * @brief met le pin CE a 0
 */
void disableCE(void){
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI_CE_GPIO, SPI_CE_PIN, GPIO_PIN_RESET);
 8000a74:	2200      	movs	r2, #0
 8000a76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a7a:	4802      	ldr	r0, [pc, #8]	; (8000a84 <disableCE+0x14>)
 8000a7c:	f000 ff68 	bl	8001950 <HAL_GPIO_WritePin>
}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40020400 	.word	0x40020400

08000a88 <nrf24_WriteReg>:
 * @brief Ecrit une valeur dans un registre du module
 *
 * @param Reg : Registre a modifier
 * @param Data : Donnee a ecrire dans le registre
 */
void nrf24_WriteReg(uint8_t Reg, uint8_t Data){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	460a      	mov	r2, r1
 8000a92:	71fb      	strb	r3, [r7, #7]
 8000a94:	4613      	mov	r3, r2
 8000a96:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0]=Reg|1<<5;
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	f043 0320 	orr.w	r3, r3, #32
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	733b      	strb	r3, [r7, #12]
	buf[1]=Data;
 8000aa2:	79bb      	ldrb	r3, [r7, #6]
 8000aa4:	737b      	strb	r3, [r7, #13]

	selectCS();
 8000aa6:	f7ff ffbf 	bl	8000a28 <selectCS>
	HAL_SPI_Transmit(SPI_PROTO, buf, 2, 100);
 8000aaa:	f107 010c 	add.w	r1, r7, #12
 8000aae:	2364      	movs	r3, #100	; 0x64
 8000ab0:	2202      	movs	r2, #2
 8000ab2:	4804      	ldr	r0, [pc, #16]	; (8000ac4 <nrf24_WriteReg+0x3c>)
 8000ab4:	f003 ff99 	bl	80049ea <HAL_SPI_Transmit>
	unselectCS();
 8000ab8:	f7ff ffc2 	bl	8000a40 <unselectCS>
}
 8000abc:	bf00      	nop
 8000abe:	3710      	adds	r7, #16
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	200001a8 	.word	0x200001a8

08000ac8 <nrf24_WriteRegMulti>:
 *
 * @param Reg : Registre a modifier
 * @param Data : Donnee a ecrire dans le registre
 * @param size : Taille de la donnee (en octets)
 */
void nrf24_WriteRegMulti(uint8_t Reg, uint8_t *Data, uint8_t size){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	6039      	str	r1, [r7, #0]
 8000ad2:	71fb      	strb	r3, [r7, #7]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0]=Reg|1<<5;
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	f043 0320 	orr.w	r3, r3, #32
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	733b      	strb	r3, [r7, #12]
	//buf[1]=Data;

	selectCS();
 8000ae2:	f7ff ffa1 	bl	8000a28 <selectCS>
	HAL_SPI_Transmit(SPI_PROTO, &buf[0], 1, 100);
 8000ae6:	f107 010c 	add.w	r1, r7, #12
 8000aea:	2364      	movs	r3, #100	; 0x64
 8000aec:	2201      	movs	r2, #1
 8000aee:	4808      	ldr	r0, [pc, #32]	; (8000b10 <nrf24_WriteRegMulti+0x48>)
 8000af0:	f003 ff7b 	bl	80049ea <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_PROTO, Data, size, 100);
 8000af4:	79bb      	ldrb	r3, [r7, #6]
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	2364      	movs	r3, #100	; 0x64
 8000afa:	6839      	ldr	r1, [r7, #0]
 8000afc:	4804      	ldr	r0, [pc, #16]	; (8000b10 <nrf24_WriteRegMulti+0x48>)
 8000afe:	f003 ff74 	bl	80049ea <HAL_SPI_Transmit>

	unselectCS();
 8000b02:	f7ff ff9d 	bl	8000a40 <unselectCS>
}
 8000b06:	bf00      	nop
 8000b08:	3710      	adds	r7, #16
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	200001a8 	.word	0x200001a8

08000b14 <nrf24_ReadReg>:
 * @brief lit la valeur d'un registre du module
 *
 * @param Reg : Registre ou l'on veut lire la valeur
 * @return la valeur du registre
 */
uint8_t nrf24_ReadReg(uint8_t Reg){
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	73fb      	strb	r3, [r7, #15]
	selectCS();
 8000b22:	f7ff ff81 	bl	8000a28 <selectCS>
	HAL_SPI_Transmit(SPI_PROTO, &Reg, 1, 100);
 8000b26:	1df9      	adds	r1, r7, #7
 8000b28:	2364      	movs	r3, #100	; 0x64
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	4808      	ldr	r0, [pc, #32]	; (8000b50 <nrf24_ReadReg+0x3c>)
 8000b2e:	f003 ff5c 	bl	80049ea <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_PROTO, &data, 1, 100);
 8000b32:	f107 010f 	add.w	r1, r7, #15
 8000b36:	2364      	movs	r3, #100	; 0x64
 8000b38:	2201      	movs	r2, #1
 8000b3a:	4805      	ldr	r0, [pc, #20]	; (8000b50 <nrf24_ReadReg+0x3c>)
 8000b3c:	f004 f891 	bl	8004c62 <HAL_SPI_Receive>
	unselectCS();
 8000b40:	f7ff ff7e 	bl	8000a40 <unselectCS>
	return data;
 8000b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3710      	adds	r7, #16
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	200001a8 	.word	0x200001a8

08000b54 <nrfsendcmd>:
/**
 * @brief Envoie une commande au module
 *
 * @param cmd : Commande a envoyer (voir datasheet module pour liste des commandes)
 */
void nrfsendcmd(uint8_t cmd){
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]
	selectCS();
 8000b5e:	f7ff ff63 	bl	8000a28 <selectCS>
	HAL_SPI_Transmit(SPI_PROTO, &cmd, 1, 100);
 8000b62:	1df9      	adds	r1, r7, #7
 8000b64:	2364      	movs	r3, #100	; 0x64
 8000b66:	2201      	movs	r2, #1
 8000b68:	4804      	ldr	r0, [pc, #16]	; (8000b7c <nrfsendcmd+0x28>)
 8000b6a:	f003 ff3e 	bl	80049ea <HAL_SPI_Transmit>
	unselectCS();
 8000b6e:	f7ff ff67 	bl	8000a40 <unselectCS>
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	200001a8 	.word	0x200001a8

08000b80 <nrf24_Init>:

/**
 * @brief Initialise les diff�rents registre du module
 */
void nrf24_Init(void){
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
	disableCE();
 8000b84:	f7ff ff74 	bl	8000a70 <disableCE>
	nrf24_WriteReg(CONFIG, 0);
 8000b88:	2100      	movs	r1, #0
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	f7ff ff7c 	bl	8000a88 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0);
 8000b90:	2100      	movs	r1, #0
 8000b92:	2001      	movs	r0, #1
 8000b94:	f7ff ff78 	bl	8000a88 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0);
 8000b98:	2100      	movs	r1, #0
 8000b9a:	2002      	movs	r0, #2
 8000b9c:	f7ff ff74 	bl	8000a88 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 8000ba0:	2103      	movs	r1, #3
 8000ba2:	2003      	movs	r0, #3
 8000ba4:	f7ff ff70 	bl	8000a88 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0);
 8000ba8:	2100      	movs	r1, #0
 8000baa:	2004      	movs	r0, #4
 8000bac:	f7ff ff6c 	bl	8000a88 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0);
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	2005      	movs	r0, #5
 8000bb4:	f7ff ff68 	bl	8000a88 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0e);
 8000bb8:	210e      	movs	r1, #14
 8000bba:	2006      	movs	r0, #6
 8000bbc:	f7ff ff64 	bl	8000a88 <nrf24_WriteReg>
	enableCE();
 8000bc0:	f7ff ff4a 	bl	8000a58 <enableCE>
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <nrf24_RxMode>:
 * @brief initialise le module en mode Rx (reception de donnees)
 *
 * @param Address : l'adresse du module
 * @param channel : chaine du module (mettre 10)
 */
void nrf24_RxMode(uint8_t *Address, uint8_t channel){
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	460b      	mov	r3, r1
 8000bd2:	70fb      	strb	r3, [r7, #3]
	disableCE();
 8000bd4:	f7ff ff4c 	bl	8000a70 <disableCE>
	nrf24_WriteReg(RF_CH, channel);
 8000bd8:	78fb      	ldrb	r3, [r7, #3]
 8000bda:	4619      	mov	r1, r3
 8000bdc:	2005      	movs	r0, #5
 8000bde:	f7ff ff53 	bl	8000a88 <nrf24_WriteReg>

	uint8_t en_rxaddr=nrf24_ReadReg(EN_RXADDR);
 8000be2:	2002      	movs	r0, #2
 8000be4:	f7ff ff96 	bl	8000b14 <nrf24_ReadReg>
 8000be8:	4603      	mov	r3, r0
 8000bea:	73fb      	strb	r3, [r7, #15]
	en_rxaddr=en_rxaddr | (1<<1);
 8000bec:	7bfb      	ldrb	r3, [r7, #15]
 8000bee:	f043 0302 	orr.w	r3, r3, #2
 8000bf2:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg(EN_RXADDR, en_rxaddr);
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	2002      	movs	r0, #2
 8000bfa:	f7ff ff45 	bl	8000a88 <nrf24_WriteReg>
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);
 8000bfe:	2205      	movs	r2, #5
 8000c00:	6879      	ldr	r1, [r7, #4]
 8000c02:	200b      	movs	r0, #11
 8000c04:	f7ff ff60 	bl	8000ac8 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P1, 32); //Set up la taille maximale de la donnee a recuperer
 8000c08:	2120      	movs	r1, #32
 8000c0a:	2012      	movs	r0, #18
 8000c0c:	f7ff ff3c 	bl	8000a88 <nrf24_WriteReg>

	//power up the device in RX mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 8000c10:	2000      	movs	r0, #0
 8000c12:	f7ff ff7f 	bl	8000b14 <nrf24_ReadReg>
 8000c16:	4603      	mov	r3, r0
 8000c18:	73bb      	strb	r3, [r7, #14]
	config=config | (1<<1) | (1<<0);
 8000c1a:	7bbb      	ldrb	r3, [r7, #14]
 8000c1c:	f043 0303 	orr.w	r3, r3, #3
 8000c20:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg(CONFIG, config);
 8000c22:	7bbb      	ldrb	r3, [r7, #14]
 8000c24:	4619      	mov	r1, r3
 8000c26:	2000      	movs	r0, #0
 8000c28:	f7ff ff2e 	bl	8000a88 <nrf24_WriteReg>
	enableCE();
 8000c2c:	f7ff ff14 	bl	8000a58 <enableCE>
}
 8000c30:	bf00      	nop
 8000c32:	3710      	adds	r7, #16
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <isDataAvailable>:
 * @brief observe si une donnee est arrivee dans la pipe
 *
 * @param pipenum : pipe a scuter
 * @return true : donnee disponible; false : pas de donnee
 */
uint8_t isDataAvailable(uint8_t pipenum){
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
	uint8_t status = nrf24_ReadReg(STATUS);
 8000c42:	2007      	movs	r0, #7
 8000c44:	f7ff ff66 	bl	8000b14 <nrf24_ReadReg>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	73fb      	strb	r3, [r7, #15]

	//uint8_t check = nrf24_ReadReg(RF_SETUP);

	if((status&(1<<6)) && (status&(pipenum<<1))){
 8000c4c:	7bfb      	ldrb	r3, [r7, #15]
 8000c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d00b      	beq.n	8000c6e <isDataAvailable+0x36>
 8000c56:	7bfa      	ldrb	r2, [r7, #15]
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d005      	beq.n	8000c6e <isDataAvailable+0x36>
		nrf24_WriteReg(STATUS, (1<<6));
 8000c62:	2140      	movs	r1, #64	; 0x40
 8000c64:	2007      	movs	r0, #7
 8000c66:	f7ff ff0f 	bl	8000a88 <nrf24_WriteReg>
		return 1;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e000      	b.n	8000c70 <isDataAvailable+0x38>
	}
	else
		return 0;
 8000c6e:	2300      	movs	r3, #0
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3710      	adds	r7, #16
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <nrf24_Receive>:
/**
 * @brief recupere la donnee dans la pipe 1
 *
 * @param data pointeur vers la ou l'on veut stocker la donnee (32 bits)
 */
void nrf24_Receive(uint8_t *data){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	73fb      	strb	r3, [r7, #15]
	selectCS();
 8000c84:	f7ff fed0 	bl	8000a28 <selectCS>

	cmdtosend=R_RX_PAYLOAD;
 8000c88:	2361      	movs	r3, #97	; 0x61
 8000c8a:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(SPI_PROTO, &cmdtosend, 1, 100);
 8000c8c:	f107 010f 	add.w	r1, r7, #15
 8000c90:	2364      	movs	r3, #100	; 0x64
 8000c92:	2201      	movs	r2, #1
 8000c94:	480b      	ldr	r0, [pc, #44]	; (8000cc4 <nrf24_Receive+0x4c>)
 8000c96:	f003 fea8 	bl	80049ea <HAL_SPI_Transmit>

	HAL_SPI_Receive(SPI_PROTO, data, 32, 100);
 8000c9a:	2364      	movs	r3, #100	; 0x64
 8000c9c:	2220      	movs	r2, #32
 8000c9e:	6879      	ldr	r1, [r7, #4]
 8000ca0:	4808      	ldr	r0, [pc, #32]	; (8000cc4 <nrf24_Receive+0x4c>)
 8000ca2:	f003 ffde 	bl	8004c62 <HAL_SPI_Receive>

	unselectCS();
 8000ca6:	f7ff fecb 	bl	8000a40 <unselectCS>

	HAL_Delay(1);
 8000caa:	2001      	movs	r0, #1
 8000cac:	f000 faec 	bl	8001288 <HAL_Delay>

	cmdtosend=FLUSH_RX;
 8000cb0:	23e2      	movs	r3, #226	; 0xe2
 8000cb2:	73fb      	strb	r3, [r7, #15]
	nrfsendcmd(cmdtosend);
 8000cb4:	7bfb      	ldrb	r3, [r7, #15]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff ff4c 	bl	8000b54 <nrfsendcmd>
}
 8000cbc:	bf00      	nop
 8000cbe:	3710      	adds	r7, #16
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	200001a8 	.word	0x200001a8

08000cc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	607b      	str	r3, [r7, #4]
 8000cd2:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <HAL_MspInit+0x4c>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd6:	4a0f      	ldr	r2, [pc, #60]	; (8000d14 <HAL_MspInit+0x4c>)
 8000cd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cde:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <HAL_MspInit+0x4c>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	603b      	str	r3, [r7, #0]
 8000cee:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <HAL_MspInit+0x4c>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf2:	4a08      	ldr	r2, [pc, #32]	; (8000d14 <HAL_MspInit+0x4c>)
 8000cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <HAL_MspInit+0x4c>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d02:	603b      	str	r3, [r7, #0]
 8000d04:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d06:	2007      	movs	r0, #7
 8000d08:	f000 fbb2 	bl	8001470 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40023800 	.word	0x40023800

08000d18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08a      	sub	sp, #40	; 0x28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a19      	ldr	r2, [pc, #100]	; (8000d9c <HAL_I2C_MspInit+0x84>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d12c      	bne.n	8000d94 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]
 8000d3e:	4b18      	ldr	r3, [pc, #96]	; (8000da0 <HAL_I2C_MspInit+0x88>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a17      	ldr	r2, [pc, #92]	; (8000da0 <HAL_I2C_MspInit+0x88>)
 8000d44:	f043 0302 	orr.w	r3, r3, #2
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <HAL_I2C_MspInit+0x88>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0302 	and.w	r3, r3, #2
 8000d52:	613b      	str	r3, [r7, #16]
 8000d54:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d56:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d5c:	2312      	movs	r3, #18
 8000d5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d60:	2301      	movs	r3, #1
 8000d62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d64:	2300      	movs	r3, #0
 8000d66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d68:	2304      	movs	r3, #4
 8000d6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	4619      	mov	r1, r3
 8000d72:	480c      	ldr	r0, [pc, #48]	; (8000da4 <HAL_I2C_MspInit+0x8c>)
 8000d74:	f000 fc50 	bl	8001618 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <HAL_I2C_MspInit+0x88>)
 8000d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d80:	4a07      	ldr	r2, [pc, #28]	; (8000da0 <HAL_I2C_MspInit+0x88>)
 8000d82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d86:	6413      	str	r3, [r2, #64]	; 0x40
 8000d88:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <HAL_I2C_MspInit+0x88>)
 8000d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d94:	bf00      	nop
 8000d96:	3728      	adds	r7, #40	; 0x28
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40005400 	.word	0x40005400
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40020400 	.word	0x40020400

08000da8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08e      	sub	sp, #56	; 0x38
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a31      	ldr	r2, [pc, #196]	; (8000e98 <HAL_I2S_MspInit+0xf0>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d15a      	bne.n	8000e8e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000ddc:	23c0      	movs	r3, #192	; 0xc0
 8000dde:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000de0:	2302      	movs	r3, #2
 8000de2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	4618      	mov	r0, r3
 8000dea:	f003 fc35 	bl	8004658 <HAL_RCCEx_PeriphCLKConfig>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000df4:	f7ff fe12 	bl	8000a1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000df8:	2300      	movs	r3, #0
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	4b27      	ldr	r3, [pc, #156]	; (8000e9c <HAL_I2S_MspInit+0xf4>)
 8000dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e00:	4a26      	ldr	r2, [pc, #152]	; (8000e9c <HAL_I2S_MspInit+0xf4>)
 8000e02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e06:	6413      	str	r3, [r2, #64]	; 0x40
 8000e08:	4b24      	ldr	r3, [pc, #144]	; (8000e9c <HAL_I2S_MspInit+0xf4>)
 8000e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e14:	2300      	movs	r3, #0
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	4b20      	ldr	r3, [pc, #128]	; (8000e9c <HAL_I2S_MspInit+0xf4>)
 8000e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1c:	4a1f      	ldr	r2, [pc, #124]	; (8000e9c <HAL_I2S_MspInit+0xf4>)
 8000e1e:	f043 0301 	orr.w	r3, r3, #1
 8000e22:	6313      	str	r3, [r2, #48]	; 0x30
 8000e24:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <HAL_I2S_MspInit+0xf4>)
 8000e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e28:	f003 0301 	and.w	r3, r3, #1
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e30:	2300      	movs	r3, #0
 8000e32:	60bb      	str	r3, [r7, #8]
 8000e34:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <HAL_I2S_MspInit+0xf4>)
 8000e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e38:	4a18      	ldr	r2, [pc, #96]	; (8000e9c <HAL_I2S_MspInit+0xf4>)
 8000e3a:	f043 0304 	orr.w	r3, r3, #4
 8000e3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e40:	4b16      	ldr	r3, [pc, #88]	; (8000e9c <HAL_I2S_MspInit+0xf4>)
 8000e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e44:	f003 0304 	and.w	r3, r3, #4
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000e4c:	2310      	movs	r3, #16
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e5c:	2306      	movs	r3, #6
 8000e5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000e60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e64:	4619      	mov	r1, r3
 8000e66:	480e      	ldr	r0, [pc, #56]	; (8000ea0 <HAL_I2S_MspInit+0xf8>)
 8000e68:	f000 fbd6 	bl	8001618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000e6c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e7e:	2306      	movs	r3, #6
 8000e80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e86:	4619      	mov	r1, r3
 8000e88:	4806      	ldr	r0, [pc, #24]	; (8000ea4 <HAL_I2S_MspInit+0xfc>)
 8000e8a:	f000 fbc5 	bl	8001618 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e8e:	bf00      	nop
 8000e90:	3738      	adds	r7, #56	; 0x38
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40003c00 	.word	0x40003c00
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	40020000 	.word	0x40020000
 8000ea4:	40020800 	.word	0x40020800

08000ea8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08c      	sub	sp, #48	; 0x30
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	f107 031c 	add.w	r3, r7, #28
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a32      	ldr	r2, [pc, #200]	; (8000f90 <HAL_SPI_MspInit+0xe8>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d12c      	bne.n	8000f24 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61bb      	str	r3, [r7, #24]
 8000ece:	4b31      	ldr	r3, [pc, #196]	; (8000f94 <HAL_SPI_MspInit+0xec>)
 8000ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed2:	4a30      	ldr	r2, [pc, #192]	; (8000f94 <HAL_SPI_MspInit+0xec>)
 8000ed4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eda:	4b2e      	ldr	r3, [pc, #184]	; (8000f94 <HAL_SPI_MspInit+0xec>)
 8000edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ede:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ee2:	61bb      	str	r3, [r7, #24]
 8000ee4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]
 8000eea:	4b2a      	ldr	r3, [pc, #168]	; (8000f94 <HAL_SPI_MspInit+0xec>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a29      	ldr	r2, [pc, #164]	; (8000f94 <HAL_SPI_MspInit+0xec>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b27      	ldr	r3, [pc, #156]	; (8000f94 <HAL_SPI_MspInit+0xec>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000f02:	23e0      	movs	r3, #224	; 0xe0
 8000f04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	2302      	movs	r3, #2
 8000f08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f12:	2305      	movs	r3, #5
 8000f14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f16:	f107 031c 	add.w	r3, r7, #28
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	481e      	ldr	r0, [pc, #120]	; (8000f98 <HAL_SPI_MspInit+0xf0>)
 8000f1e:	f000 fb7b 	bl	8001618 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000f22:	e031      	b.n	8000f88 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a1c      	ldr	r2, [pc, #112]	; (8000f9c <HAL_SPI_MspInit+0xf4>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d12c      	bne.n	8000f88 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	613b      	str	r3, [r7, #16]
 8000f32:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <HAL_SPI_MspInit+0xec>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	4a17      	ldr	r2, [pc, #92]	; (8000f94 <HAL_SPI_MspInit+0xec>)
 8000f38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3e:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <HAL_SPI_MspInit+0xec>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <HAL_SPI_MspInit+0xec>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4a10      	ldr	r2, [pc, #64]	; (8000f94 <HAL_SPI_MspInit+0xec>)
 8000f54:	f043 0302 	orr.w	r3, r3, #2
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <HAL_SPI_MspInit+0xec>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	f003 0302 	and.w	r3, r3, #2
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000f66:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000f6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f74:	2303      	movs	r3, #3
 8000f76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f78:	2305      	movs	r3, #5
 8000f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7c:	f107 031c 	add.w	r3, r7, #28
 8000f80:	4619      	mov	r1, r3
 8000f82:	4807      	ldr	r0, [pc, #28]	; (8000fa0 <HAL_SPI_MspInit+0xf8>)
 8000f84:	f000 fb48 	bl	8001618 <HAL_GPIO_Init>
}
 8000f88:	bf00      	nop
 8000f8a:	3730      	adds	r7, #48	; 0x30
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40013000 	.word	0x40013000
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40020000 	.word	0x40020000
 8000f9c:	40003800 	.word	0x40003800
 8000fa0:	40020400 	.word	0x40020400

08000fa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08a      	sub	sp, #40	; 0x28
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a1d      	ldr	r2, [pc, #116]	; (8001038 <HAL_UART_MspInit+0x94>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d133      	bne.n	800102e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	613b      	str	r3, [r7, #16]
 8000fca:	4b1c      	ldr	r3, [pc, #112]	; (800103c <HAL_UART_MspInit+0x98>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	4a1b      	ldr	r2, [pc, #108]	; (800103c <HAL_UART_MspInit+0x98>)
 8000fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd6:	4b19      	ldr	r3, [pc, #100]	; (800103c <HAL_UART_MspInit+0x98>)
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	4b15      	ldr	r3, [pc, #84]	; (800103c <HAL_UART_MspInit+0x98>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a14      	ldr	r2, [pc, #80]	; (800103c <HAL_UART_MspInit+0x98>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b12      	ldr	r3, [pc, #72]	; (800103c <HAL_UART_MspInit+0x98>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ffe:	230c      	movs	r3, #12
 8001000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001002:	2302      	movs	r3, #2
 8001004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100a:	2303      	movs	r3, #3
 800100c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800100e:	2307      	movs	r3, #7
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	4619      	mov	r1, r3
 8001018:	4809      	ldr	r0, [pc, #36]	; (8001040 <HAL_UART_MspInit+0x9c>)
 800101a:	f000 fafd 	bl	8001618 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800101e:	2200      	movs	r2, #0
 8001020:	2100      	movs	r1, #0
 8001022:	2026      	movs	r0, #38	; 0x26
 8001024:	f000 fa2f 	bl	8001486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001028:	2026      	movs	r0, #38	; 0x26
 800102a:	f000 fa48 	bl	80014be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800102e:	bf00      	nop
 8001030:	3728      	adds	r7, #40	; 0x28
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40004400 	.word	0x40004400
 800103c:	40023800 	.word	0x40023800
 8001040:	40020000 	.word	0x40020000

08001044 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001048:	e7fe      	b.n	8001048 <NMI_Handler+0x4>

0800104a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800104e:	e7fe      	b.n	800104e <HardFault_Handler+0x4>

08001050 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001054:	e7fe      	b.n	8001054 <MemManage_Handler+0x4>

08001056 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800105a:	e7fe      	b.n	800105a <BusFault_Handler+0x4>

0800105c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <UsageFault_Handler+0x4>

08001062 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001090:	f000 f8da 	bl	8001248 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}

08001098 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800109c:	4802      	ldr	r0, [pc, #8]	; (80010a8 <USART2_IRQHandler+0x10>)
 800109e:	f004 faa3 	bl	80055e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000200 	.word	0x20000200

080010ac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80010b0:	4802      	ldr	r0, [pc, #8]	; (80010bc <OTG_FS_IRQHandler+0x10>)
 80010b2:	f000 fed1 	bl	8001e58 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	2000064c 	.word	0x2000064c

080010c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010c8:	4a14      	ldr	r2, [pc, #80]	; (800111c <_sbrk+0x5c>)
 80010ca:	4b15      	ldr	r3, [pc, #84]	; (8001120 <_sbrk+0x60>)
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010d4:	4b13      	ldr	r3, [pc, #76]	; (8001124 <_sbrk+0x64>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d102      	bne.n	80010e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010dc:	4b11      	ldr	r3, [pc, #68]	; (8001124 <_sbrk+0x64>)
 80010de:	4a12      	ldr	r2, [pc, #72]	; (8001128 <_sbrk+0x68>)
 80010e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010e2:	4b10      	ldr	r3, [pc, #64]	; (8001124 <_sbrk+0x64>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4413      	add	r3, r2
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d207      	bcs.n	8001100 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010f0:	f007 fc78 	bl	80089e4 <__errno>
 80010f4:	4603      	mov	r3, r0
 80010f6:	220c      	movs	r2, #12
 80010f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295
 80010fe:	e009      	b.n	8001114 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001100:	4b08      	ldr	r3, [pc, #32]	; (8001124 <_sbrk+0x64>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001106:	4b07      	ldr	r3, [pc, #28]	; (8001124 <_sbrk+0x64>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4413      	add	r3, r2
 800110e:	4a05      	ldr	r2, [pc, #20]	; (8001124 <_sbrk+0x64>)
 8001110:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001112:	68fb      	ldr	r3, [r7, #12]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3718      	adds	r7, #24
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20020000 	.word	0x20020000
 8001120:	00000400 	.word	0x00000400
 8001124:	20000268 	.word	0x20000268
 8001128:	20000960 	.word	0x20000960

0800112c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <SystemInit+0x20>)
 8001132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001136:	4a05      	ldr	r2, [pc, #20]	; (800114c <SystemInit+0x20>)
 8001138:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800113c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001150:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001188 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001154:	480d      	ldr	r0, [pc, #52]	; (800118c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001156:	490e      	ldr	r1, [pc, #56]	; (8001190 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001158:	4a0e      	ldr	r2, [pc, #56]	; (8001194 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800115a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800115c:	e002      	b.n	8001164 <LoopCopyDataInit>

0800115e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800115e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001160:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001162:	3304      	adds	r3, #4

08001164 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001164:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001166:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001168:	d3f9      	bcc.n	800115e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800116a:	4a0b      	ldr	r2, [pc, #44]	; (8001198 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800116c:	4c0b      	ldr	r4, [pc, #44]	; (800119c <LoopFillZerobss+0x26>)
  movs r3, #0
 800116e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001170:	e001      	b.n	8001176 <LoopFillZerobss>

08001172 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001172:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001174:	3204      	adds	r2, #4

08001176 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001176:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001178:	d3fb      	bcc.n	8001172 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800117a:	f7ff ffd7 	bl	800112c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800117e:	f007 fc37 	bl	80089f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001182:	f7ff f9a3 	bl	80004cc <main>
  bx  lr    
 8001186:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001188:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800118c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001190:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001194:	08008ca8 	.word	0x08008ca8
  ldr r2, =_sbss
 8001198:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 800119c:	20000960 	.word	0x20000960

080011a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011a0:	e7fe      	b.n	80011a0 <ADC_IRQHandler>
	...

080011a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011a8:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <HAL_Init+0x40>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a0d      	ldr	r2, [pc, #52]	; (80011e4 <HAL_Init+0x40>)
 80011ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011b4:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <HAL_Init+0x40>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a0a      	ldr	r2, [pc, #40]	; (80011e4 <HAL_Init+0x40>)
 80011ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c0:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <HAL_Init+0x40>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a07      	ldr	r2, [pc, #28]	; (80011e4 <HAL_Init+0x40>)
 80011c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011cc:	2003      	movs	r0, #3
 80011ce:	f000 f94f 	bl	8001470 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011d2:	2000      	movs	r0, #0
 80011d4:	f000 f808 	bl	80011e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011d8:	f7ff fd76 	bl	8000cc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40023c00 	.word	0x40023c00

080011e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011f0:	4b12      	ldr	r3, [pc, #72]	; (800123c <HAL_InitTick+0x54>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4b12      	ldr	r3, [pc, #72]	; (8001240 <HAL_InitTick+0x58>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	4619      	mov	r1, r3
 80011fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001202:	fbb2 f3f3 	udiv	r3, r2, r3
 8001206:	4618      	mov	r0, r3
 8001208:	f000 f967 	bl	80014da <HAL_SYSTICK_Config>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e00e      	b.n	8001234 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2b0f      	cmp	r3, #15
 800121a:	d80a      	bhi.n	8001232 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800121c:	2200      	movs	r2, #0
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	f04f 30ff 	mov.w	r0, #4294967295
 8001224:	f000 f92f 	bl	8001486 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001228:	4a06      	ldr	r2, [pc, #24]	; (8001244 <HAL_InitTick+0x5c>)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800122e:	2300      	movs	r3, #0
 8001230:	e000      	b.n	8001234 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
}
 8001234:	4618      	mov	r0, r3
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000008 	.word	0x20000008
 8001240:	20000010 	.word	0x20000010
 8001244:	2000000c 	.word	0x2000000c

08001248 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <HAL_IncTick+0x20>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	461a      	mov	r2, r3
 8001252:	4b06      	ldr	r3, [pc, #24]	; (800126c <HAL_IncTick+0x24>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4413      	add	r3, r2
 8001258:	4a04      	ldr	r2, [pc, #16]	; (800126c <HAL_IncTick+0x24>)
 800125a:	6013      	str	r3, [r2, #0]
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	20000010 	.word	0x20000010
 800126c:	2000026c 	.word	0x2000026c

08001270 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return uwTick;
 8001274:	4b03      	ldr	r3, [pc, #12]	; (8001284 <HAL_GetTick+0x14>)
 8001276:	681b      	ldr	r3, [r3, #0]
}
 8001278:	4618      	mov	r0, r3
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	2000026c 	.word	0x2000026c

08001288 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001290:	f7ff ffee 	bl	8001270 <HAL_GetTick>
 8001294:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a0:	d005      	beq.n	80012ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012a2:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <HAL_Delay+0x44>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	461a      	mov	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	4413      	add	r3, r2
 80012ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012ae:	bf00      	nop
 80012b0:	f7ff ffde 	bl	8001270 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d8f7      	bhi.n	80012b0 <HAL_Delay+0x28>
  {
  }
}
 80012c0:	bf00      	nop
 80012c2:	bf00      	nop
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000010 	.word	0x20000010

080012d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e0:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <__NVIC_SetPriorityGrouping+0x44>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e6:	68ba      	ldr	r2, [r7, #8]
 80012e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012ec:	4013      	ands	r3, r2
 80012ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001302:	4a04      	ldr	r2, [pc, #16]	; (8001314 <__NVIC_SetPriorityGrouping+0x44>)
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	60d3      	str	r3, [r2, #12]
}
 8001308:	bf00      	nop
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800131c:	4b04      	ldr	r3, [pc, #16]	; (8001330 <__NVIC_GetPriorityGrouping+0x18>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	0a1b      	lsrs	r3, r3, #8
 8001322:	f003 0307 	and.w	r3, r3, #7
}
 8001326:	4618      	mov	r0, r3
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	2b00      	cmp	r3, #0
 8001344:	db0b      	blt.n	800135e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	f003 021f 	and.w	r2, r3, #31
 800134c:	4907      	ldr	r1, [pc, #28]	; (800136c <__NVIC_EnableIRQ+0x38>)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	095b      	lsrs	r3, r3, #5
 8001354:	2001      	movs	r0, #1
 8001356:	fa00 f202 	lsl.w	r2, r0, r2
 800135a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000e100 	.word	0xe000e100

08001370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	6039      	str	r1, [r7, #0]
 800137a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001380:	2b00      	cmp	r3, #0
 8001382:	db0a      	blt.n	800139a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	b2da      	uxtb	r2, r3
 8001388:	490c      	ldr	r1, [pc, #48]	; (80013bc <__NVIC_SetPriority+0x4c>)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	0112      	lsls	r2, r2, #4
 8001390:	b2d2      	uxtb	r2, r2
 8001392:	440b      	add	r3, r1
 8001394:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001398:	e00a      	b.n	80013b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	b2da      	uxtb	r2, r3
 800139e:	4908      	ldr	r1, [pc, #32]	; (80013c0 <__NVIC_SetPriority+0x50>)
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	f003 030f 	and.w	r3, r3, #15
 80013a6:	3b04      	subs	r3, #4
 80013a8:	0112      	lsls	r2, r2, #4
 80013aa:	b2d2      	uxtb	r2, r2
 80013ac:	440b      	add	r3, r1
 80013ae:	761a      	strb	r2, [r3, #24]
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	e000e100 	.word	0xe000e100
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b089      	sub	sp, #36	; 0x24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	f1c3 0307 	rsb	r3, r3, #7
 80013de:	2b04      	cmp	r3, #4
 80013e0:	bf28      	it	cs
 80013e2:	2304      	movcs	r3, #4
 80013e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3304      	adds	r3, #4
 80013ea:	2b06      	cmp	r3, #6
 80013ec:	d902      	bls.n	80013f4 <NVIC_EncodePriority+0x30>
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3b03      	subs	r3, #3
 80013f2:	e000      	b.n	80013f6 <NVIC_EncodePriority+0x32>
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f8:	f04f 32ff 	mov.w	r2, #4294967295
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43da      	mvns	r2, r3
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	401a      	ands	r2, r3
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800140c:	f04f 31ff 	mov.w	r1, #4294967295
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	fa01 f303 	lsl.w	r3, r1, r3
 8001416:	43d9      	mvns	r1, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800141c:	4313      	orrs	r3, r2
         );
}
 800141e:	4618      	mov	r0, r3
 8001420:	3724      	adds	r7, #36	; 0x24
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
	...

0800142c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3b01      	subs	r3, #1
 8001438:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800143c:	d301      	bcc.n	8001442 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800143e:	2301      	movs	r3, #1
 8001440:	e00f      	b.n	8001462 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001442:	4a0a      	ldr	r2, [pc, #40]	; (800146c <SysTick_Config+0x40>)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3b01      	subs	r3, #1
 8001448:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800144a:	210f      	movs	r1, #15
 800144c:	f04f 30ff 	mov.w	r0, #4294967295
 8001450:	f7ff ff8e 	bl	8001370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <SysTick_Config+0x40>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800145a:	4b04      	ldr	r3, [pc, #16]	; (800146c <SysTick_Config+0x40>)
 800145c:	2207      	movs	r2, #7
 800145e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	e000e010 	.word	0xe000e010

08001470 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff ff29 	bl	80012d0 <__NVIC_SetPriorityGrouping>
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001486:	b580      	push	{r7, lr}
 8001488:	b086      	sub	sp, #24
 800148a:	af00      	add	r7, sp, #0
 800148c:	4603      	mov	r3, r0
 800148e:	60b9      	str	r1, [r7, #8]
 8001490:	607a      	str	r2, [r7, #4]
 8001492:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001498:	f7ff ff3e 	bl	8001318 <__NVIC_GetPriorityGrouping>
 800149c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	68b9      	ldr	r1, [r7, #8]
 80014a2:	6978      	ldr	r0, [r7, #20]
 80014a4:	f7ff ff8e 	bl	80013c4 <NVIC_EncodePriority>
 80014a8:	4602      	mov	r2, r0
 80014aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ae:	4611      	mov	r1, r2
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff ff5d 	bl	8001370 <__NVIC_SetPriority>
}
 80014b6:	bf00      	nop
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	4603      	mov	r3, r0
 80014c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff31 	bl	8001334 <__NVIC_EnableIRQ>
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff ffa2 	bl	800142c <SysTick_Config>
 80014e8:	4603      	mov	r3, r0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b084      	sub	sp, #16
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001500:	f7ff feb6 	bl	8001270 <HAL_GetTick>
 8001504:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d008      	beq.n	8001524 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2280      	movs	r2, #128	; 0x80
 8001516:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e052      	b.n	80015ca <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f022 0216 	bic.w	r2, r2, #22
 8001532:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	695a      	ldr	r2, [r3, #20]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001542:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001548:	2b00      	cmp	r3, #0
 800154a:	d103      	bne.n	8001554 <HAL_DMA_Abort+0x62>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001550:	2b00      	cmp	r3, #0
 8001552:	d007      	beq.n	8001564 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f022 0208 	bic.w	r2, r2, #8
 8001562:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f022 0201 	bic.w	r2, r2, #1
 8001572:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001574:	e013      	b.n	800159e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001576:	f7ff fe7b 	bl	8001270 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b05      	cmp	r3, #5
 8001582:	d90c      	bls.n	800159e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2220      	movs	r2, #32
 8001588:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2203      	movs	r2, #3
 800158e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e015      	b.n	80015ca <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0301 	and.w	r3, r3, #1
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d1e4      	bne.n	8001576 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b0:	223f      	movs	r2, #63	; 0x3f
 80015b2:	409a      	lsls	r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2201      	movs	r2, #1
 80015bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b083      	sub	sp, #12
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d004      	beq.n	80015f0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2280      	movs	r2, #128	; 0x80
 80015ea:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e00c      	b.n	800160a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2205      	movs	r2, #5
 80015f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f022 0201 	bic.w	r2, r2, #1
 8001606:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
	...

08001618 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001618:	b480      	push	{r7}
 800161a:	b089      	sub	sp, #36	; 0x24
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001622:	2300      	movs	r3, #0
 8001624:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001626:	2300      	movs	r3, #0
 8001628:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800162a:	2300      	movs	r3, #0
 800162c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800162e:	2300      	movs	r3, #0
 8001630:	61fb      	str	r3, [r7, #28]
 8001632:	e16b      	b.n	800190c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001634:	2201      	movs	r2, #1
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	697a      	ldr	r2, [r7, #20]
 8001644:	4013      	ands	r3, r2
 8001646:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	429a      	cmp	r2, r3
 800164e:	f040 815a 	bne.w	8001906 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f003 0303 	and.w	r3, r3, #3
 800165a:	2b01      	cmp	r3, #1
 800165c:	d005      	beq.n	800166a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001666:	2b02      	cmp	r3, #2
 8001668:	d130      	bne.n	80016cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	2203      	movs	r2, #3
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43db      	mvns	r3, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4013      	ands	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	68da      	ldr	r2, [r3, #12]
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4313      	orrs	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016a0:	2201      	movs	r2, #1
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	43db      	mvns	r3, r3
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4013      	ands	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	091b      	lsrs	r3, r3, #4
 80016b6:	f003 0201 	and.w	r2, r3, #1
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f003 0303 	and.w	r3, r3, #3
 80016d4:	2b03      	cmp	r3, #3
 80016d6:	d017      	beq.n	8001708 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	2203      	movs	r2, #3
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	43db      	mvns	r3, r3
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	4013      	ands	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	689a      	ldr	r2, [r3, #8]
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4313      	orrs	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 0303 	and.w	r3, r3, #3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d123      	bne.n	800175c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	08da      	lsrs	r2, r3, #3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3208      	adds	r2, #8
 800171c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001720:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	f003 0307 	and.w	r3, r3, #7
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	220f      	movs	r2, #15
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	43db      	mvns	r3, r3
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	4013      	ands	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	691a      	ldr	r2, [r3, #16]
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4313      	orrs	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	08da      	lsrs	r2, r3, #3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	3208      	adds	r2, #8
 8001756:	69b9      	ldr	r1, [r7, #24]
 8001758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	2203      	movs	r2, #3
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4013      	ands	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 0203 	and.w	r2, r3, #3
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4313      	orrs	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001798:	2b00      	cmp	r3, #0
 800179a:	f000 80b4 	beq.w	8001906 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	4b60      	ldr	r3, [pc, #384]	; (8001924 <HAL_GPIO_Init+0x30c>)
 80017a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a6:	4a5f      	ldr	r2, [pc, #380]	; (8001924 <HAL_GPIO_Init+0x30c>)
 80017a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ac:	6453      	str	r3, [r2, #68]	; 0x44
 80017ae:	4b5d      	ldr	r3, [pc, #372]	; (8001924 <HAL_GPIO_Init+0x30c>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017ba:	4a5b      	ldr	r2, [pc, #364]	; (8001928 <HAL_GPIO_Init+0x310>)
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	089b      	lsrs	r3, r3, #2
 80017c0:	3302      	adds	r3, #2
 80017c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	f003 0303 	and.w	r3, r3, #3
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	220f      	movs	r2, #15
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43db      	mvns	r3, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4013      	ands	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a52      	ldr	r2, [pc, #328]	; (800192c <HAL_GPIO_Init+0x314>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d02b      	beq.n	800183e <HAL_GPIO_Init+0x226>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a51      	ldr	r2, [pc, #324]	; (8001930 <HAL_GPIO_Init+0x318>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d025      	beq.n	800183a <HAL_GPIO_Init+0x222>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a50      	ldr	r2, [pc, #320]	; (8001934 <HAL_GPIO_Init+0x31c>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d01f      	beq.n	8001836 <HAL_GPIO_Init+0x21e>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a4f      	ldr	r2, [pc, #316]	; (8001938 <HAL_GPIO_Init+0x320>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d019      	beq.n	8001832 <HAL_GPIO_Init+0x21a>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a4e      	ldr	r2, [pc, #312]	; (800193c <HAL_GPIO_Init+0x324>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d013      	beq.n	800182e <HAL_GPIO_Init+0x216>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a4d      	ldr	r2, [pc, #308]	; (8001940 <HAL_GPIO_Init+0x328>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d00d      	beq.n	800182a <HAL_GPIO_Init+0x212>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a4c      	ldr	r2, [pc, #304]	; (8001944 <HAL_GPIO_Init+0x32c>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d007      	beq.n	8001826 <HAL_GPIO_Init+0x20e>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a4b      	ldr	r2, [pc, #300]	; (8001948 <HAL_GPIO_Init+0x330>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d101      	bne.n	8001822 <HAL_GPIO_Init+0x20a>
 800181e:	2307      	movs	r3, #7
 8001820:	e00e      	b.n	8001840 <HAL_GPIO_Init+0x228>
 8001822:	2308      	movs	r3, #8
 8001824:	e00c      	b.n	8001840 <HAL_GPIO_Init+0x228>
 8001826:	2306      	movs	r3, #6
 8001828:	e00a      	b.n	8001840 <HAL_GPIO_Init+0x228>
 800182a:	2305      	movs	r3, #5
 800182c:	e008      	b.n	8001840 <HAL_GPIO_Init+0x228>
 800182e:	2304      	movs	r3, #4
 8001830:	e006      	b.n	8001840 <HAL_GPIO_Init+0x228>
 8001832:	2303      	movs	r3, #3
 8001834:	e004      	b.n	8001840 <HAL_GPIO_Init+0x228>
 8001836:	2302      	movs	r3, #2
 8001838:	e002      	b.n	8001840 <HAL_GPIO_Init+0x228>
 800183a:	2301      	movs	r3, #1
 800183c:	e000      	b.n	8001840 <HAL_GPIO_Init+0x228>
 800183e:	2300      	movs	r3, #0
 8001840:	69fa      	ldr	r2, [r7, #28]
 8001842:	f002 0203 	and.w	r2, r2, #3
 8001846:	0092      	lsls	r2, r2, #2
 8001848:	4093      	lsls	r3, r2
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4313      	orrs	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001850:	4935      	ldr	r1, [pc, #212]	; (8001928 <HAL_GPIO_Init+0x310>)
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	089b      	lsrs	r3, r3, #2
 8001856:	3302      	adds	r3, #2
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800185e:	4b3b      	ldr	r3, [pc, #236]	; (800194c <HAL_GPIO_Init+0x334>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	43db      	mvns	r3, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4013      	ands	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	4313      	orrs	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001882:	4a32      	ldr	r2, [pc, #200]	; (800194c <HAL_GPIO_Init+0x334>)
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001888:	4b30      	ldr	r3, [pc, #192]	; (800194c <HAL_GPIO_Init+0x334>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	43db      	mvns	r3, r3
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	4013      	ands	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d003      	beq.n	80018ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018ac:	4a27      	ldr	r2, [pc, #156]	; (800194c <HAL_GPIO_Init+0x334>)
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018b2:	4b26      	ldr	r3, [pc, #152]	; (800194c <HAL_GPIO_Init+0x334>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	43db      	mvns	r3, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4013      	ands	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d003      	beq.n	80018d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018d6:	4a1d      	ldr	r2, [pc, #116]	; (800194c <HAL_GPIO_Init+0x334>)
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018dc:	4b1b      	ldr	r3, [pc, #108]	; (800194c <HAL_GPIO_Init+0x334>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	43db      	mvns	r3, r3
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4013      	ands	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d003      	beq.n	8001900 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001900:	4a12      	ldr	r2, [pc, #72]	; (800194c <HAL_GPIO_Init+0x334>)
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	3301      	adds	r3, #1
 800190a:	61fb      	str	r3, [r7, #28]
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	2b0f      	cmp	r3, #15
 8001910:	f67f ae90 	bls.w	8001634 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001914:	bf00      	nop
 8001916:	bf00      	nop
 8001918:	3724      	adds	r7, #36	; 0x24
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	40023800 	.word	0x40023800
 8001928:	40013800 	.word	0x40013800
 800192c:	40020000 	.word	0x40020000
 8001930:	40020400 	.word	0x40020400
 8001934:	40020800 	.word	0x40020800
 8001938:	40020c00 	.word	0x40020c00
 800193c:	40021000 	.word	0x40021000
 8001940:	40021400 	.word	0x40021400
 8001944:	40021800 	.word	0x40021800
 8001948:	40021c00 	.word	0x40021c00
 800194c:	40013c00 	.word	0x40013c00

08001950 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	807b      	strh	r3, [r7, #2]
 800195c:	4613      	mov	r3, r2
 800195e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001960:	787b      	ldrb	r3, [r7, #1]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001966:	887a      	ldrh	r2, [r7, #2]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800196c:	e003      	b.n	8001976 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800196e:	887b      	ldrh	r3, [r7, #2]
 8001970:	041a      	lsls	r2, r3, #16
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	619a      	str	r2, [r3, #24]
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001982:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001984:	b08f      	sub	sp, #60	; 0x3c
 8001986:	af0a      	add	r7, sp, #40	; 0x28
 8001988:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d101      	bne.n	8001994 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e054      	b.n	8001a3e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d106      	bne.n	80019b4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f006 fdbc 	bl	800852c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2203      	movs	r2, #3
 80019b8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d102      	bne.n	80019ce <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f004 fdae 	bl	8006534 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	603b      	str	r3, [r7, #0]
 80019de:	687e      	ldr	r6, [r7, #4]
 80019e0:	466d      	mov	r5, sp
 80019e2:	f106 0410 	add.w	r4, r6, #16
 80019e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80019f6:	1d33      	adds	r3, r6, #4
 80019f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019fa:	6838      	ldr	r0, [r7, #0]
 80019fc:	f004 fd28 	bl	8006450 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2101      	movs	r1, #1
 8001a06:	4618      	mov	r0, r3
 8001a08:	f004 fda5 	bl	8006556 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	603b      	str	r3, [r7, #0]
 8001a12:	687e      	ldr	r6, [r7, #4]
 8001a14:	466d      	mov	r5, sp
 8001a16:	f106 0410 	add.w	r4, r6, #16
 8001a1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a22:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a26:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a2a:	1d33      	adds	r3, r6, #4
 8001a2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a2e:	6838      	ldr	r0, [r7, #0]
 8001a30:	f004 ff2e 	bl	8006890 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3714      	adds	r7, #20
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a46 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001a46:	b590      	push	{r4, r7, lr}
 8001a48:	b089      	sub	sp, #36	; 0x24
 8001a4a:	af04      	add	r7, sp, #16
 8001a4c:	6078      	str	r0, [r7, #4]
 8001a4e:	4608      	mov	r0, r1
 8001a50:	4611      	mov	r1, r2
 8001a52:	461a      	mov	r2, r3
 8001a54:	4603      	mov	r3, r0
 8001a56:	70fb      	strb	r3, [r7, #3]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	70bb      	strb	r3, [r7, #2]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d101      	bne.n	8001a6e <HAL_HCD_HC_Init+0x28>
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	e076      	b.n	8001b5c <HAL_HCD_HC_Init+0x116>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2201      	movs	r2, #1
 8001a72:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001a76:	78fb      	ldrb	r3, [r7, #3]
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	212c      	movs	r1, #44	; 0x2c
 8001a7c:	fb01 f303 	mul.w	r3, r1, r3
 8001a80:	4413      	add	r3, r2
 8001a82:	333d      	adds	r3, #61	; 0x3d
 8001a84:	2200      	movs	r2, #0
 8001a86:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001a88:	78fb      	ldrb	r3, [r7, #3]
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	212c      	movs	r1, #44	; 0x2c
 8001a8e:	fb01 f303 	mul.w	r3, r1, r3
 8001a92:	4413      	add	r3, r2
 8001a94:	3338      	adds	r3, #56	; 0x38
 8001a96:	787a      	ldrb	r2, [r7, #1]
 8001a98:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001a9a:	78fb      	ldrb	r3, [r7, #3]
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	212c      	movs	r1, #44	; 0x2c
 8001aa0:	fb01 f303 	mul.w	r3, r1, r3
 8001aa4:	4413      	add	r3, r2
 8001aa6:	3340      	adds	r3, #64	; 0x40
 8001aa8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001aaa:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001aac:	78fb      	ldrb	r3, [r7, #3]
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	212c      	movs	r1, #44	; 0x2c
 8001ab2:	fb01 f303 	mul.w	r3, r1, r3
 8001ab6:	4413      	add	r3, r2
 8001ab8:	3339      	adds	r3, #57	; 0x39
 8001aba:	78fa      	ldrb	r2, [r7, #3]
 8001abc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001abe:	78fb      	ldrb	r3, [r7, #3]
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	212c      	movs	r1, #44	; 0x2c
 8001ac4:	fb01 f303 	mul.w	r3, r1, r3
 8001ac8:	4413      	add	r3, r2
 8001aca:	333f      	adds	r3, #63	; 0x3f
 8001acc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001ad0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001ad2:	78fb      	ldrb	r3, [r7, #3]
 8001ad4:	78ba      	ldrb	r2, [r7, #2]
 8001ad6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ada:	b2d0      	uxtb	r0, r2
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	212c      	movs	r1, #44	; 0x2c
 8001ae0:	fb01 f303 	mul.w	r3, r1, r3
 8001ae4:	4413      	add	r3, r2
 8001ae6:	333a      	adds	r3, #58	; 0x3a
 8001ae8:	4602      	mov	r2, r0
 8001aea:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001aec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	da09      	bge.n	8001b08 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001af4:	78fb      	ldrb	r3, [r7, #3]
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	212c      	movs	r1, #44	; 0x2c
 8001afa:	fb01 f303 	mul.w	r3, r1, r3
 8001afe:	4413      	add	r3, r2
 8001b00:	333b      	adds	r3, #59	; 0x3b
 8001b02:	2201      	movs	r2, #1
 8001b04:	701a      	strb	r2, [r3, #0]
 8001b06:	e008      	b.n	8001b1a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001b08:	78fb      	ldrb	r3, [r7, #3]
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	212c      	movs	r1, #44	; 0x2c
 8001b0e:	fb01 f303 	mul.w	r3, r1, r3
 8001b12:	4413      	add	r3, r2
 8001b14:	333b      	adds	r3, #59	; 0x3b
 8001b16:	2200      	movs	r2, #0
 8001b18:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001b1a:	78fb      	ldrb	r3, [r7, #3]
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	212c      	movs	r1, #44	; 0x2c
 8001b20:	fb01 f303 	mul.w	r3, r1, r3
 8001b24:	4413      	add	r3, r2
 8001b26:	333c      	adds	r3, #60	; 0x3c
 8001b28:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001b2c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6818      	ldr	r0, [r3, #0]
 8001b32:	787c      	ldrb	r4, [r7, #1]
 8001b34:	78ba      	ldrb	r2, [r7, #2]
 8001b36:	78f9      	ldrb	r1, [r7, #3]
 8001b38:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b3a:	9302      	str	r3, [sp, #8]
 8001b3c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001b40:	9301      	str	r3, [sp, #4]
 8001b42:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	4623      	mov	r3, r4
 8001b4a:	f004 fffd 	bl	8006b48 <USB_HC_Init>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd90      	pop	{r4, r7, pc}

08001b64 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001b70:	2300      	movs	r3, #0
 8001b72:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d101      	bne.n	8001b82 <HAL_HCD_HC_Halt+0x1e>
 8001b7e:	2302      	movs	r3, #2
 8001b80:	e00f      	b.n	8001ba2 <HAL_HCD_HC_Halt+0x3e>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	78fa      	ldrb	r2, [r7, #3]
 8001b90:	4611      	mov	r1, r2
 8001b92:	4618      	mov	r0, r3
 8001b94:	f005 fa4d 	bl	8007032 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
	...

08001bac <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	4608      	mov	r0, r1
 8001bb6:	4611      	mov	r1, r2
 8001bb8:	461a      	mov	r2, r3
 8001bba:	4603      	mov	r3, r0
 8001bbc:	70fb      	strb	r3, [r7, #3]
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	70bb      	strb	r3, [r7, #2]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001bc6:	78fb      	ldrb	r3, [r7, #3]
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	212c      	movs	r1, #44	; 0x2c
 8001bcc:	fb01 f303 	mul.w	r3, r1, r3
 8001bd0:	4413      	add	r3, r2
 8001bd2:	333b      	adds	r3, #59	; 0x3b
 8001bd4:	78ba      	ldrb	r2, [r7, #2]
 8001bd6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001bd8:	78fb      	ldrb	r3, [r7, #3]
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	212c      	movs	r1, #44	; 0x2c
 8001bde:	fb01 f303 	mul.w	r3, r1, r3
 8001be2:	4413      	add	r3, r2
 8001be4:	333f      	adds	r3, #63	; 0x3f
 8001be6:	787a      	ldrb	r2, [r7, #1]
 8001be8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001bea:	7c3b      	ldrb	r3, [r7, #16]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d112      	bne.n	8001c16 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001bf0:	78fb      	ldrb	r3, [r7, #3]
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	212c      	movs	r1, #44	; 0x2c
 8001bf6:	fb01 f303 	mul.w	r3, r1, r3
 8001bfa:	4413      	add	r3, r2
 8001bfc:	3342      	adds	r3, #66	; 0x42
 8001bfe:	2203      	movs	r2, #3
 8001c00:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001c02:	78fb      	ldrb	r3, [r7, #3]
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	212c      	movs	r1, #44	; 0x2c
 8001c08:	fb01 f303 	mul.w	r3, r1, r3
 8001c0c:	4413      	add	r3, r2
 8001c0e:	333d      	adds	r3, #61	; 0x3d
 8001c10:	7f3a      	ldrb	r2, [r7, #28]
 8001c12:	701a      	strb	r2, [r3, #0]
 8001c14:	e008      	b.n	8001c28 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c16:	78fb      	ldrb	r3, [r7, #3]
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	212c      	movs	r1, #44	; 0x2c
 8001c1c:	fb01 f303 	mul.w	r3, r1, r3
 8001c20:	4413      	add	r3, r2
 8001c22:	3342      	adds	r3, #66	; 0x42
 8001c24:	2202      	movs	r2, #2
 8001c26:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001c28:	787b      	ldrb	r3, [r7, #1]
 8001c2a:	2b03      	cmp	r3, #3
 8001c2c:	f200 80c6 	bhi.w	8001dbc <HAL_HCD_HC_SubmitRequest+0x210>
 8001c30:	a201      	add	r2, pc, #4	; (adr r2, 8001c38 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c36:	bf00      	nop
 8001c38:	08001c49 	.word	0x08001c49
 8001c3c:	08001da9 	.word	0x08001da9
 8001c40:	08001cad 	.word	0x08001cad
 8001c44:	08001d2b 	.word	0x08001d2b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001c48:	7c3b      	ldrb	r3, [r7, #16]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	f040 80b8 	bne.w	8001dc0 <HAL_HCD_HC_SubmitRequest+0x214>
 8001c50:	78bb      	ldrb	r3, [r7, #2]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f040 80b4 	bne.w	8001dc0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001c58:	8b3b      	ldrh	r3, [r7, #24]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d108      	bne.n	8001c70 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001c5e:	78fb      	ldrb	r3, [r7, #3]
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	212c      	movs	r1, #44	; 0x2c
 8001c64:	fb01 f303 	mul.w	r3, r1, r3
 8001c68:	4413      	add	r3, r2
 8001c6a:	3355      	adds	r3, #85	; 0x55
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c70:	78fb      	ldrb	r3, [r7, #3]
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	212c      	movs	r1, #44	; 0x2c
 8001c76:	fb01 f303 	mul.w	r3, r1, r3
 8001c7a:	4413      	add	r3, r2
 8001c7c:	3355      	adds	r3, #85	; 0x55
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d109      	bne.n	8001c98 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c84:	78fb      	ldrb	r3, [r7, #3]
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	212c      	movs	r1, #44	; 0x2c
 8001c8a:	fb01 f303 	mul.w	r3, r1, r3
 8001c8e:	4413      	add	r3, r2
 8001c90:	3342      	adds	r3, #66	; 0x42
 8001c92:	2200      	movs	r2, #0
 8001c94:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001c96:	e093      	b.n	8001dc0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c98:	78fb      	ldrb	r3, [r7, #3]
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	212c      	movs	r1, #44	; 0x2c
 8001c9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ca2:	4413      	add	r3, r2
 8001ca4:	3342      	adds	r3, #66	; 0x42
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	701a      	strb	r2, [r3, #0]
      break;
 8001caa:	e089      	b.n	8001dc0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001cac:	78bb      	ldrb	r3, [r7, #2]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d11d      	bne.n	8001cee <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001cb2:	78fb      	ldrb	r3, [r7, #3]
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	212c      	movs	r1, #44	; 0x2c
 8001cb8:	fb01 f303 	mul.w	r3, r1, r3
 8001cbc:	4413      	add	r3, r2
 8001cbe:	3355      	adds	r3, #85	; 0x55
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d109      	bne.n	8001cda <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cc6:	78fb      	ldrb	r3, [r7, #3]
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	212c      	movs	r1, #44	; 0x2c
 8001ccc:	fb01 f303 	mul.w	r3, r1, r3
 8001cd0:	4413      	add	r3, r2
 8001cd2:	3342      	adds	r3, #66	; 0x42
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001cd8:	e073      	b.n	8001dc2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cda:	78fb      	ldrb	r3, [r7, #3]
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	212c      	movs	r1, #44	; 0x2c
 8001ce0:	fb01 f303 	mul.w	r3, r1, r3
 8001ce4:	4413      	add	r3, r2
 8001ce6:	3342      	adds	r3, #66	; 0x42
 8001ce8:	2202      	movs	r2, #2
 8001cea:	701a      	strb	r2, [r3, #0]
      break;
 8001cec:	e069      	b.n	8001dc2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001cee:	78fb      	ldrb	r3, [r7, #3]
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	212c      	movs	r1, #44	; 0x2c
 8001cf4:	fb01 f303 	mul.w	r3, r1, r3
 8001cf8:	4413      	add	r3, r2
 8001cfa:	3354      	adds	r3, #84	; 0x54
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d109      	bne.n	8001d16 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d02:	78fb      	ldrb	r3, [r7, #3]
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	212c      	movs	r1, #44	; 0x2c
 8001d08:	fb01 f303 	mul.w	r3, r1, r3
 8001d0c:	4413      	add	r3, r2
 8001d0e:	3342      	adds	r3, #66	; 0x42
 8001d10:	2200      	movs	r2, #0
 8001d12:	701a      	strb	r2, [r3, #0]
      break;
 8001d14:	e055      	b.n	8001dc2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d16:	78fb      	ldrb	r3, [r7, #3]
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	212c      	movs	r1, #44	; 0x2c
 8001d1c:	fb01 f303 	mul.w	r3, r1, r3
 8001d20:	4413      	add	r3, r2
 8001d22:	3342      	adds	r3, #66	; 0x42
 8001d24:	2202      	movs	r2, #2
 8001d26:	701a      	strb	r2, [r3, #0]
      break;
 8001d28:	e04b      	b.n	8001dc2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001d2a:	78bb      	ldrb	r3, [r7, #2]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d11d      	bne.n	8001d6c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001d30:	78fb      	ldrb	r3, [r7, #3]
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	212c      	movs	r1, #44	; 0x2c
 8001d36:	fb01 f303 	mul.w	r3, r1, r3
 8001d3a:	4413      	add	r3, r2
 8001d3c:	3355      	adds	r3, #85	; 0x55
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d109      	bne.n	8001d58 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d44:	78fb      	ldrb	r3, [r7, #3]
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	212c      	movs	r1, #44	; 0x2c
 8001d4a:	fb01 f303 	mul.w	r3, r1, r3
 8001d4e:	4413      	add	r3, r2
 8001d50:	3342      	adds	r3, #66	; 0x42
 8001d52:	2200      	movs	r2, #0
 8001d54:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001d56:	e034      	b.n	8001dc2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d58:	78fb      	ldrb	r3, [r7, #3]
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	212c      	movs	r1, #44	; 0x2c
 8001d5e:	fb01 f303 	mul.w	r3, r1, r3
 8001d62:	4413      	add	r3, r2
 8001d64:	3342      	adds	r3, #66	; 0x42
 8001d66:	2202      	movs	r2, #2
 8001d68:	701a      	strb	r2, [r3, #0]
      break;
 8001d6a:	e02a      	b.n	8001dc2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001d6c:	78fb      	ldrb	r3, [r7, #3]
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	212c      	movs	r1, #44	; 0x2c
 8001d72:	fb01 f303 	mul.w	r3, r1, r3
 8001d76:	4413      	add	r3, r2
 8001d78:	3354      	adds	r3, #84	; 0x54
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d109      	bne.n	8001d94 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d80:	78fb      	ldrb	r3, [r7, #3]
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	212c      	movs	r1, #44	; 0x2c
 8001d86:	fb01 f303 	mul.w	r3, r1, r3
 8001d8a:	4413      	add	r3, r2
 8001d8c:	3342      	adds	r3, #66	; 0x42
 8001d8e:	2200      	movs	r2, #0
 8001d90:	701a      	strb	r2, [r3, #0]
      break;
 8001d92:	e016      	b.n	8001dc2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d94:	78fb      	ldrb	r3, [r7, #3]
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	212c      	movs	r1, #44	; 0x2c
 8001d9a:	fb01 f303 	mul.w	r3, r1, r3
 8001d9e:	4413      	add	r3, r2
 8001da0:	3342      	adds	r3, #66	; 0x42
 8001da2:	2202      	movs	r2, #2
 8001da4:	701a      	strb	r2, [r3, #0]
      break;
 8001da6:	e00c      	b.n	8001dc2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001da8:	78fb      	ldrb	r3, [r7, #3]
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	212c      	movs	r1, #44	; 0x2c
 8001dae:	fb01 f303 	mul.w	r3, r1, r3
 8001db2:	4413      	add	r3, r2
 8001db4:	3342      	adds	r3, #66	; 0x42
 8001db6:	2200      	movs	r2, #0
 8001db8:	701a      	strb	r2, [r3, #0]
      break;
 8001dba:	e002      	b.n	8001dc2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001dbc:	bf00      	nop
 8001dbe:	e000      	b.n	8001dc2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001dc0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001dc2:	78fb      	ldrb	r3, [r7, #3]
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	212c      	movs	r1, #44	; 0x2c
 8001dc8:	fb01 f303 	mul.w	r3, r1, r3
 8001dcc:	4413      	add	r3, r2
 8001dce:	3344      	adds	r3, #68	; 0x44
 8001dd0:	697a      	ldr	r2, [r7, #20]
 8001dd2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001dd4:	78fb      	ldrb	r3, [r7, #3]
 8001dd6:	8b3a      	ldrh	r2, [r7, #24]
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	202c      	movs	r0, #44	; 0x2c
 8001ddc:	fb00 f303 	mul.w	r3, r0, r3
 8001de0:	440b      	add	r3, r1
 8001de2:	334c      	adds	r3, #76	; 0x4c
 8001de4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001de6:	78fb      	ldrb	r3, [r7, #3]
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	212c      	movs	r1, #44	; 0x2c
 8001dec:	fb01 f303 	mul.w	r3, r1, r3
 8001df0:	4413      	add	r3, r2
 8001df2:	3360      	adds	r3, #96	; 0x60
 8001df4:	2200      	movs	r2, #0
 8001df6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001df8:	78fb      	ldrb	r3, [r7, #3]
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	212c      	movs	r1, #44	; 0x2c
 8001dfe:	fb01 f303 	mul.w	r3, r1, r3
 8001e02:	4413      	add	r3, r2
 8001e04:	3350      	adds	r3, #80	; 0x50
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001e0a:	78fb      	ldrb	r3, [r7, #3]
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	212c      	movs	r1, #44	; 0x2c
 8001e10:	fb01 f303 	mul.w	r3, r1, r3
 8001e14:	4413      	add	r3, r2
 8001e16:	3339      	adds	r3, #57	; 0x39
 8001e18:	78fa      	ldrb	r2, [r7, #3]
 8001e1a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001e1c:	78fb      	ldrb	r3, [r7, #3]
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	212c      	movs	r1, #44	; 0x2c
 8001e22:	fb01 f303 	mul.w	r3, r1, r3
 8001e26:	4413      	add	r3, r2
 8001e28:	3361      	adds	r3, #97	; 0x61
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6818      	ldr	r0, [r3, #0]
 8001e32:	78fb      	ldrb	r3, [r7, #3]
 8001e34:	222c      	movs	r2, #44	; 0x2c
 8001e36:	fb02 f303 	mul.w	r3, r2, r3
 8001e3a:	3338      	adds	r3, #56	; 0x38
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	18d1      	adds	r1, r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	461a      	mov	r2, r3
 8001e48:	f004 ffa0 	bl	8006d8c <USB_HC_StartXfer>
 8001e4c:	4603      	mov	r3, r0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop

08001e58 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f004 fccb 	bl	800680a <USB_GetMode>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	f040 80f6 	bne.w	8002068 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f004 fcaf 	bl	80067e4 <USB_ReadInterrupts>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f000 80ec 	beq.w	8002066 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f004 fca6 	bl	80067e4 <USB_ReadInterrupts>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ea2:	d104      	bne.n	8001eae <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001eac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f004 fc96 	bl	80067e4 <USB_ReadInterrupts>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ebe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ec2:	d104      	bne.n	8001ece <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ecc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f004 fc86 	bl	80067e4 <USB_ReadInterrupts>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ede:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001ee2:	d104      	bne.n	8001eee <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001eec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f004 fc76 	bl	80067e4 <USB_ReadInterrupts>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d103      	bne.n	8001f0a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2202      	movs	r2, #2
 8001f08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f004 fc68 	bl	80067e4 <USB_ReadInterrupts>
 8001f14:	4603      	mov	r3, r0
 8001f16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f1e:	d11c      	bne.n	8001f5a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001f28:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10f      	bne.n	8001f5a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001f3a:	2110      	movs	r1, #16
 8001f3c:	6938      	ldr	r0, [r7, #16]
 8001f3e:	f004 fb57 	bl	80065f0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001f42:	6938      	ldr	r0, [r7, #16]
 8001f44:	f004 fb88 	bl	8006658 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f004 fd5e 	bl	8006a10 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f006 fb67 	bl	8008628 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f004 fc40 	bl	80067e4 <USB_ReadInterrupts>
 8001f64:	4603      	mov	r3, r0
 8001f66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f6a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f6e:	d102      	bne.n	8001f76 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f001 f882 	bl	800307a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f004 fc32 	bl	80067e4 <USB_ReadInterrupts>
 8001f80:	4603      	mov	r3, r0
 8001f82:	f003 0308 	and.w	r3, r3, #8
 8001f86:	2b08      	cmp	r3, #8
 8001f88:	d106      	bne.n	8001f98 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f006 fb30 	bl	80085f0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2208      	movs	r2, #8
 8001f96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f004 fc21 	bl	80067e4 <USB_ReadInterrupts>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	f003 0310 	and.w	r3, r3, #16
 8001fa8:	2b10      	cmp	r3, #16
 8001faa:	d101      	bne.n	8001fb0 <HAL_HCD_IRQHandler+0x158>
 8001fac:	2301      	movs	r3, #1
 8001fae:	e000      	b.n	8001fb2 <HAL_HCD_IRQHandler+0x15a>
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d012      	beq.n	8001fdc <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	699a      	ldr	r2, [r3, #24]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 0210 	bic.w	r2, r2, #16
 8001fc4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 ff85 	bl	8002ed6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	699a      	ldr	r2, [r3, #24]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 0210 	orr.w	r2, r2, #16
 8001fda:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f004 fbff 	bl	80067e4 <USB_ReadInterrupts>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ff0:	d13a      	bne.n	8002068 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f005 f80a 	bl	8007010 <USB_HC_ReadInterrupt>
 8001ffc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ffe:	2300      	movs	r3, #0
 8002000:	617b      	str	r3, [r7, #20]
 8002002:	e025      	b.n	8002050 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	68ba      	ldr	r2, [r7, #8]
 800200c:	fa22 f303 	lsr.w	r3, r2, r3
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	2b00      	cmp	r3, #0
 8002016:	d018      	beq.n	800204a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	015a      	lsls	r2, r3, #5
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	4413      	add	r3, r2
 8002020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800202a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800202e:	d106      	bne.n	800203e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	b2db      	uxtb	r3, r3
 8002034:	4619      	mov	r1, r3
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f88f 	bl	800215a <HCD_HC_IN_IRQHandler>
 800203c:	e005      	b.n	800204a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	b2db      	uxtb	r3, r3
 8002042:	4619      	mov	r1, r3
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 fbdd 	bl	8002804 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	3301      	adds	r3, #1
 800204e:	617b      	str	r3, [r7, #20]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	697a      	ldr	r2, [r7, #20]
 8002056:	429a      	cmp	r2, r3
 8002058:	d3d4      	bcc.n	8002004 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002062:	615a      	str	r2, [r3, #20]
 8002064:	e000      	b.n	8002068 <HAL_HCD_IRQHandler+0x210>
      return;
 8002066:	bf00      	nop
    }
  }
}
 8002068:	3718      	adds	r7, #24
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b082      	sub	sp, #8
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800207c:	2b01      	cmp	r3, #1
 800207e:	d101      	bne.n	8002084 <HAL_HCD_Start+0x16>
 8002080:	2302      	movs	r3, #2
 8002082:	e013      	b.n	80020ac <HAL_HCD_Start+0x3e>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2101      	movs	r1, #1
 8002092:	4618      	mov	r0, r3
 8002094:	f004 fcf6 	bl	8006a84 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f004 fa38 	bl	8006512 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d101      	bne.n	80020ca <HAL_HCD_Stop+0x16>
 80020c6:	2302      	movs	r3, #2
 80020c8:	e00d      	b.n	80020e6 <HAL_HCD_Stop+0x32>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f005 f8e4 	bl	80072a4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
 80020f6:	460b      	mov	r3, r1
 80020f8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80020fa:	78fb      	ldrb	r3, [r7, #3]
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	212c      	movs	r1, #44	; 0x2c
 8002100:	fb01 f303 	mul.w	r3, r1, r3
 8002104:	4413      	add	r3, r2
 8002106:	3360      	adds	r3, #96	; 0x60
 8002108:	781b      	ldrb	r3, [r3, #0]
}
 800210a:	4618      	mov	r0, r3
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002116:	b480      	push	{r7}
 8002118:	b083      	sub	sp, #12
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
 800211e:	460b      	mov	r3, r1
 8002120:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002122:	78fb      	ldrb	r3, [r7, #3]
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	212c      	movs	r1, #44	; 0x2c
 8002128:	fb01 f303 	mul.w	r3, r1, r3
 800212c:	4413      	add	r3, r2
 800212e:	3350      	adds	r3, #80	; 0x50
 8002130:	681b      	ldr	r3, [r3, #0]
}
 8002132:	4618      	mov	r0, r3
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b082      	sub	sp, #8
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4618      	mov	r0, r3
 800214c:	f004 fcea 	bl	8006b24 <USB_GetCurrentFrame>
 8002150:	4603      	mov	r3, r0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b086      	sub	sp, #24
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
 8002162:	460b      	mov	r3, r1
 8002164:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002170:	78fb      	ldrb	r3, [r7, #3]
 8002172:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	015a      	lsls	r2, r3, #5
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	4413      	add	r3, r2
 800217c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f003 0304 	and.w	r3, r3, #4
 8002186:	2b04      	cmp	r3, #4
 8002188:	d11a      	bne.n	80021c0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	015a      	lsls	r2, r3, #5
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	4413      	add	r3, r2
 8002192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002196:	461a      	mov	r2, r3
 8002198:	2304      	movs	r3, #4
 800219a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	212c      	movs	r1, #44	; 0x2c
 80021a2:	fb01 f303 	mul.w	r3, r1, r3
 80021a6:	4413      	add	r3, r2
 80021a8:	3361      	adds	r3, #97	; 0x61
 80021aa:	2206      	movs	r2, #6
 80021ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	4611      	mov	r1, r2
 80021b8:	4618      	mov	r0, r3
 80021ba:	f004 ff3a 	bl	8007032 <USB_HC_Halt>
 80021be:	e0af      	b.n	8002320 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	015a      	lsls	r2, r3, #5
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	4413      	add	r3, r2
 80021c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021d6:	d11b      	bne.n	8002210 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	015a      	lsls	r2, r3, #5
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	4413      	add	r3, r2
 80021e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e4:	461a      	mov	r2, r3
 80021e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021ea:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	212c      	movs	r1, #44	; 0x2c
 80021f2:	fb01 f303 	mul.w	r3, r1, r3
 80021f6:	4413      	add	r3, r2
 80021f8:	3361      	adds	r3, #97	; 0x61
 80021fa:	2207      	movs	r2, #7
 80021fc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	4611      	mov	r1, r2
 8002208:	4618      	mov	r0, r3
 800220a:	f004 ff12 	bl	8007032 <USB_HC_Halt>
 800220e:	e087      	b.n	8002320 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	015a      	lsls	r2, r3, #5
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	4413      	add	r3, r2
 8002218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f003 0320 	and.w	r3, r3, #32
 8002222:	2b20      	cmp	r3, #32
 8002224:	d109      	bne.n	800223a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	015a      	lsls	r2, r3, #5
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	4413      	add	r3, r2
 800222e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002232:	461a      	mov	r2, r3
 8002234:	2320      	movs	r3, #32
 8002236:	6093      	str	r3, [r2, #8]
 8002238:	e072      	b.n	8002320 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	015a      	lsls	r2, r3, #5
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	4413      	add	r3, r2
 8002242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f003 0308 	and.w	r3, r3, #8
 800224c:	2b08      	cmp	r3, #8
 800224e:	d11a      	bne.n	8002286 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	015a      	lsls	r2, r3, #5
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	4413      	add	r3, r2
 8002258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800225c:	461a      	mov	r2, r3
 800225e:	2308      	movs	r3, #8
 8002260:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	212c      	movs	r1, #44	; 0x2c
 8002268:	fb01 f303 	mul.w	r3, r1, r3
 800226c:	4413      	add	r3, r2
 800226e:	3361      	adds	r3, #97	; 0x61
 8002270:	2205      	movs	r2, #5
 8002272:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	4611      	mov	r1, r2
 800227e:	4618      	mov	r0, r3
 8002280:	f004 fed7 	bl	8007032 <USB_HC_Halt>
 8002284:	e04c      	b.n	8002320 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	015a      	lsls	r2, r3, #5
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	4413      	add	r3, r2
 800228e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800229c:	d11b      	bne.n	80022d6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	015a      	lsls	r2, r3, #5
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	4413      	add	r3, r2
 80022a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022aa:	461a      	mov	r2, r3
 80022ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022b0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	212c      	movs	r1, #44	; 0x2c
 80022b8:	fb01 f303 	mul.w	r3, r1, r3
 80022bc:	4413      	add	r3, r2
 80022be:	3361      	adds	r3, #97	; 0x61
 80022c0:	2208      	movs	r2, #8
 80022c2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	b2d2      	uxtb	r2, r2
 80022cc:	4611      	mov	r1, r2
 80022ce:	4618      	mov	r0, r3
 80022d0:	f004 feaf 	bl	8007032 <USB_HC_Halt>
 80022d4:	e024      	b.n	8002320 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	015a      	lsls	r2, r3, #5
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	4413      	add	r3, r2
 80022de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e8:	2b80      	cmp	r3, #128	; 0x80
 80022ea:	d119      	bne.n	8002320 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	015a      	lsls	r2, r3, #5
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	4413      	add	r3, r2
 80022f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f8:	461a      	mov	r2, r3
 80022fa:	2380      	movs	r3, #128	; 0x80
 80022fc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	212c      	movs	r1, #44	; 0x2c
 8002304:	fb01 f303 	mul.w	r3, r1, r3
 8002308:	4413      	add	r3, r2
 800230a:	3361      	adds	r3, #97	; 0x61
 800230c:	2206      	movs	r2, #6
 800230e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	4611      	mov	r1, r2
 800231a:	4618      	mov	r0, r3
 800231c:	f004 fe89 	bl	8007032 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	015a      	lsls	r2, r3, #5
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	4413      	add	r3, r2
 8002328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002332:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002336:	d112      	bne.n	800235e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	4611      	mov	r1, r2
 8002342:	4618      	mov	r0, r3
 8002344:	f004 fe75 	bl	8007032 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	015a      	lsls	r2, r3, #5
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	4413      	add	r3, r2
 8002350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002354:	461a      	mov	r2, r3
 8002356:	f44f 7300 	mov.w	r3, #512	; 0x200
 800235a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800235c:	e24e      	b.n	80027fc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	015a      	lsls	r2, r3, #5
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	4413      	add	r3, r2
 8002366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 0301 	and.w	r3, r3, #1
 8002370:	2b01      	cmp	r3, #1
 8002372:	f040 80df 	bne.w	8002534 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d019      	beq.n	80023b2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	212c      	movs	r1, #44	; 0x2c
 8002384:	fb01 f303 	mul.w	r3, r1, r3
 8002388:	4413      	add	r3, r2
 800238a:	3348      	adds	r3, #72	; 0x48
 800238c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	0159      	lsls	r1, r3, #5
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	440b      	add	r3, r1
 8002396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80023a0:	1ad2      	subs	r2, r2, r3
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	202c      	movs	r0, #44	; 0x2c
 80023a8:	fb00 f303 	mul.w	r3, r0, r3
 80023ac:	440b      	add	r3, r1
 80023ae:	3350      	adds	r3, #80	; 0x50
 80023b0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	212c      	movs	r1, #44	; 0x2c
 80023b8:	fb01 f303 	mul.w	r3, r1, r3
 80023bc:	4413      	add	r3, r2
 80023be:	3361      	adds	r3, #97	; 0x61
 80023c0:	2201      	movs	r2, #1
 80023c2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	212c      	movs	r1, #44	; 0x2c
 80023ca:	fb01 f303 	mul.w	r3, r1, r3
 80023ce:	4413      	add	r3, r2
 80023d0:	335c      	adds	r3, #92	; 0x5c
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	015a      	lsls	r2, r3, #5
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	4413      	add	r3, r2
 80023de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e2:	461a      	mov	r2, r3
 80023e4:	2301      	movs	r3, #1
 80023e6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	212c      	movs	r1, #44	; 0x2c
 80023ee:	fb01 f303 	mul.w	r3, r1, r3
 80023f2:	4413      	add	r3, r2
 80023f4:	333f      	adds	r3, #63	; 0x3f
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d009      	beq.n	8002410 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	212c      	movs	r1, #44	; 0x2c
 8002402:	fb01 f303 	mul.w	r3, r1, r3
 8002406:	4413      	add	r3, r2
 8002408:	333f      	adds	r3, #63	; 0x3f
 800240a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800240c:	2b02      	cmp	r3, #2
 800240e:	d111      	bne.n	8002434 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	b2d2      	uxtb	r2, r2
 8002418:	4611      	mov	r1, r2
 800241a:	4618      	mov	r0, r3
 800241c:	f004 fe09 	bl	8007032 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	015a      	lsls	r2, r3, #5
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	4413      	add	r3, r2
 8002428:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800242c:	461a      	mov	r2, r3
 800242e:	2310      	movs	r3, #16
 8002430:	6093      	str	r3, [r2, #8]
 8002432:	e03a      	b.n	80024aa <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	212c      	movs	r1, #44	; 0x2c
 800243a:	fb01 f303 	mul.w	r3, r1, r3
 800243e:	4413      	add	r3, r2
 8002440:	333f      	adds	r3, #63	; 0x3f
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b03      	cmp	r3, #3
 8002446:	d009      	beq.n	800245c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	212c      	movs	r1, #44	; 0x2c
 800244e:	fb01 f303 	mul.w	r3, r1, r3
 8002452:	4413      	add	r3, r2
 8002454:	333f      	adds	r3, #63	; 0x3f
 8002456:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002458:	2b01      	cmp	r3, #1
 800245a:	d126      	bne.n	80024aa <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	015a      	lsls	r2, r3, #5
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	4413      	add	r3, r2
 8002464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	0151      	lsls	r1, r2, #5
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	440a      	add	r2, r1
 8002472:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002476:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800247a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	212c      	movs	r1, #44	; 0x2c
 8002482:	fb01 f303 	mul.w	r3, r1, r3
 8002486:	4413      	add	r3, r2
 8002488:	3360      	adds	r3, #96	; 0x60
 800248a:	2201      	movs	r2, #1
 800248c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	b2d9      	uxtb	r1, r3
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	202c      	movs	r0, #44	; 0x2c
 8002498:	fb00 f303 	mul.w	r3, r0, r3
 800249c:	4413      	add	r3, r2
 800249e:	3360      	adds	r3, #96	; 0x60
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	461a      	mov	r2, r3
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f006 f8cd 	bl	8008644 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d12b      	bne.n	800250a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	212c      	movs	r1, #44	; 0x2c
 80024b8:	fb01 f303 	mul.w	r3, r1, r3
 80024bc:	4413      	add	r3, r2
 80024be:	3348      	adds	r3, #72	; 0x48
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	202c      	movs	r0, #44	; 0x2c
 80024c8:	fb00 f202 	mul.w	r2, r0, r2
 80024cc:	440a      	add	r2, r1
 80024ce:	3240      	adds	r2, #64	; 0x40
 80024d0:	8812      	ldrh	r2, [r2, #0]
 80024d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 818e 	beq.w	80027fc <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	212c      	movs	r1, #44	; 0x2c
 80024e6:	fb01 f303 	mul.w	r3, r1, r3
 80024ea:	4413      	add	r3, r2
 80024ec:	3354      	adds	r3, #84	; 0x54
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	f083 0301 	eor.w	r3, r3, #1
 80024f4:	b2d8      	uxtb	r0, r3
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	212c      	movs	r1, #44	; 0x2c
 80024fc:	fb01 f303 	mul.w	r3, r1, r3
 8002500:	4413      	add	r3, r2
 8002502:	3354      	adds	r3, #84	; 0x54
 8002504:	4602      	mov	r2, r0
 8002506:	701a      	strb	r2, [r3, #0]
}
 8002508:	e178      	b.n	80027fc <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	212c      	movs	r1, #44	; 0x2c
 8002510:	fb01 f303 	mul.w	r3, r1, r3
 8002514:	4413      	add	r3, r2
 8002516:	3354      	adds	r3, #84	; 0x54
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	f083 0301 	eor.w	r3, r3, #1
 800251e:	b2d8      	uxtb	r0, r3
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	212c      	movs	r1, #44	; 0x2c
 8002526:	fb01 f303 	mul.w	r3, r1, r3
 800252a:	4413      	add	r3, r2
 800252c:	3354      	adds	r3, #84	; 0x54
 800252e:	4602      	mov	r2, r0
 8002530:	701a      	strb	r2, [r3, #0]
}
 8002532:	e163      	b.n	80027fc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	015a      	lsls	r2, r3, #5
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	4413      	add	r3, r2
 800253c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b02      	cmp	r3, #2
 8002548:	f040 80f6 	bne.w	8002738 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	212c      	movs	r1, #44	; 0x2c
 8002552:	fb01 f303 	mul.w	r3, r1, r3
 8002556:	4413      	add	r3, r2
 8002558:	3361      	adds	r3, #97	; 0x61
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d109      	bne.n	8002574 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	212c      	movs	r1, #44	; 0x2c
 8002566:	fb01 f303 	mul.w	r3, r1, r3
 800256a:	4413      	add	r3, r2
 800256c:	3360      	adds	r3, #96	; 0x60
 800256e:	2201      	movs	r2, #1
 8002570:	701a      	strb	r2, [r3, #0]
 8002572:	e0c9      	b.n	8002708 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	212c      	movs	r1, #44	; 0x2c
 800257a:	fb01 f303 	mul.w	r3, r1, r3
 800257e:	4413      	add	r3, r2
 8002580:	3361      	adds	r3, #97	; 0x61
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	2b05      	cmp	r3, #5
 8002586:	d109      	bne.n	800259c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	212c      	movs	r1, #44	; 0x2c
 800258e:	fb01 f303 	mul.w	r3, r1, r3
 8002592:	4413      	add	r3, r2
 8002594:	3360      	adds	r3, #96	; 0x60
 8002596:	2205      	movs	r2, #5
 8002598:	701a      	strb	r2, [r3, #0]
 800259a:	e0b5      	b.n	8002708 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	212c      	movs	r1, #44	; 0x2c
 80025a2:	fb01 f303 	mul.w	r3, r1, r3
 80025a6:	4413      	add	r3, r2
 80025a8:	3361      	adds	r3, #97	; 0x61
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b06      	cmp	r3, #6
 80025ae:	d009      	beq.n	80025c4 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	212c      	movs	r1, #44	; 0x2c
 80025b6:	fb01 f303 	mul.w	r3, r1, r3
 80025ba:	4413      	add	r3, r2
 80025bc:	3361      	adds	r3, #97	; 0x61
 80025be:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80025c0:	2b08      	cmp	r3, #8
 80025c2:	d150      	bne.n	8002666 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	212c      	movs	r1, #44	; 0x2c
 80025ca:	fb01 f303 	mul.w	r3, r1, r3
 80025ce:	4413      	add	r3, r2
 80025d0:	335c      	adds	r3, #92	; 0x5c
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	1c5a      	adds	r2, r3, #1
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	202c      	movs	r0, #44	; 0x2c
 80025dc:	fb00 f303 	mul.w	r3, r0, r3
 80025e0:	440b      	add	r3, r1
 80025e2:	335c      	adds	r3, #92	; 0x5c
 80025e4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	212c      	movs	r1, #44	; 0x2c
 80025ec:	fb01 f303 	mul.w	r3, r1, r3
 80025f0:	4413      	add	r3, r2
 80025f2:	335c      	adds	r3, #92	; 0x5c
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d912      	bls.n	8002620 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	212c      	movs	r1, #44	; 0x2c
 8002600:	fb01 f303 	mul.w	r3, r1, r3
 8002604:	4413      	add	r3, r2
 8002606:	335c      	adds	r3, #92	; 0x5c
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	212c      	movs	r1, #44	; 0x2c
 8002612:	fb01 f303 	mul.w	r3, r1, r3
 8002616:	4413      	add	r3, r2
 8002618:	3360      	adds	r3, #96	; 0x60
 800261a:	2204      	movs	r2, #4
 800261c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800261e:	e073      	b.n	8002708 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	212c      	movs	r1, #44	; 0x2c
 8002626:	fb01 f303 	mul.w	r3, r1, r3
 800262a:	4413      	add	r3, r2
 800262c:	3360      	adds	r3, #96	; 0x60
 800262e:	2202      	movs	r2, #2
 8002630:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	015a      	lsls	r2, r3, #5
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	4413      	add	r3, r2
 800263a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002648:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002650:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	015a      	lsls	r2, r3, #5
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	4413      	add	r3, r2
 800265a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265e:	461a      	mov	r2, r3
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002664:	e050      	b.n	8002708 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	212c      	movs	r1, #44	; 0x2c
 800266c:	fb01 f303 	mul.w	r3, r1, r3
 8002670:	4413      	add	r3, r2
 8002672:	3361      	adds	r3, #97	; 0x61
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b03      	cmp	r3, #3
 8002678:	d122      	bne.n	80026c0 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	212c      	movs	r1, #44	; 0x2c
 8002680:	fb01 f303 	mul.w	r3, r1, r3
 8002684:	4413      	add	r3, r2
 8002686:	3360      	adds	r3, #96	; 0x60
 8002688:	2202      	movs	r2, #2
 800268a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	015a      	lsls	r2, r3, #5
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	4413      	add	r3, r2
 8002694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80026a2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026aa:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	015a      	lsls	r2, r3, #5
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	4413      	add	r3, r2
 80026b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b8:	461a      	mov	r2, r3
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	6013      	str	r3, [r2, #0]
 80026be:	e023      	b.n	8002708 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	212c      	movs	r1, #44	; 0x2c
 80026c6:	fb01 f303 	mul.w	r3, r1, r3
 80026ca:	4413      	add	r3, r2
 80026cc:	3361      	adds	r3, #97	; 0x61
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	2b07      	cmp	r3, #7
 80026d2:	d119      	bne.n	8002708 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	212c      	movs	r1, #44	; 0x2c
 80026da:	fb01 f303 	mul.w	r3, r1, r3
 80026de:	4413      	add	r3, r2
 80026e0:	335c      	adds	r3, #92	; 0x5c
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	1c5a      	adds	r2, r3, #1
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	202c      	movs	r0, #44	; 0x2c
 80026ec:	fb00 f303 	mul.w	r3, r0, r3
 80026f0:	440b      	add	r3, r1
 80026f2:	335c      	adds	r3, #92	; 0x5c
 80026f4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	212c      	movs	r1, #44	; 0x2c
 80026fc:	fb01 f303 	mul.w	r3, r1, r3
 8002700:	4413      	add	r3, r2
 8002702:	3360      	adds	r3, #96	; 0x60
 8002704:	2204      	movs	r2, #4
 8002706:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	015a      	lsls	r2, r3, #5
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	4413      	add	r3, r2
 8002710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002714:	461a      	mov	r2, r3
 8002716:	2302      	movs	r3, #2
 8002718:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	b2d9      	uxtb	r1, r3
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	202c      	movs	r0, #44	; 0x2c
 8002724:	fb00 f303 	mul.w	r3, r0, r3
 8002728:	4413      	add	r3, r2
 800272a:	3360      	adds	r3, #96	; 0x60
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	461a      	mov	r2, r3
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f005 ff87 	bl	8008644 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002736:	e061      	b.n	80027fc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	015a      	lsls	r2, r3, #5
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	4413      	add	r3, r2
 8002740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 0310 	and.w	r3, r3, #16
 800274a:	2b10      	cmp	r3, #16
 800274c:	d156      	bne.n	80027fc <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	212c      	movs	r1, #44	; 0x2c
 8002754:	fb01 f303 	mul.w	r3, r1, r3
 8002758:	4413      	add	r3, r2
 800275a:	333f      	adds	r3, #63	; 0x3f
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	2b03      	cmp	r3, #3
 8002760:	d111      	bne.n	8002786 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	212c      	movs	r1, #44	; 0x2c
 8002768:	fb01 f303 	mul.w	r3, r1, r3
 800276c:	4413      	add	r3, r2
 800276e:	335c      	adds	r3, #92	; 0x5c
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	b2d2      	uxtb	r2, r2
 800277c:	4611      	mov	r1, r2
 800277e:	4618      	mov	r0, r3
 8002780:	f004 fc57 	bl	8007032 <USB_HC_Halt>
 8002784:	e031      	b.n	80027ea <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	212c      	movs	r1, #44	; 0x2c
 800278c:	fb01 f303 	mul.w	r3, r1, r3
 8002790:	4413      	add	r3, r2
 8002792:	333f      	adds	r3, #63	; 0x3f
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d009      	beq.n	80027ae <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	212c      	movs	r1, #44	; 0x2c
 80027a0:	fb01 f303 	mul.w	r3, r1, r3
 80027a4:	4413      	add	r3, r2
 80027a6:	333f      	adds	r3, #63	; 0x3f
 80027a8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d11d      	bne.n	80027ea <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	212c      	movs	r1, #44	; 0x2c
 80027b4:	fb01 f303 	mul.w	r3, r1, r3
 80027b8:	4413      	add	r3, r2
 80027ba:	335c      	adds	r3, #92	; 0x5c
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d110      	bne.n	80027ea <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	212c      	movs	r1, #44	; 0x2c
 80027ce:	fb01 f303 	mul.w	r3, r1, r3
 80027d2:	4413      	add	r3, r2
 80027d4:	3361      	adds	r3, #97	; 0x61
 80027d6:	2203      	movs	r2, #3
 80027d8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	4611      	mov	r1, r2
 80027e4:	4618      	mov	r0, r3
 80027e6:	f004 fc24 	bl	8007032 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	015a      	lsls	r2, r3, #5
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	4413      	add	r3, r2
 80027f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f6:	461a      	mov	r2, r3
 80027f8:	2310      	movs	r3, #16
 80027fa:	6093      	str	r3, [r2, #8]
}
 80027fc:	bf00      	nop
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b088      	sub	sp, #32
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	460b      	mov	r3, r1
 800280e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800281a:	78fb      	ldrb	r3, [r7, #3]
 800281c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	015a      	lsls	r2, r3, #5
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	4413      	add	r3, r2
 8002826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	2b04      	cmp	r3, #4
 8002832:	d11a      	bne.n	800286a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	015a      	lsls	r2, r3, #5
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	4413      	add	r3, r2
 800283c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002840:	461a      	mov	r2, r3
 8002842:	2304      	movs	r3, #4
 8002844:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	212c      	movs	r1, #44	; 0x2c
 800284c:	fb01 f303 	mul.w	r3, r1, r3
 8002850:	4413      	add	r3, r2
 8002852:	3361      	adds	r3, #97	; 0x61
 8002854:	2206      	movs	r2, #6
 8002856:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	4611      	mov	r1, r2
 8002862:	4618      	mov	r0, r3
 8002864:	f004 fbe5 	bl	8007032 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002868:	e331      	b.n	8002ece <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	015a      	lsls	r2, r3, #5
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	4413      	add	r3, r2
 8002872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 0320 	and.w	r3, r3, #32
 800287c:	2b20      	cmp	r3, #32
 800287e:	d12e      	bne.n	80028de <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	015a      	lsls	r2, r3, #5
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	4413      	add	r3, r2
 8002888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800288c:	461a      	mov	r2, r3
 800288e:	2320      	movs	r3, #32
 8002890:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	212c      	movs	r1, #44	; 0x2c
 8002898:	fb01 f303 	mul.w	r3, r1, r3
 800289c:	4413      	add	r3, r2
 800289e:	333d      	adds	r3, #61	; 0x3d
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	f040 8313 	bne.w	8002ece <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	212c      	movs	r1, #44	; 0x2c
 80028ae:	fb01 f303 	mul.w	r3, r1, r3
 80028b2:	4413      	add	r3, r2
 80028b4:	333d      	adds	r3, #61	; 0x3d
 80028b6:	2200      	movs	r2, #0
 80028b8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	212c      	movs	r1, #44	; 0x2c
 80028c0:	fb01 f303 	mul.w	r3, r1, r3
 80028c4:	4413      	add	r3, r2
 80028c6:	3360      	adds	r3, #96	; 0x60
 80028c8:	2202      	movs	r2, #2
 80028ca:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	4611      	mov	r1, r2
 80028d6:	4618      	mov	r0, r3
 80028d8:	f004 fbab 	bl	8007032 <USB_HC_Halt>
}
 80028dc:	e2f7      	b.n	8002ece <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	015a      	lsls	r2, r3, #5
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	4413      	add	r3, r2
 80028e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028f4:	d112      	bne.n	800291c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	015a      	lsls	r2, r3, #5
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	4413      	add	r3, r2
 80028fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002902:	461a      	mov	r2, r3
 8002904:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002908:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	b2d2      	uxtb	r2, r2
 8002912:	4611      	mov	r1, r2
 8002914:	4618      	mov	r0, r3
 8002916:	f004 fb8c 	bl	8007032 <USB_HC_Halt>
}
 800291a:	e2d8      	b.n	8002ece <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	015a      	lsls	r2, r3, #5
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	4413      	add	r3, r2
 8002924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b01      	cmp	r3, #1
 8002930:	d140      	bne.n	80029b4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	212c      	movs	r1, #44	; 0x2c
 8002938:	fb01 f303 	mul.w	r3, r1, r3
 800293c:	4413      	add	r3, r2
 800293e:	335c      	adds	r3, #92	; 0x5c
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	015a      	lsls	r2, r3, #5
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	4413      	add	r3, r2
 800294c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002956:	2b40      	cmp	r3, #64	; 0x40
 8002958:	d111      	bne.n	800297e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	212c      	movs	r1, #44	; 0x2c
 8002960:	fb01 f303 	mul.w	r3, r1, r3
 8002964:	4413      	add	r3, r2
 8002966:	333d      	adds	r3, #61	; 0x3d
 8002968:	2201      	movs	r2, #1
 800296a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	015a      	lsls	r2, r3, #5
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	4413      	add	r3, r2
 8002974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002978:	461a      	mov	r2, r3
 800297a:	2340      	movs	r3, #64	; 0x40
 800297c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	015a      	lsls	r2, r3, #5
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	4413      	add	r3, r2
 8002986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800298a:	461a      	mov	r2, r3
 800298c:	2301      	movs	r3, #1
 800298e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	212c      	movs	r1, #44	; 0x2c
 8002996:	fb01 f303 	mul.w	r3, r1, r3
 800299a:	4413      	add	r3, r2
 800299c:	3361      	adds	r3, #97	; 0x61
 800299e:	2201      	movs	r2, #1
 80029a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	b2d2      	uxtb	r2, r2
 80029aa:	4611      	mov	r1, r2
 80029ac:	4618      	mov	r0, r3
 80029ae:	f004 fb40 	bl	8007032 <USB_HC_Halt>
}
 80029b2:	e28c      	b.n	8002ece <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	015a      	lsls	r2, r3, #5
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	4413      	add	r3, r2
 80029bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c6:	2b40      	cmp	r3, #64	; 0x40
 80029c8:	d12c      	bne.n	8002a24 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	212c      	movs	r1, #44	; 0x2c
 80029d0:	fb01 f303 	mul.w	r3, r1, r3
 80029d4:	4413      	add	r3, r2
 80029d6:	3361      	adds	r3, #97	; 0x61
 80029d8:	2204      	movs	r2, #4
 80029da:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	212c      	movs	r1, #44	; 0x2c
 80029e2:	fb01 f303 	mul.w	r3, r1, r3
 80029e6:	4413      	add	r3, r2
 80029e8:	333d      	adds	r3, #61	; 0x3d
 80029ea:	2201      	movs	r2, #1
 80029ec:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	212c      	movs	r1, #44	; 0x2c
 80029f4:	fb01 f303 	mul.w	r3, r1, r3
 80029f8:	4413      	add	r3, r2
 80029fa:	335c      	adds	r3, #92	; 0x5c
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	4611      	mov	r1, r2
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f004 fb11 	bl	8007032 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	015a      	lsls	r2, r3, #5
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	4413      	add	r3, r2
 8002a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	2340      	movs	r3, #64	; 0x40
 8002a20:	6093      	str	r3, [r2, #8]
}
 8002a22:	e254      	b.n	8002ece <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	015a      	lsls	r2, r3, #5
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	2b08      	cmp	r3, #8
 8002a38:	d11a      	bne.n	8002a70 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	015a      	lsls	r2, r3, #5
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	4413      	add	r3, r2
 8002a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a46:	461a      	mov	r2, r3
 8002a48:	2308      	movs	r3, #8
 8002a4a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	212c      	movs	r1, #44	; 0x2c
 8002a52:	fb01 f303 	mul.w	r3, r1, r3
 8002a56:	4413      	add	r3, r2
 8002a58:	3361      	adds	r3, #97	; 0x61
 8002a5a:	2205      	movs	r2, #5
 8002a5c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	4611      	mov	r1, r2
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f004 fae2 	bl	8007032 <USB_HC_Halt>
}
 8002a6e:	e22e      	b.n	8002ece <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	015a      	lsls	r2, r3, #5
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	4413      	add	r3, r2
 8002a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 0310 	and.w	r3, r3, #16
 8002a82:	2b10      	cmp	r3, #16
 8002a84:	d140      	bne.n	8002b08 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	212c      	movs	r1, #44	; 0x2c
 8002a8c:	fb01 f303 	mul.w	r3, r1, r3
 8002a90:	4413      	add	r3, r2
 8002a92:	335c      	adds	r3, #92	; 0x5c
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	212c      	movs	r1, #44	; 0x2c
 8002a9e:	fb01 f303 	mul.w	r3, r1, r3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	3361      	adds	r3, #97	; 0x61
 8002aa6:	2203      	movs	r2, #3
 8002aa8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	212c      	movs	r1, #44	; 0x2c
 8002ab0:	fb01 f303 	mul.w	r3, r1, r3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	333d      	adds	r3, #61	; 0x3d
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d112      	bne.n	8002ae4 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	212c      	movs	r1, #44	; 0x2c
 8002ac4:	fb01 f303 	mul.w	r3, r1, r3
 8002ac8:	4413      	add	r3, r2
 8002aca:	333c      	adds	r3, #60	; 0x3c
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d108      	bne.n	8002ae4 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	212c      	movs	r1, #44	; 0x2c
 8002ad8:	fb01 f303 	mul.w	r3, r1, r3
 8002adc:	4413      	add	r3, r2
 8002ade:	333d      	adds	r3, #61	; 0x3d
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	b2d2      	uxtb	r2, r2
 8002aec:	4611      	mov	r1, r2
 8002aee:	4618      	mov	r0, r3
 8002af0:	f004 fa9f 	bl	8007032 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	015a      	lsls	r2, r3, #5
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	4413      	add	r3, r2
 8002afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b00:	461a      	mov	r2, r3
 8002b02:	2310      	movs	r3, #16
 8002b04:	6093      	str	r3, [r2, #8]
}
 8002b06:	e1e2      	b.n	8002ece <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	015a      	lsls	r2, r3, #5
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	4413      	add	r3, r2
 8002b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b1a:	2b80      	cmp	r3, #128	; 0x80
 8002b1c:	d164      	bne.n	8002be8 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d111      	bne.n	8002b4a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	212c      	movs	r1, #44	; 0x2c
 8002b2c:	fb01 f303 	mul.w	r3, r1, r3
 8002b30:	4413      	add	r3, r2
 8002b32:	3361      	adds	r3, #97	; 0x61
 8002b34:	2206      	movs	r2, #6
 8002b36:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	4611      	mov	r1, r2
 8002b42:	4618      	mov	r0, r3
 8002b44:	f004 fa75 	bl	8007032 <USB_HC_Halt>
 8002b48:	e044      	b.n	8002bd4 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	212c      	movs	r1, #44	; 0x2c
 8002b50:	fb01 f303 	mul.w	r3, r1, r3
 8002b54:	4413      	add	r3, r2
 8002b56:	335c      	adds	r3, #92	; 0x5c
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	1c5a      	adds	r2, r3, #1
 8002b5c:	6879      	ldr	r1, [r7, #4]
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	202c      	movs	r0, #44	; 0x2c
 8002b62:	fb00 f303 	mul.w	r3, r0, r3
 8002b66:	440b      	add	r3, r1
 8002b68:	335c      	adds	r3, #92	; 0x5c
 8002b6a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	212c      	movs	r1, #44	; 0x2c
 8002b72:	fb01 f303 	mul.w	r3, r1, r3
 8002b76:	4413      	add	r3, r2
 8002b78:	335c      	adds	r3, #92	; 0x5c
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d920      	bls.n	8002bc2 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	212c      	movs	r1, #44	; 0x2c
 8002b86:	fb01 f303 	mul.w	r3, r1, r3
 8002b8a:	4413      	add	r3, r2
 8002b8c:	335c      	adds	r3, #92	; 0x5c
 8002b8e:	2200      	movs	r2, #0
 8002b90:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	212c      	movs	r1, #44	; 0x2c
 8002b98:	fb01 f303 	mul.w	r3, r1, r3
 8002b9c:	4413      	add	r3, r2
 8002b9e:	3360      	adds	r3, #96	; 0x60
 8002ba0:	2204      	movs	r2, #4
 8002ba2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	b2d9      	uxtb	r1, r3
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	202c      	movs	r0, #44	; 0x2c
 8002bae:	fb00 f303 	mul.w	r3, r0, r3
 8002bb2:	4413      	add	r3, r2
 8002bb4:	3360      	adds	r3, #96	; 0x60
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	461a      	mov	r2, r3
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f005 fd42 	bl	8008644 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002bc0:	e008      	b.n	8002bd4 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	212c      	movs	r1, #44	; 0x2c
 8002bc8:	fb01 f303 	mul.w	r3, r1, r3
 8002bcc:	4413      	add	r3, r2
 8002bce:	3360      	adds	r3, #96	; 0x60
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	015a      	lsls	r2, r3, #5
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	4413      	add	r3, r2
 8002bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be0:	461a      	mov	r2, r3
 8002be2:	2380      	movs	r3, #128	; 0x80
 8002be4:	6093      	str	r3, [r2, #8]
}
 8002be6:	e172      	b.n	8002ece <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	015a      	lsls	r2, r3, #5
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	4413      	add	r3, r2
 8002bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bfe:	d11b      	bne.n	8002c38 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	212c      	movs	r1, #44	; 0x2c
 8002c06:	fb01 f303 	mul.w	r3, r1, r3
 8002c0a:	4413      	add	r3, r2
 8002c0c:	3361      	adds	r3, #97	; 0x61
 8002c0e:	2208      	movs	r2, #8
 8002c10:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	b2d2      	uxtb	r2, r2
 8002c1a:	4611      	mov	r1, r2
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f004 fa08 	bl	8007032 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	015a      	lsls	r2, r3, #5
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	4413      	add	r3, r2
 8002c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c2e:	461a      	mov	r2, r3
 8002c30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c34:	6093      	str	r3, [r2, #8]
}
 8002c36:	e14a      	b.n	8002ece <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	015a      	lsls	r2, r3, #5
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	4413      	add	r3, r2
 8002c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	f040 813f 	bne.w	8002ece <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	212c      	movs	r1, #44	; 0x2c
 8002c56:	fb01 f303 	mul.w	r3, r1, r3
 8002c5a:	4413      	add	r3, r2
 8002c5c:	3361      	adds	r3, #97	; 0x61
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d17d      	bne.n	8002d60 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	212c      	movs	r1, #44	; 0x2c
 8002c6a:	fb01 f303 	mul.w	r3, r1, r3
 8002c6e:	4413      	add	r3, r2
 8002c70:	3360      	adds	r3, #96	; 0x60
 8002c72:	2201      	movs	r2, #1
 8002c74:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	212c      	movs	r1, #44	; 0x2c
 8002c7c:	fb01 f303 	mul.w	r3, r1, r3
 8002c80:	4413      	add	r3, r2
 8002c82:	333f      	adds	r3, #63	; 0x3f
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d00a      	beq.n	8002ca0 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	212c      	movs	r1, #44	; 0x2c
 8002c90:	fb01 f303 	mul.w	r3, r1, r3
 8002c94:	4413      	add	r3, r2
 8002c96:	333f      	adds	r3, #63	; 0x3f
 8002c98:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002c9a:	2b03      	cmp	r3, #3
 8002c9c:	f040 8100 	bne.w	8002ea0 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d113      	bne.n	8002cd0 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	212c      	movs	r1, #44	; 0x2c
 8002cae:	fb01 f303 	mul.w	r3, r1, r3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	3355      	adds	r3, #85	; 0x55
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	f083 0301 	eor.w	r3, r3, #1
 8002cbc:	b2d8      	uxtb	r0, r3
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	212c      	movs	r1, #44	; 0x2c
 8002cc4:	fb01 f303 	mul.w	r3, r1, r3
 8002cc8:	4413      	add	r3, r2
 8002cca:	3355      	adds	r3, #85	; 0x55
 8002ccc:	4602      	mov	r2, r0
 8002cce:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	f040 80e3 	bne.w	8002ea0 <HCD_HC_OUT_IRQHandler+0x69c>
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	212c      	movs	r1, #44	; 0x2c
 8002ce0:	fb01 f303 	mul.w	r3, r1, r3
 8002ce4:	4413      	add	r3, r2
 8002ce6:	334c      	adds	r3, #76	; 0x4c
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f000 80d8 	beq.w	8002ea0 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	212c      	movs	r1, #44	; 0x2c
 8002cf6:	fb01 f303 	mul.w	r3, r1, r3
 8002cfa:	4413      	add	r3, r2
 8002cfc:	334c      	adds	r3, #76	; 0x4c
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	202c      	movs	r0, #44	; 0x2c
 8002d06:	fb00 f202 	mul.w	r2, r0, r2
 8002d0a:	440a      	add	r2, r1
 8002d0c:	3240      	adds	r2, #64	; 0x40
 8002d0e:	8812      	ldrh	r2, [r2, #0]
 8002d10:	4413      	add	r3, r2
 8002d12:	3b01      	subs	r3, #1
 8002d14:	6879      	ldr	r1, [r7, #4]
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	202c      	movs	r0, #44	; 0x2c
 8002d1a:	fb00 f202 	mul.w	r2, r0, r2
 8002d1e:	440a      	add	r2, r1
 8002d20:	3240      	adds	r2, #64	; 0x40
 8002d22:	8812      	ldrh	r2, [r2, #0]
 8002d24:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d28:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 80b5 	beq.w	8002ea0 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	212c      	movs	r1, #44	; 0x2c
 8002d3c:	fb01 f303 	mul.w	r3, r1, r3
 8002d40:	4413      	add	r3, r2
 8002d42:	3355      	adds	r3, #85	; 0x55
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	f083 0301 	eor.w	r3, r3, #1
 8002d4a:	b2d8      	uxtb	r0, r3
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	212c      	movs	r1, #44	; 0x2c
 8002d52:	fb01 f303 	mul.w	r3, r1, r3
 8002d56:	4413      	add	r3, r2
 8002d58:	3355      	adds	r3, #85	; 0x55
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	701a      	strb	r2, [r3, #0]
 8002d5e:	e09f      	b.n	8002ea0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	212c      	movs	r1, #44	; 0x2c
 8002d66:	fb01 f303 	mul.w	r3, r1, r3
 8002d6a:	4413      	add	r3, r2
 8002d6c:	3361      	adds	r3, #97	; 0x61
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b03      	cmp	r3, #3
 8002d72:	d109      	bne.n	8002d88 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	212c      	movs	r1, #44	; 0x2c
 8002d7a:	fb01 f303 	mul.w	r3, r1, r3
 8002d7e:	4413      	add	r3, r2
 8002d80:	3360      	adds	r3, #96	; 0x60
 8002d82:	2202      	movs	r2, #2
 8002d84:	701a      	strb	r2, [r3, #0]
 8002d86:	e08b      	b.n	8002ea0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	212c      	movs	r1, #44	; 0x2c
 8002d8e:	fb01 f303 	mul.w	r3, r1, r3
 8002d92:	4413      	add	r3, r2
 8002d94:	3361      	adds	r3, #97	; 0x61
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b04      	cmp	r3, #4
 8002d9a:	d109      	bne.n	8002db0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	212c      	movs	r1, #44	; 0x2c
 8002da2:	fb01 f303 	mul.w	r3, r1, r3
 8002da6:	4413      	add	r3, r2
 8002da8:	3360      	adds	r3, #96	; 0x60
 8002daa:	2202      	movs	r2, #2
 8002dac:	701a      	strb	r2, [r3, #0]
 8002dae:	e077      	b.n	8002ea0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	212c      	movs	r1, #44	; 0x2c
 8002db6:	fb01 f303 	mul.w	r3, r1, r3
 8002dba:	4413      	add	r3, r2
 8002dbc:	3361      	adds	r3, #97	; 0x61
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2b05      	cmp	r3, #5
 8002dc2:	d109      	bne.n	8002dd8 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	212c      	movs	r1, #44	; 0x2c
 8002dca:	fb01 f303 	mul.w	r3, r1, r3
 8002dce:	4413      	add	r3, r2
 8002dd0:	3360      	adds	r3, #96	; 0x60
 8002dd2:	2205      	movs	r2, #5
 8002dd4:	701a      	strb	r2, [r3, #0]
 8002dd6:	e063      	b.n	8002ea0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	212c      	movs	r1, #44	; 0x2c
 8002dde:	fb01 f303 	mul.w	r3, r1, r3
 8002de2:	4413      	add	r3, r2
 8002de4:	3361      	adds	r3, #97	; 0x61
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	2b06      	cmp	r3, #6
 8002dea:	d009      	beq.n	8002e00 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	212c      	movs	r1, #44	; 0x2c
 8002df2:	fb01 f303 	mul.w	r3, r1, r3
 8002df6:	4413      	add	r3, r2
 8002df8:	3361      	adds	r3, #97	; 0x61
 8002dfa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002dfc:	2b08      	cmp	r3, #8
 8002dfe:	d14f      	bne.n	8002ea0 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	212c      	movs	r1, #44	; 0x2c
 8002e06:	fb01 f303 	mul.w	r3, r1, r3
 8002e0a:	4413      	add	r3, r2
 8002e0c:	335c      	adds	r3, #92	; 0x5c
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	1c5a      	adds	r2, r3, #1
 8002e12:	6879      	ldr	r1, [r7, #4]
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	202c      	movs	r0, #44	; 0x2c
 8002e18:	fb00 f303 	mul.w	r3, r0, r3
 8002e1c:	440b      	add	r3, r1
 8002e1e:	335c      	adds	r3, #92	; 0x5c
 8002e20:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	212c      	movs	r1, #44	; 0x2c
 8002e28:	fb01 f303 	mul.w	r3, r1, r3
 8002e2c:	4413      	add	r3, r2
 8002e2e:	335c      	adds	r3, #92	; 0x5c
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d912      	bls.n	8002e5c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	212c      	movs	r1, #44	; 0x2c
 8002e3c:	fb01 f303 	mul.w	r3, r1, r3
 8002e40:	4413      	add	r3, r2
 8002e42:	335c      	adds	r3, #92	; 0x5c
 8002e44:	2200      	movs	r2, #0
 8002e46:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	212c      	movs	r1, #44	; 0x2c
 8002e4e:	fb01 f303 	mul.w	r3, r1, r3
 8002e52:	4413      	add	r3, r2
 8002e54:	3360      	adds	r3, #96	; 0x60
 8002e56:	2204      	movs	r2, #4
 8002e58:	701a      	strb	r2, [r3, #0]
 8002e5a:	e021      	b.n	8002ea0 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	212c      	movs	r1, #44	; 0x2c
 8002e62:	fb01 f303 	mul.w	r3, r1, r3
 8002e66:	4413      	add	r3, r2
 8002e68:	3360      	adds	r3, #96	; 0x60
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	015a      	lsls	r2, r3, #5
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	4413      	add	r3, r2
 8002e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e84:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e8c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	015a      	lsls	r2, r3, #5
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	4413      	add	r3, r2
 8002e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	015a      	lsls	r2, r3, #5
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eac:	461a      	mov	r2, r3
 8002eae:	2302      	movs	r3, #2
 8002eb0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	b2d9      	uxtb	r1, r3
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	202c      	movs	r0, #44	; 0x2c
 8002ebc:	fb00 f303 	mul.w	r3, r0, r3
 8002ec0:	4413      	add	r3, r2
 8002ec2:	3360      	adds	r3, #96	; 0x60
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f005 fbbb 	bl	8008644 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002ece:	bf00      	nop
 8002ed0:	3720      	adds	r7, #32
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b08a      	sub	sp, #40	; 0x28
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	f003 030f 	and.w	r3, r3, #15
 8002ef6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	0c5b      	lsrs	r3, r3, #17
 8002efc:	f003 030f 	and.w	r3, r3, #15
 8002f00:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	091b      	lsrs	r3, r3, #4
 8002f06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f0a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d004      	beq.n	8002f1c <HCD_RXQLVL_IRQHandler+0x46>
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	2b05      	cmp	r3, #5
 8002f16:	f000 80a9 	beq.w	800306c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002f1a:	e0aa      	b.n	8003072 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 80a6 	beq.w	8003070 <HCD_RXQLVL_IRQHandler+0x19a>
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	212c      	movs	r1, #44	; 0x2c
 8002f2a:	fb01 f303 	mul.w	r3, r1, r3
 8002f2e:	4413      	add	r3, r2
 8002f30:	3344      	adds	r3, #68	; 0x44
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f000 809b 	beq.w	8003070 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	212c      	movs	r1, #44	; 0x2c
 8002f40:	fb01 f303 	mul.w	r3, r1, r3
 8002f44:	4413      	add	r3, r2
 8002f46:	3350      	adds	r3, #80	; 0x50
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	441a      	add	r2, r3
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	202c      	movs	r0, #44	; 0x2c
 8002f54:	fb00 f303 	mul.w	r3, r0, r3
 8002f58:	440b      	add	r3, r1
 8002f5a:	334c      	adds	r3, #76	; 0x4c
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d87a      	bhi.n	8003058 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6818      	ldr	r0, [r3, #0]
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	212c      	movs	r1, #44	; 0x2c
 8002f6c:	fb01 f303 	mul.w	r3, r1, r3
 8002f70:	4413      	add	r3, r2
 8002f72:	3344      	adds	r3, #68	; 0x44
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	b292      	uxth	r2, r2
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	f003 fbda 	bl	8006734 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	212c      	movs	r1, #44	; 0x2c
 8002f86:	fb01 f303 	mul.w	r3, r1, r3
 8002f8a:	4413      	add	r3, r2
 8002f8c:	3344      	adds	r3, #68	; 0x44
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	441a      	add	r2, r3
 8002f94:	6879      	ldr	r1, [r7, #4]
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	202c      	movs	r0, #44	; 0x2c
 8002f9a:	fb00 f303 	mul.w	r3, r0, r3
 8002f9e:	440b      	add	r3, r1
 8002fa0:	3344      	adds	r3, #68	; 0x44
 8002fa2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	212c      	movs	r1, #44	; 0x2c
 8002faa:	fb01 f303 	mul.w	r3, r1, r3
 8002fae:	4413      	add	r3, r2
 8002fb0:	3350      	adds	r3, #80	; 0x50
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	441a      	add	r2, r3
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	202c      	movs	r0, #44	; 0x2c
 8002fbe:	fb00 f303 	mul.w	r3, r0, r3
 8002fc2:	440b      	add	r3, r1
 8002fc4:	3350      	adds	r3, #80	; 0x50
 8002fc6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	015a      	lsls	r2, r3, #5
 8002fcc:	6a3b      	ldr	r3, [r7, #32]
 8002fce:	4413      	add	r3, r2
 8002fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	0cdb      	lsrs	r3, r3, #19
 8002fd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fdc:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	212c      	movs	r1, #44	; 0x2c
 8002fe4:	fb01 f303 	mul.w	r3, r1, r3
 8002fe8:	4413      	add	r3, r2
 8002fea:	3340      	adds	r3, #64	; 0x40
 8002fec:	881b      	ldrh	r3, [r3, #0]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d13c      	bne.n	8003070 <HCD_RXQLVL_IRQHandler+0x19a>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d039      	beq.n	8003070 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	015a      	lsls	r2, r3, #5
 8003000:	6a3b      	ldr	r3, [r7, #32]
 8003002:	4413      	add	r3, r2
 8003004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003012:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800301a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	015a      	lsls	r2, r3, #5
 8003020:	6a3b      	ldr	r3, [r7, #32]
 8003022:	4413      	add	r3, r2
 8003024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003028:	461a      	mov	r2, r3
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	212c      	movs	r1, #44	; 0x2c
 8003034:	fb01 f303 	mul.w	r3, r1, r3
 8003038:	4413      	add	r3, r2
 800303a:	3354      	adds	r3, #84	; 0x54
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	f083 0301 	eor.w	r3, r3, #1
 8003042:	b2d8      	uxtb	r0, r3
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	212c      	movs	r1, #44	; 0x2c
 800304a:	fb01 f303 	mul.w	r3, r1, r3
 800304e:	4413      	add	r3, r2
 8003050:	3354      	adds	r3, #84	; 0x54
 8003052:	4602      	mov	r2, r0
 8003054:	701a      	strb	r2, [r3, #0]
      break;
 8003056:	e00b      	b.n	8003070 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	212c      	movs	r1, #44	; 0x2c
 800305e:	fb01 f303 	mul.w	r3, r1, r3
 8003062:	4413      	add	r3, r2
 8003064:	3360      	adds	r3, #96	; 0x60
 8003066:	2204      	movs	r2, #4
 8003068:	701a      	strb	r2, [r3, #0]
      break;
 800306a:	e001      	b.n	8003070 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800306c:	bf00      	nop
 800306e:	e000      	b.n	8003072 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003070:	bf00      	nop
  }
}
 8003072:	bf00      	nop
 8003074:	3728      	adds	r7, #40	; 0x28
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b086      	sub	sp, #24
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80030a6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d10b      	bne.n	80030ca <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d102      	bne.n	80030c2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f005 faa5 	bl	800860c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	f043 0302 	orr.w	r3, r3, #2
 80030c8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f003 0308 	and.w	r3, r3, #8
 80030d0:	2b08      	cmp	r3, #8
 80030d2:	d132      	bne.n	800313a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	f043 0308 	orr.w	r3, r3, #8
 80030da:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f003 0304 	and.w	r3, r3, #4
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	d126      	bne.n	8003134 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d113      	bne.n	8003116 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80030f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030f8:	d106      	bne.n	8003108 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2102      	movs	r1, #2
 8003100:	4618      	mov	r0, r3
 8003102:	f003 fc85 	bl	8006a10 <USB_InitFSLSPClkSel>
 8003106:	e011      	b.n	800312c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2101      	movs	r1, #1
 800310e:	4618      	mov	r0, r3
 8003110:	f003 fc7e 	bl	8006a10 <USB_InitFSLSPClkSel>
 8003114:	e00a      	b.n	800312c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d106      	bne.n	800312c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003124:	461a      	mov	r2, r3
 8003126:	f64e 2360 	movw	r3, #60000	; 0xea60
 800312a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f005 fa97 	bl	8008660 <HAL_HCD_PortEnabled_Callback>
 8003132:	e002      	b.n	800313a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f005 faa1 	bl	800867c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f003 0320 	and.w	r3, r3, #32
 8003140:	2b20      	cmp	r3, #32
 8003142:	d103      	bne.n	800314c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	f043 0320 	orr.w	r3, r3, #32
 800314a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003152:	461a      	mov	r2, r3
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	6013      	str	r3, [r2, #0]
}
 8003158:	bf00      	nop
 800315a:	3718      	adds	r7, #24
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e12b      	b.n	80033ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d106      	bne.n	800318c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7fd fdc6 	bl	8000d18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2224      	movs	r2, #36	; 0x24
 8003190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f022 0201 	bic.w	r2, r2, #1
 80031a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031c4:	f001 fa20 	bl	8004608 <HAL_RCC_GetPCLK1Freq>
 80031c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	4a81      	ldr	r2, [pc, #516]	; (80033d4 <HAL_I2C_Init+0x274>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d807      	bhi.n	80031e4 <HAL_I2C_Init+0x84>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	4a80      	ldr	r2, [pc, #512]	; (80033d8 <HAL_I2C_Init+0x278>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	bf94      	ite	ls
 80031dc:	2301      	movls	r3, #1
 80031de:	2300      	movhi	r3, #0
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	e006      	b.n	80031f2 <HAL_I2C_Init+0x92>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	4a7d      	ldr	r2, [pc, #500]	; (80033dc <HAL_I2C_Init+0x27c>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	bf94      	ite	ls
 80031ec:	2301      	movls	r3, #1
 80031ee:	2300      	movhi	r3, #0
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e0e7      	b.n	80033ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	4a78      	ldr	r2, [pc, #480]	; (80033e0 <HAL_I2C_Init+0x280>)
 80031fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003202:	0c9b      	lsrs	r3, r3, #18
 8003204:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	430a      	orrs	r2, r1
 8003218:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	6a1b      	ldr	r3, [r3, #32]
 8003220:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	4a6a      	ldr	r2, [pc, #424]	; (80033d4 <HAL_I2C_Init+0x274>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d802      	bhi.n	8003234 <HAL_I2C_Init+0xd4>
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	3301      	adds	r3, #1
 8003232:	e009      	b.n	8003248 <HAL_I2C_Init+0xe8>
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800323a:	fb02 f303 	mul.w	r3, r2, r3
 800323e:	4a69      	ldr	r2, [pc, #420]	; (80033e4 <HAL_I2C_Init+0x284>)
 8003240:	fba2 2303 	umull	r2, r3, r2, r3
 8003244:	099b      	lsrs	r3, r3, #6
 8003246:	3301      	adds	r3, #1
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	6812      	ldr	r2, [r2, #0]
 800324c:	430b      	orrs	r3, r1
 800324e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800325a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	495c      	ldr	r1, [pc, #368]	; (80033d4 <HAL_I2C_Init+0x274>)
 8003264:	428b      	cmp	r3, r1
 8003266:	d819      	bhi.n	800329c <HAL_I2C_Init+0x13c>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	1e59      	subs	r1, r3, #1
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	fbb1 f3f3 	udiv	r3, r1, r3
 8003276:	1c59      	adds	r1, r3, #1
 8003278:	f640 73fc 	movw	r3, #4092	; 0xffc
 800327c:	400b      	ands	r3, r1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00a      	beq.n	8003298 <HAL_I2C_Init+0x138>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	1e59      	subs	r1, r3, #1
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003290:	3301      	adds	r3, #1
 8003292:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003296:	e051      	b.n	800333c <HAL_I2C_Init+0x1dc>
 8003298:	2304      	movs	r3, #4
 800329a:	e04f      	b.n	800333c <HAL_I2C_Init+0x1dc>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d111      	bne.n	80032c8 <HAL_I2C_Init+0x168>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	1e58      	subs	r0, r3, #1
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6859      	ldr	r1, [r3, #4]
 80032ac:	460b      	mov	r3, r1
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	440b      	add	r3, r1
 80032b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80032b6:	3301      	adds	r3, #1
 80032b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032bc:	2b00      	cmp	r3, #0
 80032be:	bf0c      	ite	eq
 80032c0:	2301      	moveq	r3, #1
 80032c2:	2300      	movne	r3, #0
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	e012      	b.n	80032ee <HAL_I2C_Init+0x18e>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	1e58      	subs	r0, r3, #1
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6859      	ldr	r1, [r3, #4]
 80032d0:	460b      	mov	r3, r1
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	440b      	add	r3, r1
 80032d6:	0099      	lsls	r1, r3, #2
 80032d8:	440b      	add	r3, r1
 80032da:	fbb0 f3f3 	udiv	r3, r0, r3
 80032de:	3301      	adds	r3, #1
 80032e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	bf0c      	ite	eq
 80032e8:	2301      	moveq	r3, #1
 80032ea:	2300      	movne	r3, #0
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <HAL_I2C_Init+0x196>
 80032f2:	2301      	movs	r3, #1
 80032f4:	e022      	b.n	800333c <HAL_I2C_Init+0x1dc>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10e      	bne.n	800331c <HAL_I2C_Init+0x1bc>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	1e58      	subs	r0, r3, #1
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6859      	ldr	r1, [r3, #4]
 8003306:	460b      	mov	r3, r1
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	440b      	add	r3, r1
 800330c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003310:	3301      	adds	r3, #1
 8003312:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003316:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800331a:	e00f      	b.n	800333c <HAL_I2C_Init+0x1dc>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	1e58      	subs	r0, r3, #1
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6859      	ldr	r1, [r3, #4]
 8003324:	460b      	mov	r3, r1
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	440b      	add	r3, r1
 800332a:	0099      	lsls	r1, r3, #2
 800332c:	440b      	add	r3, r1
 800332e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003332:	3301      	adds	r3, #1
 8003334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003338:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800333c:	6879      	ldr	r1, [r7, #4]
 800333e:	6809      	ldr	r1, [r1, #0]
 8003340:	4313      	orrs	r3, r2
 8003342:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	69da      	ldr	r2, [r3, #28]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	431a      	orrs	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	430a      	orrs	r2, r1
 800335e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800336a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	6911      	ldr	r1, [r2, #16]
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	68d2      	ldr	r2, [r2, #12]
 8003376:	4311      	orrs	r1, r2
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	6812      	ldr	r2, [r2, #0]
 800337c:	430b      	orrs	r3, r1
 800337e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	695a      	ldr	r2, [r3, #20]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	431a      	orrs	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	430a      	orrs	r2, r1
 800339a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f042 0201 	orr.w	r2, r2, #1
 80033aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2220      	movs	r2, #32
 80033b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	000186a0 	.word	0x000186a0
 80033d8:	001e847f 	.word	0x001e847f
 80033dc:	003d08ff 	.word	0x003d08ff
 80033e0:	431bde83 	.word	0x431bde83
 80033e4:	10624dd3 	.word	0x10624dd3

080033e8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b088      	sub	sp, #32
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e128      	b.n	800364c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d109      	bne.n	800341a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a90      	ldr	r2, [pc, #576]	; (8003654 <HAL_I2S_Init+0x26c>)
 8003412:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f7fd fcc7 	bl	8000da8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2202      	movs	r2, #2
 800341e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	69db      	ldr	r3, [r3, #28]
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	6812      	ldr	r2, [r2, #0]
 800342c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003430:	f023 030f 	bic.w	r3, r3, #15
 8003434:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2202      	movs	r2, #2
 800343c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	2b02      	cmp	r3, #2
 8003444:	d060      	beq.n	8003508 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d102      	bne.n	8003454 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800344e:	2310      	movs	r3, #16
 8003450:	617b      	str	r3, [r7, #20]
 8003452:	e001      	b.n	8003458 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003454:	2320      	movs	r3, #32
 8003456:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	2b20      	cmp	r3, #32
 800345e:	d802      	bhi.n	8003466 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003466:	2001      	movs	r0, #1
 8003468:	f001 f9d8 	bl	800481c <HAL_RCCEx_GetPeriphCLKFreq>
 800346c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003476:	d125      	bne.n	80034c4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d010      	beq.n	80034a2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	fbb2 f2f3 	udiv	r2, r2, r3
 800348a:	4613      	mov	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4413      	add	r3, r2
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	461a      	mov	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	fbb2 f3f3 	udiv	r3, r2, r3
 800349c:	3305      	adds	r3, #5
 800349e:	613b      	str	r3, [r7, #16]
 80034a0:	e01f      	b.n	80034e2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80034ac:	4613      	mov	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	461a      	mov	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80034be:	3305      	adds	r3, #5
 80034c0:	613b      	str	r3, [r7, #16]
 80034c2:	e00e      	b.n	80034e2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80034cc:	4613      	mov	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	461a      	mov	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	fbb2 f3f3 	udiv	r3, r2, r3
 80034de:	3305      	adds	r3, #5
 80034e0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	4a5c      	ldr	r2, [pc, #368]	; (8003658 <HAL_I2S_Init+0x270>)
 80034e6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ea:	08db      	lsrs	r3, r3, #3
 80034ec:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	f003 0301 	and.w	r3, r3, #1
 80034f4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	085b      	lsrs	r3, r3, #1
 80034fe:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	021b      	lsls	r3, r3, #8
 8003504:	61bb      	str	r3, [r7, #24]
 8003506:	e003      	b.n	8003510 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003508:	2302      	movs	r3, #2
 800350a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800350c:	2300      	movs	r3, #0
 800350e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d902      	bls.n	800351c <HAL_I2S_Init+0x134>
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	2bff      	cmp	r3, #255	; 0xff
 800351a:	d907      	bls.n	800352c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003520:	f043 0210 	orr.w	r2, r3, #16
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e08f      	b.n	800364c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	691a      	ldr	r2, [r3, #16]
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	ea42 0103 	orr.w	r1, r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	69fa      	ldr	r2, [r7, #28]
 800353c:	430a      	orrs	r2, r1
 800353e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800354a:	f023 030f 	bic.w	r3, r3, #15
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	6851      	ldr	r1, [r2, #4]
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	6892      	ldr	r2, [r2, #8]
 8003556:	4311      	orrs	r1, r2
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	68d2      	ldr	r2, [r2, #12]
 800355c:	4311      	orrs	r1, r2
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	6992      	ldr	r2, [r2, #24]
 8003562:	430a      	orrs	r2, r1
 8003564:	431a      	orrs	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800356e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d161      	bne.n	800363c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a38      	ldr	r2, [pc, #224]	; (800365c <HAL_I2S_Init+0x274>)
 800357c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a37      	ldr	r2, [pc, #220]	; (8003660 <HAL_I2S_Init+0x278>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d101      	bne.n	800358c <HAL_I2S_Init+0x1a4>
 8003588:	4b36      	ldr	r3, [pc, #216]	; (8003664 <HAL_I2S_Init+0x27c>)
 800358a:	e001      	b.n	8003590 <HAL_I2S_Init+0x1a8>
 800358c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003590:	69db      	ldr	r3, [r3, #28]
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	6812      	ldr	r2, [r2, #0]
 8003596:	4932      	ldr	r1, [pc, #200]	; (8003660 <HAL_I2S_Init+0x278>)
 8003598:	428a      	cmp	r2, r1
 800359a:	d101      	bne.n	80035a0 <HAL_I2S_Init+0x1b8>
 800359c:	4a31      	ldr	r2, [pc, #196]	; (8003664 <HAL_I2S_Init+0x27c>)
 800359e:	e001      	b.n	80035a4 <HAL_I2S_Init+0x1bc>
 80035a0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80035a4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80035a8:	f023 030f 	bic.w	r3, r3, #15
 80035ac:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a2b      	ldr	r2, [pc, #172]	; (8003660 <HAL_I2S_Init+0x278>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d101      	bne.n	80035bc <HAL_I2S_Init+0x1d4>
 80035b8:	4b2a      	ldr	r3, [pc, #168]	; (8003664 <HAL_I2S_Init+0x27c>)
 80035ba:	e001      	b.n	80035c0 <HAL_I2S_Init+0x1d8>
 80035bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035c0:	2202      	movs	r2, #2
 80035c2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a25      	ldr	r2, [pc, #148]	; (8003660 <HAL_I2S_Init+0x278>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d101      	bne.n	80035d2 <HAL_I2S_Init+0x1ea>
 80035ce:	4b25      	ldr	r3, [pc, #148]	; (8003664 <HAL_I2S_Init+0x27c>)
 80035d0:	e001      	b.n	80035d6 <HAL_I2S_Init+0x1ee>
 80035d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035e2:	d003      	beq.n	80035ec <HAL_I2S_Init+0x204>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d103      	bne.n	80035f4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80035ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035f0:	613b      	str	r3, [r7, #16]
 80035f2:	e001      	b.n	80035f8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80035f4:	2300      	movs	r3, #0
 80035f6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003602:	4313      	orrs	r3, r2
 8003604:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800360c:	4313      	orrs	r3, r2
 800360e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003616:	4313      	orrs	r3, r2
 8003618:	b29a      	uxth	r2, r3
 800361a:	897b      	ldrh	r3, [r7, #10]
 800361c:	4313      	orrs	r3, r2
 800361e:	b29b      	uxth	r3, r3
 8003620:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003624:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a0d      	ldr	r2, [pc, #52]	; (8003660 <HAL_I2S_Init+0x278>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d101      	bne.n	8003634 <HAL_I2S_Init+0x24c>
 8003630:	4b0c      	ldr	r3, [pc, #48]	; (8003664 <HAL_I2S_Init+0x27c>)
 8003632:	e001      	b.n	8003638 <HAL_I2S_Init+0x250>
 8003634:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003638:	897a      	ldrh	r2, [r7, #10]
 800363a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3720      	adds	r7, #32
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	0800375f 	.word	0x0800375f
 8003658:	cccccccd 	.word	0xcccccccd
 800365c:	08003875 	.word	0x08003875
 8003660:	40003800 	.word	0x40003800
 8003664:	40003400 	.word	0x40003400

08003668 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	881a      	ldrh	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036bc:	1c9a      	adds	r2, r3, #2
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	3b01      	subs	r3, #1
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10e      	bne.n	80036f8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036e8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7ff ffb8 	bl	8003668 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80036f8:	bf00      	nop
 80036fa:	3708      	adds	r7, #8
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68da      	ldr	r2, [r3, #12]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003712:	b292      	uxth	r2, r2
 8003714:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371a:	1c9a      	adds	r2, r3, #2
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003724:	b29b      	uxth	r3, r3
 8003726:	3b01      	subs	r3, #1
 8003728:	b29a      	uxth	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003732:	b29b      	uxth	r3, r3
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10e      	bne.n	8003756 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003746:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f7ff ff93 	bl	800367c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003756:	bf00      	nop
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b086      	sub	sp, #24
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b04      	cmp	r3, #4
 8003778:	d13a      	bne.n	80037f0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	2b01      	cmp	r3, #1
 8003782:	d109      	bne.n	8003798 <I2S_IRQHandler+0x3a>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800378e:	2b40      	cmp	r3, #64	; 0x40
 8003790:	d102      	bne.n	8003798 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7ff ffb4 	bl	8003700 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800379e:	2b40      	cmp	r3, #64	; 0x40
 80037a0:	d126      	bne.n	80037f0 <I2S_IRQHandler+0x92>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f003 0320 	and.w	r3, r3, #32
 80037ac:	2b20      	cmp	r3, #32
 80037ae:	d11f      	bne.n	80037f0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037be:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80037c0:	2300      	movs	r3, #0
 80037c2:	613b      	str	r3, [r7, #16]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	613b      	str	r3, [r7, #16]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	613b      	str	r3, [r7, #16]
 80037d4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e2:	f043 0202 	orr.w	r2, r3, #2
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7ff ff50 	bl	8003690 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	2b03      	cmp	r3, #3
 80037fa:	d136      	bne.n	800386a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b02      	cmp	r3, #2
 8003804:	d109      	bne.n	800381a <I2S_IRQHandler+0xbc>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003810:	2b80      	cmp	r3, #128	; 0x80
 8003812:	d102      	bne.n	800381a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f7ff ff45 	bl	80036a4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	f003 0308 	and.w	r3, r3, #8
 8003820:	2b08      	cmp	r3, #8
 8003822:	d122      	bne.n	800386a <I2S_IRQHandler+0x10c>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f003 0320 	and.w	r3, r3, #32
 800382e:	2b20      	cmp	r3, #32
 8003830:	d11b      	bne.n	800386a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003840:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003842:	2300      	movs	r3, #0
 8003844:	60fb      	str	r3, [r7, #12]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	60fb      	str	r3, [r7, #12]
 800384e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385c:	f043 0204 	orr.w	r2, r3, #4
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f7ff ff13 	bl	8003690 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800386a:	bf00      	nop
 800386c:	3718      	adds	r7, #24
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
	...

08003874 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b088      	sub	sp, #32
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a92      	ldr	r2, [pc, #584]	; (8003ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d101      	bne.n	8003892 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800388e:	4b92      	ldr	r3, [pc, #584]	; (8003ad8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003890:	e001      	b.n	8003896 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003892:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a8b      	ldr	r2, [pc, #556]	; (8003ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d101      	bne.n	80038b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80038ac:	4b8a      	ldr	r3, [pc, #552]	; (8003ad8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038ae:	e001      	b.n	80038b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80038b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038c0:	d004      	beq.n	80038cc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f040 8099 	bne.w	80039fe <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d107      	bne.n	80038e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d002      	beq.n	80038e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 f925 	bl	8003b30 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d107      	bne.n	8003900 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d002      	beq.n	8003900 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f9c8 	bl	8003c90 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003906:	2b40      	cmp	r3, #64	; 0x40
 8003908:	d13a      	bne.n	8003980 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	f003 0320 	and.w	r3, r3, #32
 8003910:	2b00      	cmp	r3, #0
 8003912:	d035      	beq.n	8003980 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a6e      	ldr	r2, [pc, #440]	; (8003ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d101      	bne.n	8003922 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800391e:	4b6e      	ldr	r3, [pc, #440]	; (8003ad8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003920:	e001      	b.n	8003926 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003922:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003926:	685a      	ldr	r2, [r3, #4]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4969      	ldr	r1, [pc, #420]	; (8003ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800392e:	428b      	cmp	r3, r1
 8003930:	d101      	bne.n	8003936 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003932:	4b69      	ldr	r3, [pc, #420]	; (8003ad8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003934:	e001      	b.n	800393a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003936:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800393a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800393e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	685a      	ldr	r2, [r3, #4]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800394e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003950:	2300      	movs	r3, #0
 8003952:	60fb      	str	r3, [r7, #12]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	60fb      	str	r3, [r7, #12]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003972:	f043 0202 	orr.w	r2, r3, #2
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7ff fe88 	bl	8003690 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	f003 0308 	and.w	r3, r3, #8
 8003986:	2b08      	cmp	r3, #8
 8003988:	f040 80c3 	bne.w	8003b12 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	f003 0320 	and.w	r3, r3, #32
 8003992:	2b00      	cmp	r3, #0
 8003994:	f000 80bd 	beq.w	8003b12 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039a6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a49      	ldr	r2, [pc, #292]	; (8003ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d101      	bne.n	80039b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80039b2:	4b49      	ldr	r3, [pc, #292]	; (8003ad8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039b4:	e001      	b.n	80039ba <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80039b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039ba:	685a      	ldr	r2, [r3, #4]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4944      	ldr	r1, [pc, #272]	; (8003ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039c2:	428b      	cmp	r3, r1
 80039c4:	d101      	bne.n	80039ca <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80039c6:	4b44      	ldr	r3, [pc, #272]	; (8003ad8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039c8:	e001      	b.n	80039ce <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80039ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039d2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80039d4:	2300      	movs	r3, #0
 80039d6:	60bb      	str	r3, [r7, #8]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	60bb      	str	r3, [r7, #8]
 80039e0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ee:	f043 0204 	orr.w	r2, r3, #4
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f7ff fe4a 	bl	8003690 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80039fc:	e089      	b.n	8003b12 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d107      	bne.n	8003a18 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d002      	beq.n	8003a18 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f8be 	bl	8003b94 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d107      	bne.n	8003a32 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d002      	beq.n	8003a32 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 f8fd 	bl	8003c2c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a38:	2b40      	cmp	r3, #64	; 0x40
 8003a3a:	d12f      	bne.n	8003a9c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	f003 0320 	and.w	r3, r3, #32
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d02a      	beq.n	8003a9c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a54:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a1e      	ldr	r2, [pc, #120]	; (8003ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d101      	bne.n	8003a64 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003a60:	4b1d      	ldr	r3, [pc, #116]	; (8003ad8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a62:	e001      	b.n	8003a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003a64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4919      	ldr	r1, [pc, #100]	; (8003ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a70:	428b      	cmp	r3, r1
 8003a72:	d101      	bne.n	8003a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003a74:	4b18      	ldr	r3, [pc, #96]	; (8003ad8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a76:	e001      	b.n	8003a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003a78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a7c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a80:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8e:	f043 0202 	orr.w	r2, r3, #2
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f7ff fdfa 	bl	8003690 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	f003 0308 	and.w	r3, r3, #8
 8003aa2:	2b08      	cmp	r3, #8
 8003aa4:	d136      	bne.n	8003b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	f003 0320 	and.w	r3, r3, #32
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d031      	beq.n	8003b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a07      	ldr	r2, [pc, #28]	; (8003ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d101      	bne.n	8003abe <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003aba:	4b07      	ldr	r3, [pc, #28]	; (8003ad8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003abc:	e001      	b.n	8003ac2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003abe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4902      	ldr	r1, [pc, #8]	; (8003ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003aca:	428b      	cmp	r3, r1
 8003acc:	d106      	bne.n	8003adc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003ace:	4b02      	ldr	r3, [pc, #8]	; (8003ad8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ad0:	e006      	b.n	8003ae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003ad2:	bf00      	nop
 8003ad4:	40003800 	.word	0x40003800
 8003ad8:	40003400 	.word	0x40003400
 8003adc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ae0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ae4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685a      	ldr	r2, [r3, #4]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003af4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b02:	f043 0204 	orr.w	r2, r3, #4
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7ff fdc0 	bl	8003690 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b10:	e000      	b.n	8003b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b12:	bf00      	nop
}
 8003b14:	bf00      	nop
 8003b16:	3720      	adds	r7, #32
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3c:	1c99      	adds	r1, r3, #2
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	6251      	str	r1, [r2, #36]	; 0x24
 8003b42:	881a      	ldrh	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	3b01      	subs	r3, #1
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d113      	bne.n	8003b8a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b70:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d106      	bne.n	8003b8a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f7ff ffc9 	bl	8003b1c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b8a:	bf00      	nop
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
	...

08003b94 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba0:	1c99      	adds	r1, r3, #2
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	6251      	str	r1, [r2, #36]	; 0x24
 8003ba6:	8819      	ldrh	r1, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a1d      	ldr	r2, [pc, #116]	; (8003c24 <I2SEx_TxISR_I2SExt+0x90>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d101      	bne.n	8003bb6 <I2SEx_TxISR_I2SExt+0x22>
 8003bb2:	4b1d      	ldr	r3, [pc, #116]	; (8003c28 <I2SEx_TxISR_I2SExt+0x94>)
 8003bb4:	e001      	b.n	8003bba <I2SEx_TxISR_I2SExt+0x26>
 8003bb6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bba:	460a      	mov	r2, r1
 8003bbc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d121      	bne.n	8003c1a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a12      	ldr	r2, [pc, #72]	; (8003c24 <I2SEx_TxISR_I2SExt+0x90>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d101      	bne.n	8003be4 <I2SEx_TxISR_I2SExt+0x50>
 8003be0:	4b11      	ldr	r3, [pc, #68]	; (8003c28 <I2SEx_TxISR_I2SExt+0x94>)
 8003be2:	e001      	b.n	8003be8 <I2SEx_TxISR_I2SExt+0x54>
 8003be4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003be8:	685a      	ldr	r2, [r3, #4]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	490d      	ldr	r1, [pc, #52]	; (8003c24 <I2SEx_TxISR_I2SExt+0x90>)
 8003bf0:	428b      	cmp	r3, r1
 8003bf2:	d101      	bne.n	8003bf8 <I2SEx_TxISR_I2SExt+0x64>
 8003bf4:	4b0c      	ldr	r3, [pc, #48]	; (8003c28 <I2SEx_TxISR_I2SExt+0x94>)
 8003bf6:	e001      	b.n	8003bfc <I2SEx_TxISR_I2SExt+0x68>
 8003bf8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bfc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c00:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d106      	bne.n	8003c1a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f7ff ff81 	bl	8003b1c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c1a:	bf00      	nop
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	40003800 	.word	0x40003800
 8003c28:	40003400 	.word	0x40003400

08003c2c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68d8      	ldr	r0, [r3, #12]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3e:	1c99      	adds	r1, r3, #2
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003c44:	b282      	uxth	r2, r0
 8003c46:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d113      	bne.n	8003c88 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c6e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d106      	bne.n	8003c88 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7ff ff4a 	bl	8003b1c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c88:	bf00      	nop
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a20      	ldr	r2, [pc, #128]	; (8003d20 <I2SEx_RxISR_I2SExt+0x90>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d101      	bne.n	8003ca6 <I2SEx_RxISR_I2SExt+0x16>
 8003ca2:	4b20      	ldr	r3, [pc, #128]	; (8003d24 <I2SEx_RxISR_I2SExt+0x94>)
 8003ca4:	e001      	b.n	8003caa <I2SEx_RxISR_I2SExt+0x1a>
 8003ca6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003caa:	68d8      	ldr	r0, [r3, #12]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb0:	1c99      	adds	r1, r3, #2
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003cb6:	b282      	uxth	r2, r0
 8003cb8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d121      	bne.n	8003d16 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a12      	ldr	r2, [pc, #72]	; (8003d20 <I2SEx_RxISR_I2SExt+0x90>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d101      	bne.n	8003ce0 <I2SEx_RxISR_I2SExt+0x50>
 8003cdc:	4b11      	ldr	r3, [pc, #68]	; (8003d24 <I2SEx_RxISR_I2SExt+0x94>)
 8003cde:	e001      	b.n	8003ce4 <I2SEx_RxISR_I2SExt+0x54>
 8003ce0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ce4:	685a      	ldr	r2, [r3, #4]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	490d      	ldr	r1, [pc, #52]	; (8003d20 <I2SEx_RxISR_I2SExt+0x90>)
 8003cec:	428b      	cmp	r3, r1
 8003cee:	d101      	bne.n	8003cf4 <I2SEx_RxISR_I2SExt+0x64>
 8003cf0:	4b0c      	ldr	r3, [pc, #48]	; (8003d24 <I2SEx_RxISR_I2SExt+0x94>)
 8003cf2:	e001      	b.n	8003cf8 <I2SEx_RxISR_I2SExt+0x68>
 8003cf4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cf8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003cfc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d106      	bne.n	8003d16 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f7ff ff03 	bl	8003b1c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d16:	bf00      	nop
 8003d18:	3708      	adds	r7, #8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	40003800 	.word	0x40003800
 8003d24:	40003400 	.word	0x40003400

08003d28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e267      	b.n	800420a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d075      	beq.n	8003e32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d46:	4b88      	ldr	r3, [pc, #544]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f003 030c 	and.w	r3, r3, #12
 8003d4e:	2b04      	cmp	r3, #4
 8003d50:	d00c      	beq.n	8003d6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d52:	4b85      	ldr	r3, [pc, #532]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d5a:	2b08      	cmp	r3, #8
 8003d5c:	d112      	bne.n	8003d84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d5e:	4b82      	ldr	r3, [pc, #520]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d6a:	d10b      	bne.n	8003d84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d6c:	4b7e      	ldr	r3, [pc, #504]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d05b      	beq.n	8003e30 <HAL_RCC_OscConfig+0x108>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d157      	bne.n	8003e30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e242      	b.n	800420a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d8c:	d106      	bne.n	8003d9c <HAL_RCC_OscConfig+0x74>
 8003d8e:	4b76      	ldr	r3, [pc, #472]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a75      	ldr	r2, [pc, #468]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d98:	6013      	str	r3, [r2, #0]
 8003d9a:	e01d      	b.n	8003dd8 <HAL_RCC_OscConfig+0xb0>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003da4:	d10c      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x98>
 8003da6:	4b70      	ldr	r3, [pc, #448]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a6f      	ldr	r2, [pc, #444]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003dac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003db0:	6013      	str	r3, [r2, #0]
 8003db2:	4b6d      	ldr	r3, [pc, #436]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a6c      	ldr	r2, [pc, #432]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dbc:	6013      	str	r3, [r2, #0]
 8003dbe:	e00b      	b.n	8003dd8 <HAL_RCC_OscConfig+0xb0>
 8003dc0:	4b69      	ldr	r3, [pc, #420]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a68      	ldr	r2, [pc, #416]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003dc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dca:	6013      	str	r3, [r2, #0]
 8003dcc:	4b66      	ldr	r3, [pc, #408]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a65      	ldr	r2, [pc, #404]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003dd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d013      	beq.n	8003e08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de0:	f7fd fa46 	bl	8001270 <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003de8:	f7fd fa42 	bl	8001270 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b64      	cmp	r3, #100	; 0x64
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e207      	b.n	800420a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dfa:	4b5b      	ldr	r3, [pc, #364]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d0f0      	beq.n	8003de8 <HAL_RCC_OscConfig+0xc0>
 8003e06:	e014      	b.n	8003e32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e08:	f7fd fa32 	bl	8001270 <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e0e:	e008      	b.n	8003e22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e10:	f7fd fa2e 	bl	8001270 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b64      	cmp	r3, #100	; 0x64
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e1f3      	b.n	800420a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e22:	4b51      	ldr	r3, [pc, #324]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1f0      	bne.n	8003e10 <HAL_RCC_OscConfig+0xe8>
 8003e2e:	e000      	b.n	8003e32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d063      	beq.n	8003f06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e3e:	4b4a      	ldr	r3, [pc, #296]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f003 030c 	and.w	r3, r3, #12
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00b      	beq.n	8003e62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e4a:	4b47      	ldr	r3, [pc, #284]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e52:	2b08      	cmp	r3, #8
 8003e54:	d11c      	bne.n	8003e90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e56:	4b44      	ldr	r3, [pc, #272]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d116      	bne.n	8003e90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e62:	4b41      	ldr	r3, [pc, #260]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d005      	beq.n	8003e7a <HAL_RCC_OscConfig+0x152>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d001      	beq.n	8003e7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e1c7      	b.n	800420a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e7a:	4b3b      	ldr	r3, [pc, #236]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	4937      	ldr	r1, [pc, #220]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e8e:	e03a      	b.n	8003f06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d020      	beq.n	8003eda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e98:	4b34      	ldr	r3, [pc, #208]	; (8003f6c <HAL_RCC_OscConfig+0x244>)
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e9e:	f7fd f9e7 	bl	8001270 <HAL_GetTick>
 8003ea2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ea4:	e008      	b.n	8003eb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ea6:	f7fd f9e3 	bl	8001270 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d901      	bls.n	8003eb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e1a8      	b.n	800420a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eb8:	4b2b      	ldr	r3, [pc, #172]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d0f0      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ec4:	4b28      	ldr	r3, [pc, #160]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	4925      	ldr	r1, [pc, #148]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	600b      	str	r3, [r1, #0]
 8003ed8:	e015      	b.n	8003f06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eda:	4b24      	ldr	r3, [pc, #144]	; (8003f6c <HAL_RCC_OscConfig+0x244>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee0:	f7fd f9c6 	bl	8001270 <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ee8:	f7fd f9c2 	bl	8001270 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e187      	b.n	800420a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003efa:	4b1b      	ldr	r3, [pc, #108]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1f0      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0308 	and.w	r3, r3, #8
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d036      	beq.n	8003f80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d016      	beq.n	8003f48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f1a:	4b15      	ldr	r3, [pc, #84]	; (8003f70 <HAL_RCC_OscConfig+0x248>)
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f20:	f7fd f9a6 	bl	8001270 <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f26:	e008      	b.n	8003f3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f28:	f7fd f9a2 	bl	8001270 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e167      	b.n	800420a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f3a:	4b0b      	ldr	r3, [pc, #44]	; (8003f68 <HAL_RCC_OscConfig+0x240>)
 8003f3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d0f0      	beq.n	8003f28 <HAL_RCC_OscConfig+0x200>
 8003f46:	e01b      	b.n	8003f80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f48:	4b09      	ldr	r3, [pc, #36]	; (8003f70 <HAL_RCC_OscConfig+0x248>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f4e:	f7fd f98f 	bl	8001270 <HAL_GetTick>
 8003f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f54:	e00e      	b.n	8003f74 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f56:	f7fd f98b 	bl	8001270 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d907      	bls.n	8003f74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e150      	b.n	800420a <HAL_RCC_OscConfig+0x4e2>
 8003f68:	40023800 	.word	0x40023800
 8003f6c:	42470000 	.word	0x42470000
 8003f70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f74:	4b88      	ldr	r3, [pc, #544]	; (8004198 <HAL_RCC_OscConfig+0x470>)
 8003f76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1ea      	bne.n	8003f56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0304 	and.w	r3, r3, #4
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f000 8097 	beq.w	80040bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f92:	4b81      	ldr	r3, [pc, #516]	; (8004198 <HAL_RCC_OscConfig+0x470>)
 8003f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10f      	bne.n	8003fbe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	60bb      	str	r3, [r7, #8]
 8003fa2:	4b7d      	ldr	r3, [pc, #500]	; (8004198 <HAL_RCC_OscConfig+0x470>)
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa6:	4a7c      	ldr	r2, [pc, #496]	; (8004198 <HAL_RCC_OscConfig+0x470>)
 8003fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fac:	6413      	str	r3, [r2, #64]	; 0x40
 8003fae:	4b7a      	ldr	r3, [pc, #488]	; (8004198 <HAL_RCC_OscConfig+0x470>)
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb6:	60bb      	str	r3, [r7, #8]
 8003fb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fbe:	4b77      	ldr	r3, [pc, #476]	; (800419c <HAL_RCC_OscConfig+0x474>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d118      	bne.n	8003ffc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fca:	4b74      	ldr	r3, [pc, #464]	; (800419c <HAL_RCC_OscConfig+0x474>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a73      	ldr	r2, [pc, #460]	; (800419c <HAL_RCC_OscConfig+0x474>)
 8003fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fd6:	f7fd f94b 	bl	8001270 <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fde:	f7fd f947 	bl	8001270 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e10c      	b.n	800420a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ff0:	4b6a      	ldr	r3, [pc, #424]	; (800419c <HAL_RCC_OscConfig+0x474>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0f0      	beq.n	8003fde <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d106      	bne.n	8004012 <HAL_RCC_OscConfig+0x2ea>
 8004004:	4b64      	ldr	r3, [pc, #400]	; (8004198 <HAL_RCC_OscConfig+0x470>)
 8004006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004008:	4a63      	ldr	r2, [pc, #396]	; (8004198 <HAL_RCC_OscConfig+0x470>)
 800400a:	f043 0301 	orr.w	r3, r3, #1
 800400e:	6713      	str	r3, [r2, #112]	; 0x70
 8004010:	e01c      	b.n	800404c <HAL_RCC_OscConfig+0x324>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	2b05      	cmp	r3, #5
 8004018:	d10c      	bne.n	8004034 <HAL_RCC_OscConfig+0x30c>
 800401a:	4b5f      	ldr	r3, [pc, #380]	; (8004198 <HAL_RCC_OscConfig+0x470>)
 800401c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401e:	4a5e      	ldr	r2, [pc, #376]	; (8004198 <HAL_RCC_OscConfig+0x470>)
 8004020:	f043 0304 	orr.w	r3, r3, #4
 8004024:	6713      	str	r3, [r2, #112]	; 0x70
 8004026:	4b5c      	ldr	r3, [pc, #368]	; (8004198 <HAL_RCC_OscConfig+0x470>)
 8004028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402a:	4a5b      	ldr	r2, [pc, #364]	; (8004198 <HAL_RCC_OscConfig+0x470>)
 800402c:	f043 0301 	orr.w	r3, r3, #1
 8004030:	6713      	str	r3, [r2, #112]	; 0x70
 8004032:	e00b      	b.n	800404c <HAL_RCC_OscConfig+0x324>
 8004034:	4b58      	ldr	r3, [pc, #352]	; (8004198 <HAL_RCC_OscConfig+0x470>)
 8004036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004038:	4a57      	ldr	r2, [pc, #348]	; (8004198 <HAL_RCC_OscConfig+0x470>)
 800403a:	f023 0301 	bic.w	r3, r3, #1
 800403e:	6713      	str	r3, [r2, #112]	; 0x70
 8004040:	4b55      	ldr	r3, [pc, #340]	; (8004198 <HAL_RCC_OscConfig+0x470>)
 8004042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004044:	4a54      	ldr	r2, [pc, #336]	; (8004198 <HAL_RCC_OscConfig+0x470>)
 8004046:	f023 0304 	bic.w	r3, r3, #4
 800404a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d015      	beq.n	8004080 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004054:	f7fd f90c 	bl	8001270 <HAL_GetTick>
 8004058:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800405a:	e00a      	b.n	8004072 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800405c:	f7fd f908 	bl	8001270 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	f241 3288 	movw	r2, #5000	; 0x1388
 800406a:	4293      	cmp	r3, r2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e0cb      	b.n	800420a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004072:	4b49      	ldr	r3, [pc, #292]	; (8004198 <HAL_RCC_OscConfig+0x470>)
 8004074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d0ee      	beq.n	800405c <HAL_RCC_OscConfig+0x334>
 800407e:	e014      	b.n	80040aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004080:	f7fd f8f6 	bl	8001270 <HAL_GetTick>
 8004084:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004086:	e00a      	b.n	800409e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004088:	f7fd f8f2 	bl	8001270 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	f241 3288 	movw	r2, #5000	; 0x1388
 8004096:	4293      	cmp	r3, r2
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e0b5      	b.n	800420a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800409e:	4b3e      	ldr	r3, [pc, #248]	; (8004198 <HAL_RCC_OscConfig+0x470>)
 80040a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1ee      	bne.n	8004088 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040aa:	7dfb      	ldrb	r3, [r7, #23]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d105      	bne.n	80040bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040b0:	4b39      	ldr	r3, [pc, #228]	; (8004198 <HAL_RCC_OscConfig+0x470>)
 80040b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b4:	4a38      	ldr	r2, [pc, #224]	; (8004198 <HAL_RCC_OscConfig+0x470>)
 80040b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f000 80a1 	beq.w	8004208 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040c6:	4b34      	ldr	r3, [pc, #208]	; (8004198 <HAL_RCC_OscConfig+0x470>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 030c 	and.w	r3, r3, #12
 80040ce:	2b08      	cmp	r3, #8
 80040d0:	d05c      	beq.n	800418c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d141      	bne.n	800415e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040da:	4b31      	ldr	r3, [pc, #196]	; (80041a0 <HAL_RCC_OscConfig+0x478>)
 80040dc:	2200      	movs	r2, #0
 80040de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e0:	f7fd f8c6 	bl	8001270 <HAL_GetTick>
 80040e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040e6:	e008      	b.n	80040fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040e8:	f7fd f8c2 	bl	8001270 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e087      	b.n	800420a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040fa:	4b27      	ldr	r3, [pc, #156]	; (8004198 <HAL_RCC_OscConfig+0x470>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1f0      	bne.n	80040e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	69da      	ldr	r2, [r3, #28]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	431a      	orrs	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004114:	019b      	lsls	r3, r3, #6
 8004116:	431a      	orrs	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411c:	085b      	lsrs	r3, r3, #1
 800411e:	3b01      	subs	r3, #1
 8004120:	041b      	lsls	r3, r3, #16
 8004122:	431a      	orrs	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004128:	061b      	lsls	r3, r3, #24
 800412a:	491b      	ldr	r1, [pc, #108]	; (8004198 <HAL_RCC_OscConfig+0x470>)
 800412c:	4313      	orrs	r3, r2
 800412e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004130:	4b1b      	ldr	r3, [pc, #108]	; (80041a0 <HAL_RCC_OscConfig+0x478>)
 8004132:	2201      	movs	r2, #1
 8004134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004136:	f7fd f89b 	bl	8001270 <HAL_GetTick>
 800413a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800413c:	e008      	b.n	8004150 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800413e:	f7fd f897 	bl	8001270 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b02      	cmp	r3, #2
 800414a:	d901      	bls.n	8004150 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e05c      	b.n	800420a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004150:	4b11      	ldr	r3, [pc, #68]	; (8004198 <HAL_RCC_OscConfig+0x470>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d0f0      	beq.n	800413e <HAL_RCC_OscConfig+0x416>
 800415c:	e054      	b.n	8004208 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800415e:	4b10      	ldr	r3, [pc, #64]	; (80041a0 <HAL_RCC_OscConfig+0x478>)
 8004160:	2200      	movs	r2, #0
 8004162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004164:	f7fd f884 	bl	8001270 <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800416a:	e008      	b.n	800417e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800416c:	f7fd f880 	bl	8001270 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b02      	cmp	r3, #2
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e045      	b.n	800420a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800417e:	4b06      	ldr	r3, [pc, #24]	; (8004198 <HAL_RCC_OscConfig+0x470>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1f0      	bne.n	800416c <HAL_RCC_OscConfig+0x444>
 800418a:	e03d      	b.n	8004208 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d107      	bne.n	80041a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e038      	b.n	800420a <HAL_RCC_OscConfig+0x4e2>
 8004198:	40023800 	.word	0x40023800
 800419c:	40007000 	.word	0x40007000
 80041a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041a4:	4b1b      	ldr	r3, [pc, #108]	; (8004214 <HAL_RCC_OscConfig+0x4ec>)
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d028      	beq.n	8004204 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041bc:	429a      	cmp	r2, r3
 80041be:	d121      	bne.n	8004204 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d11a      	bne.n	8004204 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041d4:	4013      	ands	r3, r2
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041dc:	4293      	cmp	r3, r2
 80041de:	d111      	bne.n	8004204 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ea:	085b      	lsrs	r3, r3, #1
 80041ec:	3b01      	subs	r3, #1
 80041ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d107      	bne.n	8004204 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004200:	429a      	cmp	r2, r3
 8004202:	d001      	beq.n	8004208 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e000      	b.n	800420a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3718      	adds	r7, #24
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	40023800 	.word	0x40023800

08004218 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d101      	bne.n	800422c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e0cc      	b.n	80043c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800422c:	4b68      	ldr	r3, [pc, #416]	; (80043d0 <HAL_RCC_ClockConfig+0x1b8>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0307 	and.w	r3, r3, #7
 8004234:	683a      	ldr	r2, [r7, #0]
 8004236:	429a      	cmp	r2, r3
 8004238:	d90c      	bls.n	8004254 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800423a:	4b65      	ldr	r3, [pc, #404]	; (80043d0 <HAL_RCC_ClockConfig+0x1b8>)
 800423c:	683a      	ldr	r2, [r7, #0]
 800423e:	b2d2      	uxtb	r2, r2
 8004240:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004242:	4b63      	ldr	r3, [pc, #396]	; (80043d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0307 	and.w	r3, r3, #7
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	429a      	cmp	r2, r3
 800424e:	d001      	beq.n	8004254 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e0b8      	b.n	80043c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d020      	beq.n	80042a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0304 	and.w	r3, r3, #4
 8004268:	2b00      	cmp	r3, #0
 800426a:	d005      	beq.n	8004278 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800426c:	4b59      	ldr	r3, [pc, #356]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	4a58      	ldr	r2, [pc, #352]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004272:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004276:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0308 	and.w	r3, r3, #8
 8004280:	2b00      	cmp	r3, #0
 8004282:	d005      	beq.n	8004290 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004284:	4b53      	ldr	r3, [pc, #332]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	4a52      	ldr	r2, [pc, #328]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 800428a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800428e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004290:	4b50      	ldr	r3, [pc, #320]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	494d      	ldr	r1, [pc, #308]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d044      	beq.n	8004338 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d107      	bne.n	80042c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042b6:	4b47      	ldr	r3, [pc, #284]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d119      	bne.n	80042f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e07f      	b.n	80043c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d003      	beq.n	80042d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042d2:	2b03      	cmp	r3, #3
 80042d4:	d107      	bne.n	80042e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042d6:	4b3f      	ldr	r3, [pc, #252]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d109      	bne.n	80042f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e06f      	b.n	80043c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042e6:	4b3b      	ldr	r3, [pc, #236]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e067      	b.n	80043c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042f6:	4b37      	ldr	r3, [pc, #220]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f023 0203 	bic.w	r2, r3, #3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	4934      	ldr	r1, [pc, #208]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004304:	4313      	orrs	r3, r2
 8004306:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004308:	f7fc ffb2 	bl	8001270 <HAL_GetTick>
 800430c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800430e:	e00a      	b.n	8004326 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004310:	f7fc ffae 	bl	8001270 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	f241 3288 	movw	r2, #5000	; 0x1388
 800431e:	4293      	cmp	r3, r2
 8004320:	d901      	bls.n	8004326 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e04f      	b.n	80043c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004326:	4b2b      	ldr	r3, [pc, #172]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f003 020c 	and.w	r2, r3, #12
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	429a      	cmp	r2, r3
 8004336:	d1eb      	bne.n	8004310 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004338:	4b25      	ldr	r3, [pc, #148]	; (80043d0 <HAL_RCC_ClockConfig+0x1b8>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0307 	and.w	r3, r3, #7
 8004340:	683a      	ldr	r2, [r7, #0]
 8004342:	429a      	cmp	r2, r3
 8004344:	d20c      	bcs.n	8004360 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004346:	4b22      	ldr	r3, [pc, #136]	; (80043d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	b2d2      	uxtb	r2, r2
 800434c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800434e:	4b20      	ldr	r3, [pc, #128]	; (80043d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0307 	and.w	r3, r3, #7
 8004356:	683a      	ldr	r2, [r7, #0]
 8004358:	429a      	cmp	r2, r3
 800435a:	d001      	beq.n	8004360 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e032      	b.n	80043c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b00      	cmp	r3, #0
 800436a:	d008      	beq.n	800437e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800436c:	4b19      	ldr	r3, [pc, #100]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	4916      	ldr	r1, [pc, #88]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 800437a:	4313      	orrs	r3, r2
 800437c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0308 	and.w	r3, r3, #8
 8004386:	2b00      	cmp	r3, #0
 8004388:	d009      	beq.n	800439e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800438a:	4b12      	ldr	r3, [pc, #72]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	490e      	ldr	r1, [pc, #56]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 800439a:	4313      	orrs	r3, r2
 800439c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800439e:	f000 f821 	bl	80043e4 <HAL_RCC_GetSysClockFreq>
 80043a2:	4602      	mov	r2, r0
 80043a4:	4b0b      	ldr	r3, [pc, #44]	; (80043d4 <HAL_RCC_ClockConfig+0x1bc>)
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	091b      	lsrs	r3, r3, #4
 80043aa:	f003 030f 	and.w	r3, r3, #15
 80043ae:	490a      	ldr	r1, [pc, #40]	; (80043d8 <HAL_RCC_ClockConfig+0x1c0>)
 80043b0:	5ccb      	ldrb	r3, [r1, r3]
 80043b2:	fa22 f303 	lsr.w	r3, r2, r3
 80043b6:	4a09      	ldr	r2, [pc, #36]	; (80043dc <HAL_RCC_ClockConfig+0x1c4>)
 80043b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043ba:	4b09      	ldr	r3, [pc, #36]	; (80043e0 <HAL_RCC_ClockConfig+0x1c8>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4618      	mov	r0, r3
 80043c0:	f7fc ff12 	bl	80011e8 <HAL_InitTick>

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	40023c00 	.word	0x40023c00
 80043d4:	40023800 	.word	0x40023800
 80043d8:	08008c80 	.word	0x08008c80
 80043dc:	20000008 	.word	0x20000008
 80043e0:	2000000c 	.word	0x2000000c

080043e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043e8:	b094      	sub	sp, #80	; 0x50
 80043ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043ec:	2300      	movs	r3, #0
 80043ee:	647b      	str	r3, [r7, #68]	; 0x44
 80043f0:	2300      	movs	r3, #0
 80043f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043f4:	2300      	movs	r3, #0
 80043f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80043f8:	2300      	movs	r3, #0
 80043fa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043fc:	4b79      	ldr	r3, [pc, #484]	; (80045e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f003 030c 	and.w	r3, r3, #12
 8004404:	2b08      	cmp	r3, #8
 8004406:	d00d      	beq.n	8004424 <HAL_RCC_GetSysClockFreq+0x40>
 8004408:	2b08      	cmp	r3, #8
 800440a:	f200 80e1 	bhi.w	80045d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800440e:	2b00      	cmp	r3, #0
 8004410:	d002      	beq.n	8004418 <HAL_RCC_GetSysClockFreq+0x34>
 8004412:	2b04      	cmp	r3, #4
 8004414:	d003      	beq.n	800441e <HAL_RCC_GetSysClockFreq+0x3a>
 8004416:	e0db      	b.n	80045d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004418:	4b73      	ldr	r3, [pc, #460]	; (80045e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800441a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800441c:	e0db      	b.n	80045d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800441e:	4b73      	ldr	r3, [pc, #460]	; (80045ec <HAL_RCC_GetSysClockFreq+0x208>)
 8004420:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004422:	e0d8      	b.n	80045d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004424:	4b6f      	ldr	r3, [pc, #444]	; (80045e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800442c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800442e:	4b6d      	ldr	r3, [pc, #436]	; (80045e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d063      	beq.n	8004502 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800443a:	4b6a      	ldr	r3, [pc, #424]	; (80045e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	099b      	lsrs	r3, r3, #6
 8004440:	2200      	movs	r2, #0
 8004442:	63bb      	str	r3, [r7, #56]	; 0x38
 8004444:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004448:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800444c:	633b      	str	r3, [r7, #48]	; 0x30
 800444e:	2300      	movs	r3, #0
 8004450:	637b      	str	r3, [r7, #52]	; 0x34
 8004452:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004456:	4622      	mov	r2, r4
 8004458:	462b      	mov	r3, r5
 800445a:	f04f 0000 	mov.w	r0, #0
 800445e:	f04f 0100 	mov.w	r1, #0
 8004462:	0159      	lsls	r1, r3, #5
 8004464:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004468:	0150      	lsls	r0, r2, #5
 800446a:	4602      	mov	r2, r0
 800446c:	460b      	mov	r3, r1
 800446e:	4621      	mov	r1, r4
 8004470:	1a51      	subs	r1, r2, r1
 8004472:	6139      	str	r1, [r7, #16]
 8004474:	4629      	mov	r1, r5
 8004476:	eb63 0301 	sbc.w	r3, r3, r1
 800447a:	617b      	str	r3, [r7, #20]
 800447c:	f04f 0200 	mov.w	r2, #0
 8004480:	f04f 0300 	mov.w	r3, #0
 8004484:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004488:	4659      	mov	r1, fp
 800448a:	018b      	lsls	r3, r1, #6
 800448c:	4651      	mov	r1, sl
 800448e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004492:	4651      	mov	r1, sl
 8004494:	018a      	lsls	r2, r1, #6
 8004496:	4651      	mov	r1, sl
 8004498:	ebb2 0801 	subs.w	r8, r2, r1
 800449c:	4659      	mov	r1, fp
 800449e:	eb63 0901 	sbc.w	r9, r3, r1
 80044a2:	f04f 0200 	mov.w	r2, #0
 80044a6:	f04f 0300 	mov.w	r3, #0
 80044aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044b6:	4690      	mov	r8, r2
 80044b8:	4699      	mov	r9, r3
 80044ba:	4623      	mov	r3, r4
 80044bc:	eb18 0303 	adds.w	r3, r8, r3
 80044c0:	60bb      	str	r3, [r7, #8]
 80044c2:	462b      	mov	r3, r5
 80044c4:	eb49 0303 	adc.w	r3, r9, r3
 80044c8:	60fb      	str	r3, [r7, #12]
 80044ca:	f04f 0200 	mov.w	r2, #0
 80044ce:	f04f 0300 	mov.w	r3, #0
 80044d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80044d6:	4629      	mov	r1, r5
 80044d8:	024b      	lsls	r3, r1, #9
 80044da:	4621      	mov	r1, r4
 80044dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80044e0:	4621      	mov	r1, r4
 80044e2:	024a      	lsls	r2, r1, #9
 80044e4:	4610      	mov	r0, r2
 80044e6:	4619      	mov	r1, r3
 80044e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044ea:	2200      	movs	r2, #0
 80044ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80044ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044f4:	f7fb fe68 	bl	80001c8 <__aeabi_uldivmod>
 80044f8:	4602      	mov	r2, r0
 80044fa:	460b      	mov	r3, r1
 80044fc:	4613      	mov	r3, r2
 80044fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004500:	e058      	b.n	80045b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004502:	4b38      	ldr	r3, [pc, #224]	; (80045e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	099b      	lsrs	r3, r3, #6
 8004508:	2200      	movs	r2, #0
 800450a:	4618      	mov	r0, r3
 800450c:	4611      	mov	r1, r2
 800450e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004512:	623b      	str	r3, [r7, #32]
 8004514:	2300      	movs	r3, #0
 8004516:	627b      	str	r3, [r7, #36]	; 0x24
 8004518:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800451c:	4642      	mov	r2, r8
 800451e:	464b      	mov	r3, r9
 8004520:	f04f 0000 	mov.w	r0, #0
 8004524:	f04f 0100 	mov.w	r1, #0
 8004528:	0159      	lsls	r1, r3, #5
 800452a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800452e:	0150      	lsls	r0, r2, #5
 8004530:	4602      	mov	r2, r0
 8004532:	460b      	mov	r3, r1
 8004534:	4641      	mov	r1, r8
 8004536:	ebb2 0a01 	subs.w	sl, r2, r1
 800453a:	4649      	mov	r1, r9
 800453c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004540:	f04f 0200 	mov.w	r2, #0
 8004544:	f04f 0300 	mov.w	r3, #0
 8004548:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800454c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004550:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004554:	ebb2 040a 	subs.w	r4, r2, sl
 8004558:	eb63 050b 	sbc.w	r5, r3, fp
 800455c:	f04f 0200 	mov.w	r2, #0
 8004560:	f04f 0300 	mov.w	r3, #0
 8004564:	00eb      	lsls	r3, r5, #3
 8004566:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800456a:	00e2      	lsls	r2, r4, #3
 800456c:	4614      	mov	r4, r2
 800456e:	461d      	mov	r5, r3
 8004570:	4643      	mov	r3, r8
 8004572:	18e3      	adds	r3, r4, r3
 8004574:	603b      	str	r3, [r7, #0]
 8004576:	464b      	mov	r3, r9
 8004578:	eb45 0303 	adc.w	r3, r5, r3
 800457c:	607b      	str	r3, [r7, #4]
 800457e:	f04f 0200 	mov.w	r2, #0
 8004582:	f04f 0300 	mov.w	r3, #0
 8004586:	e9d7 4500 	ldrd	r4, r5, [r7]
 800458a:	4629      	mov	r1, r5
 800458c:	028b      	lsls	r3, r1, #10
 800458e:	4621      	mov	r1, r4
 8004590:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004594:	4621      	mov	r1, r4
 8004596:	028a      	lsls	r2, r1, #10
 8004598:	4610      	mov	r0, r2
 800459a:	4619      	mov	r1, r3
 800459c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800459e:	2200      	movs	r2, #0
 80045a0:	61bb      	str	r3, [r7, #24]
 80045a2:	61fa      	str	r2, [r7, #28]
 80045a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045a8:	f7fb fe0e 	bl	80001c8 <__aeabi_uldivmod>
 80045ac:	4602      	mov	r2, r0
 80045ae:	460b      	mov	r3, r1
 80045b0:	4613      	mov	r3, r2
 80045b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045b4:	4b0b      	ldr	r3, [pc, #44]	; (80045e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	0c1b      	lsrs	r3, r3, #16
 80045ba:	f003 0303 	and.w	r3, r3, #3
 80045be:	3301      	adds	r3, #1
 80045c0:	005b      	lsls	r3, r3, #1
 80045c2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80045c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045ce:	e002      	b.n	80045d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045d0:	4b05      	ldr	r3, [pc, #20]	; (80045e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80045d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3750      	adds	r7, #80	; 0x50
 80045dc:	46bd      	mov	sp, r7
 80045de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045e2:	bf00      	nop
 80045e4:	40023800 	.word	0x40023800
 80045e8:	00f42400 	.word	0x00f42400
 80045ec:	007a1200 	.word	0x007a1200

080045f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045f0:	b480      	push	{r7}
 80045f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045f4:	4b03      	ldr	r3, [pc, #12]	; (8004604 <HAL_RCC_GetHCLKFreq+0x14>)
 80045f6:	681b      	ldr	r3, [r3, #0]
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	20000008 	.word	0x20000008

08004608 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800460c:	f7ff fff0 	bl	80045f0 <HAL_RCC_GetHCLKFreq>
 8004610:	4602      	mov	r2, r0
 8004612:	4b05      	ldr	r3, [pc, #20]	; (8004628 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	0a9b      	lsrs	r3, r3, #10
 8004618:	f003 0307 	and.w	r3, r3, #7
 800461c:	4903      	ldr	r1, [pc, #12]	; (800462c <HAL_RCC_GetPCLK1Freq+0x24>)
 800461e:	5ccb      	ldrb	r3, [r1, r3]
 8004620:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004624:	4618      	mov	r0, r3
 8004626:	bd80      	pop	{r7, pc}
 8004628:	40023800 	.word	0x40023800
 800462c:	08008c90 	.word	0x08008c90

08004630 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004634:	f7ff ffdc 	bl	80045f0 <HAL_RCC_GetHCLKFreq>
 8004638:	4602      	mov	r2, r0
 800463a:	4b05      	ldr	r3, [pc, #20]	; (8004650 <HAL_RCC_GetPCLK2Freq+0x20>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	0b5b      	lsrs	r3, r3, #13
 8004640:	f003 0307 	and.w	r3, r3, #7
 8004644:	4903      	ldr	r1, [pc, #12]	; (8004654 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004646:	5ccb      	ldrb	r3, [r1, r3]
 8004648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800464c:	4618      	mov	r0, r3
 800464e:	bd80      	pop	{r7, pc}
 8004650:	40023800 	.word	0x40023800
 8004654:	08008c90 	.word	0x08008c90

08004658 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b086      	sub	sp, #24
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004660:	2300      	movs	r3, #0
 8004662:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004664:	2300      	movs	r3, #0
 8004666:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	2b00      	cmp	r3, #0
 8004672:	d105      	bne.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800467c:	2b00      	cmp	r3, #0
 800467e:	d035      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004680:	4b62      	ldr	r3, [pc, #392]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004682:	2200      	movs	r2, #0
 8004684:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004686:	f7fc fdf3 	bl	8001270 <HAL_GetTick>
 800468a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800468c:	e008      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800468e:	f7fc fdef 	bl	8001270 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	2b02      	cmp	r3, #2
 800469a:	d901      	bls.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e0b0      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046a0:	4b5b      	ldr	r3, [pc, #364]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1f0      	bne.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	019a      	lsls	r2, r3, #6
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	071b      	lsls	r3, r3, #28
 80046b8:	4955      	ldr	r1, [pc, #340]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80046c0:	4b52      	ldr	r3, [pc, #328]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80046c2:	2201      	movs	r2, #1
 80046c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046c6:	f7fc fdd3 	bl	8001270 <HAL_GetTick>
 80046ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046cc:	e008      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80046ce:	f7fc fdcf 	bl	8001270 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d901      	bls.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e090      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046e0:	4b4b      	ldr	r3, [pc, #300]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d0f0      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f000 8083 	beq.w	8004800 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80046fa:	2300      	movs	r3, #0
 80046fc:	60fb      	str	r3, [r7, #12]
 80046fe:	4b44      	ldr	r3, [pc, #272]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004702:	4a43      	ldr	r2, [pc, #268]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004708:	6413      	str	r3, [r2, #64]	; 0x40
 800470a:	4b41      	ldr	r3, [pc, #260]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004712:	60fb      	str	r3, [r7, #12]
 8004714:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004716:	4b3f      	ldr	r3, [pc, #252]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a3e      	ldr	r2, [pc, #248]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800471c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004720:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004722:	f7fc fda5 	bl	8001270 <HAL_GetTick>
 8004726:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004728:	e008      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800472a:	f7fc fda1 	bl	8001270 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	2b02      	cmp	r3, #2
 8004736:	d901      	bls.n	800473c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e062      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800473c:	4b35      	ldr	r3, [pc, #212]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004744:	2b00      	cmp	r3, #0
 8004746:	d0f0      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004748:	4b31      	ldr	r3, [pc, #196]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800474a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800474c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004750:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d02f      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	429a      	cmp	r2, r3
 8004764:	d028      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004766:	4b2a      	ldr	r3, [pc, #168]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800476a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800476e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004770:	4b29      	ldr	r3, [pc, #164]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004772:	2201      	movs	r2, #1
 8004774:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004776:	4b28      	ldr	r3, [pc, #160]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004778:	2200      	movs	r2, #0
 800477a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800477c:	4a24      	ldr	r2, [pc, #144]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004782:	4b23      	ldr	r3, [pc, #140]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b01      	cmp	r3, #1
 800478c:	d114      	bne.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800478e:	f7fc fd6f 	bl	8001270 <HAL_GetTick>
 8004792:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004794:	e00a      	b.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004796:	f7fc fd6b 	bl	8001270 <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d901      	bls.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e02a      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ac:	4b18      	ldr	r3, [pc, #96]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d0ee      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047c4:	d10d      	bne.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80047c6:	4b12      	ldr	r3, [pc, #72]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80047d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047da:	490d      	ldr	r1, [pc, #52]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	608b      	str	r3, [r1, #8]
 80047e0:	e005      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x196>
 80047e2:	4b0b      	ldr	r3, [pc, #44]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	4a0a      	ldr	r2, [pc, #40]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047e8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80047ec:	6093      	str	r3, [r2, #8]
 80047ee:	4b08      	ldr	r3, [pc, #32]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047fa:	4905      	ldr	r1, [pc, #20]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3718      	adds	r7, #24
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	42470068 	.word	0x42470068
 8004810:	40023800 	.word	0x40023800
 8004814:	40007000 	.word	0x40007000
 8004818:	42470e40 	.word	0x42470e40

0800481c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800481c:	b480      	push	{r7}
 800481e:	b087      	sub	sp, #28
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004824:	2300      	movs	r3, #0
 8004826:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004828:	2300      	movs	r3, #0
 800482a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800482c:	2300      	movs	r3, #0
 800482e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004830:	2300      	movs	r3, #0
 8004832:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d13e      	bne.n	80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800483a:	4b23      	ldr	r3, [pc, #140]	; (80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004842:	60fb      	str	r3, [r7, #12]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d005      	beq.n	8004856 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d12f      	bne.n	80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004850:	4b1e      	ldr	r3, [pc, #120]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004852:	617b      	str	r3, [r7, #20]
          break;
 8004854:	e02f      	b.n	80048b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004856:	4b1c      	ldr	r3, [pc, #112]	; (80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800485e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004862:	d108      	bne.n	8004876 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004864:	4b18      	ldr	r3, [pc, #96]	; (80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800486c:	4a18      	ldr	r2, [pc, #96]	; (80048d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800486e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004872:	613b      	str	r3, [r7, #16]
 8004874:	e007      	b.n	8004886 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004876:	4b14      	ldr	r3, [pc, #80]	; (80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800487e:	4a15      	ldr	r2, [pc, #84]	; (80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004880:	fbb2 f3f3 	udiv	r3, r2, r3
 8004884:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004886:	4b10      	ldr	r3, [pc, #64]	; (80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004888:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800488c:	099b      	lsrs	r3, r3, #6
 800488e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	fb02 f303 	mul.w	r3, r2, r3
 8004898:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800489a:	4b0b      	ldr	r3, [pc, #44]	; (80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800489c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048a0:	0f1b      	lsrs	r3, r3, #28
 80048a2:	f003 0307 	and.w	r3, r3, #7
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ac:	617b      	str	r3, [r7, #20]
          break;
 80048ae:	e002      	b.n	80048b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80048b0:	2300      	movs	r3, #0
 80048b2:	617b      	str	r3, [r7, #20]
          break;
 80048b4:	bf00      	nop
        }
      }
      break;
 80048b6:	bf00      	nop
    }
  }
  return frequency;
 80048b8:	697b      	ldr	r3, [r7, #20]
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	371c      	adds	r7, #28
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	40023800 	.word	0x40023800
 80048cc:	00bb8000 	.word	0x00bb8000
 80048d0:	007a1200 	.word	0x007a1200
 80048d4:	00f42400 	.word	0x00f42400

080048d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e07b      	b.n	80049e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d108      	bne.n	8004904 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048fa:	d009      	beq.n	8004910 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	61da      	str	r2, [r3, #28]
 8004902:	e005      	b.n	8004910 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d106      	bne.n	8004930 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f7fc fabc 	bl	8000ea8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2202      	movs	r2, #2
 8004934:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004946:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004958:	431a      	orrs	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004962:	431a      	orrs	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	f003 0302 	and.w	r3, r3, #2
 800496c:	431a      	orrs	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	431a      	orrs	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004980:	431a      	orrs	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800498a:	431a      	orrs	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a1b      	ldr	r3, [r3, #32]
 8004990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004994:	ea42 0103 	orr.w	r1, r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	430a      	orrs	r2, r1
 80049a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	0c1b      	lsrs	r3, r3, #16
 80049ae:	f003 0104 	and.w	r1, r3, #4
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b6:	f003 0210 	and.w	r2, r3, #16
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	430a      	orrs	r2, r1
 80049c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	69da      	ldr	r2, [r3, #28]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3708      	adds	r7, #8
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}

080049ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b088      	sub	sp, #32
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	60f8      	str	r0, [r7, #12]
 80049f2:	60b9      	str	r1, [r7, #8]
 80049f4:	603b      	str	r3, [r7, #0]
 80049f6:	4613      	mov	r3, r2
 80049f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049fa:	2300      	movs	r3, #0
 80049fc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d101      	bne.n	8004a0c <HAL_SPI_Transmit+0x22>
 8004a08:	2302      	movs	r3, #2
 8004a0a:	e126      	b.n	8004c5a <HAL_SPI_Transmit+0x270>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a14:	f7fc fc2c 	bl	8001270 <HAL_GetTick>
 8004a18:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004a1a:	88fb      	ldrh	r3, [r7, #6]
 8004a1c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d002      	beq.n	8004a30 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004a2a:	2302      	movs	r3, #2
 8004a2c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a2e:	e10b      	b.n	8004c48 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d002      	beq.n	8004a3c <HAL_SPI_Transmit+0x52>
 8004a36:	88fb      	ldrh	r3, [r7, #6]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d102      	bne.n	8004a42 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a40:	e102      	b.n	8004c48 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2203      	movs	r2, #3
 8004a46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	68ba      	ldr	r2, [r7, #8]
 8004a54:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	88fa      	ldrh	r2, [r7, #6]
 8004a5a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	88fa      	ldrh	r2, [r7, #6]
 8004a60:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a88:	d10f      	bne.n	8004aaa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a98:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004aa8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab4:	2b40      	cmp	r3, #64	; 0x40
 8004ab6:	d007      	beq.n	8004ac8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ac6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ad0:	d14b      	bne.n	8004b6a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d002      	beq.n	8004ae0 <HAL_SPI_Transmit+0xf6>
 8004ada:	8afb      	ldrh	r3, [r7, #22]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d13e      	bne.n	8004b5e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae4:	881a      	ldrh	r2, [r3, #0]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af0:	1c9a      	adds	r2, r3, #2
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	3b01      	subs	r3, #1
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004b04:	e02b      	b.n	8004b5e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f003 0302 	and.w	r3, r3, #2
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d112      	bne.n	8004b3a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b18:	881a      	ldrh	r2, [r3, #0]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b24:	1c9a      	adds	r2, r3, #2
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	3b01      	subs	r3, #1
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b38:	e011      	b.n	8004b5e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b3a:	f7fc fb99 	bl	8001270 <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	683a      	ldr	r2, [r7, #0]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d803      	bhi.n	8004b52 <HAL_SPI_Transmit+0x168>
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b50:	d102      	bne.n	8004b58 <HAL_SPI_Transmit+0x16e>
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d102      	bne.n	8004b5e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b5c:	e074      	b.n	8004c48 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d1ce      	bne.n	8004b06 <HAL_SPI_Transmit+0x11c>
 8004b68:	e04c      	b.n	8004c04 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d002      	beq.n	8004b78 <HAL_SPI_Transmit+0x18e>
 8004b72:	8afb      	ldrh	r3, [r7, #22]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d140      	bne.n	8004bfa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	330c      	adds	r3, #12
 8004b82:	7812      	ldrb	r2, [r2, #0]
 8004b84:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8a:	1c5a      	adds	r2, r3, #1
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	3b01      	subs	r3, #1
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004b9e:	e02c      	b.n	8004bfa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d113      	bne.n	8004bd6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	330c      	adds	r3, #12
 8004bb8:	7812      	ldrb	r2, [r2, #0]
 8004bba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc0:	1c5a      	adds	r2, r3, #1
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	86da      	strh	r2, [r3, #54]	; 0x36
 8004bd4:	e011      	b.n	8004bfa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bd6:	f7fc fb4b 	bl	8001270 <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	683a      	ldr	r2, [r7, #0]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d803      	bhi.n	8004bee <HAL_SPI_Transmit+0x204>
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bec:	d102      	bne.n	8004bf4 <HAL_SPI_Transmit+0x20a>
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d102      	bne.n	8004bfa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004bf8:	e026      	b.n	8004c48 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1cd      	bne.n	8004ba0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c04:	69ba      	ldr	r2, [r7, #24]
 8004c06:	6839      	ldr	r1, [r7, #0]
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 fbcb 	bl	80053a4 <SPI_EndRxTxTransaction>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d002      	beq.n	8004c1a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2220      	movs	r2, #32
 8004c18:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10a      	bne.n	8004c38 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c22:	2300      	movs	r3, #0
 8004c24:	613b      	str	r3, [r7, #16]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	613b      	str	r3, [r7, #16]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	613b      	str	r3, [r7, #16]
 8004c36:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d002      	beq.n	8004c46 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	77fb      	strb	r3, [r7, #31]
 8004c44:	e000      	b.n	8004c48 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004c46:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c58:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3720      	adds	r7, #32
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b088      	sub	sp, #32
 8004c66:	af02      	add	r7, sp, #8
 8004c68:	60f8      	str	r0, [r7, #12]
 8004c6a:	60b9      	str	r1, [r7, #8]
 8004c6c:	603b      	str	r3, [r7, #0]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c72:	2300      	movs	r3, #0
 8004c74:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c7e:	d112      	bne.n	8004ca6 <HAL_SPI_Receive+0x44>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d10e      	bne.n	8004ca6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2204      	movs	r2, #4
 8004c8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004c90:	88fa      	ldrh	r2, [r7, #6]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	9300      	str	r3, [sp, #0]
 8004c96:	4613      	mov	r3, r2
 8004c98:	68ba      	ldr	r2, [r7, #8]
 8004c9a:	68b9      	ldr	r1, [r7, #8]
 8004c9c:	68f8      	ldr	r0, [r7, #12]
 8004c9e:	f000 f8f1 	bl	8004e84 <HAL_SPI_TransmitReceive>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	e0ea      	b.n	8004e7c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d101      	bne.n	8004cb4 <HAL_SPI_Receive+0x52>
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	e0e3      	b.n	8004e7c <HAL_SPI_Receive+0x21a>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cbc:	f7fc fad8 	bl	8001270 <HAL_GetTick>
 8004cc0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d002      	beq.n	8004cd4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004cce:	2302      	movs	r3, #2
 8004cd0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004cd2:	e0ca      	b.n	8004e6a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d002      	beq.n	8004ce0 <HAL_SPI_Receive+0x7e>
 8004cda:	88fb      	ldrh	r3, [r7, #6]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d102      	bne.n	8004ce6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ce4:	e0c1      	b.n	8004e6a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2204      	movs	r2, #4
 8004cea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	68ba      	ldr	r2, [r7, #8]
 8004cf8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	88fa      	ldrh	r2, [r7, #6]
 8004cfe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	88fa      	ldrh	r2, [r7, #6]
 8004d04:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d2c:	d10f      	bne.n	8004d4e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d3c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d4c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d58:	2b40      	cmp	r3, #64	; 0x40
 8004d5a:	d007      	beq.n	8004d6c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d6a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d162      	bne.n	8004e3a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004d74:	e02e      	b.n	8004dd4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f003 0301 	and.w	r3, r3, #1
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d115      	bne.n	8004db0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f103 020c 	add.w	r2, r3, #12
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d90:	7812      	ldrb	r2, [r2, #0]
 8004d92:	b2d2      	uxtb	r2, r2
 8004d94:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9a:	1c5a      	adds	r2, r3, #1
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	3b01      	subs	r3, #1
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004dae:	e011      	b.n	8004dd4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004db0:	f7fc fa5e 	bl	8001270 <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d803      	bhi.n	8004dc8 <HAL_SPI_Receive+0x166>
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc6:	d102      	bne.n	8004dce <HAL_SPI_Receive+0x16c>
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d102      	bne.n	8004dd4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004dd2:	e04a      	b.n	8004e6a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1cb      	bne.n	8004d76 <HAL_SPI_Receive+0x114>
 8004dde:	e031      	b.n	8004e44 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d113      	bne.n	8004e16 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68da      	ldr	r2, [r3, #12]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df8:	b292      	uxth	r2, r2
 8004dfa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e00:	1c9a      	adds	r2, r3, #2
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e14:	e011      	b.n	8004e3a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e16:	f7fc fa2b 	bl	8001270 <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d803      	bhi.n	8004e2e <HAL_SPI_Receive+0x1cc>
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e2c:	d102      	bne.n	8004e34 <HAL_SPI_Receive+0x1d2>
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d102      	bne.n	8004e3a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004e38:	e017      	b.n	8004e6a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1cd      	bne.n	8004de0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	6839      	ldr	r1, [r7, #0]
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	f000 fa45 	bl	80052d8 <SPI_EndRxTransaction>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d002      	beq.n	8004e5a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2220      	movs	r2, #32
 8004e58:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d002      	beq.n	8004e68 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	75fb      	strb	r3, [r7, #23]
 8004e66:	e000      	b.n	8004e6a <HAL_SPI_Receive+0x208>
  }

error :
 8004e68:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3718      	adds	r7, #24
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b08c      	sub	sp, #48	; 0x30
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
 8004e90:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004e92:	2301      	movs	r3, #1
 8004e94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004e96:	2300      	movs	r3, #0
 8004e98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d101      	bne.n	8004eaa <HAL_SPI_TransmitReceive+0x26>
 8004ea6:	2302      	movs	r3, #2
 8004ea8:	e18a      	b.n	80051c0 <HAL_SPI_TransmitReceive+0x33c>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004eb2:	f7fc f9dd 	bl	8001270 <HAL_GetTick>
 8004eb6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ebe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004ec8:	887b      	ldrh	r3, [r7, #2]
 8004eca:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ecc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d00f      	beq.n	8004ef4 <HAL_SPI_TransmitReceive+0x70>
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004eda:	d107      	bne.n	8004eec <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d103      	bne.n	8004eec <HAL_SPI_TransmitReceive+0x68>
 8004ee4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ee8:	2b04      	cmp	r3, #4
 8004eea:	d003      	beq.n	8004ef4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004eec:	2302      	movs	r3, #2
 8004eee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004ef2:	e15b      	b.n	80051ac <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d005      	beq.n	8004f06 <HAL_SPI_TransmitReceive+0x82>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d002      	beq.n	8004f06 <HAL_SPI_TransmitReceive+0x82>
 8004f00:	887b      	ldrh	r3, [r7, #2]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d103      	bne.n	8004f0e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004f0c:	e14e      	b.n	80051ac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b04      	cmp	r3, #4
 8004f18:	d003      	beq.n	8004f22 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2205      	movs	r2, #5
 8004f1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	887a      	ldrh	r2, [r7, #2]
 8004f32:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	887a      	ldrh	r2, [r7, #2]
 8004f38:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	887a      	ldrh	r2, [r7, #2]
 8004f44:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	887a      	ldrh	r2, [r7, #2]
 8004f4a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f62:	2b40      	cmp	r3, #64	; 0x40
 8004f64:	d007      	beq.n	8004f76 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f74:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f7e:	d178      	bne.n	8005072 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d002      	beq.n	8004f8e <HAL_SPI_TransmitReceive+0x10a>
 8004f88:	8b7b      	ldrh	r3, [r7, #26]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d166      	bne.n	800505c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f92:	881a      	ldrh	r2, [r3, #0]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9e:	1c9a      	adds	r2, r3, #2
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	3b01      	subs	r3, #1
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fb2:	e053      	b.n	800505c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f003 0302 	and.w	r3, r3, #2
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d11b      	bne.n	8004ffa <HAL_SPI_TransmitReceive+0x176>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d016      	beq.n	8004ffa <HAL_SPI_TransmitReceive+0x176>
 8004fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d113      	bne.n	8004ffa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd6:	881a      	ldrh	r2, [r3, #0]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe2:	1c9a      	adds	r2, r3, #2
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f003 0301 	and.w	r3, r3, #1
 8005004:	2b01      	cmp	r3, #1
 8005006:	d119      	bne.n	800503c <HAL_SPI_TransmitReceive+0x1b8>
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800500c:	b29b      	uxth	r3, r3
 800500e:	2b00      	cmp	r3, #0
 8005010:	d014      	beq.n	800503c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68da      	ldr	r2, [r3, #12]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501c:	b292      	uxth	r2, r2
 800501e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005024:	1c9a      	adds	r2, r3, #2
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800502e:	b29b      	uxth	r3, r3
 8005030:	3b01      	subs	r3, #1
 8005032:	b29a      	uxth	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005038:	2301      	movs	r3, #1
 800503a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800503c:	f7fc f918 	bl	8001270 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005048:	429a      	cmp	r2, r3
 800504a:	d807      	bhi.n	800505c <HAL_SPI_TransmitReceive+0x1d8>
 800504c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800504e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005052:	d003      	beq.n	800505c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800505a:	e0a7      	b.n	80051ac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005060:	b29b      	uxth	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1a6      	bne.n	8004fb4 <HAL_SPI_TransmitReceive+0x130>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800506a:	b29b      	uxth	r3, r3
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1a1      	bne.n	8004fb4 <HAL_SPI_TransmitReceive+0x130>
 8005070:	e07c      	b.n	800516c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d002      	beq.n	8005080 <HAL_SPI_TransmitReceive+0x1fc>
 800507a:	8b7b      	ldrh	r3, [r7, #26]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d16b      	bne.n	8005158 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	330c      	adds	r3, #12
 800508a:	7812      	ldrb	r2, [r2, #0]
 800508c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005092:	1c5a      	adds	r2, r3, #1
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800509c:	b29b      	uxth	r3, r3
 800509e:	3b01      	subs	r3, #1
 80050a0:	b29a      	uxth	r2, r3
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050a6:	e057      	b.n	8005158 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f003 0302 	and.w	r3, r3, #2
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d11c      	bne.n	80050f0 <HAL_SPI_TransmitReceive+0x26c>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d017      	beq.n	80050f0 <HAL_SPI_TransmitReceive+0x26c>
 80050c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d114      	bne.n	80050f0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	330c      	adds	r3, #12
 80050d0:	7812      	ldrb	r2, [r2, #0]
 80050d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d8:	1c5a      	adds	r2, r3, #1
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	3b01      	subs	r3, #1
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050ec:	2300      	movs	r3, #0
 80050ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f003 0301 	and.w	r3, r3, #1
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d119      	bne.n	8005132 <HAL_SPI_TransmitReceive+0x2ae>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005102:	b29b      	uxth	r3, r3
 8005104:	2b00      	cmp	r3, #0
 8005106:	d014      	beq.n	8005132 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68da      	ldr	r2, [r3, #12]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005112:	b2d2      	uxtb	r2, r2
 8005114:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511a:	1c5a      	adds	r2, r3, #1
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005124:	b29b      	uxth	r3, r3
 8005126:	3b01      	subs	r3, #1
 8005128:	b29a      	uxth	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800512e:	2301      	movs	r3, #1
 8005130:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005132:	f7fc f89d 	bl	8001270 <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800513e:	429a      	cmp	r2, r3
 8005140:	d803      	bhi.n	800514a <HAL_SPI_TransmitReceive+0x2c6>
 8005142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005148:	d102      	bne.n	8005150 <HAL_SPI_TransmitReceive+0x2cc>
 800514a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800514c:	2b00      	cmp	r3, #0
 800514e:	d103      	bne.n	8005158 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005156:	e029      	b.n	80051ac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800515c:	b29b      	uxth	r3, r3
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1a2      	bne.n	80050a8 <HAL_SPI_TransmitReceive+0x224>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005166:	b29b      	uxth	r3, r3
 8005168:	2b00      	cmp	r3, #0
 800516a:	d19d      	bne.n	80050a8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800516c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800516e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f000 f917 	bl	80053a4 <SPI_EndRxTxTransaction>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d006      	beq.n	800518a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2220      	movs	r2, #32
 8005186:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005188:	e010      	b.n	80051ac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10b      	bne.n	80051aa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005192:	2300      	movs	r3, #0
 8005194:	617b      	str	r3, [r7, #20]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	617b      	str	r3, [r7, #20]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	617b      	str	r3, [r7, #20]
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	e000      	b.n	80051ac <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80051aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80051bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3730      	adds	r7, #48	; 0x30
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b088      	sub	sp, #32
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	603b      	str	r3, [r7, #0]
 80051d4:	4613      	mov	r3, r2
 80051d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80051d8:	f7fc f84a 	bl	8001270 <HAL_GetTick>
 80051dc:	4602      	mov	r2, r0
 80051de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e0:	1a9b      	subs	r3, r3, r2
 80051e2:	683a      	ldr	r2, [r7, #0]
 80051e4:	4413      	add	r3, r2
 80051e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80051e8:	f7fc f842 	bl	8001270 <HAL_GetTick>
 80051ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80051ee:	4b39      	ldr	r3, [pc, #228]	; (80052d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	015b      	lsls	r3, r3, #5
 80051f4:	0d1b      	lsrs	r3, r3, #20
 80051f6:	69fa      	ldr	r2, [r7, #28]
 80051f8:	fb02 f303 	mul.w	r3, r2, r3
 80051fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051fe:	e054      	b.n	80052aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005206:	d050      	beq.n	80052aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005208:	f7fc f832 	bl	8001270 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	69fa      	ldr	r2, [r7, #28]
 8005214:	429a      	cmp	r2, r3
 8005216:	d902      	bls.n	800521e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d13d      	bne.n	800529a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	685a      	ldr	r2, [r3, #4]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800522c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005236:	d111      	bne.n	800525c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005240:	d004      	beq.n	800524c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800524a:	d107      	bne.n	800525c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800525a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005260:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005264:	d10f      	bne.n	8005286 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005274:	601a      	str	r2, [r3, #0]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005284:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e017      	b.n	80052ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d101      	bne.n	80052a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80052a0:	2300      	movs	r3, #0
 80052a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	3b01      	subs	r3, #1
 80052a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	689a      	ldr	r2, [r3, #8]
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	4013      	ands	r3, r2
 80052b4:	68ba      	ldr	r2, [r7, #8]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	bf0c      	ite	eq
 80052ba:	2301      	moveq	r3, #1
 80052bc:	2300      	movne	r3, #0
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	461a      	mov	r2, r3
 80052c2:	79fb      	ldrb	r3, [r7, #7]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d19b      	bne.n	8005200 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3720      	adds	r7, #32
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	20000008 	.word	0x20000008

080052d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af02      	add	r7, sp, #8
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052ec:	d111      	bne.n	8005312 <SPI_EndRxTransaction+0x3a>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052f6:	d004      	beq.n	8005302 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005300:	d107      	bne.n	8005312 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005310:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800531a:	d12a      	bne.n	8005372 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005324:	d012      	beq.n	800534c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	9300      	str	r3, [sp, #0]
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	2200      	movs	r2, #0
 800532e:	2180      	movs	r1, #128	; 0x80
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f7ff ff49 	bl	80051c8 <SPI_WaitFlagStateUntilTimeout>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d02d      	beq.n	8005398 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005340:	f043 0220 	orr.w	r2, r3, #32
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e026      	b.n	800539a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	9300      	str	r3, [sp, #0]
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	2200      	movs	r2, #0
 8005354:	2101      	movs	r1, #1
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f7ff ff36 	bl	80051c8 <SPI_WaitFlagStateUntilTimeout>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d01a      	beq.n	8005398 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005366:	f043 0220 	orr.w	r2, r3, #32
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e013      	b.n	800539a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	9300      	str	r3, [sp, #0]
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	2200      	movs	r2, #0
 800537a:	2101      	movs	r1, #1
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f7ff ff23 	bl	80051c8 <SPI_WaitFlagStateUntilTimeout>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d007      	beq.n	8005398 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800538c:	f043 0220 	orr.w	r2, r3, #32
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e000      	b.n	800539a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
	...

080053a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b088      	sub	sp, #32
 80053a8:	af02      	add	r7, sp, #8
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80053b0:	4b1b      	ldr	r3, [pc, #108]	; (8005420 <SPI_EndRxTxTransaction+0x7c>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a1b      	ldr	r2, [pc, #108]	; (8005424 <SPI_EndRxTxTransaction+0x80>)
 80053b6:	fba2 2303 	umull	r2, r3, r2, r3
 80053ba:	0d5b      	lsrs	r3, r3, #21
 80053bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80053c0:	fb02 f303 	mul.w	r3, r2, r3
 80053c4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053ce:	d112      	bne.n	80053f6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	9300      	str	r3, [sp, #0]
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	2200      	movs	r2, #0
 80053d8:	2180      	movs	r1, #128	; 0x80
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f7ff fef4 	bl	80051c8 <SPI_WaitFlagStateUntilTimeout>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d016      	beq.n	8005414 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ea:	f043 0220 	orr.w	r2, r3, #32
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e00f      	b.n	8005416 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00a      	beq.n	8005412 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	3b01      	subs	r3, #1
 8005400:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800540c:	2b80      	cmp	r3, #128	; 0x80
 800540e:	d0f2      	beq.n	80053f6 <SPI_EndRxTxTransaction+0x52>
 8005410:	e000      	b.n	8005414 <SPI_EndRxTxTransaction+0x70>
        break;
 8005412:	bf00      	nop
  }

  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3718      	adds	r7, #24
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	20000008 	.word	0x20000008
 8005424:	165e9f81 	.word	0x165e9f81

08005428 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e03f      	b.n	80054ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d106      	bne.n	8005454 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f7fb fda8 	bl	8000fa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2224      	movs	r2, #36	; 0x24
 8005458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68da      	ldr	r2, [r3, #12]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800546a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 fd7b 	bl	8005f68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	691a      	ldr	r2, [r3, #16]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005480:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	695a      	ldr	r2, [r3, #20]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005490:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68da      	ldr	r2, [r3, #12]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2220      	movs	r2, #32
 80054ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2220      	movs	r2, #32
 80054b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3708      	adds	r7, #8
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b08a      	sub	sp, #40	; 0x28
 80054c6:	af02      	add	r7, sp, #8
 80054c8:	60f8      	str	r0, [r7, #12]
 80054ca:	60b9      	str	r1, [r7, #8]
 80054cc:	603b      	str	r3, [r7, #0]
 80054ce:	4613      	mov	r3, r2
 80054d0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80054d2:	2300      	movs	r3, #0
 80054d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2b20      	cmp	r3, #32
 80054e0:	d17c      	bne.n	80055dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d002      	beq.n	80054ee <HAL_UART_Transmit+0x2c>
 80054e8:	88fb      	ldrh	r3, [r7, #6]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d101      	bne.n	80054f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e075      	b.n	80055de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d101      	bne.n	8005500 <HAL_UART_Transmit+0x3e>
 80054fc:	2302      	movs	r3, #2
 80054fe:	e06e      	b.n	80055de <HAL_UART_Transmit+0x11c>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2221      	movs	r2, #33	; 0x21
 8005512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005516:	f7fb feab 	bl	8001270 <HAL_GetTick>
 800551a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	88fa      	ldrh	r2, [r7, #6]
 8005520:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	88fa      	ldrh	r2, [r7, #6]
 8005526:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005530:	d108      	bne.n	8005544 <HAL_UART_Transmit+0x82>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d104      	bne.n	8005544 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800553a:	2300      	movs	r3, #0
 800553c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	61bb      	str	r3, [r7, #24]
 8005542:	e003      	b.n	800554c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005548:	2300      	movs	r3, #0
 800554a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005554:	e02a      	b.n	80055ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	9300      	str	r3, [sp, #0]
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	2200      	movs	r2, #0
 800555e:	2180      	movs	r1, #128	; 0x80
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f000 faf9 	bl	8005b58 <UART_WaitOnFlagUntilTimeout>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d001      	beq.n	8005570 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e036      	b.n	80055de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d10b      	bne.n	800558e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	881b      	ldrh	r3, [r3, #0]
 800557a:	461a      	mov	r2, r3
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005584:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	3302      	adds	r3, #2
 800558a:	61bb      	str	r3, [r7, #24]
 800558c:	e007      	b.n	800559e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	781a      	ldrb	r2, [r3, #0]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	3301      	adds	r3, #1
 800559c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	3b01      	subs	r3, #1
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1cf      	bne.n	8005556 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	9300      	str	r3, [sp, #0]
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	2200      	movs	r2, #0
 80055be:	2140      	movs	r1, #64	; 0x40
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	f000 fac9 	bl	8005b58 <UART_WaitOnFlagUntilTimeout>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d001      	beq.n	80055d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e006      	b.n	80055de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2220      	movs	r2, #32
 80055d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80055d8:	2300      	movs	r3, #0
 80055da:	e000      	b.n	80055de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80055dc:	2302      	movs	r3, #2
  }
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3720      	adds	r7, #32
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
	...

080055e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b0ba      	sub	sp, #232	; 0xe8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800560e:	2300      	movs	r3, #0
 8005610:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005614:	2300      	movs	r3, #0
 8005616:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800561a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800561e:	f003 030f 	and.w	r3, r3, #15
 8005622:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005626:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800562a:	2b00      	cmp	r3, #0
 800562c:	d10f      	bne.n	800564e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800562e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005632:	f003 0320 	and.w	r3, r3, #32
 8005636:	2b00      	cmp	r3, #0
 8005638:	d009      	beq.n	800564e <HAL_UART_IRQHandler+0x66>
 800563a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800563e:	f003 0320 	and.w	r3, r3, #32
 8005642:	2b00      	cmp	r3, #0
 8005644:	d003      	beq.n	800564e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 fbd3 	bl	8005df2 <UART_Receive_IT>
      return;
 800564c:	e256      	b.n	8005afc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800564e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005652:	2b00      	cmp	r3, #0
 8005654:	f000 80de 	beq.w	8005814 <HAL_UART_IRQHandler+0x22c>
 8005658:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800565c:	f003 0301 	and.w	r3, r3, #1
 8005660:	2b00      	cmp	r3, #0
 8005662:	d106      	bne.n	8005672 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005668:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800566c:	2b00      	cmp	r3, #0
 800566e:	f000 80d1 	beq.w	8005814 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00b      	beq.n	8005696 <HAL_UART_IRQHandler+0xae>
 800567e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005686:	2b00      	cmp	r3, #0
 8005688:	d005      	beq.n	8005696 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568e:	f043 0201 	orr.w	r2, r3, #1
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800569a:	f003 0304 	and.w	r3, r3, #4
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00b      	beq.n	80056ba <HAL_UART_IRQHandler+0xd2>
 80056a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056a6:	f003 0301 	and.w	r3, r3, #1
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d005      	beq.n	80056ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b2:	f043 0202 	orr.w	r2, r3, #2
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056be:	f003 0302 	and.w	r3, r3, #2
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00b      	beq.n	80056de <HAL_UART_IRQHandler+0xf6>
 80056c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056ca:	f003 0301 	and.w	r3, r3, #1
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d005      	beq.n	80056de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d6:	f043 0204 	orr.w	r2, r3, #4
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80056de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056e2:	f003 0308 	and.w	r3, r3, #8
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d011      	beq.n	800570e <HAL_UART_IRQHandler+0x126>
 80056ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056ee:	f003 0320 	and.w	r3, r3, #32
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d105      	bne.n	8005702 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80056f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d005      	beq.n	800570e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005706:	f043 0208 	orr.w	r2, r3, #8
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005712:	2b00      	cmp	r3, #0
 8005714:	f000 81ed 	beq.w	8005af2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800571c:	f003 0320 	and.w	r3, r3, #32
 8005720:	2b00      	cmp	r3, #0
 8005722:	d008      	beq.n	8005736 <HAL_UART_IRQHandler+0x14e>
 8005724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005728:	f003 0320 	and.w	r3, r3, #32
 800572c:	2b00      	cmp	r3, #0
 800572e:	d002      	beq.n	8005736 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 fb5e 	bl	8005df2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	695b      	ldr	r3, [r3, #20]
 800573c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005740:	2b40      	cmp	r3, #64	; 0x40
 8005742:	bf0c      	ite	eq
 8005744:	2301      	moveq	r3, #1
 8005746:	2300      	movne	r3, #0
 8005748:	b2db      	uxtb	r3, r3
 800574a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005752:	f003 0308 	and.w	r3, r3, #8
 8005756:	2b00      	cmp	r3, #0
 8005758:	d103      	bne.n	8005762 <HAL_UART_IRQHandler+0x17a>
 800575a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800575e:	2b00      	cmp	r3, #0
 8005760:	d04f      	beq.n	8005802 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 fa66 	bl	8005c34 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005772:	2b40      	cmp	r3, #64	; 0x40
 8005774:	d141      	bne.n	80057fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	3314      	adds	r3, #20
 800577c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005780:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005784:	e853 3f00 	ldrex	r3, [r3]
 8005788:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800578c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005790:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005794:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	3314      	adds	r3, #20
 800579e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80057a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80057a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80057ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80057b2:	e841 2300 	strex	r3, r2, [r1]
 80057b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80057ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d1d9      	bne.n	8005776 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d013      	beq.n	80057f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ce:	4a7d      	ldr	r2, [pc, #500]	; (80059c4 <HAL_UART_IRQHandler+0x3dc>)
 80057d0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7fb fefb 	bl	80015d2 <HAL_DMA_Abort_IT>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d016      	beq.n	8005810 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80057ec:	4610      	mov	r0, r2
 80057ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057f0:	e00e      	b.n	8005810 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f99a 	bl	8005b2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057f8:	e00a      	b.n	8005810 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f996 	bl	8005b2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005800:	e006      	b.n	8005810 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f992 	bl	8005b2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800580e:	e170      	b.n	8005af2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005810:	bf00      	nop
    return;
 8005812:	e16e      	b.n	8005af2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005818:	2b01      	cmp	r3, #1
 800581a:	f040 814a 	bne.w	8005ab2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800581e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005822:	f003 0310 	and.w	r3, r3, #16
 8005826:	2b00      	cmp	r3, #0
 8005828:	f000 8143 	beq.w	8005ab2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800582c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005830:	f003 0310 	and.w	r3, r3, #16
 8005834:	2b00      	cmp	r3, #0
 8005836:	f000 813c 	beq.w	8005ab2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800583a:	2300      	movs	r3, #0
 800583c:	60bb      	str	r3, [r7, #8]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	60bb      	str	r3, [r7, #8]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	60bb      	str	r3, [r7, #8]
 800584e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800585a:	2b40      	cmp	r3, #64	; 0x40
 800585c:	f040 80b4 	bne.w	80059c8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800586c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005870:	2b00      	cmp	r3, #0
 8005872:	f000 8140 	beq.w	8005af6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800587a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800587e:	429a      	cmp	r2, r3
 8005880:	f080 8139 	bcs.w	8005af6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800588a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005890:	69db      	ldr	r3, [r3, #28]
 8005892:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005896:	f000 8088 	beq.w	80059aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	330c      	adds	r3, #12
 80058a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80058a8:	e853 3f00 	ldrex	r3, [r3]
 80058ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80058b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	330c      	adds	r3, #12
 80058c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80058c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80058ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80058d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80058d6:	e841 2300 	strex	r3, r2, [r1]
 80058da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80058de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1d9      	bne.n	800589a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	3314      	adds	r3, #20
 80058ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058f0:	e853 3f00 	ldrex	r3, [r3]
 80058f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80058f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058f8:	f023 0301 	bic.w	r3, r3, #1
 80058fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	3314      	adds	r3, #20
 8005906:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800590a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800590e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005910:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005912:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005916:	e841 2300 	strex	r3, r2, [r1]
 800591a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800591c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1e1      	bne.n	80058e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	3314      	adds	r3, #20
 8005928:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800592c:	e853 3f00 	ldrex	r3, [r3]
 8005930:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005932:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005934:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005938:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	3314      	adds	r3, #20
 8005942:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005946:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005948:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800594c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800594e:	e841 2300 	strex	r3, r2, [r1]
 8005952:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005954:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1e3      	bne.n	8005922 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2220      	movs	r2, #32
 800595e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	330c      	adds	r3, #12
 800596e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005972:	e853 3f00 	ldrex	r3, [r3]
 8005976:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005978:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800597a:	f023 0310 	bic.w	r3, r3, #16
 800597e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	330c      	adds	r3, #12
 8005988:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800598c:	65ba      	str	r2, [r7, #88]	; 0x58
 800598e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005990:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005992:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005994:	e841 2300 	strex	r3, r2, [r1]
 8005998:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800599a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1e3      	bne.n	8005968 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a4:	4618      	mov	r0, r3
 80059a6:	f7fb fda4 	bl	80014f2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	4619      	mov	r1, r3
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 f8c0 	bl	8005b40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80059c0:	e099      	b.n	8005af6 <HAL_UART_IRQHandler+0x50e>
 80059c2:	bf00      	nop
 80059c4:	08005cfb 	.word	0x08005cfb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059dc:	b29b      	uxth	r3, r3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	f000 808b 	beq.w	8005afa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80059e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f000 8086 	beq.w	8005afa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	330c      	adds	r3, #12
 80059f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f8:	e853 3f00 	ldrex	r3, [r3]
 80059fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80059fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	330c      	adds	r3, #12
 8005a0e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005a12:	647a      	str	r2, [r7, #68]	; 0x44
 8005a14:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a1a:	e841 2300 	strex	r3, r2, [r1]
 8005a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1e3      	bne.n	80059ee <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	3314      	adds	r3, #20
 8005a2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a30:	e853 3f00 	ldrex	r3, [r3]
 8005a34:	623b      	str	r3, [r7, #32]
   return(result);
 8005a36:	6a3b      	ldr	r3, [r7, #32]
 8005a38:	f023 0301 	bic.w	r3, r3, #1
 8005a3c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	3314      	adds	r3, #20
 8005a46:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005a4a:	633a      	str	r2, [r7, #48]	; 0x30
 8005a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a52:	e841 2300 	strex	r3, r2, [r1]
 8005a56:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d1e3      	bne.n	8005a26 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2220      	movs	r2, #32
 8005a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	330c      	adds	r3, #12
 8005a72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	e853 3f00 	ldrex	r3, [r3]
 8005a7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f023 0310 	bic.w	r3, r3, #16
 8005a82:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	330c      	adds	r3, #12
 8005a8c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005a90:	61fa      	str	r2, [r7, #28]
 8005a92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a94:	69b9      	ldr	r1, [r7, #24]
 8005a96:	69fa      	ldr	r2, [r7, #28]
 8005a98:	e841 2300 	strex	r3, r2, [r1]
 8005a9c:	617b      	str	r3, [r7, #20]
   return(result);
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1e3      	bne.n	8005a6c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005aa4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 f848 	bl	8005b40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ab0:	e023      	b.n	8005afa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d009      	beq.n	8005ad2 <HAL_UART_IRQHandler+0x4ea>
 8005abe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d003      	beq.n	8005ad2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f929 	bl	8005d22 <UART_Transmit_IT>
    return;
 8005ad0:	e014      	b.n	8005afc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00e      	beq.n	8005afc <HAL_UART_IRQHandler+0x514>
 8005ade:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d008      	beq.n	8005afc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f969 	bl	8005dc2 <UART_EndTransmit_IT>
    return;
 8005af0:	e004      	b.n	8005afc <HAL_UART_IRQHandler+0x514>
    return;
 8005af2:	bf00      	nop
 8005af4:	e002      	b.n	8005afc <HAL_UART_IRQHandler+0x514>
      return;
 8005af6:	bf00      	nop
 8005af8:	e000      	b.n	8005afc <HAL_UART_IRQHandler+0x514>
      return;
 8005afa:	bf00      	nop
  }
}
 8005afc:	37e8      	adds	r7, #232	; 0xe8
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop

08005b04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b34:	bf00      	nop
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	460b      	mov	r3, r1
 8005b4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b090      	sub	sp, #64	; 0x40
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	603b      	str	r3, [r7, #0]
 8005b64:	4613      	mov	r3, r2
 8005b66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b68:	e050      	b.n	8005c0c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b70:	d04c      	beq.n	8005c0c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005b72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d007      	beq.n	8005b88 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b78:	f7fb fb7a 	bl	8001270 <HAL_GetTick>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d241      	bcs.n	8005c0c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	330c      	adds	r3, #12
 8005b8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b92:	e853 3f00 	ldrex	r3, [r3]
 8005b96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	330c      	adds	r3, #12
 8005ba6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ba8:	637a      	str	r2, [r7, #52]	; 0x34
 8005baa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bb0:	e841 2300 	strex	r3, r2, [r1]
 8005bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1e5      	bne.n	8005b88 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	3314      	adds	r3, #20
 8005bc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	e853 3f00 	ldrex	r3, [r3]
 8005bca:	613b      	str	r3, [r7, #16]
   return(result);
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	f023 0301 	bic.w	r3, r3, #1
 8005bd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	3314      	adds	r3, #20
 8005bda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bdc:	623a      	str	r2, [r7, #32]
 8005bde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be0:	69f9      	ldr	r1, [r7, #28]
 8005be2:	6a3a      	ldr	r2, [r7, #32]
 8005be4:	e841 2300 	strex	r3, r2, [r1]
 8005be8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1e5      	bne.n	8005bbc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2220      	movs	r2, #32
 8005bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2220      	movs	r2, #32
 8005bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e00f      	b.n	8005c2c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	4013      	ands	r3, r2
 8005c16:	68ba      	ldr	r2, [r7, #8]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	bf0c      	ite	eq
 8005c1c:	2301      	moveq	r3, #1
 8005c1e:	2300      	movne	r3, #0
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	461a      	mov	r2, r3
 8005c24:	79fb      	ldrb	r3, [r7, #7]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d09f      	beq.n	8005b6a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3740      	adds	r7, #64	; 0x40
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b095      	sub	sp, #84	; 0x54
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	330c      	adds	r3, #12
 8005c42:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c46:	e853 3f00 	ldrex	r3, [r3]
 8005c4a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	330c      	adds	r3, #12
 8005c5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c5c:	643a      	str	r2, [r7, #64]	; 0x40
 8005c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c64:	e841 2300 	strex	r3, r2, [r1]
 8005c68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d1e5      	bne.n	8005c3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	3314      	adds	r3, #20
 8005c76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c78:	6a3b      	ldr	r3, [r7, #32]
 8005c7a:	e853 3f00 	ldrex	r3, [r3]
 8005c7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	f023 0301 	bic.w	r3, r3, #1
 8005c86:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	3314      	adds	r3, #20
 8005c8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c98:	e841 2300 	strex	r3, r2, [r1]
 8005c9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d1e5      	bne.n	8005c70 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d119      	bne.n	8005ce0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	330c      	adds	r3, #12
 8005cb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	e853 3f00 	ldrex	r3, [r3]
 8005cba:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	f023 0310 	bic.w	r3, r3, #16
 8005cc2:	647b      	str	r3, [r7, #68]	; 0x44
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	330c      	adds	r3, #12
 8005cca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ccc:	61ba      	str	r2, [r7, #24]
 8005cce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd0:	6979      	ldr	r1, [r7, #20]
 8005cd2:	69ba      	ldr	r2, [r7, #24]
 8005cd4:	e841 2300 	strex	r3, r2, [r1]
 8005cd8:	613b      	str	r3, [r7, #16]
   return(result);
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d1e5      	bne.n	8005cac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2220      	movs	r2, #32
 8005ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005cee:	bf00      	nop
 8005cf0:	3754      	adds	r7, #84	; 0x54
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005cfa:	b580      	push	{r7, lr}
 8005cfc:	b084      	sub	sp, #16
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d06:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d14:	68f8      	ldr	r0, [r7, #12]
 8005d16:	f7ff ff09 	bl	8005b2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d1a:	bf00      	nop
 8005d1c:	3710      	adds	r7, #16
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}

08005d22 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d22:	b480      	push	{r7}
 8005d24:	b085      	sub	sp, #20
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b21      	cmp	r3, #33	; 0x21
 8005d34:	d13e      	bne.n	8005db4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d3e:	d114      	bne.n	8005d6a <UART_Transmit_IT+0x48>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d110      	bne.n	8005d6a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6a1b      	ldr	r3, [r3, #32]
 8005d4c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	881b      	ldrh	r3, [r3, #0]
 8005d52:	461a      	mov	r2, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d5c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	1c9a      	adds	r2, r3, #2
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	621a      	str	r2, [r3, #32]
 8005d68:	e008      	b.n	8005d7c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	1c59      	adds	r1, r3, #1
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	6211      	str	r1, [r2, #32]
 8005d74:	781a      	ldrb	r2, [r3, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	3b01      	subs	r3, #1
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	4619      	mov	r1, r3
 8005d8a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d10f      	bne.n	8005db0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68da      	ldr	r2, [r3, #12]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d9e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68da      	ldr	r2, [r3, #12]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005db0:	2300      	movs	r3, #0
 8005db2:	e000      	b.n	8005db6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005db4:	2302      	movs	r3, #2
  }
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3714      	adds	r7, #20
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b082      	sub	sp, #8
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68da      	ldr	r2, [r3, #12]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dd8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2220      	movs	r2, #32
 8005dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f7ff fe8e 	bl	8005b04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3708      	adds	r7, #8
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b08c      	sub	sp, #48	; 0x30
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b22      	cmp	r3, #34	; 0x22
 8005e04:	f040 80ab 	bne.w	8005f5e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e10:	d117      	bne.n	8005e42 <UART_Receive_IT+0x50>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d113      	bne.n	8005e42 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e22:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e30:	b29a      	uxth	r2, r3
 8005e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e34:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e3a:	1c9a      	adds	r2, r3, #2
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	629a      	str	r2, [r3, #40]	; 0x28
 8005e40:	e026      	b.n	8005e90 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e46:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e54:	d007      	beq.n	8005e66 <UART_Receive_IT+0x74>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d10a      	bne.n	8005e74 <UART_Receive_IT+0x82>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d106      	bne.n	8005e74 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	b2da      	uxtb	r2, r3
 8005e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e70:	701a      	strb	r2, [r3, #0]
 8005e72:	e008      	b.n	8005e86 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e80:	b2da      	uxtb	r2, r3
 8005e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e84:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e8a:	1c5a      	adds	r2, r3, #1
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	3b01      	subs	r3, #1
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d15a      	bne.n	8005f5a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68da      	ldr	r2, [r3, #12]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f022 0220 	bic.w	r2, r2, #32
 8005eb2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68da      	ldr	r2, [r3, #12]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ec2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	695a      	ldr	r2, [r3, #20]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f022 0201 	bic.w	r2, r2, #1
 8005ed2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2220      	movs	r2, #32
 8005ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d135      	bne.n	8005f50 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	330c      	adds	r3, #12
 8005ef0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	e853 3f00 	ldrex	r3, [r3]
 8005ef8:	613b      	str	r3, [r7, #16]
   return(result);
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	f023 0310 	bic.w	r3, r3, #16
 8005f00:	627b      	str	r3, [r7, #36]	; 0x24
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	330c      	adds	r3, #12
 8005f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f0a:	623a      	str	r2, [r7, #32]
 8005f0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0e:	69f9      	ldr	r1, [r7, #28]
 8005f10:	6a3a      	ldr	r2, [r7, #32]
 8005f12:	e841 2300 	strex	r3, r2, [r1]
 8005f16:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1e5      	bne.n	8005eea <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0310 	and.w	r3, r3, #16
 8005f28:	2b10      	cmp	r3, #16
 8005f2a:	d10a      	bne.n	8005f42 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	60fb      	str	r3, [r7, #12]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	60fb      	str	r3, [r7, #12]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	60fb      	str	r3, [r7, #12]
 8005f40:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f46:	4619      	mov	r1, r3
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f7ff fdf9 	bl	8005b40 <HAL_UARTEx_RxEventCallback>
 8005f4e:	e002      	b.n	8005f56 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f7ff fde1 	bl	8005b18 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005f56:	2300      	movs	r3, #0
 8005f58:	e002      	b.n	8005f60 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	e000      	b.n	8005f60 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005f5e:	2302      	movs	r3, #2
  }
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3730      	adds	r7, #48	; 0x30
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f6c:	b0c0      	sub	sp, #256	; 0x100
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	691b      	ldr	r3, [r3, #16]
 8005f7c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f84:	68d9      	ldr	r1, [r3, #12]
 8005f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	ea40 0301 	orr.w	r3, r0, r1
 8005f90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f96:	689a      	ldr	r2, [r3, #8]
 8005f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	431a      	orrs	r2, r3
 8005fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fa4:	695b      	ldr	r3, [r3, #20]
 8005fa6:	431a      	orrs	r2, r3
 8005fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fac:	69db      	ldr	r3, [r3, #28]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005fc0:	f021 010c 	bic.w	r1, r1, #12
 8005fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005fce:	430b      	orrs	r3, r1
 8005fd0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	695b      	ldr	r3, [r3, #20]
 8005fda:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fe2:	6999      	ldr	r1, [r3, #24]
 8005fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	ea40 0301 	orr.w	r3, r0, r1
 8005fee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	4b8f      	ldr	r3, [pc, #572]	; (8006234 <UART_SetConfig+0x2cc>)
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d005      	beq.n	8006008 <UART_SetConfig+0xa0>
 8005ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	4b8d      	ldr	r3, [pc, #564]	; (8006238 <UART_SetConfig+0x2d0>)
 8006004:	429a      	cmp	r2, r3
 8006006:	d104      	bne.n	8006012 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006008:	f7fe fb12 	bl	8004630 <HAL_RCC_GetPCLK2Freq>
 800600c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006010:	e003      	b.n	800601a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006012:	f7fe faf9 	bl	8004608 <HAL_RCC_GetPCLK1Freq>
 8006016:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800601a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800601e:	69db      	ldr	r3, [r3, #28]
 8006020:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006024:	f040 810c 	bne.w	8006240 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006028:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800602c:	2200      	movs	r2, #0
 800602e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006032:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006036:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800603a:	4622      	mov	r2, r4
 800603c:	462b      	mov	r3, r5
 800603e:	1891      	adds	r1, r2, r2
 8006040:	65b9      	str	r1, [r7, #88]	; 0x58
 8006042:	415b      	adcs	r3, r3
 8006044:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006046:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800604a:	4621      	mov	r1, r4
 800604c:	eb12 0801 	adds.w	r8, r2, r1
 8006050:	4629      	mov	r1, r5
 8006052:	eb43 0901 	adc.w	r9, r3, r1
 8006056:	f04f 0200 	mov.w	r2, #0
 800605a:	f04f 0300 	mov.w	r3, #0
 800605e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006062:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006066:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800606a:	4690      	mov	r8, r2
 800606c:	4699      	mov	r9, r3
 800606e:	4623      	mov	r3, r4
 8006070:	eb18 0303 	adds.w	r3, r8, r3
 8006074:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006078:	462b      	mov	r3, r5
 800607a:	eb49 0303 	adc.w	r3, r9, r3
 800607e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800608e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006092:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006096:	460b      	mov	r3, r1
 8006098:	18db      	adds	r3, r3, r3
 800609a:	653b      	str	r3, [r7, #80]	; 0x50
 800609c:	4613      	mov	r3, r2
 800609e:	eb42 0303 	adc.w	r3, r2, r3
 80060a2:	657b      	str	r3, [r7, #84]	; 0x54
 80060a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80060a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80060ac:	f7fa f88c 	bl	80001c8 <__aeabi_uldivmod>
 80060b0:	4602      	mov	r2, r0
 80060b2:	460b      	mov	r3, r1
 80060b4:	4b61      	ldr	r3, [pc, #388]	; (800623c <UART_SetConfig+0x2d4>)
 80060b6:	fba3 2302 	umull	r2, r3, r3, r2
 80060ba:	095b      	lsrs	r3, r3, #5
 80060bc:	011c      	lsls	r4, r3, #4
 80060be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060c2:	2200      	movs	r2, #0
 80060c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80060c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80060cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80060d0:	4642      	mov	r2, r8
 80060d2:	464b      	mov	r3, r9
 80060d4:	1891      	adds	r1, r2, r2
 80060d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80060d8:	415b      	adcs	r3, r3
 80060da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80060e0:	4641      	mov	r1, r8
 80060e2:	eb12 0a01 	adds.w	sl, r2, r1
 80060e6:	4649      	mov	r1, r9
 80060e8:	eb43 0b01 	adc.w	fp, r3, r1
 80060ec:	f04f 0200 	mov.w	r2, #0
 80060f0:	f04f 0300 	mov.w	r3, #0
 80060f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80060f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80060fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006100:	4692      	mov	sl, r2
 8006102:	469b      	mov	fp, r3
 8006104:	4643      	mov	r3, r8
 8006106:	eb1a 0303 	adds.w	r3, sl, r3
 800610a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800610e:	464b      	mov	r3, r9
 8006110:	eb4b 0303 	adc.w	r3, fp, r3
 8006114:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006124:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006128:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800612c:	460b      	mov	r3, r1
 800612e:	18db      	adds	r3, r3, r3
 8006130:	643b      	str	r3, [r7, #64]	; 0x40
 8006132:	4613      	mov	r3, r2
 8006134:	eb42 0303 	adc.w	r3, r2, r3
 8006138:	647b      	str	r3, [r7, #68]	; 0x44
 800613a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800613e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006142:	f7fa f841 	bl	80001c8 <__aeabi_uldivmod>
 8006146:	4602      	mov	r2, r0
 8006148:	460b      	mov	r3, r1
 800614a:	4611      	mov	r1, r2
 800614c:	4b3b      	ldr	r3, [pc, #236]	; (800623c <UART_SetConfig+0x2d4>)
 800614e:	fba3 2301 	umull	r2, r3, r3, r1
 8006152:	095b      	lsrs	r3, r3, #5
 8006154:	2264      	movs	r2, #100	; 0x64
 8006156:	fb02 f303 	mul.w	r3, r2, r3
 800615a:	1acb      	subs	r3, r1, r3
 800615c:	00db      	lsls	r3, r3, #3
 800615e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006162:	4b36      	ldr	r3, [pc, #216]	; (800623c <UART_SetConfig+0x2d4>)
 8006164:	fba3 2302 	umull	r2, r3, r3, r2
 8006168:	095b      	lsrs	r3, r3, #5
 800616a:	005b      	lsls	r3, r3, #1
 800616c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006170:	441c      	add	r4, r3
 8006172:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006176:	2200      	movs	r2, #0
 8006178:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800617c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006180:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006184:	4642      	mov	r2, r8
 8006186:	464b      	mov	r3, r9
 8006188:	1891      	adds	r1, r2, r2
 800618a:	63b9      	str	r1, [r7, #56]	; 0x38
 800618c:	415b      	adcs	r3, r3
 800618e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006190:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006194:	4641      	mov	r1, r8
 8006196:	1851      	adds	r1, r2, r1
 8006198:	6339      	str	r1, [r7, #48]	; 0x30
 800619a:	4649      	mov	r1, r9
 800619c:	414b      	adcs	r3, r1
 800619e:	637b      	str	r3, [r7, #52]	; 0x34
 80061a0:	f04f 0200 	mov.w	r2, #0
 80061a4:	f04f 0300 	mov.w	r3, #0
 80061a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80061ac:	4659      	mov	r1, fp
 80061ae:	00cb      	lsls	r3, r1, #3
 80061b0:	4651      	mov	r1, sl
 80061b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061b6:	4651      	mov	r1, sl
 80061b8:	00ca      	lsls	r2, r1, #3
 80061ba:	4610      	mov	r0, r2
 80061bc:	4619      	mov	r1, r3
 80061be:	4603      	mov	r3, r0
 80061c0:	4642      	mov	r2, r8
 80061c2:	189b      	adds	r3, r3, r2
 80061c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061c8:	464b      	mov	r3, r9
 80061ca:	460a      	mov	r2, r1
 80061cc:	eb42 0303 	adc.w	r3, r2, r3
 80061d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80061e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80061e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80061e8:	460b      	mov	r3, r1
 80061ea:	18db      	adds	r3, r3, r3
 80061ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80061ee:	4613      	mov	r3, r2
 80061f0:	eb42 0303 	adc.w	r3, r2, r3
 80061f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80061fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80061fe:	f7f9 ffe3 	bl	80001c8 <__aeabi_uldivmod>
 8006202:	4602      	mov	r2, r0
 8006204:	460b      	mov	r3, r1
 8006206:	4b0d      	ldr	r3, [pc, #52]	; (800623c <UART_SetConfig+0x2d4>)
 8006208:	fba3 1302 	umull	r1, r3, r3, r2
 800620c:	095b      	lsrs	r3, r3, #5
 800620e:	2164      	movs	r1, #100	; 0x64
 8006210:	fb01 f303 	mul.w	r3, r1, r3
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	00db      	lsls	r3, r3, #3
 8006218:	3332      	adds	r3, #50	; 0x32
 800621a:	4a08      	ldr	r2, [pc, #32]	; (800623c <UART_SetConfig+0x2d4>)
 800621c:	fba2 2303 	umull	r2, r3, r2, r3
 8006220:	095b      	lsrs	r3, r3, #5
 8006222:	f003 0207 	and.w	r2, r3, #7
 8006226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4422      	add	r2, r4
 800622e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006230:	e105      	b.n	800643e <UART_SetConfig+0x4d6>
 8006232:	bf00      	nop
 8006234:	40011000 	.word	0x40011000
 8006238:	40011400 	.word	0x40011400
 800623c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006240:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006244:	2200      	movs	r2, #0
 8006246:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800624a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800624e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006252:	4642      	mov	r2, r8
 8006254:	464b      	mov	r3, r9
 8006256:	1891      	adds	r1, r2, r2
 8006258:	6239      	str	r1, [r7, #32]
 800625a:	415b      	adcs	r3, r3
 800625c:	627b      	str	r3, [r7, #36]	; 0x24
 800625e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006262:	4641      	mov	r1, r8
 8006264:	1854      	adds	r4, r2, r1
 8006266:	4649      	mov	r1, r9
 8006268:	eb43 0501 	adc.w	r5, r3, r1
 800626c:	f04f 0200 	mov.w	r2, #0
 8006270:	f04f 0300 	mov.w	r3, #0
 8006274:	00eb      	lsls	r3, r5, #3
 8006276:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800627a:	00e2      	lsls	r2, r4, #3
 800627c:	4614      	mov	r4, r2
 800627e:	461d      	mov	r5, r3
 8006280:	4643      	mov	r3, r8
 8006282:	18e3      	adds	r3, r4, r3
 8006284:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006288:	464b      	mov	r3, r9
 800628a:	eb45 0303 	adc.w	r3, r5, r3
 800628e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800629e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80062a2:	f04f 0200 	mov.w	r2, #0
 80062a6:	f04f 0300 	mov.w	r3, #0
 80062aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80062ae:	4629      	mov	r1, r5
 80062b0:	008b      	lsls	r3, r1, #2
 80062b2:	4621      	mov	r1, r4
 80062b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062b8:	4621      	mov	r1, r4
 80062ba:	008a      	lsls	r2, r1, #2
 80062bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80062c0:	f7f9 ff82 	bl	80001c8 <__aeabi_uldivmod>
 80062c4:	4602      	mov	r2, r0
 80062c6:	460b      	mov	r3, r1
 80062c8:	4b60      	ldr	r3, [pc, #384]	; (800644c <UART_SetConfig+0x4e4>)
 80062ca:	fba3 2302 	umull	r2, r3, r3, r2
 80062ce:	095b      	lsrs	r3, r3, #5
 80062d0:	011c      	lsls	r4, r3, #4
 80062d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062d6:	2200      	movs	r2, #0
 80062d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80062dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80062e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80062e4:	4642      	mov	r2, r8
 80062e6:	464b      	mov	r3, r9
 80062e8:	1891      	adds	r1, r2, r2
 80062ea:	61b9      	str	r1, [r7, #24]
 80062ec:	415b      	adcs	r3, r3
 80062ee:	61fb      	str	r3, [r7, #28]
 80062f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062f4:	4641      	mov	r1, r8
 80062f6:	1851      	adds	r1, r2, r1
 80062f8:	6139      	str	r1, [r7, #16]
 80062fa:	4649      	mov	r1, r9
 80062fc:	414b      	adcs	r3, r1
 80062fe:	617b      	str	r3, [r7, #20]
 8006300:	f04f 0200 	mov.w	r2, #0
 8006304:	f04f 0300 	mov.w	r3, #0
 8006308:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800630c:	4659      	mov	r1, fp
 800630e:	00cb      	lsls	r3, r1, #3
 8006310:	4651      	mov	r1, sl
 8006312:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006316:	4651      	mov	r1, sl
 8006318:	00ca      	lsls	r2, r1, #3
 800631a:	4610      	mov	r0, r2
 800631c:	4619      	mov	r1, r3
 800631e:	4603      	mov	r3, r0
 8006320:	4642      	mov	r2, r8
 8006322:	189b      	adds	r3, r3, r2
 8006324:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006328:	464b      	mov	r3, r9
 800632a:	460a      	mov	r2, r1
 800632c:	eb42 0303 	adc.w	r3, r2, r3
 8006330:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	67bb      	str	r3, [r7, #120]	; 0x78
 800633e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006340:	f04f 0200 	mov.w	r2, #0
 8006344:	f04f 0300 	mov.w	r3, #0
 8006348:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800634c:	4649      	mov	r1, r9
 800634e:	008b      	lsls	r3, r1, #2
 8006350:	4641      	mov	r1, r8
 8006352:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006356:	4641      	mov	r1, r8
 8006358:	008a      	lsls	r2, r1, #2
 800635a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800635e:	f7f9 ff33 	bl	80001c8 <__aeabi_uldivmod>
 8006362:	4602      	mov	r2, r0
 8006364:	460b      	mov	r3, r1
 8006366:	4b39      	ldr	r3, [pc, #228]	; (800644c <UART_SetConfig+0x4e4>)
 8006368:	fba3 1302 	umull	r1, r3, r3, r2
 800636c:	095b      	lsrs	r3, r3, #5
 800636e:	2164      	movs	r1, #100	; 0x64
 8006370:	fb01 f303 	mul.w	r3, r1, r3
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	011b      	lsls	r3, r3, #4
 8006378:	3332      	adds	r3, #50	; 0x32
 800637a:	4a34      	ldr	r2, [pc, #208]	; (800644c <UART_SetConfig+0x4e4>)
 800637c:	fba2 2303 	umull	r2, r3, r2, r3
 8006380:	095b      	lsrs	r3, r3, #5
 8006382:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006386:	441c      	add	r4, r3
 8006388:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800638c:	2200      	movs	r2, #0
 800638e:	673b      	str	r3, [r7, #112]	; 0x70
 8006390:	677a      	str	r2, [r7, #116]	; 0x74
 8006392:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006396:	4642      	mov	r2, r8
 8006398:	464b      	mov	r3, r9
 800639a:	1891      	adds	r1, r2, r2
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	415b      	adcs	r3, r3
 80063a0:	60fb      	str	r3, [r7, #12]
 80063a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063a6:	4641      	mov	r1, r8
 80063a8:	1851      	adds	r1, r2, r1
 80063aa:	6039      	str	r1, [r7, #0]
 80063ac:	4649      	mov	r1, r9
 80063ae:	414b      	adcs	r3, r1
 80063b0:	607b      	str	r3, [r7, #4]
 80063b2:	f04f 0200 	mov.w	r2, #0
 80063b6:	f04f 0300 	mov.w	r3, #0
 80063ba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80063be:	4659      	mov	r1, fp
 80063c0:	00cb      	lsls	r3, r1, #3
 80063c2:	4651      	mov	r1, sl
 80063c4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063c8:	4651      	mov	r1, sl
 80063ca:	00ca      	lsls	r2, r1, #3
 80063cc:	4610      	mov	r0, r2
 80063ce:	4619      	mov	r1, r3
 80063d0:	4603      	mov	r3, r0
 80063d2:	4642      	mov	r2, r8
 80063d4:	189b      	adds	r3, r3, r2
 80063d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80063d8:	464b      	mov	r3, r9
 80063da:	460a      	mov	r2, r1
 80063dc:	eb42 0303 	adc.w	r3, r2, r3
 80063e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	663b      	str	r3, [r7, #96]	; 0x60
 80063ec:	667a      	str	r2, [r7, #100]	; 0x64
 80063ee:	f04f 0200 	mov.w	r2, #0
 80063f2:	f04f 0300 	mov.w	r3, #0
 80063f6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80063fa:	4649      	mov	r1, r9
 80063fc:	008b      	lsls	r3, r1, #2
 80063fe:	4641      	mov	r1, r8
 8006400:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006404:	4641      	mov	r1, r8
 8006406:	008a      	lsls	r2, r1, #2
 8006408:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800640c:	f7f9 fedc 	bl	80001c8 <__aeabi_uldivmod>
 8006410:	4602      	mov	r2, r0
 8006412:	460b      	mov	r3, r1
 8006414:	4b0d      	ldr	r3, [pc, #52]	; (800644c <UART_SetConfig+0x4e4>)
 8006416:	fba3 1302 	umull	r1, r3, r3, r2
 800641a:	095b      	lsrs	r3, r3, #5
 800641c:	2164      	movs	r1, #100	; 0x64
 800641e:	fb01 f303 	mul.w	r3, r1, r3
 8006422:	1ad3      	subs	r3, r2, r3
 8006424:	011b      	lsls	r3, r3, #4
 8006426:	3332      	adds	r3, #50	; 0x32
 8006428:	4a08      	ldr	r2, [pc, #32]	; (800644c <UART_SetConfig+0x4e4>)
 800642a:	fba2 2303 	umull	r2, r3, r2, r3
 800642e:	095b      	lsrs	r3, r3, #5
 8006430:	f003 020f 	and.w	r2, r3, #15
 8006434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4422      	add	r2, r4
 800643c:	609a      	str	r2, [r3, #8]
}
 800643e:	bf00      	nop
 8006440:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006444:	46bd      	mov	sp, r7
 8006446:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800644a:	bf00      	nop
 800644c:	51eb851f 	.word	0x51eb851f

08006450 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006450:	b084      	sub	sp, #16
 8006452:	b580      	push	{r7, lr}
 8006454:	b084      	sub	sp, #16
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
 800645a:	f107 001c 	add.w	r0, r7, #28
 800645e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006464:	2b01      	cmp	r3, #1
 8006466:	d122      	bne.n	80064ae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800647c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006490:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006492:	2b01      	cmp	r3, #1
 8006494:	d105      	bne.n	80064a2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 f9c0 	bl	8006828 <USB_CoreReset>
 80064a8:	4603      	mov	r3, r0
 80064aa:	73fb      	strb	r3, [r7, #15]
 80064ac:	e01a      	b.n	80064e4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 f9b4 	bl	8006828 <USB_CoreReset>
 80064c0:	4603      	mov	r3, r0
 80064c2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80064c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d106      	bne.n	80064d8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	639a      	str	r2, [r3, #56]	; 0x38
 80064d6:	e005      	b.n	80064e4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80064e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d10b      	bne.n	8006502 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	f043 0206 	orr.w	r2, r3, #6
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	f043 0220 	orr.w	r2, r3, #32
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006502:	7bfb      	ldrb	r3, [r7, #15]
}
 8006504:	4618      	mov	r0, r3
 8006506:	3710      	adds	r7, #16
 8006508:	46bd      	mov	sp, r7
 800650a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800650e:	b004      	add	sp, #16
 8006510:	4770      	bx	lr

08006512 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006512:	b480      	push	{r7}
 8006514:	b083      	sub	sp, #12
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	f043 0201 	orr.w	r2, r3, #1
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	f023 0201 	bic.w	r2, r3, #1
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	370c      	adds	r7, #12
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr

08006556 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006556:	b580      	push	{r7, lr}
 8006558:	b084      	sub	sp, #16
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
 800655e:	460b      	mov	r3, r1
 8006560:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006562:	2300      	movs	r3, #0
 8006564:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006572:	78fb      	ldrb	r3, [r7, #3]
 8006574:	2b01      	cmp	r3, #1
 8006576:	d115      	bne.n	80065a4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006584:	2001      	movs	r0, #1
 8006586:	f7fa fe7f 	bl	8001288 <HAL_Delay>
      ms++;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	3301      	adds	r3, #1
 800658e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 f93a 	bl	800680a <USB_GetMode>
 8006596:	4603      	mov	r3, r0
 8006598:	2b01      	cmp	r3, #1
 800659a:	d01e      	beq.n	80065da <USB_SetCurrentMode+0x84>
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2b31      	cmp	r3, #49	; 0x31
 80065a0:	d9f0      	bls.n	8006584 <USB_SetCurrentMode+0x2e>
 80065a2:	e01a      	b.n	80065da <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80065a4:	78fb      	ldrb	r3, [r7, #3]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d115      	bne.n	80065d6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80065b6:	2001      	movs	r0, #1
 80065b8:	f7fa fe66 	bl	8001288 <HAL_Delay>
      ms++;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	3301      	adds	r3, #1
 80065c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 f921 	bl	800680a <USB_GetMode>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d005      	beq.n	80065da <USB_SetCurrentMode+0x84>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2b31      	cmp	r3, #49	; 0x31
 80065d2:	d9f0      	bls.n	80065b6 <USB_SetCurrentMode+0x60>
 80065d4:	e001      	b.n	80065da <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e005      	b.n	80065e6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2b32      	cmp	r3, #50	; 0x32
 80065de:	d101      	bne.n	80065e4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	e000      	b.n	80065e6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3710      	adds	r7, #16
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
	...

080065f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80065fa:	2300      	movs	r3, #0
 80065fc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	3301      	adds	r3, #1
 8006602:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	4a13      	ldr	r2, [pc, #76]	; (8006654 <USB_FlushTxFifo+0x64>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d901      	bls.n	8006610 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800660c:	2303      	movs	r3, #3
 800660e:	e01b      	b.n	8006648 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	2b00      	cmp	r3, #0
 8006616:	daf2      	bge.n	80065fe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006618:	2300      	movs	r3, #0
 800661a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	019b      	lsls	r3, r3, #6
 8006620:	f043 0220 	orr.w	r2, r3, #32
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	3301      	adds	r3, #1
 800662c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	4a08      	ldr	r2, [pc, #32]	; (8006654 <USB_FlushTxFifo+0x64>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d901      	bls.n	800663a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	e006      	b.n	8006648 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	f003 0320 	and.w	r3, r3, #32
 8006642:	2b20      	cmp	r3, #32
 8006644:	d0f0      	beq.n	8006628 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	3714      	adds	r7, #20
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr
 8006654:	00030d40 	.word	0x00030d40

08006658 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006660:	2300      	movs	r3, #0
 8006662:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	3301      	adds	r3, #1
 8006668:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	4a11      	ldr	r2, [pc, #68]	; (80066b4 <USB_FlushRxFifo+0x5c>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d901      	bls.n	8006676 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006672:	2303      	movs	r3, #3
 8006674:	e018      	b.n	80066a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	2b00      	cmp	r3, #0
 800667c:	daf2      	bge.n	8006664 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800667e:	2300      	movs	r3, #0
 8006680:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2210      	movs	r2, #16
 8006686:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	3301      	adds	r3, #1
 800668c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	4a08      	ldr	r2, [pc, #32]	; (80066b4 <USB_FlushRxFifo+0x5c>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d901      	bls.n	800669a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006696:	2303      	movs	r3, #3
 8006698:	e006      	b.n	80066a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	f003 0310 	and.w	r3, r3, #16
 80066a2:	2b10      	cmp	r3, #16
 80066a4:	d0f0      	beq.n	8006688 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3714      	adds	r7, #20
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr
 80066b4:	00030d40 	.word	0x00030d40

080066b8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b089      	sub	sp, #36	; 0x24
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	4611      	mov	r1, r2
 80066c4:	461a      	mov	r2, r3
 80066c6:	460b      	mov	r3, r1
 80066c8:	71fb      	strb	r3, [r7, #7]
 80066ca:	4613      	mov	r3, r2
 80066cc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80066d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d123      	bne.n	8006726 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80066de:	88bb      	ldrh	r3, [r7, #4]
 80066e0:	3303      	adds	r3, #3
 80066e2:	089b      	lsrs	r3, r3, #2
 80066e4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80066e6:	2300      	movs	r3, #0
 80066e8:	61bb      	str	r3, [r7, #24]
 80066ea:	e018      	b.n	800671e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80066ec:	79fb      	ldrb	r3, [r7, #7]
 80066ee:	031a      	lsls	r2, r3, #12
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	4413      	add	r3, r2
 80066f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066f8:	461a      	mov	r2, r3
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	3301      	adds	r3, #1
 8006704:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	3301      	adds	r3, #1
 800670a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	3301      	adds	r3, #1
 8006710:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	3301      	adds	r3, #1
 8006716:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	3301      	adds	r3, #1
 800671c:	61bb      	str	r3, [r7, #24]
 800671e:	69ba      	ldr	r2, [r7, #24]
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	429a      	cmp	r2, r3
 8006724:	d3e2      	bcc.n	80066ec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3724      	adds	r7, #36	; 0x24
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006734:	b480      	push	{r7}
 8006736:	b08b      	sub	sp, #44	; 0x2c
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	4613      	mov	r3, r2
 8006740:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800674a:	88fb      	ldrh	r3, [r7, #6]
 800674c:	089b      	lsrs	r3, r3, #2
 800674e:	b29b      	uxth	r3, r3
 8006750:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006752:	88fb      	ldrh	r3, [r7, #6]
 8006754:	f003 0303 	and.w	r3, r3, #3
 8006758:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800675a:	2300      	movs	r3, #0
 800675c:	623b      	str	r3, [r7, #32]
 800675e:	e014      	b.n	800678a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676a:	601a      	str	r2, [r3, #0]
    pDest++;
 800676c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676e:	3301      	adds	r3, #1
 8006770:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006774:	3301      	adds	r3, #1
 8006776:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677a:	3301      	adds	r3, #1
 800677c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800677e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006780:	3301      	adds	r3, #1
 8006782:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006784:	6a3b      	ldr	r3, [r7, #32]
 8006786:	3301      	adds	r3, #1
 8006788:	623b      	str	r3, [r7, #32]
 800678a:	6a3a      	ldr	r2, [r7, #32]
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	429a      	cmp	r2, r3
 8006790:	d3e6      	bcc.n	8006760 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006792:	8bfb      	ldrh	r3, [r7, #30]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d01e      	beq.n	80067d6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006798:	2300      	movs	r3, #0
 800679a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067a2:	461a      	mov	r2, r3
 80067a4:	f107 0310 	add.w	r3, r7, #16
 80067a8:	6812      	ldr	r2, [r2, #0]
 80067aa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80067ac:	693a      	ldr	r2, [r7, #16]
 80067ae:	6a3b      	ldr	r3, [r7, #32]
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	00db      	lsls	r3, r3, #3
 80067b4:	fa22 f303 	lsr.w	r3, r2, r3
 80067b8:	b2da      	uxtb	r2, r3
 80067ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067bc:	701a      	strb	r2, [r3, #0]
      i++;
 80067be:	6a3b      	ldr	r3, [r7, #32]
 80067c0:	3301      	adds	r3, #1
 80067c2:	623b      	str	r3, [r7, #32]
      pDest++;
 80067c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c6:	3301      	adds	r3, #1
 80067c8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80067ca:	8bfb      	ldrh	r3, [r7, #30]
 80067cc:	3b01      	subs	r3, #1
 80067ce:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80067d0:	8bfb      	ldrh	r3, [r7, #30]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d1ea      	bne.n	80067ac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80067d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80067d8:	4618      	mov	r0, r3
 80067da:	372c      	adds	r7, #44	; 0x2c
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b085      	sub	sp, #20
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	695b      	ldr	r3, [r3, #20]
 80067f0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	699b      	ldr	r3, [r3, #24]
 80067f6:	68fa      	ldr	r2, [r7, #12]
 80067f8:	4013      	ands	r3, r2
 80067fa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80067fc:	68fb      	ldr	r3, [r7, #12]
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3714      	adds	r7, #20
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr

0800680a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800680a:	b480      	push	{r7}
 800680c:	b083      	sub	sp, #12
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	f003 0301 	and.w	r3, r3, #1
}
 800681a:	4618      	mov	r0, r3
 800681c:	370c      	adds	r7, #12
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr
	...

08006828 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006828:	b480      	push	{r7}
 800682a:	b085      	sub	sp, #20
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006830:	2300      	movs	r3, #0
 8006832:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	3301      	adds	r3, #1
 8006838:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	4a13      	ldr	r2, [pc, #76]	; (800688c <USB_CoreReset+0x64>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d901      	bls.n	8006846 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006842:	2303      	movs	r3, #3
 8006844:	e01b      	b.n	800687e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	2b00      	cmp	r3, #0
 800684c:	daf2      	bge.n	8006834 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800684e:	2300      	movs	r3, #0
 8006850:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	f043 0201 	orr.w	r2, r3, #1
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	3301      	adds	r3, #1
 8006862:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	4a09      	ldr	r2, [pc, #36]	; (800688c <USB_CoreReset+0x64>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d901      	bls.n	8006870 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800686c:	2303      	movs	r3, #3
 800686e:	e006      	b.n	800687e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	f003 0301 	and.w	r3, r3, #1
 8006878:	2b01      	cmp	r3, #1
 800687a:	d0f0      	beq.n	800685e <USB_CoreReset+0x36>

  return HAL_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3714      	adds	r7, #20
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr
 800688a:	bf00      	nop
 800688c:	00030d40 	.word	0x00030d40

08006890 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006890:	b084      	sub	sp, #16
 8006892:	b580      	push	{r7, lr}
 8006894:	b086      	sub	sp, #24
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
 800689a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800689e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80068a2:	2300      	movs	r3, #0
 80068a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80068b0:	461a      	mov	r2, r3
 80068b2:	2300      	movs	r3, #0
 80068b4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d018      	beq.n	8006918 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80068e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d10a      	bne.n	8006902 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80068fa:	f043 0304 	orr.w	r3, r3, #4
 80068fe:	6013      	str	r3, [r2, #0]
 8006900:	e014      	b.n	800692c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006910:	f023 0304 	bic.w	r3, r3, #4
 8006914:	6013      	str	r3, [r2, #0]
 8006916:	e009      	b.n	800692c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006926:	f023 0304 	bic.w	r3, r3, #4
 800692a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800692c:	2110      	movs	r1, #16
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f7ff fe5e 	bl	80065f0 <USB_FlushTxFifo>
 8006934:	4603      	mov	r3, r0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d001      	beq.n	800693e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f7ff fe8a 	bl	8006658 <USB_FlushRxFifo>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d001      	beq.n	800694e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800694e:	2300      	movs	r3, #0
 8006950:	613b      	str	r3, [r7, #16]
 8006952:	e015      	b.n	8006980 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	015a      	lsls	r2, r3, #5
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	4413      	add	r3, r2
 800695c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006960:	461a      	mov	r2, r3
 8006962:	f04f 33ff 	mov.w	r3, #4294967295
 8006966:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	015a      	lsls	r2, r3, #5
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	4413      	add	r3, r2
 8006970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006974:	461a      	mov	r2, r3
 8006976:	2300      	movs	r3, #0
 8006978:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	3301      	adds	r3, #1
 800697e:	613b      	str	r3, [r7, #16]
 8006980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006982:	693a      	ldr	r2, [r7, #16]
 8006984:	429a      	cmp	r2, r3
 8006986:	d3e5      	bcc.n	8006954 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f04f 32ff 	mov.w	r2, #4294967295
 8006994:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800699a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00b      	beq.n	80069ba <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069a8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a13      	ldr	r2, [pc, #76]	; (80069fc <USB_HostInit+0x16c>)
 80069ae:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a13      	ldr	r2, [pc, #76]	; (8006a00 <USB_HostInit+0x170>)
 80069b4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80069b8:	e009      	b.n	80069ce <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2280      	movs	r2, #128	; 0x80
 80069be:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a10      	ldr	r2, [pc, #64]	; (8006a04 <USB_HostInit+0x174>)
 80069c4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a0f      	ldr	r2, [pc, #60]	; (8006a08 <USB_HostInit+0x178>)
 80069ca:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80069ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d105      	bne.n	80069e0 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	699b      	ldr	r3, [r3, #24]
 80069d8:	f043 0210 	orr.w	r2, r3, #16
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	699a      	ldr	r2, [r3, #24]
 80069e4:	4b09      	ldr	r3, [pc, #36]	; (8006a0c <USB_HostInit+0x17c>)
 80069e6:	4313      	orrs	r3, r2
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80069ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3718      	adds	r7, #24
 80069f2:	46bd      	mov	sp, r7
 80069f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069f8:	b004      	add	sp, #16
 80069fa:	4770      	bx	lr
 80069fc:	01000200 	.word	0x01000200
 8006a00:	00e00300 	.word	0x00e00300
 8006a04:	00600080 	.word	0x00600080
 8006a08:	004000e0 	.word	0x004000e0
 8006a0c:	a3200008 	.word	0xa3200008

08006a10 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b085      	sub	sp, #20
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	460b      	mov	r3, r1
 8006a1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006a2e:	f023 0303 	bic.w	r3, r3, #3
 8006a32:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	78fb      	ldrb	r3, [r7, #3]
 8006a3e:	f003 0303 	and.w	r3, r3, #3
 8006a42:	68f9      	ldr	r1, [r7, #12]
 8006a44:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006a4c:	78fb      	ldrb	r3, [r7, #3]
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d107      	bne.n	8006a62 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a58:	461a      	mov	r2, r3
 8006a5a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006a5e:	6053      	str	r3, [r2, #4]
 8006a60:	e009      	b.n	8006a76 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006a62:	78fb      	ldrb	r3, [r7, #3]
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	d106      	bne.n	8006a76 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a6e:	461a      	mov	r2, r3
 8006a70:	f241 7370 	movw	r3, #6000	; 0x1770
 8006a74:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3714      	adds	r7, #20
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006a94:	2300      	movs	r3, #0
 8006a96:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006aa8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d109      	bne.n	8006ac8 <USB_DriveVbus+0x44>
 8006ab4:	78fb      	ldrb	r3, [r7, #3]
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d106      	bne.n	8006ac8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006ac2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006ac6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ad2:	d109      	bne.n	8006ae8 <USB_DriveVbus+0x64>
 8006ad4:	78fb      	ldrb	r3, [r7, #3]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d106      	bne.n	8006ae8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006ae2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ae6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3714      	adds	r7, #20
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr

08006af6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006af6:	b480      	push	{r7}
 8006af8:	b085      	sub	sp, #20
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006b02:	2300      	movs	r3, #0
 8006b04:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	0c5b      	lsrs	r3, r3, #17
 8006b14:	f003 0303 	and.w	r3, r3, #3
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3714      	adds	r7, #20
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b085      	sub	sp, #20
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	b29b      	uxth	r3, r3
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3714      	adds	r7, #20
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr
	...

08006b48 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b088      	sub	sp, #32
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	4608      	mov	r0, r1
 8006b52:	4611      	mov	r1, r2
 8006b54:	461a      	mov	r2, r3
 8006b56:	4603      	mov	r3, r0
 8006b58:	70fb      	strb	r3, [r7, #3]
 8006b5a:	460b      	mov	r3, r1
 8006b5c:	70bb      	strb	r3, [r7, #2]
 8006b5e:	4613      	mov	r3, r2
 8006b60:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006b62:	2300      	movs	r3, #0
 8006b64:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006b6a:	78fb      	ldrb	r3, [r7, #3]
 8006b6c:	015a      	lsls	r2, r3, #5
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	4413      	add	r3, r2
 8006b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b76:	461a      	mov	r2, r3
 8006b78:	f04f 33ff 	mov.w	r3, #4294967295
 8006b7c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006b7e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006b82:	2b03      	cmp	r3, #3
 8006b84:	d87e      	bhi.n	8006c84 <USB_HC_Init+0x13c>
 8006b86:	a201      	add	r2, pc, #4	; (adr r2, 8006b8c <USB_HC_Init+0x44>)
 8006b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b8c:	08006b9d 	.word	0x08006b9d
 8006b90:	08006c47 	.word	0x08006c47
 8006b94:	08006b9d 	.word	0x08006b9d
 8006b98:	08006c09 	.word	0x08006c09
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006b9c:	78fb      	ldrb	r3, [r7, #3]
 8006b9e:	015a      	lsls	r2, r3, #5
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ba8:	461a      	mov	r2, r3
 8006baa:	f240 439d 	movw	r3, #1181	; 0x49d
 8006bae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006bb0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	da10      	bge.n	8006bda <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006bb8:	78fb      	ldrb	r3, [r7, #3]
 8006bba:	015a      	lsls	r2, r3, #5
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	4413      	add	r3, r2
 8006bc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	78fa      	ldrb	r2, [r7, #3]
 8006bc8:	0151      	lsls	r1, r2, #5
 8006bca:	693a      	ldr	r2, [r7, #16]
 8006bcc:	440a      	add	r2, r1
 8006bce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bd6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006bd8:	e057      	b.n	8006c8a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d051      	beq.n	8006c8a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006be6:	78fb      	ldrb	r3, [r7, #3]
 8006be8:	015a      	lsls	r2, r3, #5
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	4413      	add	r3, r2
 8006bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	78fa      	ldrb	r2, [r7, #3]
 8006bf6:	0151      	lsls	r1, r2, #5
 8006bf8:	693a      	ldr	r2, [r7, #16]
 8006bfa:	440a      	add	r2, r1
 8006bfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c00:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006c04:	60d3      	str	r3, [r2, #12]
      break;
 8006c06:	e040      	b.n	8006c8a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006c08:	78fb      	ldrb	r3, [r7, #3]
 8006c0a:	015a      	lsls	r2, r3, #5
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	4413      	add	r3, r2
 8006c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c14:	461a      	mov	r2, r3
 8006c16:	f240 639d 	movw	r3, #1693	; 0x69d
 8006c1a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006c1c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	da34      	bge.n	8006c8e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006c24:	78fb      	ldrb	r3, [r7, #3]
 8006c26:	015a      	lsls	r2, r3, #5
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	78fa      	ldrb	r2, [r7, #3]
 8006c34:	0151      	lsls	r1, r2, #5
 8006c36:	693a      	ldr	r2, [r7, #16]
 8006c38:	440a      	add	r2, r1
 8006c3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c42:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006c44:	e023      	b.n	8006c8e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006c46:	78fb      	ldrb	r3, [r7, #3]
 8006c48:	015a      	lsls	r2, r3, #5
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	4413      	add	r3, r2
 8006c4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c52:	461a      	mov	r2, r3
 8006c54:	f240 2325 	movw	r3, #549	; 0x225
 8006c58:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006c5a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	da17      	bge.n	8006c92 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006c62:	78fb      	ldrb	r3, [r7, #3]
 8006c64:	015a      	lsls	r2, r3, #5
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	4413      	add	r3, r2
 8006c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	78fa      	ldrb	r2, [r7, #3]
 8006c72:	0151      	lsls	r1, r2, #5
 8006c74:	693a      	ldr	r2, [r7, #16]
 8006c76:	440a      	add	r2, r1
 8006c78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c7c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006c80:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006c82:	e006      	b.n	8006c92 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	77fb      	strb	r3, [r7, #31]
      break;
 8006c88:	e004      	b.n	8006c94 <USB_HC_Init+0x14c>
      break;
 8006c8a:	bf00      	nop
 8006c8c:	e002      	b.n	8006c94 <USB_HC_Init+0x14c>
      break;
 8006c8e:	bf00      	nop
 8006c90:	e000      	b.n	8006c94 <USB_HC_Init+0x14c>
      break;
 8006c92:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006c94:	78fb      	ldrb	r3, [r7, #3]
 8006c96:	015a      	lsls	r2, r3, #5
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ca0:	68db      	ldr	r3, [r3, #12]
 8006ca2:	78fa      	ldrb	r2, [r7, #3]
 8006ca4:	0151      	lsls	r1, r2, #5
 8006ca6:	693a      	ldr	r2, [r7, #16]
 8006ca8:	440a      	add	r2, r1
 8006caa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cae:	f043 0302 	orr.w	r3, r3, #2
 8006cb2:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cba:	699a      	ldr	r2, [r3, #24]
 8006cbc:	78fb      	ldrb	r3, [r7, #3]
 8006cbe:	f003 030f 	and.w	r3, r3, #15
 8006cc2:	2101      	movs	r1, #1
 8006cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8006cc8:	6939      	ldr	r1, [r7, #16]
 8006cca:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	699b      	ldr	r3, [r3, #24]
 8006cd6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006cde:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	da03      	bge.n	8006cee <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006ce6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cea:	61bb      	str	r3, [r7, #24]
 8006cec:	e001      	b.n	8006cf2 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f7ff feff 	bl	8006af6 <USB_GetHostSpeed>
 8006cf8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006cfa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006cfe:	2b02      	cmp	r3, #2
 8006d00:	d106      	bne.n	8006d10 <USB_HC_Init+0x1c8>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2b02      	cmp	r3, #2
 8006d06:	d003      	beq.n	8006d10 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006d08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006d0c:	617b      	str	r3, [r7, #20]
 8006d0e:	e001      	b.n	8006d14 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006d10:	2300      	movs	r3, #0
 8006d12:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d14:	787b      	ldrb	r3, [r7, #1]
 8006d16:	059b      	lsls	r3, r3, #22
 8006d18:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006d1c:	78bb      	ldrb	r3, [r7, #2]
 8006d1e:	02db      	lsls	r3, r3, #11
 8006d20:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d24:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006d26:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006d2a:	049b      	lsls	r3, r3, #18
 8006d2c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006d30:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006d32:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006d34:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006d38:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d3e:	78fb      	ldrb	r3, [r7, #3]
 8006d40:	0159      	lsls	r1, r3, #5
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	440b      	add	r3, r1
 8006d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d4a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d50:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006d52:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006d56:	2b03      	cmp	r3, #3
 8006d58:	d003      	beq.n	8006d62 <USB_HC_Init+0x21a>
 8006d5a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d10f      	bne.n	8006d82 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006d62:	78fb      	ldrb	r3, [r7, #3]
 8006d64:	015a      	lsls	r2, r3, #5
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	4413      	add	r3, r2
 8006d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	78fa      	ldrb	r2, [r7, #3]
 8006d72:	0151      	lsls	r1, r2, #5
 8006d74:	693a      	ldr	r2, [r7, #16]
 8006d76:	440a      	add	r2, r1
 8006d78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d80:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006d82:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3720      	adds	r7, #32
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b08c      	sub	sp, #48	; 0x30
 8006d90:	af02      	add	r7, sp, #8
 8006d92:	60f8      	str	r0, [r7, #12]
 8006d94:	60b9      	str	r1, [r7, #8]
 8006d96:	4613      	mov	r3, r2
 8006d98:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	785b      	ldrb	r3, [r3, #1]
 8006da2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006da4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006da8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d02d      	beq.n	8006e12 <USB_HC_StartXfer+0x86>
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	791b      	ldrb	r3, [r3, #4]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d129      	bne.n	8006e12 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006dbe:	79fb      	ldrb	r3, [r7, #7]
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d117      	bne.n	8006df4 <USB_HC_StartXfer+0x68>
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	79db      	ldrb	r3, [r3, #7]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d003      	beq.n	8006dd4 <USB_HC_StartXfer+0x48>
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	79db      	ldrb	r3, [r3, #7]
 8006dd0:	2b02      	cmp	r3, #2
 8006dd2:	d10f      	bne.n	8006df4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	015a      	lsls	r2, r3, #5
 8006dd8:	6a3b      	ldr	r3, [r7, #32]
 8006dda:	4413      	add	r3, r2
 8006ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	69fa      	ldr	r2, [r7, #28]
 8006de4:	0151      	lsls	r1, r2, #5
 8006de6:	6a3a      	ldr	r2, [r7, #32]
 8006de8:	440a      	add	r2, r1
 8006dea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006df2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006df4:	79fb      	ldrb	r3, [r7, #7]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d10b      	bne.n	8006e12 <USB_HC_StartXfer+0x86>
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	795b      	ldrb	r3, [r3, #5]
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d107      	bne.n	8006e12 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	785b      	ldrb	r3, [r3, #1]
 8006e06:	4619      	mov	r1, r3
 8006e08:	68f8      	ldr	r0, [r7, #12]
 8006e0a:	f000 fa0f 	bl	800722c <USB_DoPing>
      return HAL_OK;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	e0f8      	b.n	8007004 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	695b      	ldr	r3, [r3, #20]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d018      	beq.n	8006e4c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	695b      	ldr	r3, [r3, #20]
 8006e1e:	68ba      	ldr	r2, [r7, #8]
 8006e20:	8912      	ldrh	r2, [r2, #8]
 8006e22:	4413      	add	r3, r2
 8006e24:	3b01      	subs	r3, #1
 8006e26:	68ba      	ldr	r2, [r7, #8]
 8006e28:	8912      	ldrh	r2, [r2, #8]
 8006e2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e2e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006e30:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006e32:	8b7b      	ldrh	r3, [r7, #26]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d90b      	bls.n	8006e50 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006e38:	8b7b      	ldrh	r3, [r7, #26]
 8006e3a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006e3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e3e:	68ba      	ldr	r2, [r7, #8]
 8006e40:	8912      	ldrh	r2, [r2, #8]
 8006e42:	fb03 f202 	mul.w	r2, r3, r2
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	611a      	str	r2, [r3, #16]
 8006e4a:	e001      	b.n	8006e50 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	78db      	ldrb	r3, [r3, #3]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d007      	beq.n	8006e68 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006e58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e5a:	68ba      	ldr	r2, [r7, #8]
 8006e5c:	8912      	ldrh	r2, [r2, #8]
 8006e5e:	fb03 f202 	mul.w	r2, r3, r2
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	611a      	str	r2, [r3, #16]
 8006e66:	e003      	b.n	8006e70 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	695a      	ldr	r2, [r3, #20]
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006e78:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e7a:	04d9      	lsls	r1, r3, #19
 8006e7c:	4b63      	ldr	r3, [pc, #396]	; (800700c <USB_HC_StartXfer+0x280>)
 8006e7e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006e80:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	7a9b      	ldrb	r3, [r3, #10]
 8006e86:	075b      	lsls	r3, r3, #29
 8006e88:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006e8c:	69f9      	ldr	r1, [r7, #28]
 8006e8e:	0148      	lsls	r0, r1, #5
 8006e90:	6a39      	ldr	r1, [r7, #32]
 8006e92:	4401      	add	r1, r0
 8006e94:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006e98:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006e9a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006e9c:	79fb      	ldrb	r3, [r7, #7]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d009      	beq.n	8006eb6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	68d9      	ldr	r1, [r3, #12]
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	015a      	lsls	r2, r3, #5
 8006eaa:	6a3b      	ldr	r3, [r7, #32]
 8006eac:	4413      	add	r3, r2
 8006eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eb2:	460a      	mov	r2, r1
 8006eb4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006eb6:	6a3b      	ldr	r3, [r7, #32]
 8006eb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	f003 0301 	and.w	r3, r3, #1
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	bf0c      	ite	eq
 8006ec6:	2301      	moveq	r3, #1
 8006ec8:	2300      	movne	r3, #0
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006ece:	69fb      	ldr	r3, [r7, #28]
 8006ed0:	015a      	lsls	r2, r3, #5
 8006ed2:	6a3b      	ldr	r3, [r7, #32]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	69fa      	ldr	r2, [r7, #28]
 8006ede:	0151      	lsls	r1, r2, #5
 8006ee0:	6a3a      	ldr	r2, [r7, #32]
 8006ee2:	440a      	add	r2, r1
 8006ee4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ee8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006eec:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	015a      	lsls	r2, r3, #5
 8006ef2:	6a3b      	ldr	r3, [r7, #32]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	7e7b      	ldrb	r3, [r7, #25]
 8006efe:	075b      	lsls	r3, r3, #29
 8006f00:	69f9      	ldr	r1, [r7, #28]
 8006f02:	0148      	lsls	r0, r1, #5
 8006f04:	6a39      	ldr	r1, [r7, #32]
 8006f06:	4401      	add	r1, r0
 8006f08:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	015a      	lsls	r2, r3, #5
 8006f14:	6a3b      	ldr	r3, [r7, #32]
 8006f16:	4413      	add	r3, r2
 8006f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006f26:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	78db      	ldrb	r3, [r3, #3]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d004      	beq.n	8006f3a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f36:	613b      	str	r3, [r7, #16]
 8006f38:	e003      	b.n	8006f42 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f40:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f48:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	015a      	lsls	r2, r3, #5
 8006f4e:	6a3b      	ldr	r3, [r7, #32]
 8006f50:	4413      	add	r3, r2
 8006f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f56:	461a      	mov	r2, r3
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006f5c:	79fb      	ldrb	r3, [r7, #7]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d001      	beq.n	8006f66 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006f62:	2300      	movs	r3, #0
 8006f64:	e04e      	b.n	8007004 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	78db      	ldrb	r3, [r3, #3]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d149      	bne.n	8007002 <USB_HC_StartXfer+0x276>
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	695b      	ldr	r3, [r3, #20]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d045      	beq.n	8007002 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	79db      	ldrb	r3, [r3, #7]
 8006f7a:	2b03      	cmp	r3, #3
 8006f7c:	d830      	bhi.n	8006fe0 <USB_HC_StartXfer+0x254>
 8006f7e:	a201      	add	r2, pc, #4	; (adr r2, 8006f84 <USB_HC_StartXfer+0x1f8>)
 8006f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f84:	08006f95 	.word	0x08006f95
 8006f88:	08006fb9 	.word	0x08006fb9
 8006f8c:	08006f95 	.word	0x08006f95
 8006f90:	08006fb9 	.word	0x08006fb9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	695b      	ldr	r3, [r3, #20]
 8006f98:	3303      	adds	r3, #3
 8006f9a:	089b      	lsrs	r3, r3, #2
 8006f9c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006f9e:	8afa      	ldrh	r2, [r7, #22]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d91c      	bls.n	8006fe4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	699b      	ldr	r3, [r3, #24]
 8006fae:	f043 0220 	orr.w	r2, r3, #32
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	619a      	str	r2, [r3, #24]
        }
        break;
 8006fb6:	e015      	b.n	8006fe4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	695b      	ldr	r3, [r3, #20]
 8006fbc:	3303      	adds	r3, #3
 8006fbe:	089b      	lsrs	r3, r3, #2
 8006fc0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006fc2:	8afa      	ldrh	r2, [r7, #22]
 8006fc4:	6a3b      	ldr	r3, [r7, #32]
 8006fc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d90a      	bls.n	8006fe8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	699b      	ldr	r3, [r3, #24]
 8006fd6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	619a      	str	r2, [r3, #24]
        }
        break;
 8006fde:	e003      	b.n	8006fe8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006fe0:	bf00      	nop
 8006fe2:	e002      	b.n	8006fea <USB_HC_StartXfer+0x25e>
        break;
 8006fe4:	bf00      	nop
 8006fe6:	e000      	b.n	8006fea <USB_HC_StartXfer+0x25e>
        break;
 8006fe8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	68d9      	ldr	r1, [r3, #12]
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	785a      	ldrb	r2, [r3, #1]
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	695b      	ldr	r3, [r3, #20]
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	2000      	movs	r0, #0
 8006ffa:	9000      	str	r0, [sp, #0]
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f7ff fb5b 	bl	80066b8 <USB_WritePacket>
  }

  return HAL_OK;
 8007002:	2300      	movs	r3, #0
}
 8007004:	4618      	mov	r0, r3
 8007006:	3728      	adds	r7, #40	; 0x28
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}
 800700c:	1ff80000 	.word	0x1ff80000

08007010 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007010:	b480      	push	{r7}
 8007012:	b085      	sub	sp, #20
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007022:	695b      	ldr	r3, [r3, #20]
 8007024:	b29b      	uxth	r3, r3
}
 8007026:	4618      	mov	r0, r3
 8007028:	3714      	adds	r7, #20
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr

08007032 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007032:	b480      	push	{r7}
 8007034:	b089      	sub	sp, #36	; 0x24
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
 800703a:	460b      	mov	r3, r1
 800703c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007042:	78fb      	ldrb	r3, [r7, #3]
 8007044:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007046:	2300      	movs	r3, #0
 8007048:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	015a      	lsls	r2, r3, #5
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	4413      	add	r3, r2
 8007052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	0c9b      	lsrs	r3, r3, #18
 800705a:	f003 0303 	and.w	r3, r3, #3
 800705e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	015a      	lsls	r2, r3, #5
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	4413      	add	r3, r2
 8007068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	0fdb      	lsrs	r3, r3, #31
 8007070:	f003 0301 	and.w	r3, r3, #1
 8007074:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	f003 0320 	and.w	r3, r3, #32
 800707e:	2b20      	cmp	r3, #32
 8007080:	d104      	bne.n	800708c <USB_HC_Halt+0x5a>
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d101      	bne.n	800708c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007088:	2300      	movs	r3, #0
 800708a:	e0c8      	b.n	800721e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d002      	beq.n	8007098 <USB_HC_Halt+0x66>
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	2b02      	cmp	r3, #2
 8007096:	d163      	bne.n	8007160 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007098:	69bb      	ldr	r3, [r7, #24]
 800709a:	015a      	lsls	r2, r3, #5
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	4413      	add	r3, r2
 80070a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	69ba      	ldr	r2, [r7, #24]
 80070a8:	0151      	lsls	r1, r2, #5
 80070aa:	69fa      	ldr	r2, [r7, #28]
 80070ac:	440a      	add	r2, r1
 80070ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070b6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	f003 0320 	and.w	r3, r3, #32
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f040 80ab 	bne.w	800721c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d133      	bne.n	800713a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80070d2:	69bb      	ldr	r3, [r7, #24]
 80070d4:	015a      	lsls	r2, r3, #5
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	4413      	add	r3, r2
 80070da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	69ba      	ldr	r2, [r7, #24]
 80070e2:	0151      	lsls	r1, r2, #5
 80070e4:	69fa      	ldr	r2, [r7, #28]
 80070e6:	440a      	add	r2, r1
 80070e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80070f0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	015a      	lsls	r2, r3, #5
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	4413      	add	r3, r2
 80070fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	69ba      	ldr	r2, [r7, #24]
 8007102:	0151      	lsls	r1, r2, #5
 8007104:	69fa      	ldr	r2, [r7, #28]
 8007106:	440a      	add	r2, r1
 8007108:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800710c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007110:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	3301      	adds	r3, #1
 8007116:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800711e:	d81d      	bhi.n	800715c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007120:	69bb      	ldr	r3, [r7, #24]
 8007122:	015a      	lsls	r2, r3, #5
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	4413      	add	r3, r2
 8007128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007132:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007136:	d0ec      	beq.n	8007112 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007138:	e070      	b.n	800721c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	015a      	lsls	r2, r3, #5
 800713e:	69fb      	ldr	r3, [r7, #28]
 8007140:	4413      	add	r3, r2
 8007142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	69ba      	ldr	r2, [r7, #24]
 800714a:	0151      	lsls	r1, r2, #5
 800714c:	69fa      	ldr	r2, [r7, #28]
 800714e:	440a      	add	r2, r1
 8007150:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007154:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007158:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800715a:	e05f      	b.n	800721c <USB_HC_Halt+0x1ea>
            break;
 800715c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800715e:	e05d      	b.n	800721c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	015a      	lsls	r2, r3, #5
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	4413      	add	r3, r2
 8007168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	69ba      	ldr	r2, [r7, #24]
 8007170:	0151      	lsls	r1, r2, #5
 8007172:	69fa      	ldr	r2, [r7, #28]
 8007174:	440a      	add	r2, r1
 8007176:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800717a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800717e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007186:	691b      	ldr	r3, [r3, #16]
 8007188:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800718c:	2b00      	cmp	r3, #0
 800718e:	d133      	bne.n	80071f8 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	015a      	lsls	r2, r3, #5
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	4413      	add	r3, r2
 8007198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	69ba      	ldr	r2, [r7, #24]
 80071a0:	0151      	lsls	r1, r2, #5
 80071a2:	69fa      	ldr	r2, [r7, #28]
 80071a4:	440a      	add	r2, r1
 80071a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80071ae:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80071b0:	69bb      	ldr	r3, [r7, #24]
 80071b2:	015a      	lsls	r2, r3, #5
 80071b4:	69fb      	ldr	r3, [r7, #28]
 80071b6:	4413      	add	r3, r2
 80071b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	69ba      	ldr	r2, [r7, #24]
 80071c0:	0151      	lsls	r1, r2, #5
 80071c2:	69fa      	ldr	r2, [r7, #28]
 80071c4:	440a      	add	r2, r1
 80071c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80071ce:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	3301      	adds	r3, #1
 80071d4:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071dc:	d81d      	bhi.n	800721a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	015a      	lsls	r2, r3, #5
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	4413      	add	r3, r2
 80071e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071f4:	d0ec      	beq.n	80071d0 <USB_HC_Halt+0x19e>
 80071f6:	e011      	b.n	800721c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	015a      	lsls	r2, r3, #5
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	4413      	add	r3, r2
 8007200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	69ba      	ldr	r2, [r7, #24]
 8007208:	0151      	lsls	r1, r2, #5
 800720a:	69fa      	ldr	r2, [r7, #28]
 800720c:	440a      	add	r2, r1
 800720e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007212:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007216:	6013      	str	r3, [r2, #0]
 8007218:	e000      	b.n	800721c <USB_HC_Halt+0x1ea>
          break;
 800721a:	bf00      	nop
    }
  }

  return HAL_OK;
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	3724      	adds	r7, #36	; 0x24
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr
	...

0800722c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800722c:	b480      	push	{r7}
 800722e:	b087      	sub	sp, #28
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	460b      	mov	r3, r1
 8007236:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800723c:	78fb      	ldrb	r3, [r7, #3]
 800723e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007240:	2301      	movs	r3, #1
 8007242:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	04da      	lsls	r2, r3, #19
 8007248:	4b15      	ldr	r3, [pc, #84]	; (80072a0 <USB_DoPing+0x74>)
 800724a:	4013      	ands	r3, r2
 800724c:	693a      	ldr	r2, [r7, #16]
 800724e:	0151      	lsls	r1, r2, #5
 8007250:	697a      	ldr	r2, [r7, #20]
 8007252:	440a      	add	r2, r1
 8007254:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007258:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800725c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	015a      	lsls	r2, r3, #5
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	4413      	add	r3, r2
 8007266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007274:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800727c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	015a      	lsls	r2, r3, #5
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	4413      	add	r3, r2
 8007286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800728a:	461a      	mov	r2, r3
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	371c      	adds	r7, #28
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr
 800729e:	bf00      	nop
 80072a0:	1ff80000 	.word	0x1ff80000

080072a4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b088      	sub	sp, #32
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80072ac:	2300      	movs	r3, #0
 80072ae:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80072b4:	2300      	movs	r3, #0
 80072b6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f7ff f93b 	bl	8006534 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80072be:	2110      	movs	r1, #16
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f7ff f995 	bl	80065f0 <USB_FlushTxFifo>
 80072c6:	4603      	mov	r3, r0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d001      	beq.n	80072d0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f7ff f9c1 	bl	8006658 <USB_FlushRxFifo>
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d001      	beq.n	80072e0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80072e0:	2300      	movs	r3, #0
 80072e2:	61bb      	str	r3, [r7, #24]
 80072e4:	e01f      	b.n	8007326 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	015a      	lsls	r2, r3, #5
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	4413      	add	r3, r2
 80072ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072fc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007304:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800730c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800730e:	69bb      	ldr	r3, [r7, #24]
 8007310:	015a      	lsls	r2, r3, #5
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	4413      	add	r3, r2
 8007316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800731a:	461a      	mov	r2, r3
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	3301      	adds	r3, #1
 8007324:	61bb      	str	r3, [r7, #24]
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	2b0f      	cmp	r3, #15
 800732a:	d9dc      	bls.n	80072e6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800732c:	2300      	movs	r3, #0
 800732e:	61bb      	str	r3, [r7, #24]
 8007330:	e034      	b.n	800739c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	015a      	lsls	r2, r3, #5
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	4413      	add	r3, r2
 800733a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007348:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007350:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007358:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	015a      	lsls	r2, r3, #5
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	4413      	add	r3, r2
 8007362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007366:	461a      	mov	r2, r3
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	3301      	adds	r3, #1
 8007370:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007378:	d80c      	bhi.n	8007394 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	015a      	lsls	r2, r3, #5
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	4413      	add	r3, r2
 8007382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800738c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007390:	d0ec      	beq.n	800736c <USB_StopHost+0xc8>
 8007392:	e000      	b.n	8007396 <USB_StopHost+0xf2>
        break;
 8007394:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	3301      	adds	r3, #1
 800739a:	61bb      	str	r3, [r7, #24]
 800739c:	69bb      	ldr	r3, [r7, #24]
 800739e:	2b0f      	cmp	r3, #15
 80073a0:	d9c7      	bls.n	8007332 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073a8:	461a      	mov	r2, r3
 80073aa:	f04f 33ff 	mov.w	r3, #4294967295
 80073ae:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f04f 32ff 	mov.w	r2, #4294967295
 80073b6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f7ff f8aa 	bl	8006512 <USB_EnableGlobalInt>

  return ret;
 80073be:	7ffb      	ldrb	r3, [r7, #31]
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3720      	adds	r7, #32
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80073c8:	b590      	push	{r4, r7, lr}
 80073ca:	b089      	sub	sp, #36	; 0x24
 80073cc:	af04      	add	r7, sp, #16
 80073ce:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80073d0:	2301      	movs	r3, #1
 80073d2:	2202      	movs	r2, #2
 80073d4:	2102      	movs	r1, #2
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 fc66 	bl	8007ca8 <USBH_FindInterface>
 80073dc:	4603      	mov	r3, r0
 80073de:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80073e0:	7bfb      	ldrb	r3, [r7, #15]
 80073e2:	2bff      	cmp	r3, #255	; 0xff
 80073e4:	d002      	beq.n	80073ec <USBH_CDC_InterfaceInit+0x24>
 80073e6:	7bfb      	ldrb	r3, [r7, #15]
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d901      	bls.n	80073f0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80073ec:	2302      	movs	r3, #2
 80073ee:	e13d      	b.n	800766c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80073f0:	7bfb      	ldrb	r3, [r7, #15]
 80073f2:	4619      	mov	r1, r3
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 fc3b 	bl	8007c70 <USBH_SelectInterface>
 80073fa:	4603      	mov	r3, r0
 80073fc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80073fe:	7bbb      	ldrb	r3, [r7, #14]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d001      	beq.n	8007408 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007404:	2302      	movs	r3, #2
 8007406:	e131      	b.n	800766c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800740e:	2050      	movs	r0, #80	; 0x50
 8007410:	f001 fb12 	bl	8008a38 <malloc>
 8007414:	4603      	mov	r3, r0
 8007416:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800741e:	69db      	ldr	r3, [r3, #28]
 8007420:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d101      	bne.n	800742c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007428:	2302      	movs	r3, #2
 800742a:	e11f      	b.n	800766c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800742c:	2250      	movs	r2, #80	; 0x50
 800742e:	2100      	movs	r1, #0
 8007430:	68b8      	ldr	r0, [r7, #8]
 8007432:	f001 fb11 	bl	8008a58 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007436:	7bfb      	ldrb	r3, [r7, #15]
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	211a      	movs	r1, #26
 800743c:	fb01 f303 	mul.w	r3, r1, r3
 8007440:	4413      	add	r3, r2
 8007442:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	b25b      	sxtb	r3, r3
 800744a:	2b00      	cmp	r3, #0
 800744c:	da15      	bge.n	800747a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800744e:	7bfb      	ldrb	r3, [r7, #15]
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	211a      	movs	r1, #26
 8007454:	fb01 f303 	mul.w	r3, r1, r3
 8007458:	4413      	add	r3, r2
 800745a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800745e:	781a      	ldrb	r2, [r3, #0]
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007464:	7bfb      	ldrb	r3, [r7, #15]
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	211a      	movs	r1, #26
 800746a:	fb01 f303 	mul.w	r3, r1, r3
 800746e:	4413      	add	r3, r2
 8007470:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007474:	881a      	ldrh	r2, [r3, #0]
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	785b      	ldrb	r3, [r3, #1]
 800747e:	4619      	mov	r1, r3
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 ff9c 	bl	80083be <USBH_AllocPipe>
 8007486:	4603      	mov	r3, r0
 8007488:	461a      	mov	r2, r3
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	7819      	ldrb	r1, [r3, #0]
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	7858      	ldrb	r0, [r3, #1]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80074a2:	68ba      	ldr	r2, [r7, #8]
 80074a4:	8952      	ldrh	r2, [r2, #10]
 80074a6:	9202      	str	r2, [sp, #8]
 80074a8:	2203      	movs	r2, #3
 80074aa:	9201      	str	r2, [sp, #4]
 80074ac:	9300      	str	r3, [sp, #0]
 80074ae:	4623      	mov	r3, r4
 80074b0:	4602      	mov	r2, r0
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 ff54 	bl	8008360 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	2200      	movs	r2, #0
 80074be:	4619      	mov	r1, r3
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f001 fa17 	bl	80088f4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80074c6:	2300      	movs	r3, #0
 80074c8:	2200      	movs	r2, #0
 80074ca:	210a      	movs	r1, #10
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 fbeb 	bl	8007ca8 <USBH_FindInterface>
 80074d2:	4603      	mov	r3, r0
 80074d4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80074d6:	7bfb      	ldrb	r3, [r7, #15]
 80074d8:	2bff      	cmp	r3, #255	; 0xff
 80074da:	d002      	beq.n	80074e2 <USBH_CDC_InterfaceInit+0x11a>
 80074dc:	7bfb      	ldrb	r3, [r7, #15]
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d901      	bls.n	80074e6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80074e2:	2302      	movs	r3, #2
 80074e4:	e0c2      	b.n	800766c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80074e6:	7bfb      	ldrb	r3, [r7, #15]
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	211a      	movs	r1, #26
 80074ec:	fb01 f303 	mul.w	r3, r1, r3
 80074f0:	4413      	add	r3, r2
 80074f2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	b25b      	sxtb	r3, r3
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	da16      	bge.n	800752c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80074fe:	7bfb      	ldrb	r3, [r7, #15]
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	211a      	movs	r1, #26
 8007504:	fb01 f303 	mul.w	r3, r1, r3
 8007508:	4413      	add	r3, r2
 800750a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800750e:	781a      	ldrb	r2, [r3, #0]
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007514:	7bfb      	ldrb	r3, [r7, #15]
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	211a      	movs	r1, #26
 800751a:	fb01 f303 	mul.w	r3, r1, r3
 800751e:	4413      	add	r3, r2
 8007520:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007524:	881a      	ldrh	r2, [r3, #0]
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	835a      	strh	r2, [r3, #26]
 800752a:	e015      	b.n	8007558 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800752c:	7bfb      	ldrb	r3, [r7, #15]
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	211a      	movs	r1, #26
 8007532:	fb01 f303 	mul.w	r3, r1, r3
 8007536:	4413      	add	r3, r2
 8007538:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800753c:	781a      	ldrb	r2, [r3, #0]
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007542:	7bfb      	ldrb	r3, [r7, #15]
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	211a      	movs	r1, #26
 8007548:	fb01 f303 	mul.w	r3, r1, r3
 800754c:	4413      	add	r3, r2
 800754e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007552:	881a      	ldrh	r2, [r3, #0]
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007558:	7bfb      	ldrb	r3, [r7, #15]
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	211a      	movs	r1, #26
 800755e:	fb01 f303 	mul.w	r3, r1, r3
 8007562:	4413      	add	r3, r2
 8007564:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	b25b      	sxtb	r3, r3
 800756c:	2b00      	cmp	r3, #0
 800756e:	da16      	bge.n	800759e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007570:	7bfb      	ldrb	r3, [r7, #15]
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	211a      	movs	r1, #26
 8007576:	fb01 f303 	mul.w	r3, r1, r3
 800757a:	4413      	add	r3, r2
 800757c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007580:	781a      	ldrb	r2, [r3, #0]
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007586:	7bfb      	ldrb	r3, [r7, #15]
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	211a      	movs	r1, #26
 800758c:	fb01 f303 	mul.w	r3, r1, r3
 8007590:	4413      	add	r3, r2
 8007592:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007596:	881a      	ldrh	r2, [r3, #0]
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	835a      	strh	r2, [r3, #26]
 800759c:	e015      	b.n	80075ca <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800759e:	7bfb      	ldrb	r3, [r7, #15]
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	211a      	movs	r1, #26
 80075a4:	fb01 f303 	mul.w	r3, r1, r3
 80075a8:	4413      	add	r3, r2
 80075aa:	f203 3356 	addw	r3, r3, #854	; 0x356
 80075ae:	781a      	ldrb	r2, [r3, #0]
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80075b4:	7bfb      	ldrb	r3, [r7, #15]
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	211a      	movs	r1, #26
 80075ba:	fb01 f303 	mul.w	r3, r1, r3
 80075be:	4413      	add	r3, r2
 80075c0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80075c4:	881a      	ldrh	r2, [r3, #0]
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	7b9b      	ldrb	r3, [r3, #14]
 80075ce:	4619      	mov	r1, r3
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 fef4 	bl	80083be <USBH_AllocPipe>
 80075d6:	4603      	mov	r3, r0
 80075d8:	461a      	mov	r2, r3
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	7bdb      	ldrb	r3, [r3, #15]
 80075e2:	4619      	mov	r1, r3
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 feea 	bl	80083be <USBH_AllocPipe>
 80075ea:	4603      	mov	r3, r0
 80075ec:	461a      	mov	r2, r3
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	7b59      	ldrb	r1, [r3, #13]
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	7b98      	ldrb	r0, [r3, #14]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007606:	68ba      	ldr	r2, [r7, #8]
 8007608:	8b12      	ldrh	r2, [r2, #24]
 800760a:	9202      	str	r2, [sp, #8]
 800760c:	2202      	movs	r2, #2
 800760e:	9201      	str	r2, [sp, #4]
 8007610:	9300      	str	r3, [sp, #0]
 8007612:	4623      	mov	r3, r4
 8007614:	4602      	mov	r2, r0
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 fea2 	bl	8008360 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	7b19      	ldrb	r1, [r3, #12]
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	7bd8      	ldrb	r0, [r3, #15]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007630:	68ba      	ldr	r2, [r7, #8]
 8007632:	8b52      	ldrh	r2, [r2, #26]
 8007634:	9202      	str	r2, [sp, #8]
 8007636:	2202      	movs	r2, #2
 8007638:	9201      	str	r2, [sp, #4]
 800763a:	9300      	str	r3, [sp, #0]
 800763c:	4623      	mov	r3, r4
 800763e:	4602      	mov	r2, r0
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f000 fe8d 	bl	8008360 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	2200      	movs	r2, #0
 800764a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	7b5b      	ldrb	r3, [r3, #13]
 8007652:	2200      	movs	r2, #0
 8007654:	4619      	mov	r1, r3
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f001 f94c 	bl	80088f4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	7b1b      	ldrb	r3, [r3, #12]
 8007660:	2200      	movs	r2, #0
 8007662:	4619      	mov	r1, r3
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f001 f945 	bl	80088f4 <USBH_LL_SetToggle>

  return USBH_OK;
 800766a:	2300      	movs	r3, #0
}
 800766c:	4618      	mov	r0, r3
 800766e:	3714      	adds	r7, #20
 8007670:	46bd      	mov	sp, r7
 8007672:	bd90      	pop	{r4, r7, pc}

08007674 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b084      	sub	sp, #16
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007682:	69db      	ldr	r3, [r3, #28]
 8007684:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d00e      	beq.n	80076ac <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	4619      	mov	r1, r3
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 fe82 	bl	800839e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	4619      	mov	r1, r3
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 fead 	bl	8008400 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2200      	movs	r2, #0
 80076aa:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	7b1b      	ldrb	r3, [r3, #12]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d00e      	beq.n	80076d2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	7b1b      	ldrb	r3, [r3, #12]
 80076b8:	4619      	mov	r1, r3
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 fe6f 	bl	800839e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	7b1b      	ldrb	r3, [r3, #12]
 80076c4:	4619      	mov	r1, r3
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 fe9a 	bl	8008400 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2200      	movs	r2, #0
 80076d0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	7b5b      	ldrb	r3, [r3, #13]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00e      	beq.n	80076f8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	7b5b      	ldrb	r3, [r3, #13]
 80076de:	4619      	mov	r1, r3
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 fe5c 	bl	800839e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	7b5b      	ldrb	r3, [r3, #13]
 80076ea:	4619      	mov	r1, r3
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 fe87 	bl	8008400 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2200      	movs	r2, #0
 80076f6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076fe:	69db      	ldr	r3, [r3, #28]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d00b      	beq.n	800771c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800770a:	69db      	ldr	r3, [r3, #28]
 800770c:	4618      	mov	r0, r3
 800770e:	f001 f99b 	bl	8008a48 <free>
    phost->pActiveClass->pData = 0U;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007718:	2200      	movs	r2, #0
 800771a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800771c:	2300      	movs	r3, #0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007726:	b580      	push	{r7, lr}
 8007728:	b084      	sub	sp, #16
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007734:	69db      	ldr	r3, [r3, #28]
 8007736:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	3340      	adds	r3, #64	; 0x40
 800773c:	4619      	mov	r1, r3
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 f8b1 	bl	80078a6 <GetLineCoding>
 8007744:	4603      	mov	r3, r0
 8007746:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007748:	7afb      	ldrb	r3, [r7, #11]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d105      	bne.n	800775a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007754:	2102      	movs	r1, #2
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800775a:	7afb      	ldrb	r3, [r7, #11]
}
 800775c:	4618      	mov	r0, r3
 800775e:	3710      	adds	r7, #16
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800776c:	2301      	movs	r3, #1
 800776e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007770:	2300      	movs	r3, #0
 8007772:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800777a:	69db      	ldr	r3, [r3, #28]
 800777c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007784:	2b04      	cmp	r3, #4
 8007786:	d877      	bhi.n	8007878 <USBH_CDC_Process+0x114>
 8007788:	a201      	add	r2, pc, #4	; (adr r2, 8007790 <USBH_CDC_Process+0x2c>)
 800778a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800778e:	bf00      	nop
 8007790:	080077a5 	.word	0x080077a5
 8007794:	080077ab 	.word	0x080077ab
 8007798:	080077db 	.word	0x080077db
 800779c:	0800784f 	.word	0x0800784f
 80077a0:	0800785d 	.word	0x0800785d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80077a4:	2300      	movs	r3, #0
 80077a6:	73fb      	strb	r3, [r7, #15]
      break;
 80077a8:	e06d      	b.n	8007886 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077ae:	4619      	mov	r1, r3
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 f897 	bl	80078e4 <SetLineCoding>
 80077b6:	4603      	mov	r3, r0
 80077b8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80077ba:	7bbb      	ldrb	r3, [r7, #14]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d104      	bne.n	80077ca <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	2202      	movs	r2, #2
 80077c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80077c8:	e058      	b.n	800787c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80077ca:	7bbb      	ldrb	r3, [r7, #14]
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d055      	beq.n	800787c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	2204      	movs	r2, #4
 80077d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80077d8:	e050      	b.n	800787c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	3340      	adds	r3, #64	; 0x40
 80077de:	4619      	mov	r1, r3
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 f860 	bl	80078a6 <GetLineCoding>
 80077e6:	4603      	mov	r3, r0
 80077e8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80077ea:	7bbb      	ldrb	r3, [r7, #14]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d126      	bne.n	800783e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007802:	791b      	ldrb	r3, [r3, #4]
 8007804:	429a      	cmp	r2, r3
 8007806:	d13b      	bne.n	8007880 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007812:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007814:	429a      	cmp	r2, r3
 8007816:	d133      	bne.n	8007880 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007822:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007824:	429a      	cmp	r2, r3
 8007826:	d12b      	bne.n	8007880 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007830:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007832:	429a      	cmp	r2, r3
 8007834:	d124      	bne.n	8007880 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 f958 	bl	8007aec <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800783c:	e020      	b.n	8007880 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800783e:	7bbb      	ldrb	r3, [r7, #14]
 8007840:	2b01      	cmp	r3, #1
 8007842:	d01d      	beq.n	8007880 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	2204      	movs	r2, #4
 8007848:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800784c:	e018      	b.n	8007880 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 f867 	bl	8007922 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 f8da 	bl	8007a0e <CDC_ProcessReception>
      break;
 800785a:	e014      	b.n	8007886 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800785c:	2100      	movs	r1, #0
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 fb08 	bl	8007e74 <USBH_ClrFeature>
 8007864:	4603      	mov	r3, r0
 8007866:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007868:	7bbb      	ldrb	r3, [r7, #14]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d10a      	bne.n	8007884 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	2200      	movs	r2, #0
 8007872:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007876:	e005      	b.n	8007884 <USBH_CDC_Process+0x120>

    default:
      break;
 8007878:	bf00      	nop
 800787a:	e004      	b.n	8007886 <USBH_CDC_Process+0x122>
      break;
 800787c:	bf00      	nop
 800787e:	e002      	b.n	8007886 <USBH_CDC_Process+0x122>
      break;
 8007880:	bf00      	nop
 8007882:	e000      	b.n	8007886 <USBH_CDC_Process+0x122>
      break;
 8007884:	bf00      	nop

  }

  return status;
 8007886:	7bfb      	ldrb	r3, [r7, #15]
}
 8007888:	4618      	mov	r0, r3
 800788a:	3710      	adds	r7, #16
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007898:	2300      	movs	r3, #0
}
 800789a:	4618      	mov	r0, r3
 800789c:	370c      	adds	r7, #12
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr

080078a6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80078a6:	b580      	push	{r7, lr}
 80078a8:	b082      	sub	sp, #8
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
 80078ae:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	22a1      	movs	r2, #161	; 0xa1
 80078b4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2221      	movs	r2, #33	; 0x21
 80078ba:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2207      	movs	r2, #7
 80078cc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	2207      	movs	r2, #7
 80078d2:	4619      	mov	r1, r3
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 faf1 	bl	8007ebc <USBH_CtlReq>
 80078da:	4603      	mov	r3, r0
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3708      	adds	r7, #8
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2221      	movs	r2, #33	; 0x21
 80078f2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2220      	movs	r2, #32
 80078f8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2200      	movs	r2, #0
 8007904:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2207      	movs	r2, #7
 800790a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	2207      	movs	r2, #7
 8007910:	4619      	mov	r1, r3
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 fad2 	bl	8007ebc <USBH_CtlReq>
 8007918:	4603      	mov	r3, r0
}
 800791a:	4618      	mov	r0, r3
 800791c:	3708      	adds	r7, #8
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}

08007922 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007922:	b580      	push	{r7, lr}
 8007924:	b086      	sub	sp, #24
 8007926:	af02      	add	r7, sp, #8
 8007928:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007930:	69db      	ldr	r3, [r3, #28]
 8007932:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007934:	2300      	movs	r3, #0
 8007936:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800793e:	2b01      	cmp	r3, #1
 8007940:	d002      	beq.n	8007948 <CDC_ProcessTransmission+0x26>
 8007942:	2b02      	cmp	r3, #2
 8007944:	d023      	beq.n	800798e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007946:	e05e      	b.n	8007a06 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800794c:	68fa      	ldr	r2, [r7, #12]
 800794e:	8b12      	ldrh	r2, [r2, #24]
 8007950:	4293      	cmp	r3, r2
 8007952:	d90b      	bls.n	800796c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	69d9      	ldr	r1, [r3, #28]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	8b1a      	ldrh	r2, [r3, #24]
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	7b5b      	ldrb	r3, [r3, #13]
 8007960:	2001      	movs	r0, #1
 8007962:	9000      	str	r0, [sp, #0]
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 fcb8 	bl	80082da <USBH_BulkSendData>
 800796a:	e00b      	b.n	8007984 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8007974:	b29a      	uxth	r2, r3
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	7b5b      	ldrb	r3, [r3, #13]
 800797a:	2001      	movs	r0, #1
 800797c:	9000      	str	r0, [sp, #0]
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 fcab 	bl	80082da <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2202      	movs	r2, #2
 8007988:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800798c:	e03b      	b.n	8007a06 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	7b5b      	ldrb	r3, [r3, #13]
 8007992:	4619      	mov	r1, r3
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 ff83 	bl	80088a0 <USBH_LL_GetURBState>
 800799a:	4603      	mov	r3, r0
 800799c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800799e:	7afb      	ldrb	r3, [r7, #11]
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d128      	bne.n	80079f6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	8b12      	ldrh	r2, [r2, #24]
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d90e      	bls.n	80079ce <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b4:	68fa      	ldr	r2, [r7, #12]
 80079b6:	8b12      	ldrh	r2, [r2, #24]
 80079b8:	1a9a      	subs	r2, r3, r2
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	69db      	ldr	r3, [r3, #28]
 80079c2:	68fa      	ldr	r2, [r7, #12]
 80079c4:	8b12      	ldrh	r2, [r2, #24]
 80079c6:	441a      	add	r2, r3
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	61da      	str	r2, [r3, #28]
 80079cc:	e002      	b.n	80079d4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d004      	beq.n	80079e6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2201      	movs	r2, #1
 80079e0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80079e4:	e00e      	b.n	8007a04 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 f868 	bl	8007ac4 <USBH_CDC_TransmitCallback>
      break;
 80079f4:	e006      	b.n	8007a04 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80079f6:	7afb      	ldrb	r3, [r7, #11]
 80079f8:	2b02      	cmp	r3, #2
 80079fa:	d103      	bne.n	8007a04 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2201      	movs	r2, #1
 8007a00:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007a04:	bf00      	nop
  }
}
 8007a06:	bf00      	nop
 8007a08:	3710      	adds	r7, #16
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b086      	sub	sp, #24
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a1c:	69db      	ldr	r3, [r3, #28]
 8007a1e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007a20:	2300      	movs	r3, #0
 8007a22:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007a2a:	2b03      	cmp	r3, #3
 8007a2c:	d002      	beq.n	8007a34 <CDC_ProcessReception+0x26>
 8007a2e:	2b04      	cmp	r3, #4
 8007a30:	d00e      	beq.n	8007a50 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007a32:	e043      	b.n	8007abc <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	6a19      	ldr	r1, [r3, #32]
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	8b5a      	ldrh	r2, [r3, #26]
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	7b1b      	ldrb	r3, [r3, #12]
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 fc6f 	bl	8008324 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	2204      	movs	r2, #4
 8007a4a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007a4e:	e035      	b.n	8007abc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	7b1b      	ldrb	r3, [r3, #12]
 8007a54:	4619      	mov	r1, r3
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 ff22 	bl	80088a0 <USBH_LL_GetURBState>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007a60:	7cfb      	ldrb	r3, [r7, #19]
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d129      	bne.n	8007aba <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	7b1b      	ldrb	r3, [r3, #12]
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 fe85 	bl	800877c <USBH_LL_GetLastXferSize>
 8007a72:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d016      	beq.n	8007aac <CDC_ProcessReception+0x9e>
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	8b5b      	ldrh	r3, [r3, #26]
 8007a82:	461a      	mov	r2, r3
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d910      	bls.n	8007aac <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	1ad2      	subs	r2, r2, r3
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	6a1a      	ldr	r2, [r3, #32]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	441a      	add	r2, r3
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	2203      	movs	r2, #3
 8007aa6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007aaa:	e006      	b.n	8007aba <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 f80f 	bl	8007ad8 <USBH_CDC_ReceiveCallback>
      break;
 8007aba:	bf00      	nop
  }
}
 8007abc:	bf00      	nop
 8007abe:	3718      	adds	r7, #24
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007acc:	bf00      	nop
 8007ace:	370c      	adds	r7, #12
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007ae0:	bf00      	nop
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007af4:	bf00      	nop
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	4613      	mov	r3, r2
 8007b0c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d101      	bne.n	8007b18 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007b14:	2302      	movs	r3, #2
 8007b16:	e029      	b.n	8007b6c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	79fa      	ldrb	r2, [r7, #7]
 8007b1c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2200      	movs	r2, #0
 8007b24:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007b30:	68f8      	ldr	r0, [r7, #12]
 8007b32:	f000 f81f 	bl	8007b74 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2200      	movs	r2, #0
 8007b52:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d003      	beq.n	8007b64 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	68ba      	ldr	r2, [r7, #8]
 8007b60:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	f000 fd97 	bl	8008698 <USBH_LL_Init>

  return USBH_OK;
 8007b6a:	2300      	movs	r3, #0
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3710      	adds	r7, #16
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b085      	sub	sp, #20
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007b80:	2300      	movs	r3, #0
 8007b82:	60fb      	str	r3, [r7, #12]
 8007b84:	e009      	b.n	8007b9a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	33e0      	adds	r3, #224	; 0xe0
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	4413      	add	r3, r2
 8007b90:	2200      	movs	r2, #0
 8007b92:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	3301      	adds	r3, #1
 8007b98:	60fb      	str	r3, [r7, #12]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2b0f      	cmp	r3, #15
 8007b9e:	d9f2      	bls.n	8007b86 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	60fb      	str	r3, [r7, #12]
 8007ba4:	e009      	b.n	8007bba <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	4413      	add	r3, r2
 8007bac:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	60fb      	str	r3, [r7, #12]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bc0:	d3f1      	bcc.n	8007ba6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2240      	movs	r2, #64	; 0x40
 8007be6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007c0e:	2300      	movs	r3, #0
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3714      	adds	r7, #20
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b085      	sub	sp, #20
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007c26:	2300      	movs	r3, #0
 8007c28:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d016      	beq.n	8007c5e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d10e      	bne.n	8007c58 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007c40:	1c59      	adds	r1, r3, #1
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	33de      	adds	r3, #222	; 0xde
 8007c4c:	6839      	ldr	r1, [r7, #0]
 8007c4e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007c52:	2300      	movs	r3, #0
 8007c54:	73fb      	strb	r3, [r7, #15]
 8007c56:	e004      	b.n	8007c62 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007c58:	2302      	movs	r3, #2
 8007c5a:	73fb      	strb	r3, [r7, #15]
 8007c5c:	e001      	b.n	8007c62 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007c5e:	2302      	movs	r3, #2
 8007c60:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3714      	adds	r7, #20
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b085      	sub	sp, #20
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	460b      	mov	r3, r1
 8007c7a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007c86:	78fa      	ldrb	r2, [r7, #3]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d204      	bcs.n	8007c96 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	78fa      	ldrb	r2, [r7, #3]
 8007c90:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007c94:	e001      	b.n	8007c9a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007c96:	2302      	movs	r3, #2
 8007c98:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3714      	adds	r7, #20
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b087      	sub	sp, #28
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	4608      	mov	r0, r1
 8007cb2:	4611      	mov	r1, r2
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	70fb      	strb	r3, [r7, #3]
 8007cba:	460b      	mov	r3, r1
 8007cbc:	70bb      	strb	r3, [r7, #2]
 8007cbe:	4613      	mov	r3, r2
 8007cc0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007cd0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007cd2:	e025      	b.n	8007d20 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007cd4:	7dfb      	ldrb	r3, [r7, #23]
 8007cd6:	221a      	movs	r2, #26
 8007cd8:	fb02 f303 	mul.w	r3, r2, r3
 8007cdc:	3308      	adds	r3, #8
 8007cde:	68fa      	ldr	r2, [r7, #12]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	3302      	adds	r3, #2
 8007ce4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	795b      	ldrb	r3, [r3, #5]
 8007cea:	78fa      	ldrb	r2, [r7, #3]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d002      	beq.n	8007cf6 <USBH_FindInterface+0x4e>
 8007cf0:	78fb      	ldrb	r3, [r7, #3]
 8007cf2:	2bff      	cmp	r3, #255	; 0xff
 8007cf4:	d111      	bne.n	8007d1a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007cfa:	78ba      	ldrb	r2, [r7, #2]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d002      	beq.n	8007d06 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007d00:	78bb      	ldrb	r3, [r7, #2]
 8007d02:	2bff      	cmp	r3, #255	; 0xff
 8007d04:	d109      	bne.n	8007d1a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007d0a:	787a      	ldrb	r2, [r7, #1]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d002      	beq.n	8007d16 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007d10:	787b      	ldrb	r3, [r7, #1]
 8007d12:	2bff      	cmp	r3, #255	; 0xff
 8007d14:	d101      	bne.n	8007d1a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007d16:	7dfb      	ldrb	r3, [r7, #23]
 8007d18:	e006      	b.n	8007d28 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007d1a:	7dfb      	ldrb	r3, [r7, #23]
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007d20:	7dfb      	ldrb	r3, [r7, #23]
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d9d6      	bls.n	8007cd4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007d26:	23ff      	movs	r3, #255	; 0xff
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	371c      	adds	r7, #28
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 fce7 	bl	8008710 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007d42:	2101      	movs	r1, #1
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 fdbe 	bl	80088c6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007d4a:	2300      	movs	r3, #0
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3708      	adds	r7, #8
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	683a      	ldr	r2, [r7, #0]
 8007d62:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007d66:	bf00      	nop
 8007d68:	370c      	adds	r7, #12
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr

08007d72 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007d72:	b580      	push	{r7, lr}
 8007d74:	b082      	sub	sp, #8
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007d80:	1c5a      	adds	r2, r3, #1
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 f804 	bl	8007d96 <USBH_HandleSof>
}
 8007d8e:	bf00      	nop
 8007d90:	3708      	adds	r7, #8
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}

08007d96 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007d96:	b580      	push	{r7, lr}
 8007d98:	b082      	sub	sp, #8
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	2b0b      	cmp	r3, #11
 8007da6:	d10a      	bne.n	8007dbe <USBH_HandleSof+0x28>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d005      	beq.n	8007dbe <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007db8:	699b      	ldr	r3, [r3, #24]
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	4798      	blx	r3
  }
}
 8007dbe:	bf00      	nop
 8007dc0:	3708      	adds	r7, #8
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007dc6:	b480      	push	{r7}
 8007dc8:	b083      	sub	sp, #12
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007dd6:	bf00      	nop
}
 8007dd8:	370c      	adds	r7, #12
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr

08007de2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007de2:	b480      	push	{r7}
 8007de4:	b083      	sub	sp, #12
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007df2:	bf00      	nop
}
 8007df4:	370c      	adds	r7, #12
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr

08007dfe <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007dfe:	b480      	push	{r7}
 8007e00:	b083      	sub	sp, #12
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2201      	movs	r2, #1
 8007e0a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007e1e:	2300      	movs	r3, #0
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	370c      	adds	r7, #12
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr

08007e2c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2201      	movs	r2, #1
 8007e38:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 fc7a 	bl	8008746 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	791b      	ldrb	r3, [r3, #4]
 8007e56:	4619      	mov	r1, r3
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 fad1 	bl	8008400 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	795b      	ldrb	r3, [r3, #5]
 8007e62:	4619      	mov	r1, r3
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 facb 	bl	8008400 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3708      	adds	r7, #8
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	789b      	ldrb	r3, [r3, #2]
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d10f      	bne.n	8007ea8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2202      	movs	r2, #2
 8007e8c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2201      	movs	r2, #1
 8007e92:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2200      	movs	r2, #0
 8007e98:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007e9a:	78fb      	ldrb	r3, [r7, #3]
 8007e9c:	b29a      	uxth	r2, r3
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	2100      	movs	r1, #0
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 f805 	bl	8007ebc <USBH_CtlReq>
 8007eb2:	4603      	mov	r3, r0
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3708      	adds	r7, #8
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b086      	sub	sp, #24
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	789b      	ldrb	r3, [r3, #2]
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d002      	beq.n	8007edc <USBH_CtlReq+0x20>
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	d00f      	beq.n	8007efa <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007eda:	e027      	b.n	8007f2c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	68ba      	ldr	r2, [r7, #8]
 8007ee0:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	88fa      	ldrh	r2, [r7, #6]
 8007ee6:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2201      	movs	r2, #1
 8007eec:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2202      	movs	r2, #2
 8007ef2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	75fb      	strb	r3, [r7, #23]
      break;
 8007ef8:	e018      	b.n	8007f2c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007efa:	68f8      	ldr	r0, [r7, #12]
 8007efc:	f000 f81c 	bl	8007f38 <USBH_HandleControl>
 8007f00:	4603      	mov	r3, r0
 8007f02:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007f04:	7dfb      	ldrb	r3, [r7, #23]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d002      	beq.n	8007f10 <USBH_CtlReq+0x54>
 8007f0a:	7dfb      	ldrb	r3, [r7, #23]
 8007f0c:	2b03      	cmp	r3, #3
 8007f0e:	d106      	bne.n	8007f1e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2201      	movs	r2, #1
 8007f14:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	761a      	strb	r2, [r3, #24]
      break;
 8007f1c:	e005      	b.n	8007f2a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007f1e:	7dfb      	ldrb	r3, [r7, #23]
 8007f20:	2b02      	cmp	r3, #2
 8007f22:	d102      	bne.n	8007f2a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2201      	movs	r2, #1
 8007f28:	709a      	strb	r2, [r3, #2]
      break;
 8007f2a:	bf00      	nop
  }
  return status;
 8007f2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3718      	adds	r7, #24
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
	...

08007f38 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b086      	sub	sp, #24
 8007f3c:	af02      	add	r7, sp, #8
 8007f3e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007f40:	2301      	movs	r3, #1
 8007f42:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007f44:	2300      	movs	r3, #0
 8007f46:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	7e1b      	ldrb	r3, [r3, #24]
 8007f4c:	3b01      	subs	r3, #1
 8007f4e:	2b0a      	cmp	r3, #10
 8007f50:	f200 8156 	bhi.w	8008200 <USBH_HandleControl+0x2c8>
 8007f54:	a201      	add	r2, pc, #4	; (adr r2, 8007f5c <USBH_HandleControl+0x24>)
 8007f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f5a:	bf00      	nop
 8007f5c:	08007f89 	.word	0x08007f89
 8007f60:	08007fa3 	.word	0x08007fa3
 8007f64:	0800800d 	.word	0x0800800d
 8007f68:	08008033 	.word	0x08008033
 8007f6c:	0800806b 	.word	0x0800806b
 8007f70:	08008095 	.word	0x08008095
 8007f74:	080080e7 	.word	0x080080e7
 8007f78:	08008109 	.word	0x08008109
 8007f7c:	08008145 	.word	0x08008145
 8007f80:	0800816b 	.word	0x0800816b
 8007f84:	080081a9 	.word	0x080081a9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f103 0110 	add.w	r1, r3, #16
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	795b      	ldrb	r3, [r3, #5]
 8007f92:	461a      	mov	r2, r3
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 f943 	bl	8008220 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2202      	movs	r2, #2
 8007f9e:	761a      	strb	r2, [r3, #24]
      break;
 8007fa0:	e139      	b.n	8008216 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	795b      	ldrb	r3, [r3, #5]
 8007fa6:	4619      	mov	r1, r3
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 fc79 	bl	80088a0 <USBH_LL_GetURBState>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007fb2:	7bbb      	ldrb	r3, [r7, #14]
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d11e      	bne.n	8007ff6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	7c1b      	ldrb	r3, [r3, #16]
 8007fbc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007fc0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	8adb      	ldrh	r3, [r3, #22]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d00a      	beq.n	8007fe0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007fca:	7b7b      	ldrb	r3, [r7, #13]
 8007fcc:	2b80      	cmp	r3, #128	; 0x80
 8007fce:	d103      	bne.n	8007fd8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2203      	movs	r2, #3
 8007fd4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007fd6:	e115      	b.n	8008204 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2205      	movs	r2, #5
 8007fdc:	761a      	strb	r2, [r3, #24]
      break;
 8007fde:	e111      	b.n	8008204 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007fe0:	7b7b      	ldrb	r3, [r7, #13]
 8007fe2:	2b80      	cmp	r3, #128	; 0x80
 8007fe4:	d103      	bne.n	8007fee <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2209      	movs	r2, #9
 8007fea:	761a      	strb	r2, [r3, #24]
      break;
 8007fec:	e10a      	b.n	8008204 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2207      	movs	r2, #7
 8007ff2:	761a      	strb	r2, [r3, #24]
      break;
 8007ff4:	e106      	b.n	8008204 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007ff6:	7bbb      	ldrb	r3, [r7, #14]
 8007ff8:	2b04      	cmp	r3, #4
 8007ffa:	d003      	beq.n	8008004 <USBH_HandleControl+0xcc>
 8007ffc:	7bbb      	ldrb	r3, [r7, #14]
 8007ffe:	2b02      	cmp	r3, #2
 8008000:	f040 8100 	bne.w	8008204 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	220b      	movs	r2, #11
 8008008:	761a      	strb	r2, [r3, #24]
      break;
 800800a:	e0fb      	b.n	8008204 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008012:	b29a      	uxth	r2, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6899      	ldr	r1, [r3, #8]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	899a      	ldrh	r2, [r3, #12]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	791b      	ldrb	r3, [r3, #4]
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 f93a 	bl	800829e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2204      	movs	r2, #4
 800802e:	761a      	strb	r2, [r3, #24]
      break;
 8008030:	e0f1      	b.n	8008216 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	791b      	ldrb	r3, [r3, #4]
 8008036:	4619      	mov	r1, r3
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 fc31 	bl	80088a0 <USBH_LL_GetURBState>
 800803e:	4603      	mov	r3, r0
 8008040:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008042:	7bbb      	ldrb	r3, [r7, #14]
 8008044:	2b01      	cmp	r3, #1
 8008046:	d102      	bne.n	800804e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2209      	movs	r2, #9
 800804c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800804e:	7bbb      	ldrb	r3, [r7, #14]
 8008050:	2b05      	cmp	r3, #5
 8008052:	d102      	bne.n	800805a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008054:	2303      	movs	r3, #3
 8008056:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008058:	e0d6      	b.n	8008208 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800805a:	7bbb      	ldrb	r3, [r7, #14]
 800805c:	2b04      	cmp	r3, #4
 800805e:	f040 80d3 	bne.w	8008208 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	220b      	movs	r2, #11
 8008066:	761a      	strb	r2, [r3, #24]
      break;
 8008068:	e0ce      	b.n	8008208 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6899      	ldr	r1, [r3, #8]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	899a      	ldrh	r2, [r3, #12]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	795b      	ldrb	r3, [r3, #5]
 8008076:	2001      	movs	r0, #1
 8008078:	9000      	str	r0, [sp, #0]
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 f8ea 	bl	8008254 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008086:	b29a      	uxth	r2, r3
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2206      	movs	r2, #6
 8008090:	761a      	strb	r2, [r3, #24]
      break;
 8008092:	e0c0      	b.n	8008216 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	795b      	ldrb	r3, [r3, #5]
 8008098:	4619      	mov	r1, r3
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 fc00 	bl	80088a0 <USBH_LL_GetURBState>
 80080a0:	4603      	mov	r3, r0
 80080a2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80080a4:	7bbb      	ldrb	r3, [r7, #14]
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d103      	bne.n	80080b2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2207      	movs	r2, #7
 80080ae:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80080b0:	e0ac      	b.n	800820c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80080b2:	7bbb      	ldrb	r3, [r7, #14]
 80080b4:	2b05      	cmp	r3, #5
 80080b6:	d105      	bne.n	80080c4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	220c      	movs	r2, #12
 80080bc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80080be:	2303      	movs	r3, #3
 80080c0:	73fb      	strb	r3, [r7, #15]
      break;
 80080c2:	e0a3      	b.n	800820c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80080c4:	7bbb      	ldrb	r3, [r7, #14]
 80080c6:	2b02      	cmp	r3, #2
 80080c8:	d103      	bne.n	80080d2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2205      	movs	r2, #5
 80080ce:	761a      	strb	r2, [r3, #24]
      break;
 80080d0:	e09c      	b.n	800820c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80080d2:	7bbb      	ldrb	r3, [r7, #14]
 80080d4:	2b04      	cmp	r3, #4
 80080d6:	f040 8099 	bne.w	800820c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	220b      	movs	r2, #11
 80080de:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80080e0:	2302      	movs	r3, #2
 80080e2:	73fb      	strb	r3, [r7, #15]
      break;
 80080e4:	e092      	b.n	800820c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	791b      	ldrb	r3, [r3, #4]
 80080ea:	2200      	movs	r2, #0
 80080ec:	2100      	movs	r1, #0
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 f8d5 	bl	800829e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80080fa:	b29a      	uxth	r2, r3
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2208      	movs	r2, #8
 8008104:	761a      	strb	r2, [r3, #24]

      break;
 8008106:	e086      	b.n	8008216 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	791b      	ldrb	r3, [r3, #4]
 800810c:	4619      	mov	r1, r3
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 fbc6 	bl	80088a0 <USBH_LL_GetURBState>
 8008114:	4603      	mov	r3, r0
 8008116:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008118:	7bbb      	ldrb	r3, [r7, #14]
 800811a:	2b01      	cmp	r3, #1
 800811c:	d105      	bne.n	800812a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	220d      	movs	r2, #13
 8008122:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008124:	2300      	movs	r3, #0
 8008126:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008128:	e072      	b.n	8008210 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800812a:	7bbb      	ldrb	r3, [r7, #14]
 800812c:	2b04      	cmp	r3, #4
 800812e:	d103      	bne.n	8008138 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	220b      	movs	r2, #11
 8008134:	761a      	strb	r2, [r3, #24]
      break;
 8008136:	e06b      	b.n	8008210 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008138:	7bbb      	ldrb	r3, [r7, #14]
 800813a:	2b05      	cmp	r3, #5
 800813c:	d168      	bne.n	8008210 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800813e:	2303      	movs	r3, #3
 8008140:	73fb      	strb	r3, [r7, #15]
      break;
 8008142:	e065      	b.n	8008210 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	795b      	ldrb	r3, [r3, #5]
 8008148:	2201      	movs	r2, #1
 800814a:	9200      	str	r2, [sp, #0]
 800814c:	2200      	movs	r2, #0
 800814e:	2100      	movs	r1, #0
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 f87f 	bl	8008254 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800815c:	b29a      	uxth	r2, r3
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	220a      	movs	r2, #10
 8008166:	761a      	strb	r2, [r3, #24]
      break;
 8008168:	e055      	b.n	8008216 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	795b      	ldrb	r3, [r3, #5]
 800816e:	4619      	mov	r1, r3
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 fb95 	bl	80088a0 <USBH_LL_GetURBState>
 8008176:	4603      	mov	r3, r0
 8008178:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800817a:	7bbb      	ldrb	r3, [r7, #14]
 800817c:	2b01      	cmp	r3, #1
 800817e:	d105      	bne.n	800818c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008180:	2300      	movs	r3, #0
 8008182:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	220d      	movs	r2, #13
 8008188:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800818a:	e043      	b.n	8008214 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800818c:	7bbb      	ldrb	r3, [r7, #14]
 800818e:	2b02      	cmp	r3, #2
 8008190:	d103      	bne.n	800819a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2209      	movs	r2, #9
 8008196:	761a      	strb	r2, [r3, #24]
      break;
 8008198:	e03c      	b.n	8008214 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800819a:	7bbb      	ldrb	r3, [r7, #14]
 800819c:	2b04      	cmp	r3, #4
 800819e:	d139      	bne.n	8008214 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	220b      	movs	r2, #11
 80081a4:	761a      	strb	r2, [r3, #24]
      break;
 80081a6:	e035      	b.n	8008214 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	7e5b      	ldrb	r3, [r3, #25]
 80081ac:	3301      	adds	r3, #1
 80081ae:	b2da      	uxtb	r2, r3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	765a      	strb	r2, [r3, #25]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	7e5b      	ldrb	r3, [r3, #25]
 80081b8:	2b02      	cmp	r3, #2
 80081ba:	d806      	bhi.n	80081ca <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2201      	movs	r2, #1
 80081c0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2201      	movs	r2, #1
 80081c6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80081c8:	e025      	b.n	8008216 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80081d0:	2106      	movs	r1, #6
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	795b      	ldrb	r3, [r3, #5]
 80081e0:	4619      	mov	r1, r3
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 f90c 	bl	8008400 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	791b      	ldrb	r3, [r3, #4]
 80081ec:	4619      	mov	r1, r3
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 f906 	bl	8008400 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80081fa:	2302      	movs	r3, #2
 80081fc:	73fb      	strb	r3, [r7, #15]
      break;
 80081fe:	e00a      	b.n	8008216 <USBH_HandleControl+0x2de>

    default:
      break;
 8008200:	bf00      	nop
 8008202:	e008      	b.n	8008216 <USBH_HandleControl+0x2de>
      break;
 8008204:	bf00      	nop
 8008206:	e006      	b.n	8008216 <USBH_HandleControl+0x2de>
      break;
 8008208:	bf00      	nop
 800820a:	e004      	b.n	8008216 <USBH_HandleControl+0x2de>
      break;
 800820c:	bf00      	nop
 800820e:	e002      	b.n	8008216 <USBH_HandleControl+0x2de>
      break;
 8008210:	bf00      	nop
 8008212:	e000      	b.n	8008216 <USBH_HandleControl+0x2de>
      break;
 8008214:	bf00      	nop
  }

  return status;
 8008216:	7bfb      	ldrb	r3, [r7, #15]
}
 8008218:	4618      	mov	r0, r3
 800821a:	3710      	adds	r7, #16
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b088      	sub	sp, #32
 8008224:	af04      	add	r7, sp, #16
 8008226:	60f8      	str	r0, [r7, #12]
 8008228:	60b9      	str	r1, [r7, #8]
 800822a:	4613      	mov	r3, r2
 800822c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800822e:	79f9      	ldrb	r1, [r7, #7]
 8008230:	2300      	movs	r3, #0
 8008232:	9303      	str	r3, [sp, #12]
 8008234:	2308      	movs	r3, #8
 8008236:	9302      	str	r3, [sp, #8]
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	9301      	str	r3, [sp, #4]
 800823c:	2300      	movs	r3, #0
 800823e:	9300      	str	r3, [sp, #0]
 8008240:	2300      	movs	r3, #0
 8008242:	2200      	movs	r2, #0
 8008244:	68f8      	ldr	r0, [r7, #12]
 8008246:	f000 fafa 	bl	800883e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800824a:	2300      	movs	r3, #0
}
 800824c:	4618      	mov	r0, r3
 800824e:	3710      	adds	r7, #16
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b088      	sub	sp, #32
 8008258:	af04      	add	r7, sp, #16
 800825a:	60f8      	str	r0, [r7, #12]
 800825c:	60b9      	str	r1, [r7, #8]
 800825e:	4611      	mov	r1, r2
 8008260:	461a      	mov	r2, r3
 8008262:	460b      	mov	r3, r1
 8008264:	80fb      	strh	r3, [r7, #6]
 8008266:	4613      	mov	r3, r2
 8008268:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008270:	2b00      	cmp	r3, #0
 8008272:	d001      	beq.n	8008278 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008274:	2300      	movs	r3, #0
 8008276:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008278:	7979      	ldrb	r1, [r7, #5]
 800827a:	7e3b      	ldrb	r3, [r7, #24]
 800827c:	9303      	str	r3, [sp, #12]
 800827e:	88fb      	ldrh	r3, [r7, #6]
 8008280:	9302      	str	r3, [sp, #8]
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	9301      	str	r3, [sp, #4]
 8008286:	2301      	movs	r3, #1
 8008288:	9300      	str	r3, [sp, #0]
 800828a:	2300      	movs	r3, #0
 800828c:	2200      	movs	r2, #0
 800828e:	68f8      	ldr	r0, [r7, #12]
 8008290:	f000 fad5 	bl	800883e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008294:	2300      	movs	r3, #0
}
 8008296:	4618      	mov	r0, r3
 8008298:	3710      	adds	r7, #16
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}

0800829e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800829e:	b580      	push	{r7, lr}
 80082a0:	b088      	sub	sp, #32
 80082a2:	af04      	add	r7, sp, #16
 80082a4:	60f8      	str	r0, [r7, #12]
 80082a6:	60b9      	str	r1, [r7, #8]
 80082a8:	4611      	mov	r1, r2
 80082aa:	461a      	mov	r2, r3
 80082ac:	460b      	mov	r3, r1
 80082ae:	80fb      	strh	r3, [r7, #6]
 80082b0:	4613      	mov	r3, r2
 80082b2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80082b4:	7979      	ldrb	r1, [r7, #5]
 80082b6:	2300      	movs	r3, #0
 80082b8:	9303      	str	r3, [sp, #12]
 80082ba:	88fb      	ldrh	r3, [r7, #6]
 80082bc:	9302      	str	r3, [sp, #8]
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	9301      	str	r3, [sp, #4]
 80082c2:	2301      	movs	r3, #1
 80082c4:	9300      	str	r3, [sp, #0]
 80082c6:	2300      	movs	r3, #0
 80082c8:	2201      	movs	r2, #1
 80082ca:	68f8      	ldr	r0, [r7, #12]
 80082cc:	f000 fab7 	bl	800883e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80082d0:	2300      	movs	r3, #0

}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3710      	adds	r7, #16
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}

080082da <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80082da:	b580      	push	{r7, lr}
 80082dc:	b088      	sub	sp, #32
 80082de:	af04      	add	r7, sp, #16
 80082e0:	60f8      	str	r0, [r7, #12]
 80082e2:	60b9      	str	r1, [r7, #8]
 80082e4:	4611      	mov	r1, r2
 80082e6:	461a      	mov	r2, r3
 80082e8:	460b      	mov	r3, r1
 80082ea:	80fb      	strh	r3, [r7, #6]
 80082ec:	4613      	mov	r3, r2
 80082ee:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d001      	beq.n	80082fe <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80082fa:	2300      	movs	r3, #0
 80082fc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80082fe:	7979      	ldrb	r1, [r7, #5]
 8008300:	7e3b      	ldrb	r3, [r7, #24]
 8008302:	9303      	str	r3, [sp, #12]
 8008304:	88fb      	ldrh	r3, [r7, #6]
 8008306:	9302      	str	r3, [sp, #8]
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	9301      	str	r3, [sp, #4]
 800830c:	2301      	movs	r3, #1
 800830e:	9300      	str	r3, [sp, #0]
 8008310:	2302      	movs	r3, #2
 8008312:	2200      	movs	r2, #0
 8008314:	68f8      	ldr	r0, [r7, #12]
 8008316:	f000 fa92 	bl	800883e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800831a:	2300      	movs	r3, #0
}
 800831c:	4618      	mov	r0, r3
 800831e:	3710      	adds	r7, #16
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b088      	sub	sp, #32
 8008328:	af04      	add	r7, sp, #16
 800832a:	60f8      	str	r0, [r7, #12]
 800832c:	60b9      	str	r1, [r7, #8]
 800832e:	4611      	mov	r1, r2
 8008330:	461a      	mov	r2, r3
 8008332:	460b      	mov	r3, r1
 8008334:	80fb      	strh	r3, [r7, #6]
 8008336:	4613      	mov	r3, r2
 8008338:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800833a:	7979      	ldrb	r1, [r7, #5]
 800833c:	2300      	movs	r3, #0
 800833e:	9303      	str	r3, [sp, #12]
 8008340:	88fb      	ldrh	r3, [r7, #6]
 8008342:	9302      	str	r3, [sp, #8]
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	9301      	str	r3, [sp, #4]
 8008348:	2301      	movs	r3, #1
 800834a:	9300      	str	r3, [sp, #0]
 800834c:	2302      	movs	r3, #2
 800834e:	2201      	movs	r2, #1
 8008350:	68f8      	ldr	r0, [r7, #12]
 8008352:	f000 fa74 	bl	800883e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008356:	2300      	movs	r3, #0
}
 8008358:	4618      	mov	r0, r3
 800835a:	3710      	adds	r7, #16
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b086      	sub	sp, #24
 8008364:	af04      	add	r7, sp, #16
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	4608      	mov	r0, r1
 800836a:	4611      	mov	r1, r2
 800836c:	461a      	mov	r2, r3
 800836e:	4603      	mov	r3, r0
 8008370:	70fb      	strb	r3, [r7, #3]
 8008372:	460b      	mov	r3, r1
 8008374:	70bb      	strb	r3, [r7, #2]
 8008376:	4613      	mov	r3, r2
 8008378:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800837a:	7878      	ldrb	r0, [r7, #1]
 800837c:	78ba      	ldrb	r2, [r7, #2]
 800837e:	78f9      	ldrb	r1, [r7, #3]
 8008380:	8b3b      	ldrh	r3, [r7, #24]
 8008382:	9302      	str	r3, [sp, #8]
 8008384:	7d3b      	ldrb	r3, [r7, #20]
 8008386:	9301      	str	r3, [sp, #4]
 8008388:	7c3b      	ldrb	r3, [r7, #16]
 800838a:	9300      	str	r3, [sp, #0]
 800838c:	4603      	mov	r3, r0
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 fa07 	bl	80087a2 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008394:	2300      	movs	r3, #0
}
 8008396:	4618      	mov	r0, r3
 8008398:	3708      	adds	r7, #8
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}

0800839e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800839e:	b580      	push	{r7, lr}
 80083a0:	b082      	sub	sp, #8
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
 80083a6:	460b      	mov	r3, r1
 80083a8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80083aa:	78fb      	ldrb	r3, [r7, #3]
 80083ac:	4619      	mov	r1, r3
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 fa26 	bl	8008800 <USBH_LL_ClosePipe>

  return USBH_OK;
 80083b4:	2300      	movs	r3, #0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3708      	adds	r7, #8
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b084      	sub	sp, #16
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
 80083c6:	460b      	mov	r3, r1
 80083c8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 f836 	bl	800843c <USBH_GetFreePipe>
 80083d0:	4603      	mov	r3, r0
 80083d2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80083d4:	89fb      	ldrh	r3, [r7, #14]
 80083d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083da:	4293      	cmp	r3, r2
 80083dc:	d00a      	beq.n	80083f4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80083de:	78fa      	ldrb	r2, [r7, #3]
 80083e0:	89fb      	ldrh	r3, [r7, #14]
 80083e2:	f003 030f 	and.w	r3, r3, #15
 80083e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80083ea:	6879      	ldr	r1, [r7, #4]
 80083ec:	33e0      	adds	r3, #224	; 0xe0
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	440b      	add	r3, r1
 80083f2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80083f4:	89fb      	ldrh	r3, [r7, #14]
 80083f6:	b2db      	uxtb	r3, r3
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3710      	adds	r7, #16
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	460b      	mov	r3, r1
 800840a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800840c:	78fb      	ldrb	r3, [r7, #3]
 800840e:	2b0f      	cmp	r3, #15
 8008410:	d80d      	bhi.n	800842e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008412:	78fb      	ldrb	r3, [r7, #3]
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	33e0      	adds	r3, #224	; 0xe0
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	4413      	add	r3, r2
 800841c:	685a      	ldr	r2, [r3, #4]
 800841e:	78fb      	ldrb	r3, [r7, #3]
 8008420:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008424:	6879      	ldr	r1, [r7, #4]
 8008426:	33e0      	adds	r3, #224	; 0xe0
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	440b      	add	r3, r1
 800842c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800842e:	2300      	movs	r3, #0
}
 8008430:	4618      	mov	r0, r3
 8008432:	370c      	adds	r7, #12
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr

0800843c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800843c:	b480      	push	{r7}
 800843e:	b085      	sub	sp, #20
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008444:	2300      	movs	r3, #0
 8008446:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008448:	2300      	movs	r3, #0
 800844a:	73fb      	strb	r3, [r7, #15]
 800844c:	e00f      	b.n	800846e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800844e:	7bfb      	ldrb	r3, [r7, #15]
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	33e0      	adds	r3, #224	; 0xe0
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	4413      	add	r3, r2
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800845e:	2b00      	cmp	r3, #0
 8008460:	d102      	bne.n	8008468 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008462:	7bfb      	ldrb	r3, [r7, #15]
 8008464:	b29b      	uxth	r3, r3
 8008466:	e007      	b.n	8008478 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008468:	7bfb      	ldrb	r3, [r7, #15]
 800846a:	3301      	adds	r3, #1
 800846c:	73fb      	strb	r3, [r7, #15]
 800846e:	7bfb      	ldrb	r3, [r7, #15]
 8008470:	2b0f      	cmp	r3, #15
 8008472:	d9ec      	bls.n	800844e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008474:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008478:	4618      	mov	r0, r3
 800847a:	3714      	adds	r7, #20
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008488:	2201      	movs	r2, #1
 800848a:	490e      	ldr	r1, [pc, #56]	; (80084c4 <MX_USB_HOST_Init+0x40>)
 800848c:	480e      	ldr	r0, [pc, #56]	; (80084c8 <MX_USB_HOST_Init+0x44>)
 800848e:	f7ff fb37 	bl	8007b00 <USBH_Init>
 8008492:	4603      	mov	r3, r0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d001      	beq.n	800849c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008498:	f7f8 fac0 	bl	8000a1c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800849c:	490b      	ldr	r1, [pc, #44]	; (80084cc <MX_USB_HOST_Init+0x48>)
 800849e:	480a      	ldr	r0, [pc, #40]	; (80084c8 <MX_USB_HOST_Init+0x44>)
 80084a0:	f7ff fbbc 	bl	8007c1c <USBH_RegisterClass>
 80084a4:	4603      	mov	r3, r0
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d001      	beq.n	80084ae <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80084aa:	f7f8 fab7 	bl	8000a1c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80084ae:	4806      	ldr	r0, [pc, #24]	; (80084c8 <MX_USB_HOST_Init+0x44>)
 80084b0:	f7ff fc40 	bl	8007d34 <USBH_Start>
 80084b4:	4603      	mov	r3, r0
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d001      	beq.n	80084be <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80084ba:	f7f8 faaf 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80084be:	bf00      	nop
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	080084d1 	.word	0x080084d1
 80084c8:	20000270 	.word	0x20000270
 80084cc:	20000014 	.word	0x20000014

080084d0 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	460b      	mov	r3, r1
 80084da:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80084dc:	78fb      	ldrb	r3, [r7, #3]
 80084de:	3b01      	subs	r3, #1
 80084e0:	2b04      	cmp	r3, #4
 80084e2:	d819      	bhi.n	8008518 <USBH_UserProcess+0x48>
 80084e4:	a201      	add	r2, pc, #4	; (adr r2, 80084ec <USBH_UserProcess+0x1c>)
 80084e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ea:	bf00      	nop
 80084ec:	08008519 	.word	0x08008519
 80084f0:	08008509 	.word	0x08008509
 80084f4:	08008519 	.word	0x08008519
 80084f8:	08008511 	.word	0x08008511
 80084fc:	08008501 	.word	0x08008501
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008500:	4b09      	ldr	r3, [pc, #36]	; (8008528 <USBH_UserProcess+0x58>)
 8008502:	2203      	movs	r2, #3
 8008504:	701a      	strb	r2, [r3, #0]
  break;
 8008506:	e008      	b.n	800851a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008508:	4b07      	ldr	r3, [pc, #28]	; (8008528 <USBH_UserProcess+0x58>)
 800850a:	2202      	movs	r2, #2
 800850c:	701a      	strb	r2, [r3, #0]
  break;
 800850e:	e004      	b.n	800851a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008510:	4b05      	ldr	r3, [pc, #20]	; (8008528 <USBH_UserProcess+0x58>)
 8008512:	2201      	movs	r2, #1
 8008514:	701a      	strb	r2, [r3, #0]
  break;
 8008516:	e000      	b.n	800851a <USBH_UserProcess+0x4a>

  default:
  break;
 8008518:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800851a:	bf00      	nop
 800851c:	370c      	adds	r7, #12
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr
 8008526:	bf00      	nop
 8008528:	20000648 	.word	0x20000648

0800852c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b08a      	sub	sp, #40	; 0x28
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008534:	f107 0314 	add.w	r3, r7, #20
 8008538:	2200      	movs	r2, #0
 800853a:	601a      	str	r2, [r3, #0]
 800853c:	605a      	str	r2, [r3, #4]
 800853e:	609a      	str	r2, [r3, #8]
 8008540:	60da      	str	r2, [r3, #12]
 8008542:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800854c:	d147      	bne.n	80085de <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800854e:	2300      	movs	r3, #0
 8008550:	613b      	str	r3, [r7, #16]
 8008552:	4b25      	ldr	r3, [pc, #148]	; (80085e8 <HAL_HCD_MspInit+0xbc>)
 8008554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008556:	4a24      	ldr	r2, [pc, #144]	; (80085e8 <HAL_HCD_MspInit+0xbc>)
 8008558:	f043 0301 	orr.w	r3, r3, #1
 800855c:	6313      	str	r3, [r2, #48]	; 0x30
 800855e:	4b22      	ldr	r3, [pc, #136]	; (80085e8 <HAL_HCD_MspInit+0xbc>)
 8008560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008562:	f003 0301 	and.w	r3, r3, #1
 8008566:	613b      	str	r3, [r7, #16]
 8008568:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800856a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800856e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008570:	2300      	movs	r3, #0
 8008572:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008574:	2300      	movs	r3, #0
 8008576:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008578:	f107 0314 	add.w	r3, r7, #20
 800857c:	4619      	mov	r1, r3
 800857e:	481b      	ldr	r0, [pc, #108]	; (80085ec <HAL_HCD_MspInit+0xc0>)
 8008580:	f7f9 f84a 	bl	8001618 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008584:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008588:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800858a:	2302      	movs	r3, #2
 800858c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800858e:	2300      	movs	r3, #0
 8008590:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008592:	2300      	movs	r3, #0
 8008594:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008596:	230a      	movs	r3, #10
 8008598:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800859a:	f107 0314 	add.w	r3, r7, #20
 800859e:	4619      	mov	r1, r3
 80085a0:	4812      	ldr	r0, [pc, #72]	; (80085ec <HAL_HCD_MspInit+0xc0>)
 80085a2:	f7f9 f839 	bl	8001618 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80085a6:	4b10      	ldr	r3, [pc, #64]	; (80085e8 <HAL_HCD_MspInit+0xbc>)
 80085a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085aa:	4a0f      	ldr	r2, [pc, #60]	; (80085e8 <HAL_HCD_MspInit+0xbc>)
 80085ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085b0:	6353      	str	r3, [r2, #52]	; 0x34
 80085b2:	2300      	movs	r3, #0
 80085b4:	60fb      	str	r3, [r7, #12]
 80085b6:	4b0c      	ldr	r3, [pc, #48]	; (80085e8 <HAL_HCD_MspInit+0xbc>)
 80085b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085ba:	4a0b      	ldr	r2, [pc, #44]	; (80085e8 <HAL_HCD_MspInit+0xbc>)
 80085bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80085c0:	6453      	str	r3, [r2, #68]	; 0x44
 80085c2:	4b09      	ldr	r3, [pc, #36]	; (80085e8 <HAL_HCD_MspInit+0xbc>)
 80085c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085ca:	60fb      	str	r3, [r7, #12]
 80085cc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80085ce:	2200      	movs	r2, #0
 80085d0:	2100      	movs	r1, #0
 80085d2:	2043      	movs	r0, #67	; 0x43
 80085d4:	f7f8 ff57 	bl	8001486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80085d8:	2043      	movs	r0, #67	; 0x43
 80085da:	f7f8 ff70 	bl	80014be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80085de:	bf00      	nop
 80085e0:	3728      	adds	r7, #40	; 0x28
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop
 80085e8:	40023800 	.word	0x40023800
 80085ec:	40020000 	.word	0x40020000

080085f0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80085fe:	4618      	mov	r0, r3
 8008600:	f7ff fbb7 	bl	8007d72 <USBH_LL_IncTimer>
}
 8008604:	bf00      	nop
 8008606:	3708      	adds	r7, #8
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}

0800860c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b082      	sub	sp, #8
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800861a:	4618      	mov	r0, r3
 800861c:	f7ff fbef 	bl	8007dfe <USBH_LL_Connect>
}
 8008620:	bf00      	nop
 8008622:	3708      	adds	r7, #8
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b082      	sub	sp, #8
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008636:	4618      	mov	r0, r3
 8008638:	f7ff fbf8 	bl	8007e2c <USBH_LL_Disconnect>
}
 800863c:	bf00      	nop
 800863e:	3708      	adds	r7, #8
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008644:	b480      	push	{r7}
 8008646:	b083      	sub	sp, #12
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	460b      	mov	r3, r1
 800864e:	70fb      	strb	r3, [r7, #3]
 8008650:	4613      	mov	r3, r2
 8008652:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008654:	bf00      	nop
 8008656:	370c      	adds	r7, #12
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr

08008660 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b082      	sub	sp, #8
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800866e:	4618      	mov	r0, r3
 8008670:	f7ff fba9 	bl	8007dc6 <USBH_LL_PortEnabled>
}
 8008674:	bf00      	nop
 8008676:	3708      	adds	r7, #8
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b082      	sub	sp, #8
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800868a:	4618      	mov	r0, r3
 800868c:	f7ff fba9 	bl	8007de2 <USBH_LL_PortDisabled>
}
 8008690:	bf00      	nop
 8008692:	3708      	adds	r7, #8
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d12a      	bne.n	8008700 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80086aa:	4a18      	ldr	r2, [pc, #96]	; (800870c <USBH_LL_Init+0x74>)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	4a15      	ldr	r2, [pc, #84]	; (800870c <USBH_LL_Init+0x74>)
 80086b6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80086ba:	4b14      	ldr	r3, [pc, #80]	; (800870c <USBH_LL_Init+0x74>)
 80086bc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80086c0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80086c2:	4b12      	ldr	r3, [pc, #72]	; (800870c <USBH_LL_Init+0x74>)
 80086c4:	2208      	movs	r2, #8
 80086c6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80086c8:	4b10      	ldr	r3, [pc, #64]	; (800870c <USBH_LL_Init+0x74>)
 80086ca:	2201      	movs	r2, #1
 80086cc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80086ce:	4b0f      	ldr	r3, [pc, #60]	; (800870c <USBH_LL_Init+0x74>)
 80086d0:	2200      	movs	r2, #0
 80086d2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80086d4:	4b0d      	ldr	r3, [pc, #52]	; (800870c <USBH_LL_Init+0x74>)
 80086d6:	2202      	movs	r2, #2
 80086d8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80086da:	4b0c      	ldr	r3, [pc, #48]	; (800870c <USBH_LL_Init+0x74>)
 80086dc:	2200      	movs	r2, #0
 80086de:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80086e0:	480a      	ldr	r0, [pc, #40]	; (800870c <USBH_LL_Init+0x74>)
 80086e2:	f7f9 f94e 	bl	8001982 <HAL_HCD_Init>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d001      	beq.n	80086f0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80086ec:	f7f8 f996 	bl	8000a1c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80086f0:	4806      	ldr	r0, [pc, #24]	; (800870c <USBH_LL_Init+0x74>)
 80086f2:	f7f9 fd24 	bl	800213e <HAL_HCD_GetCurrentFrame>
 80086f6:	4603      	mov	r3, r0
 80086f8:	4619      	mov	r1, r3
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f7ff fb2a 	bl	8007d54 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3708      	adds	r7, #8
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
 800870a:	bf00      	nop
 800870c:	2000064c 	.word	0x2000064c

08008710 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b084      	sub	sp, #16
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008718:	2300      	movs	r3, #0
 800871a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800871c:	2300      	movs	r3, #0
 800871e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008726:	4618      	mov	r0, r3
 8008728:	f7f9 fca1 	bl	800206e <HAL_HCD_Start>
 800872c:	4603      	mov	r3, r0
 800872e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008730:	7bfb      	ldrb	r3, [r7, #15]
 8008732:	4618      	mov	r0, r3
 8008734:	f000 f90e 	bl	8008954 <USBH_Get_USB_Status>
 8008738:	4603      	mov	r3, r0
 800873a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800873c:	7bbb      	ldrb	r3, [r7, #14]
}
 800873e:	4618      	mov	r0, r3
 8008740:	3710      	adds	r7, #16
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}

08008746 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008746:	b580      	push	{r7, lr}
 8008748:	b084      	sub	sp, #16
 800874a:	af00      	add	r7, sp, #0
 800874c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800874e:	2300      	movs	r3, #0
 8008750:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008752:	2300      	movs	r3, #0
 8008754:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800875c:	4618      	mov	r0, r3
 800875e:	f7f9 fca9 	bl	80020b4 <HAL_HCD_Stop>
 8008762:	4603      	mov	r3, r0
 8008764:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008766:	7bfb      	ldrb	r3, [r7, #15]
 8008768:	4618      	mov	r0, r3
 800876a:	f000 f8f3 	bl	8008954 <USBH_Get_USB_Status>
 800876e:	4603      	mov	r3, r0
 8008770:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008772:	7bbb      	ldrb	r3, [r7, #14]
}
 8008774:	4618      	mov	r0, r3
 8008776:	3710      	adds	r7, #16
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b082      	sub	sp, #8
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	460b      	mov	r3, r1
 8008786:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800878e:	78fa      	ldrb	r2, [r7, #3]
 8008790:	4611      	mov	r1, r2
 8008792:	4618      	mov	r0, r3
 8008794:	f7f9 fcbf 	bl	8002116 <HAL_HCD_HC_GetXferCount>
 8008798:	4603      	mov	r3, r0
}
 800879a:	4618      	mov	r0, r3
 800879c:	3708      	adds	r7, #8
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80087a2:	b590      	push	{r4, r7, lr}
 80087a4:	b089      	sub	sp, #36	; 0x24
 80087a6:	af04      	add	r7, sp, #16
 80087a8:	6078      	str	r0, [r7, #4]
 80087aa:	4608      	mov	r0, r1
 80087ac:	4611      	mov	r1, r2
 80087ae:	461a      	mov	r2, r3
 80087b0:	4603      	mov	r3, r0
 80087b2:	70fb      	strb	r3, [r7, #3]
 80087b4:	460b      	mov	r3, r1
 80087b6:	70bb      	strb	r3, [r7, #2]
 80087b8:	4613      	mov	r3, r2
 80087ba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087bc:	2300      	movs	r3, #0
 80087be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80087c0:	2300      	movs	r3, #0
 80087c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80087ca:	787c      	ldrb	r4, [r7, #1]
 80087cc:	78ba      	ldrb	r2, [r7, #2]
 80087ce:	78f9      	ldrb	r1, [r7, #3]
 80087d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80087d2:	9302      	str	r3, [sp, #8]
 80087d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80087d8:	9301      	str	r3, [sp, #4]
 80087da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80087de:	9300      	str	r3, [sp, #0]
 80087e0:	4623      	mov	r3, r4
 80087e2:	f7f9 f930 	bl	8001a46 <HAL_HCD_HC_Init>
 80087e6:	4603      	mov	r3, r0
 80087e8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80087ea:	7bfb      	ldrb	r3, [r7, #15]
 80087ec:	4618      	mov	r0, r3
 80087ee:	f000 f8b1 	bl	8008954 <USBH_Get_USB_Status>
 80087f2:	4603      	mov	r3, r0
 80087f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3714      	adds	r7, #20
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd90      	pop	{r4, r7, pc}

08008800 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b084      	sub	sp, #16
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	460b      	mov	r3, r1
 800880a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800880c:	2300      	movs	r3, #0
 800880e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008810:	2300      	movs	r3, #0
 8008812:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800881a:	78fa      	ldrb	r2, [r7, #3]
 800881c:	4611      	mov	r1, r2
 800881e:	4618      	mov	r0, r3
 8008820:	f7f9 f9a0 	bl	8001b64 <HAL_HCD_HC_Halt>
 8008824:	4603      	mov	r3, r0
 8008826:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008828:	7bfb      	ldrb	r3, [r7, #15]
 800882a:	4618      	mov	r0, r3
 800882c:	f000 f892 	bl	8008954 <USBH_Get_USB_Status>
 8008830:	4603      	mov	r3, r0
 8008832:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008834:	7bbb      	ldrb	r3, [r7, #14]
}
 8008836:	4618      	mov	r0, r3
 8008838:	3710      	adds	r7, #16
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800883e:	b590      	push	{r4, r7, lr}
 8008840:	b089      	sub	sp, #36	; 0x24
 8008842:	af04      	add	r7, sp, #16
 8008844:	6078      	str	r0, [r7, #4]
 8008846:	4608      	mov	r0, r1
 8008848:	4611      	mov	r1, r2
 800884a:	461a      	mov	r2, r3
 800884c:	4603      	mov	r3, r0
 800884e:	70fb      	strb	r3, [r7, #3]
 8008850:	460b      	mov	r3, r1
 8008852:	70bb      	strb	r3, [r7, #2]
 8008854:	4613      	mov	r3, r2
 8008856:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008858:	2300      	movs	r3, #0
 800885a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800885c:	2300      	movs	r3, #0
 800885e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008866:	787c      	ldrb	r4, [r7, #1]
 8008868:	78ba      	ldrb	r2, [r7, #2]
 800886a:	78f9      	ldrb	r1, [r7, #3]
 800886c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008870:	9303      	str	r3, [sp, #12]
 8008872:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008874:	9302      	str	r3, [sp, #8]
 8008876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008878:	9301      	str	r3, [sp, #4]
 800887a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800887e:	9300      	str	r3, [sp, #0]
 8008880:	4623      	mov	r3, r4
 8008882:	f7f9 f993 	bl	8001bac <HAL_HCD_HC_SubmitRequest>
 8008886:	4603      	mov	r3, r0
 8008888:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800888a:	7bfb      	ldrb	r3, [r7, #15]
 800888c:	4618      	mov	r0, r3
 800888e:	f000 f861 	bl	8008954 <USBH_Get_USB_Status>
 8008892:	4603      	mov	r3, r0
 8008894:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008896:	7bbb      	ldrb	r3, [r7, #14]
}
 8008898:	4618      	mov	r0, r3
 800889a:	3714      	adds	r7, #20
 800889c:	46bd      	mov	sp, r7
 800889e:	bd90      	pop	{r4, r7, pc}

080088a0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b082      	sub	sp, #8
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	460b      	mov	r3, r1
 80088aa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80088b2:	78fa      	ldrb	r2, [r7, #3]
 80088b4:	4611      	mov	r1, r2
 80088b6:	4618      	mov	r0, r3
 80088b8:	f7f9 fc19 	bl	80020ee <HAL_HCD_HC_GetURBState>
 80088bc:	4603      	mov	r3, r0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3708      	adds	r7, #8
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}

080088c6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80088c6:	b580      	push	{r7, lr}
 80088c8:	b082      	sub	sp, #8
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
 80088ce:	460b      	mov	r3, r1
 80088d0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d103      	bne.n	80088e4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80088dc:	78fb      	ldrb	r3, [r7, #3]
 80088de:	4618      	mov	r0, r3
 80088e0:	f000 f864 	bl	80089ac <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80088e4:	20c8      	movs	r0, #200	; 0xc8
 80088e6:	f7f8 fccf 	bl	8001288 <HAL_Delay>
  return USBH_OK;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3708      	adds	r7, #8
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b085      	sub	sp, #20
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	460b      	mov	r3, r1
 80088fe:	70fb      	strb	r3, [r7, #3]
 8008900:	4613      	mov	r3, r2
 8008902:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800890a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800890c:	78fb      	ldrb	r3, [r7, #3]
 800890e:	68fa      	ldr	r2, [r7, #12]
 8008910:	212c      	movs	r1, #44	; 0x2c
 8008912:	fb01 f303 	mul.w	r3, r1, r3
 8008916:	4413      	add	r3, r2
 8008918:	333b      	adds	r3, #59	; 0x3b
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d009      	beq.n	8008934 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008920:	78fb      	ldrb	r3, [r7, #3]
 8008922:	68fa      	ldr	r2, [r7, #12]
 8008924:	212c      	movs	r1, #44	; 0x2c
 8008926:	fb01 f303 	mul.w	r3, r1, r3
 800892a:	4413      	add	r3, r2
 800892c:	3354      	adds	r3, #84	; 0x54
 800892e:	78ba      	ldrb	r2, [r7, #2]
 8008930:	701a      	strb	r2, [r3, #0]
 8008932:	e008      	b.n	8008946 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008934:	78fb      	ldrb	r3, [r7, #3]
 8008936:	68fa      	ldr	r2, [r7, #12]
 8008938:	212c      	movs	r1, #44	; 0x2c
 800893a:	fb01 f303 	mul.w	r3, r1, r3
 800893e:	4413      	add	r3, r2
 8008940:	3355      	adds	r3, #85	; 0x55
 8008942:	78ba      	ldrb	r2, [r7, #2]
 8008944:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008946:	2300      	movs	r3, #0
}
 8008948:	4618      	mov	r0, r3
 800894a:	3714      	adds	r7, #20
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr

08008954 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008954:	b480      	push	{r7}
 8008956:	b085      	sub	sp, #20
 8008958:	af00      	add	r7, sp, #0
 800895a:	4603      	mov	r3, r0
 800895c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800895e:	2300      	movs	r3, #0
 8008960:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008962:	79fb      	ldrb	r3, [r7, #7]
 8008964:	2b03      	cmp	r3, #3
 8008966:	d817      	bhi.n	8008998 <USBH_Get_USB_Status+0x44>
 8008968:	a201      	add	r2, pc, #4	; (adr r2, 8008970 <USBH_Get_USB_Status+0x1c>)
 800896a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800896e:	bf00      	nop
 8008970:	08008981 	.word	0x08008981
 8008974:	08008987 	.word	0x08008987
 8008978:	0800898d 	.word	0x0800898d
 800897c:	08008993 	.word	0x08008993
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008980:	2300      	movs	r3, #0
 8008982:	73fb      	strb	r3, [r7, #15]
    break;
 8008984:	e00b      	b.n	800899e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008986:	2302      	movs	r3, #2
 8008988:	73fb      	strb	r3, [r7, #15]
    break;
 800898a:	e008      	b.n	800899e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800898c:	2301      	movs	r3, #1
 800898e:	73fb      	strb	r3, [r7, #15]
    break;
 8008990:	e005      	b.n	800899e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008992:	2302      	movs	r3, #2
 8008994:	73fb      	strb	r3, [r7, #15]
    break;
 8008996:	e002      	b.n	800899e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008998:	2302      	movs	r3, #2
 800899a:	73fb      	strb	r3, [r7, #15]
    break;
 800899c:	bf00      	nop
  }
  return usb_status;
 800899e:	7bfb      	ldrb	r3, [r7, #15]
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3714      	adds	r7, #20
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr

080089ac <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	4603      	mov	r3, r0
 80089b4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80089b6:	79fb      	ldrb	r3, [r7, #7]
 80089b8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80089ba:	79fb      	ldrb	r3, [r7, #7]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d102      	bne.n	80089c6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80089c0:	2300      	movs	r3, #0
 80089c2:	73fb      	strb	r3, [r7, #15]
 80089c4:	e001      	b.n	80089ca <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80089c6:	2301      	movs	r3, #1
 80089c8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80089ca:	7bfb      	ldrb	r3, [r7, #15]
 80089cc:	461a      	mov	r2, r3
 80089ce:	2101      	movs	r1, #1
 80089d0:	4803      	ldr	r0, [pc, #12]	; (80089e0 <MX_DriverVbusFS+0x34>)
 80089d2:	f7f8 ffbd 	bl	8001950 <HAL_GPIO_WritePin>
}
 80089d6:	bf00      	nop
 80089d8:	3710      	adds	r7, #16
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop
 80089e0:	40020800 	.word	0x40020800

080089e4 <__errno>:
 80089e4:	4b01      	ldr	r3, [pc, #4]	; (80089ec <__errno+0x8>)
 80089e6:	6818      	ldr	r0, [r3, #0]
 80089e8:	4770      	bx	lr
 80089ea:	bf00      	nop
 80089ec:	20000034 	.word	0x20000034

080089f0 <__libc_init_array>:
 80089f0:	b570      	push	{r4, r5, r6, lr}
 80089f2:	4d0d      	ldr	r5, [pc, #52]	; (8008a28 <__libc_init_array+0x38>)
 80089f4:	4c0d      	ldr	r4, [pc, #52]	; (8008a2c <__libc_init_array+0x3c>)
 80089f6:	1b64      	subs	r4, r4, r5
 80089f8:	10a4      	asrs	r4, r4, #2
 80089fa:	2600      	movs	r6, #0
 80089fc:	42a6      	cmp	r6, r4
 80089fe:	d109      	bne.n	8008a14 <__libc_init_array+0x24>
 8008a00:	4d0b      	ldr	r5, [pc, #44]	; (8008a30 <__libc_init_array+0x40>)
 8008a02:	4c0c      	ldr	r4, [pc, #48]	; (8008a34 <__libc_init_array+0x44>)
 8008a04:	f000 f92e 	bl	8008c64 <_init>
 8008a08:	1b64      	subs	r4, r4, r5
 8008a0a:	10a4      	asrs	r4, r4, #2
 8008a0c:	2600      	movs	r6, #0
 8008a0e:	42a6      	cmp	r6, r4
 8008a10:	d105      	bne.n	8008a1e <__libc_init_array+0x2e>
 8008a12:	bd70      	pop	{r4, r5, r6, pc}
 8008a14:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a18:	4798      	blx	r3
 8008a1a:	3601      	adds	r6, #1
 8008a1c:	e7ee      	b.n	80089fc <__libc_init_array+0xc>
 8008a1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a22:	4798      	blx	r3
 8008a24:	3601      	adds	r6, #1
 8008a26:	e7f2      	b.n	8008a0e <__libc_init_array+0x1e>
 8008a28:	08008ca0 	.word	0x08008ca0
 8008a2c:	08008ca0 	.word	0x08008ca0
 8008a30:	08008ca0 	.word	0x08008ca0
 8008a34:	08008ca4 	.word	0x08008ca4

08008a38 <malloc>:
 8008a38:	4b02      	ldr	r3, [pc, #8]	; (8008a44 <malloc+0xc>)
 8008a3a:	4601      	mov	r1, r0
 8008a3c:	6818      	ldr	r0, [r3, #0]
 8008a3e:	f000 b87f 	b.w	8008b40 <_malloc_r>
 8008a42:	bf00      	nop
 8008a44:	20000034 	.word	0x20000034

08008a48 <free>:
 8008a48:	4b02      	ldr	r3, [pc, #8]	; (8008a54 <free+0xc>)
 8008a4a:	4601      	mov	r1, r0
 8008a4c:	6818      	ldr	r0, [r3, #0]
 8008a4e:	f000 b80b 	b.w	8008a68 <_free_r>
 8008a52:	bf00      	nop
 8008a54:	20000034 	.word	0x20000034

08008a58 <memset>:
 8008a58:	4402      	add	r2, r0
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d100      	bne.n	8008a62 <memset+0xa>
 8008a60:	4770      	bx	lr
 8008a62:	f803 1b01 	strb.w	r1, [r3], #1
 8008a66:	e7f9      	b.n	8008a5c <memset+0x4>

08008a68 <_free_r>:
 8008a68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a6a:	2900      	cmp	r1, #0
 8008a6c:	d044      	beq.n	8008af8 <_free_r+0x90>
 8008a6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a72:	9001      	str	r0, [sp, #4]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	f1a1 0404 	sub.w	r4, r1, #4
 8008a7a:	bfb8      	it	lt
 8008a7c:	18e4      	addlt	r4, r4, r3
 8008a7e:	f000 f8e3 	bl	8008c48 <__malloc_lock>
 8008a82:	4a1e      	ldr	r2, [pc, #120]	; (8008afc <_free_r+0x94>)
 8008a84:	9801      	ldr	r0, [sp, #4]
 8008a86:	6813      	ldr	r3, [r2, #0]
 8008a88:	b933      	cbnz	r3, 8008a98 <_free_r+0x30>
 8008a8a:	6063      	str	r3, [r4, #4]
 8008a8c:	6014      	str	r4, [r2, #0]
 8008a8e:	b003      	add	sp, #12
 8008a90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a94:	f000 b8de 	b.w	8008c54 <__malloc_unlock>
 8008a98:	42a3      	cmp	r3, r4
 8008a9a:	d908      	bls.n	8008aae <_free_r+0x46>
 8008a9c:	6825      	ldr	r5, [r4, #0]
 8008a9e:	1961      	adds	r1, r4, r5
 8008aa0:	428b      	cmp	r3, r1
 8008aa2:	bf01      	itttt	eq
 8008aa4:	6819      	ldreq	r1, [r3, #0]
 8008aa6:	685b      	ldreq	r3, [r3, #4]
 8008aa8:	1949      	addeq	r1, r1, r5
 8008aaa:	6021      	streq	r1, [r4, #0]
 8008aac:	e7ed      	b.n	8008a8a <_free_r+0x22>
 8008aae:	461a      	mov	r2, r3
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	b10b      	cbz	r3, 8008ab8 <_free_r+0x50>
 8008ab4:	42a3      	cmp	r3, r4
 8008ab6:	d9fa      	bls.n	8008aae <_free_r+0x46>
 8008ab8:	6811      	ldr	r1, [r2, #0]
 8008aba:	1855      	adds	r5, r2, r1
 8008abc:	42a5      	cmp	r5, r4
 8008abe:	d10b      	bne.n	8008ad8 <_free_r+0x70>
 8008ac0:	6824      	ldr	r4, [r4, #0]
 8008ac2:	4421      	add	r1, r4
 8008ac4:	1854      	adds	r4, r2, r1
 8008ac6:	42a3      	cmp	r3, r4
 8008ac8:	6011      	str	r1, [r2, #0]
 8008aca:	d1e0      	bne.n	8008a8e <_free_r+0x26>
 8008acc:	681c      	ldr	r4, [r3, #0]
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	6053      	str	r3, [r2, #4]
 8008ad2:	4421      	add	r1, r4
 8008ad4:	6011      	str	r1, [r2, #0]
 8008ad6:	e7da      	b.n	8008a8e <_free_r+0x26>
 8008ad8:	d902      	bls.n	8008ae0 <_free_r+0x78>
 8008ada:	230c      	movs	r3, #12
 8008adc:	6003      	str	r3, [r0, #0]
 8008ade:	e7d6      	b.n	8008a8e <_free_r+0x26>
 8008ae0:	6825      	ldr	r5, [r4, #0]
 8008ae2:	1961      	adds	r1, r4, r5
 8008ae4:	428b      	cmp	r3, r1
 8008ae6:	bf04      	itt	eq
 8008ae8:	6819      	ldreq	r1, [r3, #0]
 8008aea:	685b      	ldreq	r3, [r3, #4]
 8008aec:	6063      	str	r3, [r4, #4]
 8008aee:	bf04      	itt	eq
 8008af0:	1949      	addeq	r1, r1, r5
 8008af2:	6021      	streq	r1, [r4, #0]
 8008af4:	6054      	str	r4, [r2, #4]
 8008af6:	e7ca      	b.n	8008a8e <_free_r+0x26>
 8008af8:	b003      	add	sp, #12
 8008afa:	bd30      	pop	{r4, r5, pc}
 8008afc:	20000950 	.word	0x20000950

08008b00 <sbrk_aligned>:
 8008b00:	b570      	push	{r4, r5, r6, lr}
 8008b02:	4e0e      	ldr	r6, [pc, #56]	; (8008b3c <sbrk_aligned+0x3c>)
 8008b04:	460c      	mov	r4, r1
 8008b06:	6831      	ldr	r1, [r6, #0]
 8008b08:	4605      	mov	r5, r0
 8008b0a:	b911      	cbnz	r1, 8008b12 <sbrk_aligned+0x12>
 8008b0c:	f000 f88c 	bl	8008c28 <_sbrk_r>
 8008b10:	6030      	str	r0, [r6, #0]
 8008b12:	4621      	mov	r1, r4
 8008b14:	4628      	mov	r0, r5
 8008b16:	f000 f887 	bl	8008c28 <_sbrk_r>
 8008b1a:	1c43      	adds	r3, r0, #1
 8008b1c:	d00a      	beq.n	8008b34 <sbrk_aligned+0x34>
 8008b1e:	1cc4      	adds	r4, r0, #3
 8008b20:	f024 0403 	bic.w	r4, r4, #3
 8008b24:	42a0      	cmp	r0, r4
 8008b26:	d007      	beq.n	8008b38 <sbrk_aligned+0x38>
 8008b28:	1a21      	subs	r1, r4, r0
 8008b2a:	4628      	mov	r0, r5
 8008b2c:	f000 f87c 	bl	8008c28 <_sbrk_r>
 8008b30:	3001      	adds	r0, #1
 8008b32:	d101      	bne.n	8008b38 <sbrk_aligned+0x38>
 8008b34:	f04f 34ff 	mov.w	r4, #4294967295
 8008b38:	4620      	mov	r0, r4
 8008b3a:	bd70      	pop	{r4, r5, r6, pc}
 8008b3c:	20000954 	.word	0x20000954

08008b40 <_malloc_r>:
 8008b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b44:	1ccd      	adds	r5, r1, #3
 8008b46:	f025 0503 	bic.w	r5, r5, #3
 8008b4a:	3508      	adds	r5, #8
 8008b4c:	2d0c      	cmp	r5, #12
 8008b4e:	bf38      	it	cc
 8008b50:	250c      	movcc	r5, #12
 8008b52:	2d00      	cmp	r5, #0
 8008b54:	4607      	mov	r7, r0
 8008b56:	db01      	blt.n	8008b5c <_malloc_r+0x1c>
 8008b58:	42a9      	cmp	r1, r5
 8008b5a:	d905      	bls.n	8008b68 <_malloc_r+0x28>
 8008b5c:	230c      	movs	r3, #12
 8008b5e:	603b      	str	r3, [r7, #0]
 8008b60:	2600      	movs	r6, #0
 8008b62:	4630      	mov	r0, r6
 8008b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b68:	4e2e      	ldr	r6, [pc, #184]	; (8008c24 <_malloc_r+0xe4>)
 8008b6a:	f000 f86d 	bl	8008c48 <__malloc_lock>
 8008b6e:	6833      	ldr	r3, [r6, #0]
 8008b70:	461c      	mov	r4, r3
 8008b72:	bb34      	cbnz	r4, 8008bc2 <_malloc_r+0x82>
 8008b74:	4629      	mov	r1, r5
 8008b76:	4638      	mov	r0, r7
 8008b78:	f7ff ffc2 	bl	8008b00 <sbrk_aligned>
 8008b7c:	1c43      	adds	r3, r0, #1
 8008b7e:	4604      	mov	r4, r0
 8008b80:	d14d      	bne.n	8008c1e <_malloc_r+0xde>
 8008b82:	6834      	ldr	r4, [r6, #0]
 8008b84:	4626      	mov	r6, r4
 8008b86:	2e00      	cmp	r6, #0
 8008b88:	d140      	bne.n	8008c0c <_malloc_r+0xcc>
 8008b8a:	6823      	ldr	r3, [r4, #0]
 8008b8c:	4631      	mov	r1, r6
 8008b8e:	4638      	mov	r0, r7
 8008b90:	eb04 0803 	add.w	r8, r4, r3
 8008b94:	f000 f848 	bl	8008c28 <_sbrk_r>
 8008b98:	4580      	cmp	r8, r0
 8008b9a:	d13a      	bne.n	8008c12 <_malloc_r+0xd2>
 8008b9c:	6821      	ldr	r1, [r4, #0]
 8008b9e:	3503      	adds	r5, #3
 8008ba0:	1a6d      	subs	r5, r5, r1
 8008ba2:	f025 0503 	bic.w	r5, r5, #3
 8008ba6:	3508      	adds	r5, #8
 8008ba8:	2d0c      	cmp	r5, #12
 8008baa:	bf38      	it	cc
 8008bac:	250c      	movcc	r5, #12
 8008bae:	4629      	mov	r1, r5
 8008bb0:	4638      	mov	r0, r7
 8008bb2:	f7ff ffa5 	bl	8008b00 <sbrk_aligned>
 8008bb6:	3001      	adds	r0, #1
 8008bb8:	d02b      	beq.n	8008c12 <_malloc_r+0xd2>
 8008bba:	6823      	ldr	r3, [r4, #0]
 8008bbc:	442b      	add	r3, r5
 8008bbe:	6023      	str	r3, [r4, #0]
 8008bc0:	e00e      	b.n	8008be0 <_malloc_r+0xa0>
 8008bc2:	6822      	ldr	r2, [r4, #0]
 8008bc4:	1b52      	subs	r2, r2, r5
 8008bc6:	d41e      	bmi.n	8008c06 <_malloc_r+0xc6>
 8008bc8:	2a0b      	cmp	r2, #11
 8008bca:	d916      	bls.n	8008bfa <_malloc_r+0xba>
 8008bcc:	1961      	adds	r1, r4, r5
 8008bce:	42a3      	cmp	r3, r4
 8008bd0:	6025      	str	r5, [r4, #0]
 8008bd2:	bf18      	it	ne
 8008bd4:	6059      	strne	r1, [r3, #4]
 8008bd6:	6863      	ldr	r3, [r4, #4]
 8008bd8:	bf08      	it	eq
 8008bda:	6031      	streq	r1, [r6, #0]
 8008bdc:	5162      	str	r2, [r4, r5]
 8008bde:	604b      	str	r3, [r1, #4]
 8008be0:	4638      	mov	r0, r7
 8008be2:	f104 060b 	add.w	r6, r4, #11
 8008be6:	f000 f835 	bl	8008c54 <__malloc_unlock>
 8008bea:	f026 0607 	bic.w	r6, r6, #7
 8008bee:	1d23      	adds	r3, r4, #4
 8008bf0:	1af2      	subs	r2, r6, r3
 8008bf2:	d0b6      	beq.n	8008b62 <_malloc_r+0x22>
 8008bf4:	1b9b      	subs	r3, r3, r6
 8008bf6:	50a3      	str	r3, [r4, r2]
 8008bf8:	e7b3      	b.n	8008b62 <_malloc_r+0x22>
 8008bfa:	6862      	ldr	r2, [r4, #4]
 8008bfc:	42a3      	cmp	r3, r4
 8008bfe:	bf0c      	ite	eq
 8008c00:	6032      	streq	r2, [r6, #0]
 8008c02:	605a      	strne	r2, [r3, #4]
 8008c04:	e7ec      	b.n	8008be0 <_malloc_r+0xa0>
 8008c06:	4623      	mov	r3, r4
 8008c08:	6864      	ldr	r4, [r4, #4]
 8008c0a:	e7b2      	b.n	8008b72 <_malloc_r+0x32>
 8008c0c:	4634      	mov	r4, r6
 8008c0e:	6876      	ldr	r6, [r6, #4]
 8008c10:	e7b9      	b.n	8008b86 <_malloc_r+0x46>
 8008c12:	230c      	movs	r3, #12
 8008c14:	603b      	str	r3, [r7, #0]
 8008c16:	4638      	mov	r0, r7
 8008c18:	f000 f81c 	bl	8008c54 <__malloc_unlock>
 8008c1c:	e7a1      	b.n	8008b62 <_malloc_r+0x22>
 8008c1e:	6025      	str	r5, [r4, #0]
 8008c20:	e7de      	b.n	8008be0 <_malloc_r+0xa0>
 8008c22:	bf00      	nop
 8008c24:	20000950 	.word	0x20000950

08008c28 <_sbrk_r>:
 8008c28:	b538      	push	{r3, r4, r5, lr}
 8008c2a:	4d06      	ldr	r5, [pc, #24]	; (8008c44 <_sbrk_r+0x1c>)
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	4604      	mov	r4, r0
 8008c30:	4608      	mov	r0, r1
 8008c32:	602b      	str	r3, [r5, #0]
 8008c34:	f7f8 fa44 	bl	80010c0 <_sbrk>
 8008c38:	1c43      	adds	r3, r0, #1
 8008c3a:	d102      	bne.n	8008c42 <_sbrk_r+0x1a>
 8008c3c:	682b      	ldr	r3, [r5, #0]
 8008c3e:	b103      	cbz	r3, 8008c42 <_sbrk_r+0x1a>
 8008c40:	6023      	str	r3, [r4, #0]
 8008c42:	bd38      	pop	{r3, r4, r5, pc}
 8008c44:	20000958 	.word	0x20000958

08008c48 <__malloc_lock>:
 8008c48:	4801      	ldr	r0, [pc, #4]	; (8008c50 <__malloc_lock+0x8>)
 8008c4a:	f000 b809 	b.w	8008c60 <__retarget_lock_acquire_recursive>
 8008c4e:	bf00      	nop
 8008c50:	2000095c 	.word	0x2000095c

08008c54 <__malloc_unlock>:
 8008c54:	4801      	ldr	r0, [pc, #4]	; (8008c5c <__malloc_unlock+0x8>)
 8008c56:	f000 b804 	b.w	8008c62 <__retarget_lock_release_recursive>
 8008c5a:	bf00      	nop
 8008c5c:	2000095c 	.word	0x2000095c

08008c60 <__retarget_lock_acquire_recursive>:
 8008c60:	4770      	bx	lr

08008c62 <__retarget_lock_release_recursive>:
 8008c62:	4770      	bx	lr

08008c64 <_init>:
 8008c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c66:	bf00      	nop
 8008c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c6a:	bc08      	pop	{r3}
 8008c6c:	469e      	mov	lr, r3
 8008c6e:	4770      	bx	lr

08008c70 <_fini>:
 8008c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c72:	bf00      	nop
 8008c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c76:	bc08      	pop	{r3}
 8008c78:	469e      	mov	lr, r3
 8008c7a:	4770      	bx	lr
