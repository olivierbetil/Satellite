
Turbo_Sat_CSB_Fonctionnel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098c4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08009a4c  08009a4c  00019a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a68  08009a68  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08009a68  08009a68  00019a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a70  08009a70  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a70  08009a70  00019a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a74  08009a74  00019a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08009a78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020098  2**0
                  CONTENTS
 10 .bss          000008c8  20000098  20000098  00020098  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000960  20000960  00020098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018b8b  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e41  00000000  00000000  00038c53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013d8  00000000  00000000  0003ca98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001238  00000000  00000000  0003de70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024105  00000000  00000000  0003f0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a6bb  00000000  00000000  000631ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd885  00000000  00000000  0007d868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014b0ed  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000547c  00000000  00000000  0014b140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000098 	.word	0x20000098
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009a34 	.word	0x08009a34

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000009c 	.word	0x2000009c
 80001c4:	08009a34 	.word	0x08009a34

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 feaa 	bl	8001228 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f816 	bl	8000504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f974 	bl	80007c4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004dc:	f000 f87c 	bl	80005d8 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004e0:	f000 f8a8 	bl	8000634 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e4:	f000 f8d6 	bl	8000694 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e8:	f008 fe5c 	bl	80091a4 <MX_USB_HOST_Init>
  MX_SPI2_Init();
 80004ec:	f000 f908 	bl	8000700 <MX_SPI2_Init>
  MX_USART2_Init();
 80004f0:	f000 f93c 	bl	800076c <MX_USART2_Init>
  /* USER CODE BEGIN 2 */
   nrf24_Init();
 80004f4:	f000 fb66 	bl	8000bc4 <nrf24_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004f8:	f008 fe7a 	bl	80091f0 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
	  stateMachine();
 80004fc:	f000 fa74 	bl	80009e8 <stateMachine>
    MX_USB_HOST_Process();
 8000500:	e7fa      	b.n	80004f8 <main+0x2c>
	...

08000504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b094      	sub	sp, #80	; 0x50
 8000508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050a:	f107 0320 	add.w	r3, r7, #32
 800050e:	2230      	movs	r2, #48	; 0x30
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f009 f988 	bl	8009828 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000518:	f107 030c 	add.w	r3, r7, #12
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
 8000522:	609a      	str	r2, [r3, #8]
 8000524:	60da      	str	r2, [r3, #12]
 8000526:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000528:	2300      	movs	r3, #0
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	4b28      	ldr	r3, [pc, #160]	; (80005d0 <SystemClock_Config+0xcc>)
 800052e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000530:	4a27      	ldr	r2, [pc, #156]	; (80005d0 <SystemClock_Config+0xcc>)
 8000532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000536:	6413      	str	r3, [r2, #64]	; 0x40
 8000538:	4b25      	ldr	r3, [pc, #148]	; (80005d0 <SystemClock_Config+0xcc>)
 800053a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800053c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000540:	60bb      	str	r3, [r7, #8]
 8000542:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000544:	2300      	movs	r3, #0
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	4b22      	ldr	r3, [pc, #136]	; (80005d4 <SystemClock_Config+0xd0>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a21      	ldr	r2, [pc, #132]	; (80005d4 <SystemClock_Config+0xd0>)
 800054e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000552:	6013      	str	r3, [r2, #0]
 8000554:	4b1f      	ldr	r3, [pc, #124]	; (80005d4 <SystemClock_Config+0xd0>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000560:	2301      	movs	r3, #1
 8000562:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000564:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000568:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056a:	2302      	movs	r3, #2
 800056c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800056e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000572:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000574:	2308      	movs	r3, #8
 8000576:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000578:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800057c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800057e:	2302      	movs	r3, #2
 8000580:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000582:	2307      	movs	r3, #7
 8000584:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000586:	f107 0320 	add.w	r3, r7, #32
 800058a:	4618      	mov	r0, r3
 800058c:	f003 fbba 	bl	8003d04 <HAL_RCC_OscConfig>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000596:	f000 fa63 	bl	8000a60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059a:	230f      	movs	r3, #15
 800059c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059e:	2302      	movs	r3, #2
 80005a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005b2:	f107 030c 	add.w	r3, r7, #12
 80005b6:	2105      	movs	r1, #5
 80005b8:	4618      	mov	r0, r3
 80005ba:	f003 fe1b 	bl	80041f4 <HAL_RCC_ClockConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005c4:	f000 fa4c 	bl	8000a60 <Error_Handler>
  }
}
 80005c8:	bf00      	nop
 80005ca:	3750      	adds	r7, #80	; 0x50
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40023800 	.word	0x40023800
 80005d4:	40007000 	.word	0x40007000

080005d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <MX_I2C1_Init+0x50>)
 80005de:	4a13      	ldr	r2, [pc, #76]	; (800062c <MX_I2C1_Init+0x54>)
 80005e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005e2:	4b11      	ldr	r3, [pc, #68]	; (8000628 <MX_I2C1_Init+0x50>)
 80005e4:	4a12      	ldr	r2, [pc, #72]	; (8000630 <MX_I2C1_Init+0x58>)
 80005e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005e8:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <MX_I2C1_Init+0x50>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <MX_I2C1_Init+0x50>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <MX_I2C1_Init+0x50>)
 80005f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005fc:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <MX_I2C1_Init+0x50>)
 80005fe:	2200      	movs	r2, #0
 8000600:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <MX_I2C1_Init+0x50>)
 8000604:	2200      	movs	r2, #0
 8000606:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000608:	4b07      	ldr	r3, [pc, #28]	; (8000628 <MX_I2C1_Init+0x50>)
 800060a:	2200      	movs	r2, #0
 800060c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800060e:	4b06      	ldr	r3, [pc, #24]	; (8000628 <MX_I2C1_Init+0x50>)
 8000610:	2200      	movs	r2, #0
 8000612:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000614:	4804      	ldr	r0, [pc, #16]	; (8000628 <MX_I2C1_Init+0x50>)
 8000616:	f002 fd91 	bl	800313c <HAL_I2C_Init>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000620:	f000 fa1e 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}
 8000628:	200000b4 	.word	0x200000b4
 800062c:	40005400 	.word	0x40005400
 8000630:	000186a0 	.word	0x000186a0

08000634 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000638:	4b13      	ldr	r3, [pc, #76]	; (8000688 <MX_I2S3_Init+0x54>)
 800063a:	4a14      	ldr	r2, [pc, #80]	; (800068c <MX_I2S3_Init+0x58>)
 800063c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800063e:	4b12      	ldr	r3, [pc, #72]	; (8000688 <MX_I2S3_Init+0x54>)
 8000640:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000644:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000646:	4b10      	ldr	r3, [pc, #64]	; (8000688 <MX_I2S3_Init+0x54>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800064c:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <MX_I2S3_Init+0x54>)
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000652:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <MX_I2S3_Init+0x54>)
 8000654:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000658:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800065a:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <MX_I2S3_Init+0x54>)
 800065c:	4a0c      	ldr	r2, [pc, #48]	; (8000690 <MX_I2S3_Init+0x5c>)
 800065e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000660:	4b09      	ldr	r3, [pc, #36]	; (8000688 <MX_I2S3_Init+0x54>)
 8000662:	2200      	movs	r2, #0
 8000664:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000666:	4b08      	ldr	r3, [pc, #32]	; (8000688 <MX_I2S3_Init+0x54>)
 8000668:	2200      	movs	r2, #0
 800066a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <MX_I2S3_Init+0x54>)
 800066e:	2200      	movs	r2, #0
 8000670:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000672:	4805      	ldr	r0, [pc, #20]	; (8000688 <MX_I2S3_Init+0x54>)
 8000674:	f002 fea6 	bl	80033c4 <HAL_I2S_Init>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800067e:	f000 f9ef 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000108 	.word	0x20000108
 800068c:	40003c00 	.word	0x40003c00
 8000690:	00017700 	.word	0x00017700

08000694 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000698:	4b17      	ldr	r3, [pc, #92]	; (80006f8 <MX_SPI1_Init+0x64>)
 800069a:	4a18      	ldr	r2, [pc, #96]	; (80006fc <MX_SPI1_Init+0x68>)
 800069c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800069e:	4b16      	ldr	r3, [pc, #88]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006a6:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006ac:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006c6:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006cc:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006d8:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006da:	2200      	movs	r2, #0
 80006dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006de:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006e0:	220a      	movs	r2, #10
 80006e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006e4:	4804      	ldr	r0, [pc, #16]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006e6:	f004 f8e5 	bl	80048b4 <HAL_SPI_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006f0:	f000 f9b6 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000150 	.word	0x20000150
 80006fc:	40013000 	.word	0x40013000

08000700 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000704:	4b17      	ldr	r3, [pc, #92]	; (8000764 <MX_SPI2_Init+0x64>)
 8000706:	4a18      	ldr	r2, [pc, #96]	; (8000768 <MX_SPI2_Init+0x68>)
 8000708:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800070a:	4b16      	ldr	r3, [pc, #88]	; (8000764 <MX_SPI2_Init+0x64>)
 800070c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000710:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000712:	4b14      	ldr	r3, [pc, #80]	; (8000764 <MX_SPI2_Init+0x64>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <MX_SPI2_Init+0x64>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_SPI2_Init+0x64>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000724:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <MX_SPI2_Init+0x64>)
 8000726:	2200      	movs	r2, #0
 8000728:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <MX_SPI2_Init+0x64>)
 800072c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000730:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000732:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <MX_SPI2_Init+0x64>)
 8000734:	2218      	movs	r2, #24
 8000736:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000738:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <MX_SPI2_Init+0x64>)
 800073a:	2200      	movs	r2, #0
 800073c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800073e:	4b09      	ldr	r3, [pc, #36]	; (8000764 <MX_SPI2_Init+0x64>)
 8000740:	2200      	movs	r2, #0
 8000742:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000744:	4b07      	ldr	r3, [pc, #28]	; (8000764 <MX_SPI2_Init+0x64>)
 8000746:	2200      	movs	r2, #0
 8000748:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <MX_SPI2_Init+0x64>)
 800074c:	220a      	movs	r2, #10
 800074e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000750:	4804      	ldr	r0, [pc, #16]	; (8000764 <MX_SPI2_Init+0x64>)
 8000752:	f004 f8af 	bl	80048b4 <HAL_SPI_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800075c:	f000 f980 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	200001a8 	.word	0x200001a8
 8000768:	40003800 	.word	0x40003800

0800076c <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <MX_USART2_Init+0x50>)
 8000772:	4a13      	ldr	r2, [pc, #76]	; (80007c0 <MX_USART2_Init+0x54>)
 8000774:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_USART2_Init+0x50>)
 8000778:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800077c:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <MX_USART2_Init+0x50>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 8000784:	4b0d      	ldr	r3, [pc, #52]	; (80007bc <MX_USART2_Init+0x50>)
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 800078a:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_USART2_Init+0x50>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 8000790:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <MX_USART2_Init+0x50>)
 8000792:	220c      	movs	r2, #12
 8000794:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_USART2_Init+0x50>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 800079c:	4b07      	ldr	r3, [pc, #28]	; (80007bc <MX_USART2_Init+0x50>)
 800079e:	2200      	movs	r2, #0
 80007a0:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_USART2_Init+0x50>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 80007a8:	4804      	ldr	r0, [pc, #16]	; (80007bc <MX_USART2_Init+0x50>)
 80007aa:	f004 fe2b 	bl	8005404 <HAL_USART_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 80007b4:	f000 f954 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000200 	.word	0x20000200
 80007c0:	40004400 	.word	0x40004400

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08c      	sub	sp, #48	; 0x30
 80007c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	f107 031c 	add.w	r3, r7, #28
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	61bb      	str	r3, [r7, #24]
 80007de:	4b7c      	ldr	r3, [pc, #496]	; (80009d0 <MX_GPIO_Init+0x20c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a7b      	ldr	r2, [pc, #492]	; (80009d0 <MX_GPIO_Init+0x20c>)
 80007e4:	f043 0310 	orr.w	r3, r3, #16
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b79      	ldr	r3, [pc, #484]	; (80009d0 <MX_GPIO_Init+0x20c>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0310 	and.w	r3, r3, #16
 80007f2:	61bb      	str	r3, [r7, #24]
 80007f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
 80007fa:	4b75      	ldr	r3, [pc, #468]	; (80009d0 <MX_GPIO_Init+0x20c>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a74      	ldr	r2, [pc, #464]	; (80009d0 <MX_GPIO_Init+0x20c>)
 8000800:	f043 0304 	orr.w	r3, r3, #4
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b72      	ldr	r3, [pc, #456]	; (80009d0 <MX_GPIO_Init+0x20c>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0304 	and.w	r3, r3, #4
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
 8000816:	4b6e      	ldr	r3, [pc, #440]	; (80009d0 <MX_GPIO_Init+0x20c>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a6d      	ldr	r2, [pc, #436]	; (80009d0 <MX_GPIO_Init+0x20c>)
 800081c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b6b      	ldr	r3, [pc, #428]	; (80009d0 <MX_GPIO_Init+0x20c>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	4b67      	ldr	r3, [pc, #412]	; (80009d0 <MX_GPIO_Init+0x20c>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a66      	ldr	r2, [pc, #408]	; (80009d0 <MX_GPIO_Init+0x20c>)
 8000838:	f043 0301 	orr.w	r3, r3, #1
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b64      	ldr	r3, [pc, #400]	; (80009d0 <MX_GPIO_Init+0x20c>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	4b60      	ldr	r3, [pc, #384]	; (80009d0 <MX_GPIO_Init+0x20c>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a5f      	ldr	r2, [pc, #380]	; (80009d0 <MX_GPIO_Init+0x20c>)
 8000854:	f043 0302 	orr.w	r3, r3, #2
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b5d      	ldr	r3, [pc, #372]	; (80009d0 <MX_GPIO_Init+0x20c>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0302 	and.w	r3, r3, #2
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	4b59      	ldr	r3, [pc, #356]	; (80009d0 <MX_GPIO_Init+0x20c>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a58      	ldr	r2, [pc, #352]	; (80009d0 <MX_GPIO_Init+0x20c>)
 8000870:	f043 0308 	orr.w	r3, r3, #8
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b56      	ldr	r3, [pc, #344]	; (80009d0 <MX_GPIO_Init+0x20c>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0308 	and.w	r3, r3, #8
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	2108      	movs	r1, #8
 8000886:	4853      	ldr	r0, [pc, #332]	; (80009d4 <MX_GPIO_Init+0x210>)
 8000888:	f001 f834 	bl	80018f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800088c:	2201      	movs	r2, #1
 800088e:	2101      	movs	r1, #1
 8000890:	4851      	ldr	r0, [pc, #324]	; (80009d8 <MX_GPIO_Init+0x214>)
 8000892:	f001 f82f 	bl	80018f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800089c:	484f      	ldr	r0, [pc, #316]	; (80009dc <MX_GPIO_Init+0x218>)
 800089e:	f001 f829 	bl	80018f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008a2:	2200      	movs	r2, #0
 80008a4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008a8:	484d      	ldr	r0, [pc, #308]	; (80009e0 <MX_GPIO_Init+0x21c>)
 80008aa:	f001 f823 	bl	80018f4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008ae:	2308      	movs	r3, #8
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b2:	2301      	movs	r3, #1
 80008b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	4843      	ldr	r0, [pc, #268]	; (80009d4 <MX_GPIO_Init+0x210>)
 80008c6:	f000 fe79 	bl	80015bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008ca:	2301      	movs	r3, #1
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	483d      	ldr	r0, [pc, #244]	; (80009d8 <MX_GPIO_Init+0x214>)
 80008e2:	f000 fe6b 	bl	80015bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008e6:	2308      	movs	r3, #8
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ea:	2302      	movs	r3, #2
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008f6:	2305      	movs	r3, #5
 80008f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	4835      	ldr	r0, [pc, #212]	; (80009d8 <MX_GPIO_Init+0x214>)
 8000902:	f000 fe5b 	bl	80015bc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000906:	2301      	movs	r3, #1
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800090a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	4832      	ldr	r0, [pc, #200]	; (80009e4 <MX_GPIO_Init+0x220>)
 800091c:	f000 fe4e 	bl	80015bc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000920:	2304      	movs	r3, #4
 8000922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000924:	2300      	movs	r3, #0
 8000926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	4619      	mov	r1, r3
 8000932:	482a      	ldr	r0, [pc, #168]	; (80009dc <MX_GPIO_Init+0x218>)
 8000934:	f000 fe42 	bl	80015bc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000938:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093e:	2302      	movs	r3, #2
 8000940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800094a:	2305      	movs	r3, #5
 800094c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	4821      	ldr	r0, [pc, #132]	; (80009dc <MX_GPIO_Init+0x218>)
 8000956:	f000 fe31 	bl	80015bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800095a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000960:	2301      	movs	r3, #1
 8000962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	481a      	ldr	r0, [pc, #104]	; (80009dc <MX_GPIO_Init+0x218>)
 8000974:	f000 fe22 	bl	80015bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000978:	f24f 0310 	movw	r3, #61456	; 0xf010
 800097c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097e:	2301      	movs	r3, #1
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	4813      	ldr	r0, [pc, #76]	; (80009e0 <MX_GPIO_Init+0x21c>)
 8000992:	f000 fe13 	bl	80015bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000996:	2320      	movs	r3, #32
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099a:	2300      	movs	r3, #0
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	480d      	ldr	r0, [pc, #52]	; (80009e0 <MX_GPIO_Init+0x21c>)
 80009aa:	f000 fe07 	bl	80015bc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009ae:	2302      	movs	r3, #2
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009b2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	4804      	ldr	r0, [pc, #16]	; (80009d4 <MX_GPIO_Init+0x210>)
 80009c4:	f000 fdfa 	bl	80015bc <HAL_GPIO_Init>

}
 80009c8:	bf00      	nop
 80009ca:	3730      	adds	r7, #48	; 0x30
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40021000 	.word	0x40021000
 80009d8:	40020800 	.word	0x40020800
 80009dc:	40020400 	.word	0x40020400
 80009e0:	40020c00 	.word	0x40020c00
 80009e4:	40020000 	.word	0x40020000

080009e8 <stateMachine>:

/* USER CODE BEGIN 4 */
void stateMachine(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
	switch(SPI_Mode)
 80009ec:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <stateMachine+0x64>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d002      	beq.n	80009fa <stateMachine+0x12>
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d01b      	beq.n	8000a30 <stateMachine+0x48>
		//	init = 1;
		//}
		break;

	default:
		break;
 80009f8:	e025      	b.n	8000a46 <stateMachine+0x5e>
		if(init==1)
 80009fa:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <stateMachine+0x68>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d106      	bne.n	8000a10 <stateMachine+0x28>
			nrf24_RxMode(Address, 10);
 8000a02:	210a      	movs	r1, #10
 8000a04:	4813      	ldr	r0, [pc, #76]	; (8000a54 <stateMachine+0x6c>)
 8000a06:	f000 f901 	bl	8000c0c <nrf24_RxMode>
			init=0;
 8000a0a:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <stateMachine+0x68>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	701a      	strb	r2, [r3, #0]
		if(isDataAvailable(1))
 8000a10:	2001      	movs	r0, #1
 8000a12:	f000 f933 	bl	8000c7c <isDataAvailable>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d011      	beq.n	8000a40 <stateMachine+0x58>
			nrf24_Receive(buffer);
 8000a1c:	480e      	ldr	r0, [pc, #56]	; (8000a58 <stateMachine+0x70>)
 8000a1e:	f000 f94d 	bl	8000cbc <nrf24_Receive>
			HAL_USART_Transmit(&husart2, buffer, 32, 100);
 8000a22:	2364      	movs	r3, #100	; 0x64
 8000a24:	2220      	movs	r2, #32
 8000a26:	490c      	ldr	r1, [pc, #48]	; (8000a58 <stateMachine+0x70>)
 8000a28:	480c      	ldr	r0, [pc, #48]	; (8000a5c <stateMachine+0x74>)
 8000a2a:	f004 fd2c 	bl	8005486 <HAL_USART_Transmit>
		break;
 8000a2e:	e007      	b.n	8000a40 <stateMachine+0x58>
		if(init==1)
 8000a30:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <stateMachine+0x68>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d105      	bne.n	8000a44 <stateMachine+0x5c>
			init=0;
 8000a38:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <stateMachine+0x68>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	701a      	strb	r2, [r3, #0]
		break;
 8000a3e:	e001      	b.n	8000a44 <stateMachine+0x5c>
		break;
 8000a40:	bf00      	nop
 8000a42:	e000      	b.n	8000a46 <stateMachine+0x5e>
		break;
 8000a44:	bf00      	nop
	}
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000264 	.word	0x20000264
 8000a50:	20000005 	.word	0x20000005
 8000a54:	20000000 	.word	0x20000000
 8000a58:	20000244 	.word	0x20000244
 8000a5c:	20000200 	.word	0x20000200

08000a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a64:	b672      	cpsid	i
}
 8000a66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <Error_Handler+0x8>
	...

08000a6c <selectCS>:
#define SPI_CS_PIN			GPIO_PIN_12

/**
 * @brief met le pin CS a 0
 */
void selectCS(void){
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI_CS_GPIO, SPI_CS_PIN, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a76:	4802      	ldr	r0, [pc, #8]	; (8000a80 <selectCS+0x14>)
 8000a78:	f000 ff3c 	bl	80018f4 <HAL_GPIO_WritePin>
}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40020400 	.word	0x40020400

08000a84 <unselectCS>:

/**
 * @brief met le pin CS a 1
 */
void unselectCS(void){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI_CS_GPIO, SPI_CS_PIN, GPIO_PIN_SET);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a8e:	4802      	ldr	r0, [pc, #8]	; (8000a98 <unselectCS+0x14>)
 8000a90:	f000 ff30 	bl	80018f4 <HAL_GPIO_WritePin>
}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40020400 	.word	0x40020400

08000a9c <enableCE>:

/**
 * @brief met le pin CE a 1
 */
void enableCE(void){
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI_CE_GPIO, SPI_CE_PIN, GPIO_PIN_SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aa6:	4802      	ldr	r0, [pc, #8]	; (8000ab0 <enableCE+0x14>)
 8000aa8:	f000 ff24 	bl	80018f4 <HAL_GPIO_WritePin>
}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40020400 	.word	0x40020400

08000ab4 <disableCE>:

/**
 * @brief met le pin CE a 0
 */
void disableCE(void){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI_CE_GPIO, SPI_CE_PIN, GPIO_PIN_RESET);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000abe:	4802      	ldr	r0, [pc, #8]	; (8000ac8 <disableCE+0x14>)
 8000ac0:	f000 ff18 	bl	80018f4 <HAL_GPIO_WritePin>
}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40020400 	.word	0x40020400

08000acc <nrf24_WriteReg>:
 * @brief Ecrit une valeur dans un registre du module
 *
 * @param Reg : Registre a modifier
 * @param Data : Donnee a ecrire dans le registre
 */
void nrf24_WriteReg(uint8_t Reg, uint8_t Data){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	460a      	mov	r2, r1
 8000ad6:	71fb      	strb	r3, [r7, #7]
 8000ad8:	4613      	mov	r3, r2
 8000ada:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0]=Reg|1<<5;
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	f043 0320 	orr.w	r3, r3, #32
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	733b      	strb	r3, [r7, #12]
	buf[1]=Data;
 8000ae6:	79bb      	ldrb	r3, [r7, #6]
 8000ae8:	737b      	strb	r3, [r7, #13]

	selectCS();
 8000aea:	f7ff ffbf 	bl	8000a6c <selectCS>
	HAL_SPI_Transmit(SPI_PROTO, buf, 2, 100);
 8000aee:	f107 010c 	add.w	r1, r7, #12
 8000af2:	2364      	movs	r3, #100	; 0x64
 8000af4:	2202      	movs	r2, #2
 8000af6:	4804      	ldr	r0, [pc, #16]	; (8000b08 <nrf24_WriteReg+0x3c>)
 8000af8:	f003 ff65 	bl	80049c6 <HAL_SPI_Transmit>
	unselectCS();
 8000afc:	f7ff ffc2 	bl	8000a84 <unselectCS>
}
 8000b00:	bf00      	nop
 8000b02:	3710      	adds	r7, #16
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	200001a8 	.word	0x200001a8

08000b0c <nrf24_WriteRegMulti>:
 *
 * @param Reg : Registre a modifier
 * @param Data : Donnee a ecrire dans le registre
 * @param size : Taille de la donnee (en octets)
 */
void nrf24_WriteRegMulti(uint8_t Reg, uint8_t *Data, uint8_t size){
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	6039      	str	r1, [r7, #0]
 8000b16:	71fb      	strb	r3, [r7, #7]
 8000b18:	4613      	mov	r3, r2
 8000b1a:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0]=Reg|1<<5;
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	f043 0320 	orr.w	r3, r3, #32
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	733b      	strb	r3, [r7, #12]
	//buf[1]=Data;

	selectCS();
 8000b26:	f7ff ffa1 	bl	8000a6c <selectCS>
	HAL_SPI_Transmit(SPI_PROTO, &buf[0], 1, 100);
 8000b2a:	f107 010c 	add.w	r1, r7, #12
 8000b2e:	2364      	movs	r3, #100	; 0x64
 8000b30:	2201      	movs	r2, #1
 8000b32:	4808      	ldr	r0, [pc, #32]	; (8000b54 <nrf24_WriteRegMulti+0x48>)
 8000b34:	f003 ff47 	bl	80049c6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_PROTO, Data, size, 100);
 8000b38:	79bb      	ldrb	r3, [r7, #6]
 8000b3a:	b29a      	uxth	r2, r3
 8000b3c:	2364      	movs	r3, #100	; 0x64
 8000b3e:	6839      	ldr	r1, [r7, #0]
 8000b40:	4804      	ldr	r0, [pc, #16]	; (8000b54 <nrf24_WriteRegMulti+0x48>)
 8000b42:	f003 ff40 	bl	80049c6 <HAL_SPI_Transmit>

	unselectCS();
 8000b46:	f7ff ff9d 	bl	8000a84 <unselectCS>
}
 8000b4a:	bf00      	nop
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	200001a8 	.word	0x200001a8

08000b58 <nrf24_ReadReg>:
 * @brief lit la valeur d'un registre du module
 *
 * @param Reg : Registre ou l'on veut lire la valeur
 * @return la valeur du registre
 */
uint8_t nrf24_ReadReg(uint8_t Reg){
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	73fb      	strb	r3, [r7, #15]
	selectCS();
 8000b66:	f7ff ff81 	bl	8000a6c <selectCS>
	HAL_SPI_Transmit(SPI_PROTO, &Reg, 1, 100);
 8000b6a:	1df9      	adds	r1, r7, #7
 8000b6c:	2364      	movs	r3, #100	; 0x64
 8000b6e:	2201      	movs	r2, #1
 8000b70:	4808      	ldr	r0, [pc, #32]	; (8000b94 <nrf24_ReadReg+0x3c>)
 8000b72:	f003 ff28 	bl	80049c6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_PROTO, &data, 1, 100);
 8000b76:	f107 010f 	add.w	r1, r7, #15
 8000b7a:	2364      	movs	r3, #100	; 0x64
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	4805      	ldr	r0, [pc, #20]	; (8000b94 <nrf24_ReadReg+0x3c>)
 8000b80:	f004 f85d 	bl	8004c3e <HAL_SPI_Receive>
	unselectCS();
 8000b84:	f7ff ff7e 	bl	8000a84 <unselectCS>
	return data;
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3710      	adds	r7, #16
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	200001a8 	.word	0x200001a8

08000b98 <nrfsendcmd>:
/**
 * @brief Envoie une commande au module
 *
 * @param cmd : Commande a envoyer (voir datasheet module pour liste des commandes)
 */
void nrfsendcmd(uint8_t cmd){
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
	selectCS();
 8000ba2:	f7ff ff63 	bl	8000a6c <selectCS>
	HAL_SPI_Transmit(SPI_PROTO, &cmd, 1, 100);
 8000ba6:	1df9      	adds	r1, r7, #7
 8000ba8:	2364      	movs	r3, #100	; 0x64
 8000baa:	2201      	movs	r2, #1
 8000bac:	4804      	ldr	r0, [pc, #16]	; (8000bc0 <nrfsendcmd+0x28>)
 8000bae:	f003 ff0a 	bl	80049c6 <HAL_SPI_Transmit>
	unselectCS();
 8000bb2:	f7ff ff67 	bl	8000a84 <unselectCS>
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	200001a8 	.word	0x200001a8

08000bc4 <nrf24_Init>:

/**
 * @brief Initialise les diff�rents registre du module
 */
void nrf24_Init(void){
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
	disableCE();
 8000bc8:	f7ff ff74 	bl	8000ab4 <disableCE>
	nrf24_WriteReg(CONFIG, 0);
 8000bcc:	2100      	movs	r1, #0
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f7ff ff7c 	bl	8000acc <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0);
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	f7ff ff78 	bl	8000acc <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0);
 8000bdc:	2100      	movs	r1, #0
 8000bde:	2002      	movs	r0, #2
 8000be0:	f7ff ff74 	bl	8000acc <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 8000be4:	2103      	movs	r1, #3
 8000be6:	2003      	movs	r0, #3
 8000be8:	f7ff ff70 	bl	8000acc <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0);
 8000bec:	2100      	movs	r1, #0
 8000bee:	2004      	movs	r0, #4
 8000bf0:	f7ff ff6c 	bl	8000acc <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0);
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	2005      	movs	r0, #5
 8000bf8:	f7ff ff68 	bl	8000acc <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 8000bfc:	210e      	movs	r1, #14
 8000bfe:	2006      	movs	r0, #6
 8000c00:	f7ff ff64 	bl	8000acc <nrf24_WriteReg>
	enableCE();
 8000c04:	f7ff ff4a 	bl	8000a9c <enableCE>
}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <nrf24_RxMode>:
 * @brief initialise le module en mode Rx (reception de donnees)
 *
 * @param Address : l'adresse du module
 * @param channel : chaine du module (mettre 10)
 */
void nrf24_RxMode(uint8_t *Address, uint8_t channel){
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	460b      	mov	r3, r1
 8000c16:	70fb      	strb	r3, [r7, #3]
	disableCE();
 8000c18:	f7ff ff4c 	bl	8000ab4 <disableCE>
	nrf24_WriteReg(RF_CH, channel);
 8000c1c:	78fb      	ldrb	r3, [r7, #3]
 8000c1e:	4619      	mov	r1, r3
 8000c20:	2005      	movs	r0, #5
 8000c22:	f7ff ff53 	bl	8000acc <nrf24_WriteReg>

	uint8_t en_rxaddr=nrf24_ReadReg(EN_RXADDR);
 8000c26:	2002      	movs	r0, #2
 8000c28:	f7ff ff96 	bl	8000b58 <nrf24_ReadReg>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	73fb      	strb	r3, [r7, #15]
	en_rxaddr=en_rxaddr | (1<<1);
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
 8000c32:	f043 0302 	orr.w	r3, r3, #2
 8000c36:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg(EN_RXADDR, en_rxaddr);
 8000c38:	7bfb      	ldrb	r3, [r7, #15]
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	2002      	movs	r0, #2
 8000c3e:	f7ff ff45 	bl	8000acc <nrf24_WriteReg>
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);
 8000c42:	2205      	movs	r2, #5
 8000c44:	6879      	ldr	r1, [r7, #4]
 8000c46:	200b      	movs	r0, #11
 8000c48:	f7ff ff60 	bl	8000b0c <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P1, 32); //Set up la taille maximale de la donnee a recuperer
 8000c4c:	2120      	movs	r1, #32
 8000c4e:	2012      	movs	r0, #18
 8000c50:	f7ff ff3c 	bl	8000acc <nrf24_WriteReg>

	//power up the device in RX mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 8000c54:	2000      	movs	r0, #0
 8000c56:	f7ff ff7f 	bl	8000b58 <nrf24_ReadReg>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	73bb      	strb	r3, [r7, #14]
	config=config | (1<<1) | (1<<0);
 8000c5e:	7bbb      	ldrb	r3, [r7, #14]
 8000c60:	f043 0303 	orr.w	r3, r3, #3
 8000c64:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg(CONFIG, config);
 8000c66:	7bbb      	ldrb	r3, [r7, #14]
 8000c68:	4619      	mov	r1, r3
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	f7ff ff2e 	bl	8000acc <nrf24_WriteReg>
	enableCE();
 8000c70:	f7ff ff14 	bl	8000a9c <enableCE>
}
 8000c74:	bf00      	nop
 8000c76:	3710      	adds	r7, #16
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <isDataAvailable>:
 * @brief observe si une donnee est arrivee dans la pipe
 *
 * @param pipenum : pipe a scuter
 * @return true : donnee disponible; false : pas de donnee
 */
uint8_t isDataAvailable(uint8_t pipenum){
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
	uint8_t status = nrf24_ReadReg(STATUS);
 8000c86:	2007      	movs	r0, #7
 8000c88:	f7ff ff66 	bl	8000b58 <nrf24_ReadReg>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	73fb      	strb	r3, [r7, #15]

	//uint8_t check = nrf24_ReadReg(RF_SETUP);

	if((status&(1<<6)) && (status&(pipenum<<1))){
 8000c90:	7bfb      	ldrb	r3, [r7, #15]
 8000c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d00b      	beq.n	8000cb2 <isDataAvailable+0x36>
 8000c9a:	7bfa      	ldrb	r2, [r7, #15]
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d005      	beq.n	8000cb2 <isDataAvailable+0x36>
		nrf24_WriteReg(STATUS, (1<<6));
 8000ca6:	2140      	movs	r1, #64	; 0x40
 8000ca8:	2007      	movs	r0, #7
 8000caa:	f7ff ff0f 	bl	8000acc <nrf24_WriteReg>
		return 1;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e000      	b.n	8000cb4 <isDataAvailable+0x38>
	}
	else
		return 0;
 8000cb2:	2300      	movs	r3, #0
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3710      	adds	r7, #16
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <nrf24_Receive>:
/**
 * @brief recupere la donnee dans la pipe 1
 *
 * @param data pointeur vers la ou l'on veut stocker la donnee (32 bits)
 */
void nrf24_Receive(uint8_t *data){
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	73fb      	strb	r3, [r7, #15]
	selectCS();
 8000cc8:	f7ff fed0 	bl	8000a6c <selectCS>

	cmdtosend=R_RX_PAYLOAD;
 8000ccc:	2361      	movs	r3, #97	; 0x61
 8000cce:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(SPI_PROTO, &cmdtosend, 1, 100);
 8000cd0:	f107 010f 	add.w	r1, r7, #15
 8000cd4:	2364      	movs	r3, #100	; 0x64
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	480b      	ldr	r0, [pc, #44]	; (8000d08 <nrf24_Receive+0x4c>)
 8000cda:	f003 fe74 	bl	80049c6 <HAL_SPI_Transmit>

	HAL_SPI_Receive(SPI_PROTO, data, 32, 100);
 8000cde:	2364      	movs	r3, #100	; 0x64
 8000ce0:	2220      	movs	r2, #32
 8000ce2:	6879      	ldr	r1, [r7, #4]
 8000ce4:	4808      	ldr	r0, [pc, #32]	; (8000d08 <nrf24_Receive+0x4c>)
 8000ce6:	f003 ffaa 	bl	8004c3e <HAL_SPI_Receive>

	unselectCS();
 8000cea:	f7ff fecb 	bl	8000a84 <unselectCS>

	HAL_Delay(1);
 8000cee:	2001      	movs	r0, #1
 8000cf0:	f000 fb0c 	bl	800130c <HAL_Delay>

	cmdtosend=FLUSH_RX;
 8000cf4:	23e2      	movs	r3, #226	; 0xe2
 8000cf6:	73fb      	strb	r3, [r7, #15]
	nrfsendcmd(cmdtosend);
 8000cf8:	7bfb      	ldrb	r3, [r7, #15]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff ff4c 	bl	8000b98 <nrfsendcmd>
}
 8000d00:	bf00      	nop
 8000d02:	3710      	adds	r7, #16
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	200001a8 	.word	0x200001a8

08000d0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1a:	4a0f      	ldr	r2, [pc, #60]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d20:	6453      	str	r3, [r2, #68]	; 0x44
 8000d22:	4b0d      	ldr	r3, [pc, #52]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	603b      	str	r3, [r7, #0]
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d36:	4a08      	ldr	r2, [pc, #32]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d46:	603b      	str	r3, [r7, #0]
 8000d48:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d4a:	2007      	movs	r0, #7
 8000d4c:	f000 fbd2 	bl	80014f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40023800 	.word	0x40023800

08000d5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08a      	sub	sp, #40	; 0x28
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a19      	ldr	r2, [pc, #100]	; (8000de0 <HAL_I2C_MspInit+0x84>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d12c      	bne.n	8000dd8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	613b      	str	r3, [r7, #16]
 8000d82:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <HAL_I2C_MspInit+0x88>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a17      	ldr	r2, [pc, #92]	; (8000de4 <HAL_I2C_MspInit+0x88>)
 8000d88:	f043 0302 	orr.w	r3, r3, #2
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <HAL_I2C_MspInit+0x88>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d9a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000da0:	2312      	movs	r3, #18
 8000da2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da4:	2301      	movs	r3, #1
 8000da6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da8:	2300      	movs	r3, #0
 8000daa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dac:	2304      	movs	r3, #4
 8000dae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	4619      	mov	r1, r3
 8000db6:	480c      	ldr	r0, [pc, #48]	; (8000de8 <HAL_I2C_MspInit+0x8c>)
 8000db8:	f000 fc00 	bl	80015bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <HAL_I2C_MspInit+0x88>)
 8000dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc4:	4a07      	ldr	r2, [pc, #28]	; (8000de4 <HAL_I2C_MspInit+0x88>)
 8000dc6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dca:	6413      	str	r3, [r2, #64]	; 0x40
 8000dcc:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <HAL_I2C_MspInit+0x88>)
 8000dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000dd8:	bf00      	nop
 8000dda:	3728      	adds	r7, #40	; 0x28
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40005400 	.word	0x40005400
 8000de4:	40023800 	.word	0x40023800
 8000de8:	40020400 	.word	0x40020400

08000dec <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08e      	sub	sp, #56	; 0x38
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a31      	ldr	r2, [pc, #196]	; (8000edc <HAL_I2S_MspInit+0xf0>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d15a      	bne.n	8000ed2 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000e20:	23c0      	movs	r3, #192	; 0xc0
 8000e22:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000e24:	2302      	movs	r3, #2
 8000e26:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f003 fc01 	bl	8004634 <HAL_RCCEx_PeriphCLKConfig>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000e38:	f7ff fe12 	bl	8000a60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	613b      	str	r3, [r7, #16]
 8000e40:	4b27      	ldr	r3, [pc, #156]	; (8000ee0 <HAL_I2S_MspInit+0xf4>)
 8000e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e44:	4a26      	ldr	r2, [pc, #152]	; (8000ee0 <HAL_I2S_MspInit+0xf4>)
 8000e46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e4c:	4b24      	ldr	r3, [pc, #144]	; (8000ee0 <HAL_I2S_MspInit+0xf4>)
 8000e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	4b20      	ldr	r3, [pc, #128]	; (8000ee0 <HAL_I2S_MspInit+0xf4>)
 8000e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e60:	4a1f      	ldr	r2, [pc, #124]	; (8000ee0 <HAL_I2S_MspInit+0xf4>)
 8000e62:	f043 0301 	orr.w	r3, r3, #1
 8000e66:	6313      	str	r3, [r2, #48]	; 0x30
 8000e68:	4b1d      	ldr	r3, [pc, #116]	; (8000ee0 <HAL_I2S_MspInit+0xf4>)
 8000e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6c:	f003 0301 	and.w	r3, r3, #1
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e74:	2300      	movs	r3, #0
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	4b19      	ldr	r3, [pc, #100]	; (8000ee0 <HAL_I2S_MspInit+0xf4>)
 8000e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7c:	4a18      	ldr	r2, [pc, #96]	; (8000ee0 <HAL_I2S_MspInit+0xf4>)
 8000e7e:	f043 0304 	orr.w	r3, r3, #4
 8000e82:	6313      	str	r3, [r2, #48]	; 0x30
 8000e84:	4b16      	ldr	r3, [pc, #88]	; (8000ee0 <HAL_I2S_MspInit+0xf4>)
 8000e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e88:	f003 0304 	and.w	r3, r3, #4
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000e90:	2310      	movs	r3, #16
 8000e92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e94:	2302      	movs	r3, #2
 8000e96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ea0:	2306      	movs	r3, #6
 8000ea2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	480e      	ldr	r0, [pc, #56]	; (8000ee4 <HAL_I2S_MspInit+0xf8>)
 8000eac:	f000 fb86 	bl	80015bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000eb0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ec2:	2306      	movs	r3, #6
 8000ec4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4806      	ldr	r0, [pc, #24]	; (8000ee8 <HAL_I2S_MspInit+0xfc>)
 8000ece:	f000 fb75 	bl	80015bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ed2:	bf00      	nop
 8000ed4:	3738      	adds	r7, #56	; 0x38
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40003c00 	.word	0x40003c00
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40020000 	.word	0x40020000
 8000ee8:	40020800 	.word	0x40020800

08000eec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08c      	sub	sp, #48	; 0x30
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 031c 	add.w	r3, r7, #28
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a32      	ldr	r2, [pc, #200]	; (8000fd4 <HAL_SPI_MspInit+0xe8>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d12c      	bne.n	8000f68 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61bb      	str	r3, [r7, #24]
 8000f12:	4b31      	ldr	r3, [pc, #196]	; (8000fd8 <HAL_SPI_MspInit+0xec>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	4a30      	ldr	r2, [pc, #192]	; (8000fd8 <HAL_SPI_MspInit+0xec>)
 8000f18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f1e:	4b2e      	ldr	r3, [pc, #184]	; (8000fd8 <HAL_SPI_MspInit+0xec>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f26:	61bb      	str	r3, [r7, #24]
 8000f28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	617b      	str	r3, [r7, #20]
 8000f2e:	4b2a      	ldr	r3, [pc, #168]	; (8000fd8 <HAL_SPI_MspInit+0xec>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a29      	ldr	r2, [pc, #164]	; (8000fd8 <HAL_SPI_MspInit+0xec>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b27      	ldr	r3, [pc, #156]	; (8000fd8 <HAL_SPI_MspInit+0xec>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000f46:	23e0      	movs	r3, #224	; 0xe0
 8000f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f52:	2300      	movs	r3, #0
 8000f54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f56:	2305      	movs	r3, #5
 8000f58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5a:	f107 031c 	add.w	r3, r7, #28
 8000f5e:	4619      	mov	r1, r3
 8000f60:	481e      	ldr	r0, [pc, #120]	; (8000fdc <HAL_SPI_MspInit+0xf0>)
 8000f62:	f000 fb2b 	bl	80015bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000f66:	e031      	b.n	8000fcc <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a1c      	ldr	r2, [pc, #112]	; (8000fe0 <HAL_SPI_MspInit+0xf4>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d12c      	bne.n	8000fcc <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
 8000f76:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <HAL_SPI_MspInit+0xec>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	4a17      	ldr	r2, [pc, #92]	; (8000fd8 <HAL_SPI_MspInit+0xec>)
 8000f7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f80:	6413      	str	r3, [r2, #64]	; 0x40
 8000f82:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <HAL_SPI_MspInit+0xec>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f8a:	613b      	str	r3, [r7, #16]
 8000f8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <HAL_SPI_MspInit+0xec>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a10      	ldr	r2, [pc, #64]	; (8000fd8 <HAL_SPI_MspInit+0xec>)
 8000f98:	f043 0302 	orr.w	r3, r3, #2
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <HAL_SPI_MspInit+0xec>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000faa:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fbc:	2305      	movs	r3, #5
 8000fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc0:	f107 031c 	add.w	r3, r7, #28
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4807      	ldr	r0, [pc, #28]	; (8000fe4 <HAL_SPI_MspInit+0xf8>)
 8000fc8:	f000 faf8 	bl	80015bc <HAL_GPIO_Init>
}
 8000fcc:	bf00      	nop
 8000fce:	3730      	adds	r7, #48	; 0x30
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40013000 	.word	0x40013000
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40020000 	.word	0x40020000
 8000fe0:	40003800 	.word	0x40003800
 8000fe4:	40020400 	.word	0x40020400

08000fe8 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08a      	sub	sp, #40	; 0x28
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART2)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a2c      	ldr	r2, [pc, #176]	; (80010b8 <HAL_USART_MspInit+0xd0>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d151      	bne.n	80010ae <HAL_USART_MspInit+0xc6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	4b2b      	ldr	r3, [pc, #172]	; (80010bc <HAL_USART_MspInit+0xd4>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	4a2a      	ldr	r2, [pc, #168]	; (80010bc <HAL_USART_MspInit+0xd4>)
 8001014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001018:	6413      	str	r3, [r2, #64]	; 0x40
 800101a:	4b28      	ldr	r3, [pc, #160]	; (80010bc <HAL_USART_MspInit+0xd4>)
 800101c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	4b24      	ldr	r3, [pc, #144]	; (80010bc <HAL_USART_MspInit+0xd4>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a23      	ldr	r2, [pc, #140]	; (80010bc <HAL_USART_MspInit+0xd4>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b21      	ldr	r3, [pc, #132]	; (80010bc <HAL_USART_MspInit+0xd4>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	60bb      	str	r3, [r7, #8]
 8001046:	4b1d      	ldr	r3, [pc, #116]	; (80010bc <HAL_USART_MspInit+0xd4>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	4a1c      	ldr	r2, [pc, #112]	; (80010bc <HAL_USART_MspInit+0xd4>)
 800104c:	f043 0308 	orr.w	r3, r3, #8
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4b1a      	ldr	r3, [pc, #104]	; (80010bc <HAL_USART_MspInit+0xd4>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f003 0308 	and.w	r3, r3, #8
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PD7     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800105e:	230c      	movs	r3, #12
 8001060:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106a:	2303      	movs	r3, #3
 800106c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800106e:	2307      	movs	r3, #7
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001072:	f107 0314 	add.w	r3, r7, #20
 8001076:	4619      	mov	r1, r3
 8001078:	4811      	ldr	r0, [pc, #68]	; (80010c0 <HAL_USART_MspInit+0xd8>)
 800107a:	f000 fa9f 	bl	80015bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800107e:	2380      	movs	r3, #128	; 0x80
 8001080:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001082:	2302      	movs	r3, #2
 8001084:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108a:	2303      	movs	r3, #3
 800108c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800108e:	2307      	movs	r3, #7
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	4619      	mov	r1, r3
 8001098:	480a      	ldr	r0, [pc, #40]	; (80010c4 <HAL_USART_MspInit+0xdc>)
 800109a:	f000 fa8f 	bl	80015bc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800109e:	2200      	movs	r2, #0
 80010a0:	2100      	movs	r1, #0
 80010a2:	2026      	movs	r0, #38	; 0x26
 80010a4:	f000 fa31 	bl	800150a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010a8:	2026      	movs	r0, #38	; 0x26
 80010aa:	f000 fa4a 	bl	8001542 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010ae:	bf00      	nop
 80010b0:	3728      	adds	r7, #40	; 0x28
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40004400 	.word	0x40004400
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40020000 	.word	0x40020000
 80010c4:	40020c00 	.word	0x40020c00

080010c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010cc:	e7fe      	b.n	80010cc <NMI_Handler+0x4>

080010ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d2:	e7fe      	b.n	80010d2 <HardFault_Handler+0x4>

080010d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d8:	e7fe      	b.n	80010d8 <MemManage_Handler+0x4>

080010da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010de:	e7fe      	b.n	80010de <BusFault_Handler+0x4>

080010e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <UsageFault_Handler+0x4>

080010e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001114:	f000 f8da 	bl	80012cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}

0800111c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_USART_IRQHandler(&husart2);
 8001120:	4802      	ldr	r0, [pc, #8]	; (800112c <USART2_IRQHandler+0x10>)
 8001122:	f004 fa41 	bl	80055a8 <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000200 	.word	0x20000200

08001130 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001134:	4802      	ldr	r0, [pc, #8]	; (8001140 <OTG_FS_IRQHandler+0x10>)
 8001136:	f000 fe61 	bl	8001dfc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	2000064c 	.word	0x2000064c

08001144 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800114c:	4a14      	ldr	r2, [pc, #80]	; (80011a0 <_sbrk+0x5c>)
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <_sbrk+0x60>)
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001158:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <_sbrk+0x64>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d102      	bne.n	8001166 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001160:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <_sbrk+0x64>)
 8001162:	4a12      	ldr	r2, [pc, #72]	; (80011ac <_sbrk+0x68>)
 8001164:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001166:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <_sbrk+0x64>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4413      	add	r3, r2
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	429a      	cmp	r2, r3
 8001172:	d207      	bcs.n	8001184 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001174:	f008 fb1e 	bl	80097b4 <__errno>
 8001178:	4603      	mov	r3, r0
 800117a:	220c      	movs	r2, #12
 800117c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800117e:	f04f 33ff 	mov.w	r3, #4294967295
 8001182:	e009      	b.n	8001198 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001184:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <_sbrk+0x64>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800118a:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <_sbrk+0x64>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4413      	add	r3, r2
 8001192:	4a05      	ldr	r2, [pc, #20]	; (80011a8 <_sbrk+0x64>)
 8001194:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001196:	68fb      	ldr	r3, [r7, #12]
}
 8001198:	4618      	mov	r0, r3
 800119a:	3718      	adds	r7, #24
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20020000 	.word	0x20020000
 80011a4:	00000400 	.word	0x00000400
 80011a8:	20000268 	.word	0x20000268
 80011ac:	20000960 	.word	0x20000960

080011b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011b4:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <SystemInit+0x20>)
 80011b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ba:	4a05      	ldr	r2, [pc, #20]	; (80011d0 <SystemInit+0x20>)
 80011bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800120c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011d8:	480d      	ldr	r0, [pc, #52]	; (8001210 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011da:	490e      	ldr	r1, [pc, #56]	; (8001214 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011dc:	4a0e      	ldr	r2, [pc, #56]	; (8001218 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e0:	e002      	b.n	80011e8 <LoopCopyDataInit>

080011e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011e6:	3304      	adds	r3, #4

080011e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011ec:	d3f9      	bcc.n	80011e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ee:	4a0b      	ldr	r2, [pc, #44]	; (800121c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011f0:	4c0b      	ldr	r4, [pc, #44]	; (8001220 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f4:	e001      	b.n	80011fa <LoopFillZerobss>

080011f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f8:	3204      	adds	r2, #4

080011fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011fc:	d3fb      	bcc.n	80011f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011fe:	f7ff ffd7 	bl	80011b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001202:	f008 fadd 	bl	80097c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001206:	f7ff f961 	bl	80004cc <main>
  bx  lr    
 800120a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800120c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001210:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001214:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001218:	08009a78 	.word	0x08009a78
  ldr r2, =_sbss
 800121c:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001220:	20000960 	.word	0x20000960

08001224 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001224:	e7fe      	b.n	8001224 <ADC_IRQHandler>
	...

08001228 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800122c:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <HAL_Init+0x40>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a0d      	ldr	r2, [pc, #52]	; (8001268 <HAL_Init+0x40>)
 8001232:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001236:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001238:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <HAL_Init+0x40>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a0a      	ldr	r2, [pc, #40]	; (8001268 <HAL_Init+0x40>)
 800123e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001242:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001244:	4b08      	ldr	r3, [pc, #32]	; (8001268 <HAL_Init+0x40>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a07      	ldr	r2, [pc, #28]	; (8001268 <HAL_Init+0x40>)
 800124a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800124e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001250:	2003      	movs	r0, #3
 8001252:	f000 f94f 	bl	80014f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001256:	2000      	movs	r0, #0
 8001258:	f000 f808 	bl	800126c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800125c:	f7ff fd56 	bl	8000d0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40023c00 	.word	0x40023c00

0800126c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <HAL_InitTick+0x54>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <HAL_InitTick+0x58>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	4619      	mov	r1, r3
 800127e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001282:	fbb3 f3f1 	udiv	r3, r3, r1
 8001286:	fbb2 f3f3 	udiv	r3, r2, r3
 800128a:	4618      	mov	r0, r3
 800128c:	f000 f967 	bl	800155e <HAL_SYSTICK_Config>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e00e      	b.n	80012b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2b0f      	cmp	r3, #15
 800129e:	d80a      	bhi.n	80012b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a0:	2200      	movs	r2, #0
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	f04f 30ff 	mov.w	r0, #4294967295
 80012a8:	f000 f92f 	bl	800150a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012ac:	4a06      	ldr	r2, [pc, #24]	; (80012c8 <HAL_InitTick+0x5c>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012b2:	2300      	movs	r3, #0
 80012b4:	e000      	b.n	80012b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000008 	.word	0x20000008
 80012c4:	20000010 	.word	0x20000010
 80012c8:	2000000c 	.word	0x2000000c

080012cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_IncTick+0x20>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	461a      	mov	r2, r3
 80012d6:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <HAL_IncTick+0x24>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4413      	add	r3, r2
 80012dc:	4a04      	ldr	r2, [pc, #16]	; (80012f0 <HAL_IncTick+0x24>)
 80012de:	6013      	str	r3, [r2, #0]
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	20000010 	.word	0x20000010
 80012f0:	2000026c 	.word	0x2000026c

080012f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return uwTick;
 80012f8:	4b03      	ldr	r3, [pc, #12]	; (8001308 <HAL_GetTick+0x14>)
 80012fa:	681b      	ldr	r3, [r3, #0]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	2000026c 	.word	0x2000026c

0800130c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001314:	f7ff ffee 	bl	80012f4 <HAL_GetTick>
 8001318:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001324:	d005      	beq.n	8001332 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001326:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <HAL_Delay+0x44>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	461a      	mov	r2, r3
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	4413      	add	r3, r2
 8001330:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001332:	bf00      	nop
 8001334:	f7ff ffde 	bl	80012f4 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	429a      	cmp	r2, r3
 8001342:	d8f7      	bhi.n	8001334 <HAL_Delay+0x28>
  {
  }
}
 8001344:	bf00      	nop
 8001346:	bf00      	nop
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000010 	.word	0x20000010

08001354 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001364:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <__NVIC_SetPriorityGrouping+0x44>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001370:	4013      	ands	r3, r2
 8001372:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800137c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001384:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001386:	4a04      	ldr	r2, [pc, #16]	; (8001398 <__NVIC_SetPriorityGrouping+0x44>)
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	60d3      	str	r3, [r2, #12]
}
 800138c:	bf00      	nop
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013a0:	4b04      	ldr	r3, [pc, #16]	; (80013b4 <__NVIC_GetPriorityGrouping+0x18>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	0a1b      	lsrs	r3, r3, #8
 80013a6:	f003 0307 	and.w	r3, r3, #7
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	db0b      	blt.n	80013e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	f003 021f 	and.w	r2, r3, #31
 80013d0:	4907      	ldr	r1, [pc, #28]	; (80013f0 <__NVIC_EnableIRQ+0x38>)
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	095b      	lsrs	r3, r3, #5
 80013d8:	2001      	movs	r0, #1
 80013da:	fa00 f202 	lsl.w	r2, r0, r2
 80013de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	e000e100 	.word	0xe000e100

080013f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	6039      	str	r1, [r7, #0]
 80013fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001404:	2b00      	cmp	r3, #0
 8001406:	db0a      	blt.n	800141e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	b2da      	uxtb	r2, r3
 800140c:	490c      	ldr	r1, [pc, #48]	; (8001440 <__NVIC_SetPriority+0x4c>)
 800140e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001412:	0112      	lsls	r2, r2, #4
 8001414:	b2d2      	uxtb	r2, r2
 8001416:	440b      	add	r3, r1
 8001418:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800141c:	e00a      	b.n	8001434 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	b2da      	uxtb	r2, r3
 8001422:	4908      	ldr	r1, [pc, #32]	; (8001444 <__NVIC_SetPriority+0x50>)
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	f003 030f 	and.w	r3, r3, #15
 800142a:	3b04      	subs	r3, #4
 800142c:	0112      	lsls	r2, r2, #4
 800142e:	b2d2      	uxtb	r2, r2
 8001430:	440b      	add	r3, r1
 8001432:	761a      	strb	r2, [r3, #24]
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	e000e100 	.word	0xe000e100
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001448:	b480      	push	{r7}
 800144a:	b089      	sub	sp, #36	; 0x24
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	f1c3 0307 	rsb	r3, r3, #7
 8001462:	2b04      	cmp	r3, #4
 8001464:	bf28      	it	cs
 8001466:	2304      	movcs	r3, #4
 8001468:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	3304      	adds	r3, #4
 800146e:	2b06      	cmp	r3, #6
 8001470:	d902      	bls.n	8001478 <NVIC_EncodePriority+0x30>
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	3b03      	subs	r3, #3
 8001476:	e000      	b.n	800147a <NVIC_EncodePriority+0x32>
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800147c:	f04f 32ff 	mov.w	r2, #4294967295
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43da      	mvns	r2, r3
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	401a      	ands	r2, r3
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001490:	f04f 31ff 	mov.w	r1, #4294967295
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	fa01 f303 	lsl.w	r3, r1, r3
 800149a:	43d9      	mvns	r1, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a0:	4313      	orrs	r3, r2
         );
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3724      	adds	r7, #36	; 0x24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
	...

080014b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014c0:	d301      	bcc.n	80014c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014c2:	2301      	movs	r3, #1
 80014c4:	e00f      	b.n	80014e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014c6:	4a0a      	ldr	r2, [pc, #40]	; (80014f0 <SysTick_Config+0x40>)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	3b01      	subs	r3, #1
 80014cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ce:	210f      	movs	r1, #15
 80014d0:	f04f 30ff 	mov.w	r0, #4294967295
 80014d4:	f7ff ff8e 	bl	80013f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d8:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <SysTick_Config+0x40>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014de:	4b04      	ldr	r3, [pc, #16]	; (80014f0 <SysTick_Config+0x40>)
 80014e0:	2207      	movs	r2, #7
 80014e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	e000e010 	.word	0xe000e010

080014f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff ff29 	bl	8001354 <__NVIC_SetPriorityGrouping>
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800150a:	b580      	push	{r7, lr}
 800150c:	b086      	sub	sp, #24
 800150e:	af00      	add	r7, sp, #0
 8001510:	4603      	mov	r3, r0
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	607a      	str	r2, [r7, #4]
 8001516:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800151c:	f7ff ff3e 	bl	800139c <__NVIC_GetPriorityGrouping>
 8001520:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	68b9      	ldr	r1, [r7, #8]
 8001526:	6978      	ldr	r0, [r7, #20]
 8001528:	f7ff ff8e 	bl	8001448 <NVIC_EncodePriority>
 800152c:	4602      	mov	r2, r0
 800152e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001532:	4611      	mov	r1, r2
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff ff5d 	bl	80013f4 <__NVIC_SetPriority>
}
 800153a:	bf00      	nop
 800153c:	3718      	adds	r7, #24
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b082      	sub	sp, #8
 8001546:	af00      	add	r7, sp, #0
 8001548:	4603      	mov	r3, r0
 800154a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800154c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff ff31 	bl	80013b8 <__NVIC_EnableIRQ>
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7ff ffa2 	bl	80014b0 <SysTick_Config>
 800156c:	4603      	mov	r3, r0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001576:	b480      	push	{r7}
 8001578:	b083      	sub	sp, #12
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d004      	beq.n	8001594 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2280      	movs	r2, #128	; 0x80
 800158e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e00c      	b.n	80015ae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2205      	movs	r2, #5
 8001598:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f022 0201 	bic.w	r2, r2, #1
 80015aa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
	...

080015bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015bc:	b480      	push	{r7}
 80015be:	b089      	sub	sp, #36	; 0x24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015d2:	2300      	movs	r3, #0
 80015d4:	61fb      	str	r3, [r7, #28]
 80015d6:	e16b      	b.n	80018b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015d8:	2201      	movs	r2, #1
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	697a      	ldr	r2, [r7, #20]
 80015e8:	4013      	ands	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	f040 815a 	bne.w	80018aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f003 0303 	and.w	r3, r3, #3
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d005      	beq.n	800160e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800160a:	2b02      	cmp	r3, #2
 800160c:	d130      	bne.n	8001670 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	2203      	movs	r2, #3
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43db      	mvns	r3, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4013      	ands	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	68da      	ldr	r2, [r3, #12]
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4313      	orrs	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001644:	2201      	movs	r2, #1
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	43db      	mvns	r3, r3
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4013      	ands	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	091b      	lsrs	r3, r3, #4
 800165a:	f003 0201 	and.w	r2, r3, #1
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4313      	orrs	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 0303 	and.w	r3, r3, #3
 8001678:	2b03      	cmp	r3, #3
 800167a:	d017      	beq.n	80016ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	2203      	movs	r2, #3
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4013      	ands	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	689a      	ldr	r2, [r3, #8]
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f003 0303 	and.w	r3, r3, #3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d123      	bne.n	8001700 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	08da      	lsrs	r2, r3, #3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3208      	adds	r2, #8
 80016c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	f003 0307 	and.w	r3, r3, #7
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	220f      	movs	r2, #15
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	43db      	mvns	r3, r3
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	4013      	ands	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	691a      	ldr	r2, [r3, #16]
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	08da      	lsrs	r2, r3, #3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	3208      	adds	r2, #8
 80016fa:	69b9      	ldr	r1, [r7, #24]
 80016fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	2203      	movs	r2, #3
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	43db      	mvns	r3, r3
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	4013      	ands	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 0203 	and.w	r2, r3, #3
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	4313      	orrs	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800173c:	2b00      	cmp	r3, #0
 800173e:	f000 80b4 	beq.w	80018aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	4b60      	ldr	r3, [pc, #384]	; (80018c8 <HAL_GPIO_Init+0x30c>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174a:	4a5f      	ldr	r2, [pc, #380]	; (80018c8 <HAL_GPIO_Init+0x30c>)
 800174c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001750:	6453      	str	r3, [r2, #68]	; 0x44
 8001752:	4b5d      	ldr	r3, [pc, #372]	; (80018c8 <HAL_GPIO_Init+0x30c>)
 8001754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800175e:	4a5b      	ldr	r2, [pc, #364]	; (80018cc <HAL_GPIO_Init+0x310>)
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	089b      	lsrs	r3, r3, #2
 8001764:	3302      	adds	r3, #2
 8001766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800176a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	f003 0303 	and.w	r3, r3, #3
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	220f      	movs	r2, #15
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43db      	mvns	r3, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4013      	ands	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a52      	ldr	r2, [pc, #328]	; (80018d0 <HAL_GPIO_Init+0x314>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d02b      	beq.n	80017e2 <HAL_GPIO_Init+0x226>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a51      	ldr	r2, [pc, #324]	; (80018d4 <HAL_GPIO_Init+0x318>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d025      	beq.n	80017de <HAL_GPIO_Init+0x222>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a50      	ldr	r2, [pc, #320]	; (80018d8 <HAL_GPIO_Init+0x31c>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d01f      	beq.n	80017da <HAL_GPIO_Init+0x21e>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a4f      	ldr	r2, [pc, #316]	; (80018dc <HAL_GPIO_Init+0x320>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d019      	beq.n	80017d6 <HAL_GPIO_Init+0x21a>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a4e      	ldr	r2, [pc, #312]	; (80018e0 <HAL_GPIO_Init+0x324>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d013      	beq.n	80017d2 <HAL_GPIO_Init+0x216>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a4d      	ldr	r2, [pc, #308]	; (80018e4 <HAL_GPIO_Init+0x328>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d00d      	beq.n	80017ce <HAL_GPIO_Init+0x212>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a4c      	ldr	r2, [pc, #304]	; (80018e8 <HAL_GPIO_Init+0x32c>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d007      	beq.n	80017ca <HAL_GPIO_Init+0x20e>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a4b      	ldr	r2, [pc, #300]	; (80018ec <HAL_GPIO_Init+0x330>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d101      	bne.n	80017c6 <HAL_GPIO_Init+0x20a>
 80017c2:	2307      	movs	r3, #7
 80017c4:	e00e      	b.n	80017e4 <HAL_GPIO_Init+0x228>
 80017c6:	2308      	movs	r3, #8
 80017c8:	e00c      	b.n	80017e4 <HAL_GPIO_Init+0x228>
 80017ca:	2306      	movs	r3, #6
 80017cc:	e00a      	b.n	80017e4 <HAL_GPIO_Init+0x228>
 80017ce:	2305      	movs	r3, #5
 80017d0:	e008      	b.n	80017e4 <HAL_GPIO_Init+0x228>
 80017d2:	2304      	movs	r3, #4
 80017d4:	e006      	b.n	80017e4 <HAL_GPIO_Init+0x228>
 80017d6:	2303      	movs	r3, #3
 80017d8:	e004      	b.n	80017e4 <HAL_GPIO_Init+0x228>
 80017da:	2302      	movs	r3, #2
 80017dc:	e002      	b.n	80017e4 <HAL_GPIO_Init+0x228>
 80017de:	2301      	movs	r3, #1
 80017e0:	e000      	b.n	80017e4 <HAL_GPIO_Init+0x228>
 80017e2:	2300      	movs	r3, #0
 80017e4:	69fa      	ldr	r2, [r7, #28]
 80017e6:	f002 0203 	and.w	r2, r2, #3
 80017ea:	0092      	lsls	r2, r2, #2
 80017ec:	4093      	lsls	r3, r2
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017f4:	4935      	ldr	r1, [pc, #212]	; (80018cc <HAL_GPIO_Init+0x310>)
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	089b      	lsrs	r3, r3, #2
 80017fa:	3302      	adds	r3, #2
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001802:	4b3b      	ldr	r3, [pc, #236]	; (80018f0 <HAL_GPIO_Init+0x334>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	43db      	mvns	r3, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4013      	ands	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	4313      	orrs	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001826:	4a32      	ldr	r2, [pc, #200]	; (80018f0 <HAL_GPIO_Init+0x334>)
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800182c:	4b30      	ldr	r3, [pc, #192]	; (80018f0 <HAL_GPIO_Init+0x334>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	43db      	mvns	r3, r3
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4013      	ands	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d003      	beq.n	8001850 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	4313      	orrs	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001850:	4a27      	ldr	r2, [pc, #156]	; (80018f0 <HAL_GPIO_Init+0x334>)
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001856:	4b26      	ldr	r3, [pc, #152]	; (80018f0 <HAL_GPIO_Init+0x334>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	43db      	mvns	r3, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4013      	ands	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	4313      	orrs	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800187a:	4a1d      	ldr	r2, [pc, #116]	; (80018f0 <HAL_GPIO_Init+0x334>)
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001880:	4b1b      	ldr	r3, [pc, #108]	; (80018f0 <HAL_GPIO_Init+0x334>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	43db      	mvns	r3, r3
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	4013      	ands	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018a4:	4a12      	ldr	r2, [pc, #72]	; (80018f0 <HAL_GPIO_Init+0x334>)
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3301      	adds	r3, #1
 80018ae:	61fb      	str	r3, [r7, #28]
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	2b0f      	cmp	r3, #15
 80018b4:	f67f ae90 	bls.w	80015d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018b8:	bf00      	nop
 80018ba:	bf00      	nop
 80018bc:	3724      	adds	r7, #36	; 0x24
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	40023800 	.word	0x40023800
 80018cc:	40013800 	.word	0x40013800
 80018d0:	40020000 	.word	0x40020000
 80018d4:	40020400 	.word	0x40020400
 80018d8:	40020800 	.word	0x40020800
 80018dc:	40020c00 	.word	0x40020c00
 80018e0:	40021000 	.word	0x40021000
 80018e4:	40021400 	.word	0x40021400
 80018e8:	40021800 	.word	0x40021800
 80018ec:	40021c00 	.word	0x40021c00
 80018f0:	40013c00 	.word	0x40013c00

080018f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	460b      	mov	r3, r1
 80018fe:	807b      	strh	r3, [r7, #2]
 8001900:	4613      	mov	r3, r2
 8001902:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001904:	787b      	ldrb	r3, [r7, #1]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800190a:	887a      	ldrh	r2, [r7, #2]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001910:	e003      	b.n	800191a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001912:	887b      	ldrh	r3, [r7, #2]
 8001914:	041a      	lsls	r2, r3, #16
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	619a      	str	r2, [r3, #24]
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001926:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001928:	b08f      	sub	sp, #60	; 0x3c
 800192a:	af0a      	add	r7, sp, #40	; 0x28
 800192c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d101      	bne.n	8001938 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e054      	b.n	80019e2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b00      	cmp	r3, #0
 8001948:	d106      	bne.n	8001958 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f007 fc84 	bl	8009260 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2203      	movs	r2, #3
 800195c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001968:	2b00      	cmp	r3, #0
 800196a:	d102      	bne.n	8001972 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f004 fcb2 	bl	80062e0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	603b      	str	r3, [r7, #0]
 8001982:	687e      	ldr	r6, [r7, #4]
 8001984:	466d      	mov	r5, sp
 8001986:	f106 0410 	add.w	r4, r6, #16
 800198a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800198c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800198e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001990:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001992:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001996:	e885 0003 	stmia.w	r5, {r0, r1}
 800199a:	1d33      	adds	r3, r6, #4
 800199c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800199e:	6838      	ldr	r0, [r7, #0]
 80019a0:	f004 fc2c 	bl	80061fc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2101      	movs	r1, #1
 80019aa:	4618      	mov	r0, r3
 80019ac:	f004 fca9 	bl	8006302 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	603b      	str	r3, [r7, #0]
 80019b6:	687e      	ldr	r6, [r7, #4]
 80019b8:	466d      	mov	r5, sp
 80019ba:	f106 0410 	add.w	r4, r6, #16
 80019be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80019ce:	1d33      	adds	r3, r6, #4
 80019d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019d2:	6838      	ldr	r0, [r7, #0]
 80019d4:	f004 fe32 	bl	800663c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3714      	adds	r7, #20
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019ea <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80019ea:	b590      	push	{r4, r7, lr}
 80019ec:	b089      	sub	sp, #36	; 0x24
 80019ee:	af04      	add	r7, sp, #16
 80019f0:	6078      	str	r0, [r7, #4]
 80019f2:	4608      	mov	r0, r1
 80019f4:	4611      	mov	r1, r2
 80019f6:	461a      	mov	r2, r3
 80019f8:	4603      	mov	r3, r0
 80019fa:	70fb      	strb	r3, [r7, #3]
 80019fc:	460b      	mov	r3, r1
 80019fe:	70bb      	strb	r3, [r7, #2]
 8001a00:	4613      	mov	r3, r2
 8001a02:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d101      	bne.n	8001a12 <HAL_HCD_HC_Init+0x28>
 8001a0e:	2302      	movs	r3, #2
 8001a10:	e076      	b.n	8001b00 <HAL_HCD_HC_Init+0x116>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2201      	movs	r2, #1
 8001a16:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001a1a:	78fb      	ldrb	r3, [r7, #3]
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	212c      	movs	r1, #44	; 0x2c
 8001a20:	fb01 f303 	mul.w	r3, r1, r3
 8001a24:	4413      	add	r3, r2
 8001a26:	333d      	adds	r3, #61	; 0x3d
 8001a28:	2200      	movs	r2, #0
 8001a2a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001a2c:	78fb      	ldrb	r3, [r7, #3]
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	212c      	movs	r1, #44	; 0x2c
 8001a32:	fb01 f303 	mul.w	r3, r1, r3
 8001a36:	4413      	add	r3, r2
 8001a38:	3338      	adds	r3, #56	; 0x38
 8001a3a:	787a      	ldrb	r2, [r7, #1]
 8001a3c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001a3e:	78fb      	ldrb	r3, [r7, #3]
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	212c      	movs	r1, #44	; 0x2c
 8001a44:	fb01 f303 	mul.w	r3, r1, r3
 8001a48:	4413      	add	r3, r2
 8001a4a:	3340      	adds	r3, #64	; 0x40
 8001a4c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001a4e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a50:	78fb      	ldrb	r3, [r7, #3]
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	212c      	movs	r1, #44	; 0x2c
 8001a56:	fb01 f303 	mul.w	r3, r1, r3
 8001a5a:	4413      	add	r3, r2
 8001a5c:	3339      	adds	r3, #57	; 0x39
 8001a5e:	78fa      	ldrb	r2, [r7, #3]
 8001a60:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001a62:	78fb      	ldrb	r3, [r7, #3]
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	212c      	movs	r1, #44	; 0x2c
 8001a68:	fb01 f303 	mul.w	r3, r1, r3
 8001a6c:	4413      	add	r3, r2
 8001a6e:	333f      	adds	r3, #63	; 0x3f
 8001a70:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001a74:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001a76:	78fb      	ldrb	r3, [r7, #3]
 8001a78:	78ba      	ldrb	r2, [r7, #2]
 8001a7a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a7e:	b2d0      	uxtb	r0, r2
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	212c      	movs	r1, #44	; 0x2c
 8001a84:	fb01 f303 	mul.w	r3, r1, r3
 8001a88:	4413      	add	r3, r2
 8001a8a:	333a      	adds	r3, #58	; 0x3a
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001a90:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	da09      	bge.n	8001aac <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001a98:	78fb      	ldrb	r3, [r7, #3]
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	212c      	movs	r1, #44	; 0x2c
 8001a9e:	fb01 f303 	mul.w	r3, r1, r3
 8001aa2:	4413      	add	r3, r2
 8001aa4:	333b      	adds	r3, #59	; 0x3b
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	701a      	strb	r2, [r3, #0]
 8001aaa:	e008      	b.n	8001abe <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001aac:	78fb      	ldrb	r3, [r7, #3]
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	212c      	movs	r1, #44	; 0x2c
 8001ab2:	fb01 f303 	mul.w	r3, r1, r3
 8001ab6:	4413      	add	r3, r2
 8001ab8:	333b      	adds	r3, #59	; 0x3b
 8001aba:	2200      	movs	r2, #0
 8001abc:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001abe:	78fb      	ldrb	r3, [r7, #3]
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	212c      	movs	r1, #44	; 0x2c
 8001ac4:	fb01 f303 	mul.w	r3, r1, r3
 8001ac8:	4413      	add	r3, r2
 8001aca:	333c      	adds	r3, #60	; 0x3c
 8001acc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001ad0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6818      	ldr	r0, [r3, #0]
 8001ad6:	787c      	ldrb	r4, [r7, #1]
 8001ad8:	78ba      	ldrb	r2, [r7, #2]
 8001ada:	78f9      	ldrb	r1, [r7, #3]
 8001adc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001ade:	9302      	str	r3, [sp, #8]
 8001ae0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001ae4:	9301      	str	r3, [sp, #4]
 8001ae6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	4623      	mov	r3, r4
 8001aee:	f004 ff2b 	bl	8006948 <USB_HC_Init>
 8001af2:	4603      	mov	r3, r0
 8001af4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd90      	pop	{r4, r7, pc}

08001b08 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	460b      	mov	r3, r1
 8001b12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001b14:	2300      	movs	r3, #0
 8001b16:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d101      	bne.n	8001b26 <HAL_HCD_HC_Halt+0x1e>
 8001b22:	2302      	movs	r3, #2
 8001b24:	e00f      	b.n	8001b46 <HAL_HCD_HC_Halt+0x3e>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	78fa      	ldrb	r2, [r7, #3]
 8001b34:	4611      	mov	r1, r2
 8001b36:	4618      	mov	r0, r3
 8001b38:	f005 f97b 	bl	8006e32 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
	...

08001b50 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	4608      	mov	r0, r1
 8001b5a:	4611      	mov	r1, r2
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	4603      	mov	r3, r0
 8001b60:	70fb      	strb	r3, [r7, #3]
 8001b62:	460b      	mov	r3, r1
 8001b64:	70bb      	strb	r3, [r7, #2]
 8001b66:	4613      	mov	r3, r2
 8001b68:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001b6a:	78fb      	ldrb	r3, [r7, #3]
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	212c      	movs	r1, #44	; 0x2c
 8001b70:	fb01 f303 	mul.w	r3, r1, r3
 8001b74:	4413      	add	r3, r2
 8001b76:	333b      	adds	r3, #59	; 0x3b
 8001b78:	78ba      	ldrb	r2, [r7, #2]
 8001b7a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001b7c:	78fb      	ldrb	r3, [r7, #3]
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	212c      	movs	r1, #44	; 0x2c
 8001b82:	fb01 f303 	mul.w	r3, r1, r3
 8001b86:	4413      	add	r3, r2
 8001b88:	333f      	adds	r3, #63	; 0x3f
 8001b8a:	787a      	ldrb	r2, [r7, #1]
 8001b8c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001b8e:	7c3b      	ldrb	r3, [r7, #16]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d112      	bne.n	8001bba <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001b94:	78fb      	ldrb	r3, [r7, #3]
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	212c      	movs	r1, #44	; 0x2c
 8001b9a:	fb01 f303 	mul.w	r3, r1, r3
 8001b9e:	4413      	add	r3, r2
 8001ba0:	3342      	adds	r3, #66	; 0x42
 8001ba2:	2203      	movs	r2, #3
 8001ba4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001ba6:	78fb      	ldrb	r3, [r7, #3]
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	212c      	movs	r1, #44	; 0x2c
 8001bac:	fb01 f303 	mul.w	r3, r1, r3
 8001bb0:	4413      	add	r3, r2
 8001bb2:	333d      	adds	r3, #61	; 0x3d
 8001bb4:	7f3a      	ldrb	r2, [r7, #28]
 8001bb6:	701a      	strb	r2, [r3, #0]
 8001bb8:	e008      	b.n	8001bcc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bba:	78fb      	ldrb	r3, [r7, #3]
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	212c      	movs	r1, #44	; 0x2c
 8001bc0:	fb01 f303 	mul.w	r3, r1, r3
 8001bc4:	4413      	add	r3, r2
 8001bc6:	3342      	adds	r3, #66	; 0x42
 8001bc8:	2202      	movs	r2, #2
 8001bca:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001bcc:	787b      	ldrb	r3, [r7, #1]
 8001bce:	2b03      	cmp	r3, #3
 8001bd0:	f200 80c6 	bhi.w	8001d60 <HAL_HCD_HC_SubmitRequest+0x210>
 8001bd4:	a201      	add	r2, pc, #4	; (adr r2, 8001bdc <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bda:	bf00      	nop
 8001bdc:	08001bed 	.word	0x08001bed
 8001be0:	08001d4d 	.word	0x08001d4d
 8001be4:	08001c51 	.word	0x08001c51
 8001be8:	08001ccf 	.word	0x08001ccf
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001bec:	7c3b      	ldrb	r3, [r7, #16]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	f040 80b8 	bne.w	8001d64 <HAL_HCD_HC_SubmitRequest+0x214>
 8001bf4:	78bb      	ldrb	r3, [r7, #2]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f040 80b4 	bne.w	8001d64 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001bfc:	8b3b      	ldrh	r3, [r7, #24]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d108      	bne.n	8001c14 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001c02:	78fb      	ldrb	r3, [r7, #3]
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	212c      	movs	r1, #44	; 0x2c
 8001c08:	fb01 f303 	mul.w	r3, r1, r3
 8001c0c:	4413      	add	r3, r2
 8001c0e:	3355      	adds	r3, #85	; 0x55
 8001c10:	2201      	movs	r2, #1
 8001c12:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c14:	78fb      	ldrb	r3, [r7, #3]
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	212c      	movs	r1, #44	; 0x2c
 8001c1a:	fb01 f303 	mul.w	r3, r1, r3
 8001c1e:	4413      	add	r3, r2
 8001c20:	3355      	adds	r3, #85	; 0x55
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d109      	bne.n	8001c3c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c28:	78fb      	ldrb	r3, [r7, #3]
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	212c      	movs	r1, #44	; 0x2c
 8001c2e:	fb01 f303 	mul.w	r3, r1, r3
 8001c32:	4413      	add	r3, r2
 8001c34:	3342      	adds	r3, #66	; 0x42
 8001c36:	2200      	movs	r2, #0
 8001c38:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001c3a:	e093      	b.n	8001d64 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c3c:	78fb      	ldrb	r3, [r7, #3]
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	212c      	movs	r1, #44	; 0x2c
 8001c42:	fb01 f303 	mul.w	r3, r1, r3
 8001c46:	4413      	add	r3, r2
 8001c48:	3342      	adds	r3, #66	; 0x42
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	701a      	strb	r2, [r3, #0]
      break;
 8001c4e:	e089      	b.n	8001d64 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001c50:	78bb      	ldrb	r3, [r7, #2]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d11d      	bne.n	8001c92 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c56:	78fb      	ldrb	r3, [r7, #3]
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	212c      	movs	r1, #44	; 0x2c
 8001c5c:	fb01 f303 	mul.w	r3, r1, r3
 8001c60:	4413      	add	r3, r2
 8001c62:	3355      	adds	r3, #85	; 0x55
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d109      	bne.n	8001c7e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c6a:	78fb      	ldrb	r3, [r7, #3]
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	212c      	movs	r1, #44	; 0x2c
 8001c70:	fb01 f303 	mul.w	r3, r1, r3
 8001c74:	4413      	add	r3, r2
 8001c76:	3342      	adds	r3, #66	; 0x42
 8001c78:	2200      	movs	r2, #0
 8001c7a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001c7c:	e073      	b.n	8001d66 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c7e:	78fb      	ldrb	r3, [r7, #3]
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	212c      	movs	r1, #44	; 0x2c
 8001c84:	fb01 f303 	mul.w	r3, r1, r3
 8001c88:	4413      	add	r3, r2
 8001c8a:	3342      	adds	r3, #66	; 0x42
 8001c8c:	2202      	movs	r2, #2
 8001c8e:	701a      	strb	r2, [r3, #0]
      break;
 8001c90:	e069      	b.n	8001d66 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c92:	78fb      	ldrb	r3, [r7, #3]
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	212c      	movs	r1, #44	; 0x2c
 8001c98:	fb01 f303 	mul.w	r3, r1, r3
 8001c9c:	4413      	add	r3, r2
 8001c9e:	3354      	adds	r3, #84	; 0x54
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d109      	bne.n	8001cba <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ca6:	78fb      	ldrb	r3, [r7, #3]
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	212c      	movs	r1, #44	; 0x2c
 8001cac:	fb01 f303 	mul.w	r3, r1, r3
 8001cb0:	4413      	add	r3, r2
 8001cb2:	3342      	adds	r3, #66	; 0x42
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	701a      	strb	r2, [r3, #0]
      break;
 8001cb8:	e055      	b.n	8001d66 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cba:	78fb      	ldrb	r3, [r7, #3]
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	212c      	movs	r1, #44	; 0x2c
 8001cc0:	fb01 f303 	mul.w	r3, r1, r3
 8001cc4:	4413      	add	r3, r2
 8001cc6:	3342      	adds	r3, #66	; 0x42
 8001cc8:	2202      	movs	r2, #2
 8001cca:	701a      	strb	r2, [r3, #0]
      break;
 8001ccc:	e04b      	b.n	8001d66 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001cce:	78bb      	ldrb	r3, [r7, #2]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d11d      	bne.n	8001d10 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001cd4:	78fb      	ldrb	r3, [r7, #3]
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	212c      	movs	r1, #44	; 0x2c
 8001cda:	fb01 f303 	mul.w	r3, r1, r3
 8001cde:	4413      	add	r3, r2
 8001ce0:	3355      	adds	r3, #85	; 0x55
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d109      	bne.n	8001cfc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ce8:	78fb      	ldrb	r3, [r7, #3]
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	212c      	movs	r1, #44	; 0x2c
 8001cee:	fb01 f303 	mul.w	r3, r1, r3
 8001cf2:	4413      	add	r3, r2
 8001cf4:	3342      	adds	r3, #66	; 0x42
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001cfa:	e034      	b.n	8001d66 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cfc:	78fb      	ldrb	r3, [r7, #3]
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	212c      	movs	r1, #44	; 0x2c
 8001d02:	fb01 f303 	mul.w	r3, r1, r3
 8001d06:	4413      	add	r3, r2
 8001d08:	3342      	adds	r3, #66	; 0x42
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	701a      	strb	r2, [r3, #0]
      break;
 8001d0e:	e02a      	b.n	8001d66 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001d10:	78fb      	ldrb	r3, [r7, #3]
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	212c      	movs	r1, #44	; 0x2c
 8001d16:	fb01 f303 	mul.w	r3, r1, r3
 8001d1a:	4413      	add	r3, r2
 8001d1c:	3354      	adds	r3, #84	; 0x54
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d109      	bne.n	8001d38 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d24:	78fb      	ldrb	r3, [r7, #3]
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	212c      	movs	r1, #44	; 0x2c
 8001d2a:	fb01 f303 	mul.w	r3, r1, r3
 8001d2e:	4413      	add	r3, r2
 8001d30:	3342      	adds	r3, #66	; 0x42
 8001d32:	2200      	movs	r2, #0
 8001d34:	701a      	strb	r2, [r3, #0]
      break;
 8001d36:	e016      	b.n	8001d66 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d38:	78fb      	ldrb	r3, [r7, #3]
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	212c      	movs	r1, #44	; 0x2c
 8001d3e:	fb01 f303 	mul.w	r3, r1, r3
 8001d42:	4413      	add	r3, r2
 8001d44:	3342      	adds	r3, #66	; 0x42
 8001d46:	2202      	movs	r2, #2
 8001d48:	701a      	strb	r2, [r3, #0]
      break;
 8001d4a:	e00c      	b.n	8001d66 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d4c:	78fb      	ldrb	r3, [r7, #3]
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	212c      	movs	r1, #44	; 0x2c
 8001d52:	fb01 f303 	mul.w	r3, r1, r3
 8001d56:	4413      	add	r3, r2
 8001d58:	3342      	adds	r3, #66	; 0x42
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	701a      	strb	r2, [r3, #0]
      break;
 8001d5e:	e002      	b.n	8001d66 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001d60:	bf00      	nop
 8001d62:	e000      	b.n	8001d66 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001d64:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001d66:	78fb      	ldrb	r3, [r7, #3]
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	212c      	movs	r1, #44	; 0x2c
 8001d6c:	fb01 f303 	mul.w	r3, r1, r3
 8001d70:	4413      	add	r3, r2
 8001d72:	3344      	adds	r3, #68	; 0x44
 8001d74:	697a      	ldr	r2, [r7, #20]
 8001d76:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001d78:	78fb      	ldrb	r3, [r7, #3]
 8001d7a:	8b3a      	ldrh	r2, [r7, #24]
 8001d7c:	6879      	ldr	r1, [r7, #4]
 8001d7e:	202c      	movs	r0, #44	; 0x2c
 8001d80:	fb00 f303 	mul.w	r3, r0, r3
 8001d84:	440b      	add	r3, r1
 8001d86:	334c      	adds	r3, #76	; 0x4c
 8001d88:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001d8a:	78fb      	ldrb	r3, [r7, #3]
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	212c      	movs	r1, #44	; 0x2c
 8001d90:	fb01 f303 	mul.w	r3, r1, r3
 8001d94:	4413      	add	r3, r2
 8001d96:	3360      	adds	r3, #96	; 0x60
 8001d98:	2200      	movs	r2, #0
 8001d9a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001d9c:	78fb      	ldrb	r3, [r7, #3]
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	212c      	movs	r1, #44	; 0x2c
 8001da2:	fb01 f303 	mul.w	r3, r1, r3
 8001da6:	4413      	add	r3, r2
 8001da8:	3350      	adds	r3, #80	; 0x50
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001dae:	78fb      	ldrb	r3, [r7, #3]
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	212c      	movs	r1, #44	; 0x2c
 8001db4:	fb01 f303 	mul.w	r3, r1, r3
 8001db8:	4413      	add	r3, r2
 8001dba:	3339      	adds	r3, #57	; 0x39
 8001dbc:	78fa      	ldrb	r2, [r7, #3]
 8001dbe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001dc0:	78fb      	ldrb	r3, [r7, #3]
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	212c      	movs	r1, #44	; 0x2c
 8001dc6:	fb01 f303 	mul.w	r3, r1, r3
 8001dca:	4413      	add	r3, r2
 8001dcc:	3361      	adds	r3, #97	; 0x61
 8001dce:	2200      	movs	r2, #0
 8001dd0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6818      	ldr	r0, [r3, #0]
 8001dd6:	78fb      	ldrb	r3, [r7, #3]
 8001dd8:	222c      	movs	r2, #44	; 0x2c
 8001dda:	fb02 f303 	mul.w	r3, r2, r3
 8001dde:	3338      	adds	r3, #56	; 0x38
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	18d1      	adds	r1, r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	461a      	mov	r2, r3
 8001dec:	f004 fece 	bl	8006b8c <USB_HC_StartXfer>
 8001df0:	4603      	mov	r3, r0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop

08001dfc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f004 fbcf 	bl	80065b6 <USB_GetMode>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	f040 80f6 	bne.w	800200c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f004 fbb3 	bl	8006590 <USB_ReadInterrupts>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f000 80ec 	beq.w	800200a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f004 fbaa 	bl	8006590 <USB_ReadInterrupts>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e46:	d104      	bne.n	8001e52 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001e50:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f004 fb9a 	bl	8006590 <USB_ReadInterrupts>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e66:	d104      	bne.n	8001e72 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e70:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f004 fb8a 	bl	8006590 <USB_ReadInterrupts>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e86:	d104      	bne.n	8001e92 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e90:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f004 fb7a 	bl	8006590 <USB_ReadInterrupts>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d103      	bne.n	8001eae <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2202      	movs	r2, #2
 8001eac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f004 fb6c 	bl	8006590 <USB_ReadInterrupts>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ebe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ec2:	d11c      	bne.n	8001efe <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001ecc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10f      	bne.n	8001efe <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001ede:	2110      	movs	r1, #16
 8001ee0:	6938      	ldr	r0, [r7, #16]
 8001ee2:	f004 fa5b 	bl	800639c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001ee6:	6938      	ldr	r0, [r7, #16]
 8001ee8:	f004 fa8c 	bl	8006404 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f004 fc62 	bl	80067bc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f007 fa2f 	bl	800935c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f004 fb44 	bl	8006590 <USB_ReadInterrupts>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f0e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f12:	d102      	bne.n	8001f1a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f001 f89e 	bl	8003056 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f004 fb36 	bl	8006590 <USB_ReadInterrupts>
 8001f24:	4603      	mov	r3, r0
 8001f26:	f003 0308 	and.w	r3, r3, #8
 8001f2a:	2b08      	cmp	r3, #8
 8001f2c:	d106      	bne.n	8001f3c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f007 f9f8 	bl	8009324 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2208      	movs	r2, #8
 8001f3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f004 fb25 	bl	8006590 <USB_ReadInterrupts>
 8001f46:	4603      	mov	r3, r0
 8001f48:	f003 0310 	and.w	r3, r3, #16
 8001f4c:	2b10      	cmp	r3, #16
 8001f4e:	d101      	bne.n	8001f54 <HAL_HCD_IRQHandler+0x158>
 8001f50:	2301      	movs	r3, #1
 8001f52:	e000      	b.n	8001f56 <HAL_HCD_IRQHandler+0x15a>
 8001f54:	2300      	movs	r3, #0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d012      	beq.n	8001f80 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	699a      	ldr	r2, [r3, #24]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 0210 	bic.w	r2, r2, #16
 8001f68:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 ffa1 	bl	8002eb2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	699a      	ldr	r2, [r3, #24]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f042 0210 	orr.w	r2, r2, #16
 8001f7e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f004 fb03 	bl	8006590 <USB_ReadInterrupts>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f94:	d13a      	bne.n	800200c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f004 ff38 	bl	8006e10 <USB_HC_ReadInterrupt>
 8001fa0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	617b      	str	r3, [r7, #20]
 8001fa6:	e025      	b.n	8001ff4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	68ba      	ldr	r2, [r7, #8]
 8001fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d018      	beq.n	8001fee <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	015a      	lsls	r2, r3, #5
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fd2:	d106      	bne.n	8001fe2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	4619      	mov	r1, r3
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f8ab 	bl	8002136 <HCD_HC_IN_IRQHandler>
 8001fe0:	e005      	b.n	8001fee <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 fbf9 	bl	80027e0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	617b      	str	r3, [r7, #20]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d3d4      	bcc.n	8001fa8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002006:	615a      	str	r2, [r3, #20]
 8002008:	e000      	b.n	800200c <HAL_HCD_IRQHandler+0x210>
      return;
 800200a:	bf00      	nop
    }
  }
}
 800200c:	3718      	adds	r7, #24
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b082      	sub	sp, #8
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002020:	2b01      	cmp	r3, #1
 8002022:	d101      	bne.n	8002028 <HAL_HCD_Start+0x16>
 8002024:	2302      	movs	r3, #2
 8002026:	e013      	b.n	8002050 <HAL_HCD_Start+0x3e>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2101      	movs	r1, #1
 8002036:	4618      	mov	r0, r3
 8002038:	f004 fc24 	bl	8006884 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4618      	mov	r0, r3
 8002042:	f004 f93c 	bl	80062be <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002066:	2b01      	cmp	r3, #1
 8002068:	d101      	bne.n	800206e <HAL_HCD_Stop+0x16>
 800206a:	2302      	movs	r3, #2
 800206c:	e00d      	b.n	800208a <HAL_HCD_Stop+0x32>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f005 f812 	bl	80070a4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b082      	sub	sp, #8
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f004 fbc6 	bl	8006830 <USB_ResetPort>
 80020a4:	4603      	mov	r3, r0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80020ae:	b480      	push	{r7}
 80020b0:	b083      	sub	sp, #12
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
 80020b6:	460b      	mov	r3, r1
 80020b8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80020ba:	78fb      	ldrb	r3, [r7, #3]
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	212c      	movs	r1, #44	; 0x2c
 80020c0:	fb01 f303 	mul.w	r3, r1, r3
 80020c4:	4413      	add	r3, r2
 80020c6:	3360      	adds	r3, #96	; 0x60
 80020c8:	781b      	ldrb	r3, [r3, #0]
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
 80020de:	460b      	mov	r3, r1
 80020e0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80020e2:	78fb      	ldrb	r3, [r7, #3]
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	212c      	movs	r1, #44	; 0x2c
 80020e8:	fb01 f303 	mul.w	r3, r1, r3
 80020ec:	4413      	add	r3, r2
 80020ee:	3350      	adds	r3, #80	; 0x50
 80020f0:	681b      	ldr	r3, [r3, #0]
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b082      	sub	sp, #8
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f004 fc0a 	bl	8006924 <USB_GetCurrentFrame>
 8002110:	4603      	mov	r3, r0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b082      	sub	sp, #8
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f004 fbe5 	bl	80068f6 <USB_GetHostSpeed>
 800212c:	4603      	mov	r3, r0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b086      	sub	sp, #24
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
 800213e:	460b      	mov	r3, r1
 8002140:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800214c:	78fb      	ldrb	r3, [r7, #3]
 800214e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	015a      	lsls	r2, r3, #5
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	4413      	add	r3, r2
 8002158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 0304 	and.w	r3, r3, #4
 8002162:	2b04      	cmp	r3, #4
 8002164:	d11a      	bne.n	800219c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	015a      	lsls	r2, r3, #5
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	4413      	add	r3, r2
 800216e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002172:	461a      	mov	r2, r3
 8002174:	2304      	movs	r3, #4
 8002176:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	212c      	movs	r1, #44	; 0x2c
 800217e:	fb01 f303 	mul.w	r3, r1, r3
 8002182:	4413      	add	r3, r2
 8002184:	3361      	adds	r3, #97	; 0x61
 8002186:	2206      	movs	r2, #6
 8002188:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	4611      	mov	r1, r2
 8002194:	4618      	mov	r0, r3
 8002196:	f004 fe4c 	bl	8006e32 <USB_HC_Halt>
 800219a:	e0af      	b.n	80022fc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	015a      	lsls	r2, r3, #5
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	4413      	add	r3, r2
 80021a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021b2:	d11b      	bne.n	80021ec <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	015a      	lsls	r2, r3, #5
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	4413      	add	r3, r2
 80021bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c0:	461a      	mov	r2, r3
 80021c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	212c      	movs	r1, #44	; 0x2c
 80021ce:	fb01 f303 	mul.w	r3, r1, r3
 80021d2:	4413      	add	r3, r2
 80021d4:	3361      	adds	r3, #97	; 0x61
 80021d6:	2207      	movs	r2, #7
 80021d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	b2d2      	uxtb	r2, r2
 80021e2:	4611      	mov	r1, r2
 80021e4:	4618      	mov	r0, r3
 80021e6:	f004 fe24 	bl	8006e32 <USB_HC_Halt>
 80021ea:	e087      	b.n	80022fc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	015a      	lsls	r2, r3, #5
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	4413      	add	r3, r2
 80021f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f003 0320 	and.w	r3, r3, #32
 80021fe:	2b20      	cmp	r3, #32
 8002200:	d109      	bne.n	8002216 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	015a      	lsls	r2, r3, #5
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	4413      	add	r3, r2
 800220a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800220e:	461a      	mov	r2, r3
 8002210:	2320      	movs	r3, #32
 8002212:	6093      	str	r3, [r2, #8]
 8002214:	e072      	b.n	80022fc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	015a      	lsls	r2, r3, #5
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	4413      	add	r3, r2
 800221e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f003 0308 	and.w	r3, r3, #8
 8002228:	2b08      	cmp	r3, #8
 800222a:	d11a      	bne.n	8002262 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	015a      	lsls	r2, r3, #5
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	4413      	add	r3, r2
 8002234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002238:	461a      	mov	r2, r3
 800223a:	2308      	movs	r3, #8
 800223c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	212c      	movs	r1, #44	; 0x2c
 8002244:	fb01 f303 	mul.w	r3, r1, r3
 8002248:	4413      	add	r3, r2
 800224a:	3361      	adds	r3, #97	; 0x61
 800224c:	2205      	movs	r2, #5
 800224e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	4611      	mov	r1, r2
 800225a:	4618      	mov	r0, r3
 800225c:	f004 fde9 	bl	8006e32 <USB_HC_Halt>
 8002260:	e04c      	b.n	80022fc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	015a      	lsls	r2, r3, #5
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4413      	add	r3, r2
 800226a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002274:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002278:	d11b      	bne.n	80022b2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	015a      	lsls	r2, r3, #5
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	4413      	add	r3, r2
 8002282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002286:	461a      	mov	r2, r3
 8002288:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800228c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	212c      	movs	r1, #44	; 0x2c
 8002294:	fb01 f303 	mul.w	r3, r1, r3
 8002298:	4413      	add	r3, r2
 800229a:	3361      	adds	r3, #97	; 0x61
 800229c:	2208      	movs	r2, #8
 800229e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	4611      	mov	r1, r2
 80022aa:	4618      	mov	r0, r3
 80022ac:	f004 fdc1 	bl	8006e32 <USB_HC_Halt>
 80022b0:	e024      	b.n	80022fc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	015a      	lsls	r2, r3, #5
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	4413      	add	r3, r2
 80022ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c4:	2b80      	cmp	r3, #128	; 0x80
 80022c6:	d119      	bne.n	80022fc <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	015a      	lsls	r2, r3, #5
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	4413      	add	r3, r2
 80022d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d4:	461a      	mov	r2, r3
 80022d6:	2380      	movs	r3, #128	; 0x80
 80022d8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	212c      	movs	r1, #44	; 0x2c
 80022e0:	fb01 f303 	mul.w	r3, r1, r3
 80022e4:	4413      	add	r3, r2
 80022e6:	3361      	adds	r3, #97	; 0x61
 80022e8:	2206      	movs	r2, #6
 80022ea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	b2d2      	uxtb	r2, r2
 80022f4:	4611      	mov	r1, r2
 80022f6:	4618      	mov	r0, r3
 80022f8:	f004 fd9b 	bl	8006e32 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	015a      	lsls	r2, r3, #5
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	4413      	add	r3, r2
 8002304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800230e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002312:	d112      	bne.n	800233a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	4611      	mov	r1, r2
 800231e:	4618      	mov	r0, r3
 8002320:	f004 fd87 	bl	8006e32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	015a      	lsls	r2, r3, #5
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	4413      	add	r3, r2
 800232c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002330:	461a      	mov	r2, r3
 8002332:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002336:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002338:	e24e      	b.n	80027d8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	015a      	lsls	r2, r3, #5
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	4413      	add	r3, r2
 8002342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b01      	cmp	r3, #1
 800234e:	f040 80df 	bne.w	8002510 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d019      	beq.n	800238e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	212c      	movs	r1, #44	; 0x2c
 8002360:	fb01 f303 	mul.w	r3, r1, r3
 8002364:	4413      	add	r3, r2
 8002366:	3348      	adds	r3, #72	; 0x48
 8002368:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	0159      	lsls	r1, r3, #5
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	440b      	add	r3, r1
 8002372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800237c:	1ad2      	subs	r2, r2, r3
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	202c      	movs	r0, #44	; 0x2c
 8002384:	fb00 f303 	mul.w	r3, r0, r3
 8002388:	440b      	add	r3, r1
 800238a:	3350      	adds	r3, #80	; 0x50
 800238c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	212c      	movs	r1, #44	; 0x2c
 8002394:	fb01 f303 	mul.w	r3, r1, r3
 8002398:	4413      	add	r3, r2
 800239a:	3361      	adds	r3, #97	; 0x61
 800239c:	2201      	movs	r2, #1
 800239e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	212c      	movs	r1, #44	; 0x2c
 80023a6:	fb01 f303 	mul.w	r3, r1, r3
 80023aa:	4413      	add	r3, r2
 80023ac:	335c      	adds	r3, #92	; 0x5c
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	015a      	lsls	r2, r3, #5
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	4413      	add	r3, r2
 80023ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023be:	461a      	mov	r2, r3
 80023c0:	2301      	movs	r3, #1
 80023c2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	212c      	movs	r1, #44	; 0x2c
 80023ca:	fb01 f303 	mul.w	r3, r1, r3
 80023ce:	4413      	add	r3, r2
 80023d0:	333f      	adds	r3, #63	; 0x3f
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d009      	beq.n	80023ec <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	212c      	movs	r1, #44	; 0x2c
 80023de:	fb01 f303 	mul.w	r3, r1, r3
 80023e2:	4413      	add	r3, r2
 80023e4:	333f      	adds	r3, #63	; 0x3f
 80023e6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d111      	bne.n	8002410 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	4611      	mov	r1, r2
 80023f6:	4618      	mov	r0, r3
 80023f8:	f004 fd1b 	bl	8006e32 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	015a      	lsls	r2, r3, #5
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	4413      	add	r3, r2
 8002404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002408:	461a      	mov	r2, r3
 800240a:	2310      	movs	r3, #16
 800240c:	6093      	str	r3, [r2, #8]
 800240e:	e03a      	b.n	8002486 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	212c      	movs	r1, #44	; 0x2c
 8002416:	fb01 f303 	mul.w	r3, r1, r3
 800241a:	4413      	add	r3, r2
 800241c:	333f      	adds	r3, #63	; 0x3f
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	2b03      	cmp	r3, #3
 8002422:	d009      	beq.n	8002438 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	212c      	movs	r1, #44	; 0x2c
 800242a:	fb01 f303 	mul.w	r3, r1, r3
 800242e:	4413      	add	r3, r2
 8002430:	333f      	adds	r3, #63	; 0x3f
 8002432:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002434:	2b01      	cmp	r3, #1
 8002436:	d126      	bne.n	8002486 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	015a      	lsls	r2, r3, #5
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	4413      	add	r3, r2
 8002440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	0151      	lsls	r1, r2, #5
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	440a      	add	r2, r1
 800244e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002452:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002456:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	212c      	movs	r1, #44	; 0x2c
 800245e:	fb01 f303 	mul.w	r3, r1, r3
 8002462:	4413      	add	r3, r2
 8002464:	3360      	adds	r3, #96	; 0x60
 8002466:	2201      	movs	r2, #1
 8002468:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	b2d9      	uxtb	r1, r3
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	202c      	movs	r0, #44	; 0x2c
 8002474:	fb00 f303 	mul.w	r3, r0, r3
 8002478:	4413      	add	r3, r2
 800247a:	3360      	adds	r3, #96	; 0x60
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	461a      	mov	r2, r3
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f006 ff79 	bl	8009378 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d12b      	bne.n	80024e6 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	212c      	movs	r1, #44	; 0x2c
 8002494:	fb01 f303 	mul.w	r3, r1, r3
 8002498:	4413      	add	r3, r2
 800249a:	3348      	adds	r3, #72	; 0x48
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	202c      	movs	r0, #44	; 0x2c
 80024a4:	fb00 f202 	mul.w	r2, r0, r2
 80024a8:	440a      	add	r2, r1
 80024aa:	3240      	adds	r2, #64	; 0x40
 80024ac:	8812      	ldrh	r2, [r2, #0]
 80024ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f000 818e 	beq.w	80027d8 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	212c      	movs	r1, #44	; 0x2c
 80024c2:	fb01 f303 	mul.w	r3, r1, r3
 80024c6:	4413      	add	r3, r2
 80024c8:	3354      	adds	r3, #84	; 0x54
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	f083 0301 	eor.w	r3, r3, #1
 80024d0:	b2d8      	uxtb	r0, r3
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	212c      	movs	r1, #44	; 0x2c
 80024d8:	fb01 f303 	mul.w	r3, r1, r3
 80024dc:	4413      	add	r3, r2
 80024de:	3354      	adds	r3, #84	; 0x54
 80024e0:	4602      	mov	r2, r0
 80024e2:	701a      	strb	r2, [r3, #0]
}
 80024e4:	e178      	b.n	80027d8 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	212c      	movs	r1, #44	; 0x2c
 80024ec:	fb01 f303 	mul.w	r3, r1, r3
 80024f0:	4413      	add	r3, r2
 80024f2:	3354      	adds	r3, #84	; 0x54
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	f083 0301 	eor.w	r3, r3, #1
 80024fa:	b2d8      	uxtb	r0, r3
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	212c      	movs	r1, #44	; 0x2c
 8002502:	fb01 f303 	mul.w	r3, r1, r3
 8002506:	4413      	add	r3, r2
 8002508:	3354      	adds	r3, #84	; 0x54
 800250a:	4602      	mov	r2, r0
 800250c:	701a      	strb	r2, [r3, #0]
}
 800250e:	e163      	b.n	80027d8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	015a      	lsls	r2, r3, #5
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	4413      	add	r3, r2
 8002518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b02      	cmp	r3, #2
 8002524:	f040 80f6 	bne.w	8002714 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	212c      	movs	r1, #44	; 0x2c
 800252e:	fb01 f303 	mul.w	r3, r1, r3
 8002532:	4413      	add	r3, r2
 8002534:	3361      	adds	r3, #97	; 0x61
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d109      	bne.n	8002550 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	212c      	movs	r1, #44	; 0x2c
 8002542:	fb01 f303 	mul.w	r3, r1, r3
 8002546:	4413      	add	r3, r2
 8002548:	3360      	adds	r3, #96	; 0x60
 800254a:	2201      	movs	r2, #1
 800254c:	701a      	strb	r2, [r3, #0]
 800254e:	e0c9      	b.n	80026e4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	212c      	movs	r1, #44	; 0x2c
 8002556:	fb01 f303 	mul.w	r3, r1, r3
 800255a:	4413      	add	r3, r2
 800255c:	3361      	adds	r3, #97	; 0x61
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b05      	cmp	r3, #5
 8002562:	d109      	bne.n	8002578 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	212c      	movs	r1, #44	; 0x2c
 800256a:	fb01 f303 	mul.w	r3, r1, r3
 800256e:	4413      	add	r3, r2
 8002570:	3360      	adds	r3, #96	; 0x60
 8002572:	2205      	movs	r2, #5
 8002574:	701a      	strb	r2, [r3, #0]
 8002576:	e0b5      	b.n	80026e4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	212c      	movs	r1, #44	; 0x2c
 800257e:	fb01 f303 	mul.w	r3, r1, r3
 8002582:	4413      	add	r3, r2
 8002584:	3361      	adds	r3, #97	; 0x61
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b06      	cmp	r3, #6
 800258a:	d009      	beq.n	80025a0 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	212c      	movs	r1, #44	; 0x2c
 8002592:	fb01 f303 	mul.w	r3, r1, r3
 8002596:	4413      	add	r3, r2
 8002598:	3361      	adds	r3, #97	; 0x61
 800259a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800259c:	2b08      	cmp	r3, #8
 800259e:	d150      	bne.n	8002642 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	212c      	movs	r1, #44	; 0x2c
 80025a6:	fb01 f303 	mul.w	r3, r1, r3
 80025aa:	4413      	add	r3, r2
 80025ac:	335c      	adds	r3, #92	; 0x5c
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	1c5a      	adds	r2, r3, #1
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	202c      	movs	r0, #44	; 0x2c
 80025b8:	fb00 f303 	mul.w	r3, r0, r3
 80025bc:	440b      	add	r3, r1
 80025be:	335c      	adds	r3, #92	; 0x5c
 80025c0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	212c      	movs	r1, #44	; 0x2c
 80025c8:	fb01 f303 	mul.w	r3, r1, r3
 80025cc:	4413      	add	r3, r2
 80025ce:	335c      	adds	r3, #92	; 0x5c
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d912      	bls.n	80025fc <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	212c      	movs	r1, #44	; 0x2c
 80025dc:	fb01 f303 	mul.w	r3, r1, r3
 80025e0:	4413      	add	r3, r2
 80025e2:	335c      	adds	r3, #92	; 0x5c
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	212c      	movs	r1, #44	; 0x2c
 80025ee:	fb01 f303 	mul.w	r3, r1, r3
 80025f2:	4413      	add	r3, r2
 80025f4:	3360      	adds	r3, #96	; 0x60
 80025f6:	2204      	movs	r2, #4
 80025f8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80025fa:	e073      	b.n	80026e4 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	212c      	movs	r1, #44	; 0x2c
 8002602:	fb01 f303 	mul.w	r3, r1, r3
 8002606:	4413      	add	r3, r2
 8002608:	3360      	adds	r3, #96	; 0x60
 800260a:	2202      	movs	r2, #2
 800260c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	015a      	lsls	r2, r3, #5
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	4413      	add	r3, r2
 8002616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002624:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800262c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	015a      	lsls	r2, r3, #5
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	4413      	add	r3, r2
 8002636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800263a:	461a      	mov	r2, r3
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002640:	e050      	b.n	80026e4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	212c      	movs	r1, #44	; 0x2c
 8002648:	fb01 f303 	mul.w	r3, r1, r3
 800264c:	4413      	add	r3, r2
 800264e:	3361      	adds	r3, #97	; 0x61
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	2b03      	cmp	r3, #3
 8002654:	d122      	bne.n	800269c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	212c      	movs	r1, #44	; 0x2c
 800265c:	fb01 f303 	mul.w	r3, r1, r3
 8002660:	4413      	add	r3, r2
 8002662:	3360      	adds	r3, #96	; 0x60
 8002664:	2202      	movs	r2, #2
 8002666:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	015a      	lsls	r2, r3, #5
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4413      	add	r3, r2
 8002670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800267e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002686:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	015a      	lsls	r2, r3, #5
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	4413      	add	r3, r2
 8002690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002694:	461a      	mov	r2, r3
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	6013      	str	r3, [r2, #0]
 800269a:	e023      	b.n	80026e4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	212c      	movs	r1, #44	; 0x2c
 80026a2:	fb01 f303 	mul.w	r3, r1, r3
 80026a6:	4413      	add	r3, r2
 80026a8:	3361      	adds	r3, #97	; 0x61
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	2b07      	cmp	r3, #7
 80026ae:	d119      	bne.n	80026e4 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	212c      	movs	r1, #44	; 0x2c
 80026b6:	fb01 f303 	mul.w	r3, r1, r3
 80026ba:	4413      	add	r3, r2
 80026bc:	335c      	adds	r3, #92	; 0x5c
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	1c5a      	adds	r2, r3, #1
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	202c      	movs	r0, #44	; 0x2c
 80026c8:	fb00 f303 	mul.w	r3, r0, r3
 80026cc:	440b      	add	r3, r1
 80026ce:	335c      	adds	r3, #92	; 0x5c
 80026d0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	212c      	movs	r1, #44	; 0x2c
 80026d8:	fb01 f303 	mul.w	r3, r1, r3
 80026dc:	4413      	add	r3, r2
 80026de:	3360      	adds	r3, #96	; 0x60
 80026e0:	2204      	movs	r2, #4
 80026e2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	015a      	lsls	r2, r3, #5
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	4413      	add	r3, r2
 80026ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f0:	461a      	mov	r2, r3
 80026f2:	2302      	movs	r3, #2
 80026f4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	b2d9      	uxtb	r1, r3
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	202c      	movs	r0, #44	; 0x2c
 8002700:	fb00 f303 	mul.w	r3, r0, r3
 8002704:	4413      	add	r3, r2
 8002706:	3360      	adds	r3, #96	; 0x60
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	461a      	mov	r2, r3
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f006 fe33 	bl	8009378 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002712:	e061      	b.n	80027d8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	015a      	lsls	r2, r3, #5
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	4413      	add	r3, r2
 800271c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f003 0310 	and.w	r3, r3, #16
 8002726:	2b10      	cmp	r3, #16
 8002728:	d156      	bne.n	80027d8 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	212c      	movs	r1, #44	; 0x2c
 8002730:	fb01 f303 	mul.w	r3, r1, r3
 8002734:	4413      	add	r3, r2
 8002736:	333f      	adds	r3, #63	; 0x3f
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	2b03      	cmp	r3, #3
 800273c:	d111      	bne.n	8002762 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	212c      	movs	r1, #44	; 0x2c
 8002744:	fb01 f303 	mul.w	r3, r1, r3
 8002748:	4413      	add	r3, r2
 800274a:	335c      	adds	r3, #92	; 0x5c
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	b2d2      	uxtb	r2, r2
 8002758:	4611      	mov	r1, r2
 800275a:	4618      	mov	r0, r3
 800275c:	f004 fb69 	bl	8006e32 <USB_HC_Halt>
 8002760:	e031      	b.n	80027c6 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	212c      	movs	r1, #44	; 0x2c
 8002768:	fb01 f303 	mul.w	r3, r1, r3
 800276c:	4413      	add	r3, r2
 800276e:	333f      	adds	r3, #63	; 0x3f
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d009      	beq.n	800278a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	212c      	movs	r1, #44	; 0x2c
 800277c:	fb01 f303 	mul.w	r3, r1, r3
 8002780:	4413      	add	r3, r2
 8002782:	333f      	adds	r3, #63	; 0x3f
 8002784:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002786:	2b02      	cmp	r3, #2
 8002788:	d11d      	bne.n	80027c6 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	212c      	movs	r1, #44	; 0x2c
 8002790:	fb01 f303 	mul.w	r3, r1, r3
 8002794:	4413      	add	r3, r2
 8002796:	335c      	adds	r3, #92	; 0x5c
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d110      	bne.n	80027c6 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	212c      	movs	r1, #44	; 0x2c
 80027aa:	fb01 f303 	mul.w	r3, r1, r3
 80027ae:	4413      	add	r3, r2
 80027b0:	3361      	adds	r3, #97	; 0x61
 80027b2:	2203      	movs	r2, #3
 80027b4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	b2d2      	uxtb	r2, r2
 80027be:	4611      	mov	r1, r2
 80027c0:	4618      	mov	r0, r3
 80027c2:	f004 fb36 	bl	8006e32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	015a      	lsls	r2, r3, #5
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	4413      	add	r3, r2
 80027ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d2:	461a      	mov	r2, r3
 80027d4:	2310      	movs	r3, #16
 80027d6:	6093      	str	r3, [r2, #8]
}
 80027d8:	bf00      	nop
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b088      	sub	sp, #32
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	460b      	mov	r3, r1
 80027ea:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80027f6:	78fb      	ldrb	r3, [r7, #3]
 80027f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	015a      	lsls	r2, r3, #5
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	4413      	add	r3, r2
 8002802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b04      	cmp	r3, #4
 800280e:	d11a      	bne.n	8002846 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	015a      	lsls	r2, r3, #5
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	4413      	add	r3, r2
 8002818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800281c:	461a      	mov	r2, r3
 800281e:	2304      	movs	r3, #4
 8002820:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	212c      	movs	r1, #44	; 0x2c
 8002828:	fb01 f303 	mul.w	r3, r1, r3
 800282c:	4413      	add	r3, r2
 800282e:	3361      	adds	r3, #97	; 0x61
 8002830:	2206      	movs	r2, #6
 8002832:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	4611      	mov	r1, r2
 800283e:	4618      	mov	r0, r3
 8002840:	f004 faf7 	bl	8006e32 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002844:	e331      	b.n	8002eaa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	015a      	lsls	r2, r3, #5
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	4413      	add	r3, r2
 800284e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f003 0320 	and.w	r3, r3, #32
 8002858:	2b20      	cmp	r3, #32
 800285a:	d12e      	bne.n	80028ba <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	015a      	lsls	r2, r3, #5
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	4413      	add	r3, r2
 8002864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002868:	461a      	mov	r2, r3
 800286a:	2320      	movs	r3, #32
 800286c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	212c      	movs	r1, #44	; 0x2c
 8002874:	fb01 f303 	mul.w	r3, r1, r3
 8002878:	4413      	add	r3, r2
 800287a:	333d      	adds	r3, #61	; 0x3d
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	2b01      	cmp	r3, #1
 8002880:	f040 8313 	bne.w	8002eaa <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	212c      	movs	r1, #44	; 0x2c
 800288a:	fb01 f303 	mul.w	r3, r1, r3
 800288e:	4413      	add	r3, r2
 8002890:	333d      	adds	r3, #61	; 0x3d
 8002892:	2200      	movs	r2, #0
 8002894:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	212c      	movs	r1, #44	; 0x2c
 800289c:	fb01 f303 	mul.w	r3, r1, r3
 80028a0:	4413      	add	r3, r2
 80028a2:	3360      	adds	r3, #96	; 0x60
 80028a4:	2202      	movs	r2, #2
 80028a6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	4611      	mov	r1, r2
 80028b2:	4618      	mov	r0, r3
 80028b4:	f004 fabd 	bl	8006e32 <USB_HC_Halt>
}
 80028b8:	e2f7      	b.n	8002eaa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	015a      	lsls	r2, r3, #5
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	4413      	add	r3, r2
 80028c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028d0:	d112      	bne.n	80028f8 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	015a      	lsls	r2, r3, #5
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	4413      	add	r3, r2
 80028da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028de:	461a      	mov	r2, r3
 80028e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028e4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	4611      	mov	r1, r2
 80028f0:	4618      	mov	r0, r3
 80028f2:	f004 fa9e 	bl	8006e32 <USB_HC_Halt>
}
 80028f6:	e2d8      	b.n	8002eaa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	015a      	lsls	r2, r3, #5
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	4413      	add	r3, r2
 8002900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b01      	cmp	r3, #1
 800290c:	d140      	bne.n	8002990 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	212c      	movs	r1, #44	; 0x2c
 8002914:	fb01 f303 	mul.w	r3, r1, r3
 8002918:	4413      	add	r3, r2
 800291a:	335c      	adds	r3, #92	; 0x5c
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	015a      	lsls	r2, r3, #5
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	4413      	add	r3, r2
 8002928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002932:	2b40      	cmp	r3, #64	; 0x40
 8002934:	d111      	bne.n	800295a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	212c      	movs	r1, #44	; 0x2c
 800293c:	fb01 f303 	mul.w	r3, r1, r3
 8002940:	4413      	add	r3, r2
 8002942:	333d      	adds	r3, #61	; 0x3d
 8002944:	2201      	movs	r2, #1
 8002946:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	015a      	lsls	r2, r3, #5
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	4413      	add	r3, r2
 8002950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002954:	461a      	mov	r2, r3
 8002956:	2340      	movs	r3, #64	; 0x40
 8002958:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	015a      	lsls	r2, r3, #5
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	4413      	add	r3, r2
 8002962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002966:	461a      	mov	r2, r3
 8002968:	2301      	movs	r3, #1
 800296a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	212c      	movs	r1, #44	; 0x2c
 8002972:	fb01 f303 	mul.w	r3, r1, r3
 8002976:	4413      	add	r3, r2
 8002978:	3361      	adds	r3, #97	; 0x61
 800297a:	2201      	movs	r2, #1
 800297c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	4611      	mov	r1, r2
 8002988:	4618      	mov	r0, r3
 800298a:	f004 fa52 	bl	8006e32 <USB_HC_Halt>
}
 800298e:	e28c      	b.n	8002eaa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	015a      	lsls	r2, r3, #5
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	4413      	add	r3, r2
 8002998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a2:	2b40      	cmp	r3, #64	; 0x40
 80029a4:	d12c      	bne.n	8002a00 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	212c      	movs	r1, #44	; 0x2c
 80029ac:	fb01 f303 	mul.w	r3, r1, r3
 80029b0:	4413      	add	r3, r2
 80029b2:	3361      	adds	r3, #97	; 0x61
 80029b4:	2204      	movs	r2, #4
 80029b6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	212c      	movs	r1, #44	; 0x2c
 80029be:	fb01 f303 	mul.w	r3, r1, r3
 80029c2:	4413      	add	r3, r2
 80029c4:	333d      	adds	r3, #61	; 0x3d
 80029c6:	2201      	movs	r2, #1
 80029c8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	212c      	movs	r1, #44	; 0x2c
 80029d0:	fb01 f303 	mul.w	r3, r1, r3
 80029d4:	4413      	add	r3, r2
 80029d6:	335c      	adds	r3, #92	; 0x5c
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	697a      	ldr	r2, [r7, #20]
 80029e2:	b2d2      	uxtb	r2, r2
 80029e4:	4611      	mov	r1, r2
 80029e6:	4618      	mov	r0, r3
 80029e8:	f004 fa23 	bl	8006e32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	015a      	lsls	r2, r3, #5
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	4413      	add	r3, r2
 80029f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f8:	461a      	mov	r2, r3
 80029fa:	2340      	movs	r3, #64	; 0x40
 80029fc:	6093      	str	r3, [r2, #8]
}
 80029fe:	e254      	b.n	8002eaa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	015a      	lsls	r2, r3, #5
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	4413      	add	r3, r2
 8002a08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 0308 	and.w	r3, r3, #8
 8002a12:	2b08      	cmp	r3, #8
 8002a14:	d11a      	bne.n	8002a4c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	015a      	lsls	r2, r3, #5
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a22:	461a      	mov	r2, r3
 8002a24:	2308      	movs	r3, #8
 8002a26:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	212c      	movs	r1, #44	; 0x2c
 8002a2e:	fb01 f303 	mul.w	r3, r1, r3
 8002a32:	4413      	add	r3, r2
 8002a34:	3361      	adds	r3, #97	; 0x61
 8002a36:	2205      	movs	r2, #5
 8002a38:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	4611      	mov	r1, r2
 8002a44:	4618      	mov	r0, r3
 8002a46:	f004 f9f4 	bl	8006e32 <USB_HC_Halt>
}
 8002a4a:	e22e      	b.n	8002eaa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	015a      	lsls	r2, r3, #5
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	4413      	add	r3, r2
 8002a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 0310 	and.w	r3, r3, #16
 8002a5e:	2b10      	cmp	r3, #16
 8002a60:	d140      	bne.n	8002ae4 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	212c      	movs	r1, #44	; 0x2c
 8002a68:	fb01 f303 	mul.w	r3, r1, r3
 8002a6c:	4413      	add	r3, r2
 8002a6e:	335c      	adds	r3, #92	; 0x5c
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	212c      	movs	r1, #44	; 0x2c
 8002a7a:	fb01 f303 	mul.w	r3, r1, r3
 8002a7e:	4413      	add	r3, r2
 8002a80:	3361      	adds	r3, #97	; 0x61
 8002a82:	2203      	movs	r2, #3
 8002a84:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	212c      	movs	r1, #44	; 0x2c
 8002a8c:	fb01 f303 	mul.w	r3, r1, r3
 8002a90:	4413      	add	r3, r2
 8002a92:	333d      	adds	r3, #61	; 0x3d
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d112      	bne.n	8002ac0 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	212c      	movs	r1, #44	; 0x2c
 8002aa0:	fb01 f303 	mul.w	r3, r1, r3
 8002aa4:	4413      	add	r3, r2
 8002aa6:	333c      	adds	r3, #60	; 0x3c
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d108      	bne.n	8002ac0 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	212c      	movs	r1, #44	; 0x2c
 8002ab4:	fb01 f303 	mul.w	r3, r1, r3
 8002ab8:	4413      	add	r3, r2
 8002aba:	333d      	adds	r3, #61	; 0x3d
 8002abc:	2201      	movs	r2, #1
 8002abe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	b2d2      	uxtb	r2, r2
 8002ac8:	4611      	mov	r1, r2
 8002aca:	4618      	mov	r0, r3
 8002acc:	f004 f9b1 	bl	8006e32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	015a      	lsls	r2, r3, #5
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002adc:	461a      	mov	r2, r3
 8002ade:	2310      	movs	r3, #16
 8002ae0:	6093      	str	r3, [r2, #8]
}
 8002ae2:	e1e2      	b.n	8002eaa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	015a      	lsls	r2, r3, #5
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	4413      	add	r3, r2
 8002aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af6:	2b80      	cmp	r3, #128	; 0x80
 8002af8:	d164      	bne.n	8002bc4 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d111      	bne.n	8002b26 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	212c      	movs	r1, #44	; 0x2c
 8002b08:	fb01 f303 	mul.w	r3, r1, r3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	3361      	adds	r3, #97	; 0x61
 8002b10:	2206      	movs	r2, #6
 8002b12:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	4611      	mov	r1, r2
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f004 f987 	bl	8006e32 <USB_HC_Halt>
 8002b24:	e044      	b.n	8002bb0 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	212c      	movs	r1, #44	; 0x2c
 8002b2c:	fb01 f303 	mul.w	r3, r1, r3
 8002b30:	4413      	add	r3, r2
 8002b32:	335c      	adds	r3, #92	; 0x5c
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	1c5a      	adds	r2, r3, #1
 8002b38:	6879      	ldr	r1, [r7, #4]
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	202c      	movs	r0, #44	; 0x2c
 8002b3e:	fb00 f303 	mul.w	r3, r0, r3
 8002b42:	440b      	add	r3, r1
 8002b44:	335c      	adds	r3, #92	; 0x5c
 8002b46:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	212c      	movs	r1, #44	; 0x2c
 8002b4e:	fb01 f303 	mul.w	r3, r1, r3
 8002b52:	4413      	add	r3, r2
 8002b54:	335c      	adds	r3, #92	; 0x5c
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d920      	bls.n	8002b9e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	212c      	movs	r1, #44	; 0x2c
 8002b62:	fb01 f303 	mul.w	r3, r1, r3
 8002b66:	4413      	add	r3, r2
 8002b68:	335c      	adds	r3, #92	; 0x5c
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	212c      	movs	r1, #44	; 0x2c
 8002b74:	fb01 f303 	mul.w	r3, r1, r3
 8002b78:	4413      	add	r3, r2
 8002b7a:	3360      	adds	r3, #96	; 0x60
 8002b7c:	2204      	movs	r2, #4
 8002b7e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	b2d9      	uxtb	r1, r3
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	202c      	movs	r0, #44	; 0x2c
 8002b8a:	fb00 f303 	mul.w	r3, r0, r3
 8002b8e:	4413      	add	r3, r2
 8002b90:	3360      	adds	r3, #96	; 0x60
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	461a      	mov	r2, r3
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f006 fbee 	bl	8009378 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002b9c:	e008      	b.n	8002bb0 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	212c      	movs	r1, #44	; 0x2c
 8002ba4:	fb01 f303 	mul.w	r3, r1, r3
 8002ba8:	4413      	add	r3, r2
 8002baa:	3360      	adds	r3, #96	; 0x60
 8002bac:	2202      	movs	r2, #2
 8002bae:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	015a      	lsls	r2, r3, #5
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	2380      	movs	r3, #128	; 0x80
 8002bc0:	6093      	str	r3, [r2, #8]
}
 8002bc2:	e172      	b.n	8002eaa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	015a      	lsls	r2, r3, #5
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	4413      	add	r3, r2
 8002bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bda:	d11b      	bne.n	8002c14 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	212c      	movs	r1, #44	; 0x2c
 8002be2:	fb01 f303 	mul.w	r3, r1, r3
 8002be6:	4413      	add	r3, r2
 8002be8:	3361      	adds	r3, #97	; 0x61
 8002bea:	2208      	movs	r2, #8
 8002bec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	b2d2      	uxtb	r2, r2
 8002bf6:	4611      	mov	r1, r2
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f004 f91a 	bl	8006e32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	015a      	lsls	r2, r3, #5
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	4413      	add	r3, r2
 8002c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c10:	6093      	str	r3, [r2, #8]
}
 8002c12:	e14a      	b.n	8002eaa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	015a      	lsls	r2, r3, #5
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	f040 813f 	bne.w	8002eaa <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	212c      	movs	r1, #44	; 0x2c
 8002c32:	fb01 f303 	mul.w	r3, r1, r3
 8002c36:	4413      	add	r3, r2
 8002c38:	3361      	adds	r3, #97	; 0x61
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d17d      	bne.n	8002d3c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	212c      	movs	r1, #44	; 0x2c
 8002c46:	fb01 f303 	mul.w	r3, r1, r3
 8002c4a:	4413      	add	r3, r2
 8002c4c:	3360      	adds	r3, #96	; 0x60
 8002c4e:	2201      	movs	r2, #1
 8002c50:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	212c      	movs	r1, #44	; 0x2c
 8002c58:	fb01 f303 	mul.w	r3, r1, r3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	333f      	adds	r3, #63	; 0x3f
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d00a      	beq.n	8002c7c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	212c      	movs	r1, #44	; 0x2c
 8002c6c:	fb01 f303 	mul.w	r3, r1, r3
 8002c70:	4413      	add	r3, r2
 8002c72:	333f      	adds	r3, #63	; 0x3f
 8002c74:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002c76:	2b03      	cmp	r3, #3
 8002c78:	f040 8100 	bne.w	8002e7c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d113      	bne.n	8002cac <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	212c      	movs	r1, #44	; 0x2c
 8002c8a:	fb01 f303 	mul.w	r3, r1, r3
 8002c8e:	4413      	add	r3, r2
 8002c90:	3355      	adds	r3, #85	; 0x55
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	f083 0301 	eor.w	r3, r3, #1
 8002c98:	b2d8      	uxtb	r0, r3
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	212c      	movs	r1, #44	; 0x2c
 8002ca0:	fb01 f303 	mul.w	r3, r1, r3
 8002ca4:	4413      	add	r3, r2
 8002ca6:	3355      	adds	r3, #85	; 0x55
 8002ca8:	4602      	mov	r2, r0
 8002caa:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	f040 80e3 	bne.w	8002e7c <HCD_HC_OUT_IRQHandler+0x69c>
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	212c      	movs	r1, #44	; 0x2c
 8002cbc:	fb01 f303 	mul.w	r3, r1, r3
 8002cc0:	4413      	add	r3, r2
 8002cc2:	334c      	adds	r3, #76	; 0x4c
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f000 80d8 	beq.w	8002e7c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	212c      	movs	r1, #44	; 0x2c
 8002cd2:	fb01 f303 	mul.w	r3, r1, r3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	334c      	adds	r3, #76	; 0x4c
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	202c      	movs	r0, #44	; 0x2c
 8002ce2:	fb00 f202 	mul.w	r2, r0, r2
 8002ce6:	440a      	add	r2, r1
 8002ce8:	3240      	adds	r2, #64	; 0x40
 8002cea:	8812      	ldrh	r2, [r2, #0]
 8002cec:	4413      	add	r3, r2
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	6879      	ldr	r1, [r7, #4]
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	202c      	movs	r0, #44	; 0x2c
 8002cf6:	fb00 f202 	mul.w	r2, r0, r2
 8002cfa:	440a      	add	r2, r1
 8002cfc:	3240      	adds	r2, #64	; 0x40
 8002cfe:	8812      	ldrh	r2, [r2, #0]
 8002d00:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d04:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 80b5 	beq.w	8002e7c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	212c      	movs	r1, #44	; 0x2c
 8002d18:	fb01 f303 	mul.w	r3, r1, r3
 8002d1c:	4413      	add	r3, r2
 8002d1e:	3355      	adds	r3, #85	; 0x55
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	f083 0301 	eor.w	r3, r3, #1
 8002d26:	b2d8      	uxtb	r0, r3
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	212c      	movs	r1, #44	; 0x2c
 8002d2e:	fb01 f303 	mul.w	r3, r1, r3
 8002d32:	4413      	add	r3, r2
 8002d34:	3355      	adds	r3, #85	; 0x55
 8002d36:	4602      	mov	r2, r0
 8002d38:	701a      	strb	r2, [r3, #0]
 8002d3a:	e09f      	b.n	8002e7c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	212c      	movs	r1, #44	; 0x2c
 8002d42:	fb01 f303 	mul.w	r3, r1, r3
 8002d46:	4413      	add	r3, r2
 8002d48:	3361      	adds	r3, #97	; 0x61
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	2b03      	cmp	r3, #3
 8002d4e:	d109      	bne.n	8002d64 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	212c      	movs	r1, #44	; 0x2c
 8002d56:	fb01 f303 	mul.w	r3, r1, r3
 8002d5a:	4413      	add	r3, r2
 8002d5c:	3360      	adds	r3, #96	; 0x60
 8002d5e:	2202      	movs	r2, #2
 8002d60:	701a      	strb	r2, [r3, #0]
 8002d62:	e08b      	b.n	8002e7c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	212c      	movs	r1, #44	; 0x2c
 8002d6a:	fb01 f303 	mul.w	r3, r1, r3
 8002d6e:	4413      	add	r3, r2
 8002d70:	3361      	adds	r3, #97	; 0x61
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	2b04      	cmp	r3, #4
 8002d76:	d109      	bne.n	8002d8c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	212c      	movs	r1, #44	; 0x2c
 8002d7e:	fb01 f303 	mul.w	r3, r1, r3
 8002d82:	4413      	add	r3, r2
 8002d84:	3360      	adds	r3, #96	; 0x60
 8002d86:	2202      	movs	r2, #2
 8002d88:	701a      	strb	r2, [r3, #0]
 8002d8a:	e077      	b.n	8002e7c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	212c      	movs	r1, #44	; 0x2c
 8002d92:	fb01 f303 	mul.w	r3, r1, r3
 8002d96:	4413      	add	r3, r2
 8002d98:	3361      	adds	r3, #97	; 0x61
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	2b05      	cmp	r3, #5
 8002d9e:	d109      	bne.n	8002db4 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	212c      	movs	r1, #44	; 0x2c
 8002da6:	fb01 f303 	mul.w	r3, r1, r3
 8002daa:	4413      	add	r3, r2
 8002dac:	3360      	adds	r3, #96	; 0x60
 8002dae:	2205      	movs	r2, #5
 8002db0:	701a      	strb	r2, [r3, #0]
 8002db2:	e063      	b.n	8002e7c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	212c      	movs	r1, #44	; 0x2c
 8002dba:	fb01 f303 	mul.w	r3, r1, r3
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3361      	adds	r3, #97	; 0x61
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	2b06      	cmp	r3, #6
 8002dc6:	d009      	beq.n	8002ddc <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	212c      	movs	r1, #44	; 0x2c
 8002dce:	fb01 f303 	mul.w	r3, r1, r3
 8002dd2:	4413      	add	r3, r2
 8002dd4:	3361      	adds	r3, #97	; 0x61
 8002dd6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002dd8:	2b08      	cmp	r3, #8
 8002dda:	d14f      	bne.n	8002e7c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	212c      	movs	r1, #44	; 0x2c
 8002de2:	fb01 f303 	mul.w	r3, r1, r3
 8002de6:	4413      	add	r3, r2
 8002de8:	335c      	adds	r3, #92	; 0x5c
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	1c5a      	adds	r2, r3, #1
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	202c      	movs	r0, #44	; 0x2c
 8002df4:	fb00 f303 	mul.w	r3, r0, r3
 8002df8:	440b      	add	r3, r1
 8002dfa:	335c      	adds	r3, #92	; 0x5c
 8002dfc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	212c      	movs	r1, #44	; 0x2c
 8002e04:	fb01 f303 	mul.w	r3, r1, r3
 8002e08:	4413      	add	r3, r2
 8002e0a:	335c      	adds	r3, #92	; 0x5c
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d912      	bls.n	8002e38 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	212c      	movs	r1, #44	; 0x2c
 8002e18:	fb01 f303 	mul.w	r3, r1, r3
 8002e1c:	4413      	add	r3, r2
 8002e1e:	335c      	adds	r3, #92	; 0x5c
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	212c      	movs	r1, #44	; 0x2c
 8002e2a:	fb01 f303 	mul.w	r3, r1, r3
 8002e2e:	4413      	add	r3, r2
 8002e30:	3360      	adds	r3, #96	; 0x60
 8002e32:	2204      	movs	r2, #4
 8002e34:	701a      	strb	r2, [r3, #0]
 8002e36:	e021      	b.n	8002e7c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	212c      	movs	r1, #44	; 0x2c
 8002e3e:	fb01 f303 	mul.w	r3, r1, r3
 8002e42:	4413      	add	r3, r2
 8002e44:	3360      	adds	r3, #96	; 0x60
 8002e46:	2202      	movs	r2, #2
 8002e48:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	015a      	lsls	r2, r3, #5
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	4413      	add	r3, r2
 8002e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e60:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e68:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	015a      	lsls	r2, r3, #5
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	4413      	add	r3, r2
 8002e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e76:	461a      	mov	r2, r3
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	015a      	lsls	r2, r3, #5
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	4413      	add	r3, r2
 8002e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e88:	461a      	mov	r2, r3
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	b2d9      	uxtb	r1, r3
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	202c      	movs	r0, #44	; 0x2c
 8002e98:	fb00 f303 	mul.w	r3, r0, r3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	3360      	adds	r3, #96	; 0x60
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f006 fa67 	bl	8009378 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002eaa:	bf00      	nop
 8002eac:	3720      	adds	r7, #32
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b08a      	sub	sp, #40	; 0x28
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	f003 030f 	and.w	r3, r3, #15
 8002ed2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	0c5b      	lsrs	r3, r3, #17
 8002ed8:	f003 030f 	and.w	r3, r3, #15
 8002edc:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	091b      	lsrs	r3, r3, #4
 8002ee2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ee6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d004      	beq.n	8002ef8 <HCD_RXQLVL_IRQHandler+0x46>
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	2b05      	cmp	r3, #5
 8002ef2:	f000 80a9 	beq.w	8003048 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002ef6:	e0aa      	b.n	800304e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f000 80a6 	beq.w	800304c <HCD_RXQLVL_IRQHandler+0x19a>
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	212c      	movs	r1, #44	; 0x2c
 8002f06:	fb01 f303 	mul.w	r3, r1, r3
 8002f0a:	4413      	add	r3, r2
 8002f0c:	3344      	adds	r3, #68	; 0x44
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f000 809b 	beq.w	800304c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	212c      	movs	r1, #44	; 0x2c
 8002f1c:	fb01 f303 	mul.w	r3, r1, r3
 8002f20:	4413      	add	r3, r2
 8002f22:	3350      	adds	r3, #80	; 0x50
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	441a      	add	r2, r3
 8002f2a:	6879      	ldr	r1, [r7, #4]
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	202c      	movs	r0, #44	; 0x2c
 8002f30:	fb00 f303 	mul.w	r3, r0, r3
 8002f34:	440b      	add	r3, r1
 8002f36:	334c      	adds	r3, #76	; 0x4c
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d87a      	bhi.n	8003034 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6818      	ldr	r0, [r3, #0]
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	212c      	movs	r1, #44	; 0x2c
 8002f48:	fb01 f303 	mul.w	r3, r1, r3
 8002f4c:	4413      	add	r3, r2
 8002f4e:	3344      	adds	r3, #68	; 0x44
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	b292      	uxth	r2, r2
 8002f56:	4619      	mov	r1, r3
 8002f58:	f003 fac2 	bl	80064e0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	212c      	movs	r1, #44	; 0x2c
 8002f62:	fb01 f303 	mul.w	r3, r1, r3
 8002f66:	4413      	add	r3, r2
 8002f68:	3344      	adds	r3, #68	; 0x44
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	441a      	add	r2, r3
 8002f70:	6879      	ldr	r1, [r7, #4]
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	202c      	movs	r0, #44	; 0x2c
 8002f76:	fb00 f303 	mul.w	r3, r0, r3
 8002f7a:	440b      	add	r3, r1
 8002f7c:	3344      	adds	r3, #68	; 0x44
 8002f7e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	212c      	movs	r1, #44	; 0x2c
 8002f86:	fb01 f303 	mul.w	r3, r1, r3
 8002f8a:	4413      	add	r3, r2
 8002f8c:	3350      	adds	r3, #80	; 0x50
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	441a      	add	r2, r3
 8002f94:	6879      	ldr	r1, [r7, #4]
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	202c      	movs	r0, #44	; 0x2c
 8002f9a:	fb00 f303 	mul.w	r3, r0, r3
 8002f9e:	440b      	add	r3, r1
 8002fa0:	3350      	adds	r3, #80	; 0x50
 8002fa2:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	015a      	lsls	r2, r3, #5
 8002fa8:	6a3b      	ldr	r3, [r7, #32]
 8002faa:	4413      	add	r3, r2
 8002fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	0cdb      	lsrs	r3, r3, #19
 8002fb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fb8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	212c      	movs	r1, #44	; 0x2c
 8002fc0:	fb01 f303 	mul.w	r3, r1, r3
 8002fc4:	4413      	add	r3, r2
 8002fc6:	3340      	adds	r3, #64	; 0x40
 8002fc8:	881b      	ldrh	r3, [r3, #0]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d13c      	bne.n	800304c <HCD_RXQLVL_IRQHandler+0x19a>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d039      	beq.n	800304c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	015a      	lsls	r2, r3, #5
 8002fdc:	6a3b      	ldr	r3, [r7, #32]
 8002fde:	4413      	add	r3, r2
 8002fe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002fee:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ff6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	015a      	lsls	r2, r3, #5
 8002ffc:	6a3b      	ldr	r3, [r7, #32]
 8002ffe:	4413      	add	r3, r2
 8003000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003004:	461a      	mov	r2, r3
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	212c      	movs	r1, #44	; 0x2c
 8003010:	fb01 f303 	mul.w	r3, r1, r3
 8003014:	4413      	add	r3, r2
 8003016:	3354      	adds	r3, #84	; 0x54
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	f083 0301 	eor.w	r3, r3, #1
 800301e:	b2d8      	uxtb	r0, r3
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	212c      	movs	r1, #44	; 0x2c
 8003026:	fb01 f303 	mul.w	r3, r1, r3
 800302a:	4413      	add	r3, r2
 800302c:	3354      	adds	r3, #84	; 0x54
 800302e:	4602      	mov	r2, r0
 8003030:	701a      	strb	r2, [r3, #0]
      break;
 8003032:	e00b      	b.n	800304c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	212c      	movs	r1, #44	; 0x2c
 800303a:	fb01 f303 	mul.w	r3, r1, r3
 800303e:	4413      	add	r3, r2
 8003040:	3360      	adds	r3, #96	; 0x60
 8003042:	2204      	movs	r2, #4
 8003044:	701a      	strb	r2, [r3, #0]
      break;
 8003046:	e001      	b.n	800304c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003048:	bf00      	nop
 800304a:	e000      	b.n	800304e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800304c:	bf00      	nop
  }
}
 800304e:	bf00      	nop
 8003050:	3728      	adds	r7, #40	; 0x28
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b086      	sub	sp, #24
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003082:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b02      	cmp	r3, #2
 800308c:	d10b      	bne.n	80030a6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	2b01      	cmp	r3, #1
 8003096:	d102      	bne.n	800309e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f006 f951 	bl	8009340 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	f043 0302 	orr.w	r3, r3, #2
 80030a4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f003 0308 	and.w	r3, r3, #8
 80030ac:	2b08      	cmp	r3, #8
 80030ae:	d132      	bne.n	8003116 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	f043 0308 	orr.w	r3, r3, #8
 80030b6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f003 0304 	and.w	r3, r3, #4
 80030be:	2b04      	cmp	r3, #4
 80030c0:	d126      	bne.n	8003110 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d113      	bne.n	80030f2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80030d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030d4:	d106      	bne.n	80030e4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2102      	movs	r1, #2
 80030dc:	4618      	mov	r0, r3
 80030de:	f003 fb6d 	bl	80067bc <USB_InitFSLSPClkSel>
 80030e2:	e011      	b.n	8003108 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2101      	movs	r1, #1
 80030ea:	4618      	mov	r0, r3
 80030ec:	f003 fb66 	bl	80067bc <USB_InitFSLSPClkSel>
 80030f0:	e00a      	b.n	8003108 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d106      	bne.n	8003108 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003100:	461a      	mov	r2, r3
 8003102:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003106:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f006 f943 	bl	8009394 <HAL_HCD_PortEnabled_Callback>
 800310e:	e002      	b.n	8003116 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f006 f94d 	bl	80093b0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f003 0320 	and.w	r3, r3, #32
 800311c:	2b20      	cmp	r3, #32
 800311e:	d103      	bne.n	8003128 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	f043 0320 	orr.w	r3, r3, #32
 8003126:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800312e:	461a      	mov	r2, r3
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	6013      	str	r3, [r2, #0]
}
 8003134:	bf00      	nop
 8003136:	3718      	adds	r7, #24
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e12b      	b.n	80033a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d106      	bne.n	8003168 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7fd fdfa 	bl	8000d5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2224      	movs	r2, #36	; 0x24
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f022 0201 	bic.w	r2, r2, #1
 800317e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800318e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800319e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031a0:	f001 fa20 	bl	80045e4 <HAL_RCC_GetPCLK1Freq>
 80031a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	4a81      	ldr	r2, [pc, #516]	; (80033b0 <HAL_I2C_Init+0x274>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d807      	bhi.n	80031c0 <HAL_I2C_Init+0x84>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	4a80      	ldr	r2, [pc, #512]	; (80033b4 <HAL_I2C_Init+0x278>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	bf94      	ite	ls
 80031b8:	2301      	movls	r3, #1
 80031ba:	2300      	movhi	r3, #0
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	e006      	b.n	80031ce <HAL_I2C_Init+0x92>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	4a7d      	ldr	r2, [pc, #500]	; (80033b8 <HAL_I2C_Init+0x27c>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	bf94      	ite	ls
 80031c8:	2301      	movls	r3, #1
 80031ca:	2300      	movhi	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e0e7      	b.n	80033a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	4a78      	ldr	r2, [pc, #480]	; (80033bc <HAL_I2C_Init+0x280>)
 80031da:	fba2 2303 	umull	r2, r3, r2, r3
 80031de:	0c9b      	lsrs	r3, r3, #18
 80031e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	4a6a      	ldr	r2, [pc, #424]	; (80033b0 <HAL_I2C_Init+0x274>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d802      	bhi.n	8003210 <HAL_I2C_Init+0xd4>
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	3301      	adds	r3, #1
 800320e:	e009      	b.n	8003224 <HAL_I2C_Init+0xe8>
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003216:	fb02 f303 	mul.w	r3, r2, r3
 800321a:	4a69      	ldr	r2, [pc, #420]	; (80033c0 <HAL_I2C_Init+0x284>)
 800321c:	fba2 2303 	umull	r2, r3, r2, r3
 8003220:	099b      	lsrs	r3, r3, #6
 8003222:	3301      	adds	r3, #1
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	6812      	ldr	r2, [r2, #0]
 8003228:	430b      	orrs	r3, r1
 800322a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	69db      	ldr	r3, [r3, #28]
 8003232:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003236:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	495c      	ldr	r1, [pc, #368]	; (80033b0 <HAL_I2C_Init+0x274>)
 8003240:	428b      	cmp	r3, r1
 8003242:	d819      	bhi.n	8003278 <HAL_I2C_Init+0x13c>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	1e59      	subs	r1, r3, #1
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003252:	1c59      	adds	r1, r3, #1
 8003254:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003258:	400b      	ands	r3, r1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00a      	beq.n	8003274 <HAL_I2C_Init+0x138>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	1e59      	subs	r1, r3, #1
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	fbb1 f3f3 	udiv	r3, r1, r3
 800326c:	3301      	adds	r3, #1
 800326e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003272:	e051      	b.n	8003318 <HAL_I2C_Init+0x1dc>
 8003274:	2304      	movs	r3, #4
 8003276:	e04f      	b.n	8003318 <HAL_I2C_Init+0x1dc>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d111      	bne.n	80032a4 <HAL_I2C_Init+0x168>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	1e58      	subs	r0, r3, #1
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6859      	ldr	r1, [r3, #4]
 8003288:	460b      	mov	r3, r1
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	440b      	add	r3, r1
 800328e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003292:	3301      	adds	r3, #1
 8003294:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003298:	2b00      	cmp	r3, #0
 800329a:	bf0c      	ite	eq
 800329c:	2301      	moveq	r3, #1
 800329e:	2300      	movne	r3, #0
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	e012      	b.n	80032ca <HAL_I2C_Init+0x18e>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	1e58      	subs	r0, r3, #1
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6859      	ldr	r1, [r3, #4]
 80032ac:	460b      	mov	r3, r1
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	440b      	add	r3, r1
 80032b2:	0099      	lsls	r1, r3, #2
 80032b4:	440b      	add	r3, r1
 80032b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80032ba:	3301      	adds	r3, #1
 80032bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	bf0c      	ite	eq
 80032c4:	2301      	moveq	r3, #1
 80032c6:	2300      	movne	r3, #0
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <HAL_I2C_Init+0x196>
 80032ce:	2301      	movs	r3, #1
 80032d0:	e022      	b.n	8003318 <HAL_I2C_Init+0x1dc>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10e      	bne.n	80032f8 <HAL_I2C_Init+0x1bc>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	1e58      	subs	r0, r3, #1
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6859      	ldr	r1, [r3, #4]
 80032e2:	460b      	mov	r3, r1
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	440b      	add	r3, r1
 80032e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80032ec:	3301      	adds	r3, #1
 80032ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032f6:	e00f      	b.n	8003318 <HAL_I2C_Init+0x1dc>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	1e58      	subs	r0, r3, #1
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6859      	ldr	r1, [r3, #4]
 8003300:	460b      	mov	r3, r1
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	440b      	add	r3, r1
 8003306:	0099      	lsls	r1, r3, #2
 8003308:	440b      	add	r3, r1
 800330a:	fbb0 f3f3 	udiv	r3, r0, r3
 800330e:	3301      	adds	r3, #1
 8003310:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003314:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003318:	6879      	ldr	r1, [r7, #4]
 800331a:	6809      	ldr	r1, [r1, #0]
 800331c:	4313      	orrs	r3, r2
 800331e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	69da      	ldr	r2, [r3, #28]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	431a      	orrs	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	430a      	orrs	r2, r1
 800333a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003346:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	6911      	ldr	r1, [r2, #16]
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	68d2      	ldr	r2, [r2, #12]
 8003352:	4311      	orrs	r1, r2
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	6812      	ldr	r2, [r2, #0]
 8003358:	430b      	orrs	r3, r1
 800335a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	695a      	ldr	r2, [r3, #20]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	431a      	orrs	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	430a      	orrs	r2, r1
 8003376:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 0201 	orr.w	r2, r2, #1
 8003386:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2220      	movs	r2, #32
 8003392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	000186a0 	.word	0x000186a0
 80033b4:	001e847f 	.word	0x001e847f
 80033b8:	003d08ff 	.word	0x003d08ff
 80033bc:	431bde83 	.word	0x431bde83
 80033c0:	10624dd3 	.word	0x10624dd3

080033c4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b088      	sub	sp, #32
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e128      	b.n	8003628 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d109      	bne.n	80033f6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a90      	ldr	r2, [pc, #576]	; (8003630 <HAL_I2S_Init+0x26c>)
 80033ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f7fd fcfb 	bl	8000dec <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2202      	movs	r2, #2
 80033fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	69db      	ldr	r3, [r3, #28]
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	6812      	ldr	r2, [r2, #0]
 8003408:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800340c:	f023 030f 	bic.w	r3, r3, #15
 8003410:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2202      	movs	r2, #2
 8003418:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	2b02      	cmp	r3, #2
 8003420:	d060      	beq.n	80034e4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d102      	bne.n	8003430 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800342a:	2310      	movs	r3, #16
 800342c:	617b      	str	r3, [r7, #20]
 800342e:	e001      	b.n	8003434 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003430:	2320      	movs	r3, #32
 8003432:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	2b20      	cmp	r3, #32
 800343a:	d802      	bhi.n	8003442 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003442:	2001      	movs	r0, #1
 8003444:	f001 f9d8 	bl	80047f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003448:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003452:	d125      	bne.n	80034a0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d010      	beq.n	800347e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	fbb2 f2f3 	udiv	r2, r2, r3
 8003466:	4613      	mov	r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	4413      	add	r3, r2
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	461a      	mov	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	fbb2 f3f3 	udiv	r3, r2, r3
 8003478:	3305      	adds	r3, #5
 800347a:	613b      	str	r3, [r7, #16]
 800347c:	e01f      	b.n	80034be <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	00db      	lsls	r3, r3, #3
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	fbb2 f2f3 	udiv	r2, r2, r3
 8003488:	4613      	mov	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	461a      	mov	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	fbb2 f3f3 	udiv	r3, r2, r3
 800349a:	3305      	adds	r3, #5
 800349c:	613b      	str	r3, [r7, #16]
 800349e:	e00e      	b.n	80034be <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80034a8:	4613      	mov	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	461a      	mov	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ba:	3305      	adds	r3, #5
 80034bc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	4a5c      	ldr	r2, [pc, #368]	; (8003634 <HAL_I2S_Init+0x270>)
 80034c2:	fba2 2303 	umull	r2, r3, r2, r3
 80034c6:	08db      	lsrs	r3, r3, #3
 80034c8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	085b      	lsrs	r3, r3, #1
 80034da:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	021b      	lsls	r3, r3, #8
 80034e0:	61bb      	str	r3, [r7, #24]
 80034e2:	e003      	b.n	80034ec <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80034e4:	2302      	movs	r3, #2
 80034e6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80034e8:	2300      	movs	r3, #0
 80034ea:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d902      	bls.n	80034f8 <HAL_I2S_Init+0x134>
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	2bff      	cmp	r3, #255	; 0xff
 80034f6:	d907      	bls.n	8003508 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fc:	f043 0210 	orr.w	r2, r3, #16
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e08f      	b.n	8003628 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691a      	ldr	r2, [r3, #16]
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	ea42 0103 	orr.w	r1, r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	69fa      	ldr	r2, [r7, #28]
 8003518:	430a      	orrs	r2, r1
 800351a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	69db      	ldr	r3, [r3, #28]
 8003522:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003526:	f023 030f 	bic.w	r3, r3, #15
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	6851      	ldr	r1, [r2, #4]
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	6892      	ldr	r2, [r2, #8]
 8003532:	4311      	orrs	r1, r2
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	68d2      	ldr	r2, [r2, #12]
 8003538:	4311      	orrs	r1, r2
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	6992      	ldr	r2, [r2, #24]
 800353e:	430a      	orrs	r2, r1
 8003540:	431a      	orrs	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800354a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d161      	bne.n	8003618 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a38      	ldr	r2, [pc, #224]	; (8003638 <HAL_I2S_Init+0x274>)
 8003558:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a37      	ldr	r2, [pc, #220]	; (800363c <HAL_I2S_Init+0x278>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d101      	bne.n	8003568 <HAL_I2S_Init+0x1a4>
 8003564:	4b36      	ldr	r3, [pc, #216]	; (8003640 <HAL_I2S_Init+0x27c>)
 8003566:	e001      	b.n	800356c <HAL_I2S_Init+0x1a8>
 8003568:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	6812      	ldr	r2, [r2, #0]
 8003572:	4932      	ldr	r1, [pc, #200]	; (800363c <HAL_I2S_Init+0x278>)
 8003574:	428a      	cmp	r2, r1
 8003576:	d101      	bne.n	800357c <HAL_I2S_Init+0x1b8>
 8003578:	4a31      	ldr	r2, [pc, #196]	; (8003640 <HAL_I2S_Init+0x27c>)
 800357a:	e001      	b.n	8003580 <HAL_I2S_Init+0x1bc>
 800357c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003580:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003584:	f023 030f 	bic.w	r3, r3, #15
 8003588:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a2b      	ldr	r2, [pc, #172]	; (800363c <HAL_I2S_Init+0x278>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d101      	bne.n	8003598 <HAL_I2S_Init+0x1d4>
 8003594:	4b2a      	ldr	r3, [pc, #168]	; (8003640 <HAL_I2S_Init+0x27c>)
 8003596:	e001      	b.n	800359c <HAL_I2S_Init+0x1d8>
 8003598:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800359c:	2202      	movs	r2, #2
 800359e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a25      	ldr	r2, [pc, #148]	; (800363c <HAL_I2S_Init+0x278>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d101      	bne.n	80035ae <HAL_I2S_Init+0x1ea>
 80035aa:	4b25      	ldr	r3, [pc, #148]	; (8003640 <HAL_I2S_Init+0x27c>)
 80035ac:	e001      	b.n	80035b2 <HAL_I2S_Init+0x1ee>
 80035ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035b2:	69db      	ldr	r3, [r3, #28]
 80035b4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035be:	d003      	beq.n	80035c8 <HAL_I2S_Init+0x204>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d103      	bne.n	80035d0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80035c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035cc:	613b      	str	r3, [r7, #16]
 80035ce:	e001      	b.n	80035d4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80035d0:	2300      	movs	r3, #0
 80035d2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80035de:	4313      	orrs	r3, r2
 80035e0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80035e8:	4313      	orrs	r3, r2
 80035ea:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80035f2:	4313      	orrs	r3, r2
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	897b      	ldrh	r3, [r7, #10]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003600:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a0d      	ldr	r2, [pc, #52]	; (800363c <HAL_I2S_Init+0x278>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d101      	bne.n	8003610 <HAL_I2S_Init+0x24c>
 800360c:	4b0c      	ldr	r3, [pc, #48]	; (8003640 <HAL_I2S_Init+0x27c>)
 800360e:	e001      	b.n	8003614 <HAL_I2S_Init+0x250>
 8003610:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003614:	897a      	ldrh	r2, [r7, #10]
 8003616:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3720      	adds	r7, #32
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	0800373b 	.word	0x0800373b
 8003634:	cccccccd 	.word	0xcccccccd
 8003638:	08003851 	.word	0x08003851
 800363c:	40003800 	.word	0x40003800
 8003640:	40003400 	.word	0x40003400

08003644 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	881a      	ldrh	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	1c9a      	adds	r2, r3, #2
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	3b01      	subs	r3, #1
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10e      	bne.n	80036d4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	685a      	ldr	r2, [r3, #4]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036c4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7ff ffb8 	bl	8003644 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80036d4:	bf00      	nop
 80036d6:	3708      	adds	r7, #8
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68da      	ldr	r2, [r3, #12]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ee:	b292      	uxth	r2, r2
 80036f0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f6:	1c9a      	adds	r2, r3, #2
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003700:	b29b      	uxth	r3, r3
 8003702:	3b01      	subs	r3, #1
 8003704:	b29a      	uxth	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800370e:	b29b      	uxth	r3, r3
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10e      	bne.n	8003732 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003722:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f7ff ff93 	bl	8003658 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003732:	bf00      	nop
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b086      	sub	sp, #24
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b04      	cmp	r3, #4
 8003754:	d13a      	bne.n	80037cc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b01      	cmp	r3, #1
 800375e:	d109      	bne.n	8003774 <I2S_IRQHandler+0x3a>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800376a:	2b40      	cmp	r3, #64	; 0x40
 800376c:	d102      	bne.n	8003774 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f7ff ffb4 	bl	80036dc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377a:	2b40      	cmp	r3, #64	; 0x40
 800377c:	d126      	bne.n	80037cc <I2S_IRQHandler+0x92>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f003 0320 	and.w	r3, r3, #32
 8003788:	2b20      	cmp	r3, #32
 800378a:	d11f      	bne.n	80037cc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800379a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800379c:	2300      	movs	r3, #0
 800379e:	613b      	str	r3, [r7, #16]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	613b      	str	r3, [r7, #16]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	613b      	str	r3, [r7, #16]
 80037b0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037be:	f043 0202 	orr.w	r2, r3, #2
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f7ff ff50 	bl	800366c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2b03      	cmp	r3, #3
 80037d6:	d136      	bne.n	8003846 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d109      	bne.n	80037f6 <I2S_IRQHandler+0xbc>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ec:	2b80      	cmp	r3, #128	; 0x80
 80037ee:	d102      	bne.n	80037f6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f7ff ff45 	bl	8003680 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f003 0308 	and.w	r3, r3, #8
 80037fc:	2b08      	cmp	r3, #8
 80037fe:	d122      	bne.n	8003846 <I2S_IRQHandler+0x10c>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f003 0320 	and.w	r3, r3, #32
 800380a:	2b20      	cmp	r3, #32
 800380c:	d11b      	bne.n	8003846 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800381c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800381e:	2300      	movs	r3, #0
 8003820:	60fb      	str	r3, [r7, #12]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	60fb      	str	r3, [r7, #12]
 800382a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003838:	f043 0204 	orr.w	r2, r3, #4
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f7ff ff13 	bl	800366c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003846:	bf00      	nop
 8003848:	3718      	adds	r7, #24
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
	...

08003850 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b088      	sub	sp, #32
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a92      	ldr	r2, [pc, #584]	; (8003ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d101      	bne.n	800386e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800386a:	4b92      	ldr	r3, [pc, #584]	; (8003ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800386c:	e001      	b.n	8003872 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800386e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a8b      	ldr	r2, [pc, #556]	; (8003ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d101      	bne.n	800388c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003888:	4b8a      	ldr	r3, [pc, #552]	; (8003ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800388a:	e001      	b.n	8003890 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800388c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800389c:	d004      	beq.n	80038a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f040 8099 	bne.w	80039da <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d107      	bne.n	80038c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d002      	beq.n	80038c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 f925 	bl	8003b0c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d107      	bne.n	80038dc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d002      	beq.n	80038dc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f9c8 	bl	8003c6c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e2:	2b40      	cmp	r3, #64	; 0x40
 80038e4:	d13a      	bne.n	800395c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	f003 0320 	and.w	r3, r3, #32
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d035      	beq.n	800395c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a6e      	ldr	r2, [pc, #440]	; (8003ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d101      	bne.n	80038fe <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80038fa:	4b6e      	ldr	r3, [pc, #440]	; (8003ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038fc:	e001      	b.n	8003902 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80038fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4969      	ldr	r1, [pc, #420]	; (8003ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800390a:	428b      	cmp	r3, r1
 800390c:	d101      	bne.n	8003912 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800390e:	4b69      	ldr	r3, [pc, #420]	; (8003ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003910:	e001      	b.n	8003916 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003912:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003916:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800391a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800392a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800392c:	2300      	movs	r3, #0
 800392e:	60fb      	str	r3, [r7, #12]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	60fb      	str	r3, [r7, #12]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	60fb      	str	r3, [r7, #12]
 8003940:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394e:	f043 0202 	orr.w	r2, r3, #2
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7ff fe88 	bl	800366c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f003 0308 	and.w	r3, r3, #8
 8003962:	2b08      	cmp	r3, #8
 8003964:	f040 80c3 	bne.w	8003aee <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f003 0320 	and.w	r3, r3, #32
 800396e:	2b00      	cmp	r3, #0
 8003970:	f000 80bd 	beq.w	8003aee <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003982:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a49      	ldr	r2, [pc, #292]	; (8003ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d101      	bne.n	8003992 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800398e:	4b49      	ldr	r3, [pc, #292]	; (8003ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003990:	e001      	b.n	8003996 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003992:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003996:	685a      	ldr	r2, [r3, #4]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4944      	ldr	r1, [pc, #272]	; (8003ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800399e:	428b      	cmp	r3, r1
 80039a0:	d101      	bne.n	80039a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80039a2:	4b44      	ldr	r3, [pc, #272]	; (8003ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039a4:	e001      	b.n	80039aa <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80039a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039ae:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80039b0:	2300      	movs	r3, #0
 80039b2:	60bb      	str	r3, [r7, #8]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	60bb      	str	r3, [r7, #8]
 80039bc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ca:	f043 0204 	orr.w	r2, r3, #4
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f7ff fe4a 	bl	800366c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80039d8:	e089      	b.n	8003aee <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d107      	bne.n	80039f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d002      	beq.n	80039f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f8be 	bl	8003b70 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d107      	bne.n	8003a0e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d002      	beq.n	8003a0e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 f8fd 	bl	8003c08 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a14:	2b40      	cmp	r3, #64	; 0x40
 8003a16:	d12f      	bne.n	8003a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	f003 0320 	and.w	r3, r3, #32
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d02a      	beq.n	8003a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a30:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a1e      	ldr	r2, [pc, #120]	; (8003ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d101      	bne.n	8003a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003a3c:	4b1d      	ldr	r3, [pc, #116]	; (8003ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a3e:	e001      	b.n	8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003a40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4919      	ldr	r1, [pc, #100]	; (8003ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a4c:	428b      	cmp	r3, r1
 8003a4e:	d101      	bne.n	8003a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003a50:	4b18      	ldr	r3, [pc, #96]	; (8003ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a52:	e001      	b.n	8003a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003a54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a58:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a5c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6a:	f043 0202 	orr.w	r2, r3, #2
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7ff fdfa 	bl	800366c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	f003 0308 	and.w	r3, r3, #8
 8003a7e:	2b08      	cmp	r3, #8
 8003a80:	d136      	bne.n	8003af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	f003 0320 	and.w	r3, r3, #32
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d031      	beq.n	8003af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a07      	ldr	r2, [pc, #28]	; (8003ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d101      	bne.n	8003a9a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003a96:	4b07      	ldr	r3, [pc, #28]	; (8003ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a98:	e001      	b.n	8003a9e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003a9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4902      	ldr	r1, [pc, #8]	; (8003ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003aa6:	428b      	cmp	r3, r1
 8003aa8:	d106      	bne.n	8003ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003aaa:	4b02      	ldr	r3, [pc, #8]	; (8003ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003aac:	e006      	b.n	8003abc <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003aae:	bf00      	nop
 8003ab0:	40003800 	.word	0x40003800
 8003ab4:	40003400 	.word	0x40003400
 8003ab8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003abc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ac0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ad0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ade:	f043 0204 	orr.w	r2, r3, #4
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7ff fdc0 	bl	800366c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003aec:	e000      	b.n	8003af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003aee:	bf00      	nop
}
 8003af0:	bf00      	nop
 8003af2:	3720      	adds	r7, #32
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b18:	1c99      	adds	r1, r3, #2
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	6251      	str	r1, [r2, #36]	; 0x24
 8003b1e:	881a      	ldrh	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d113      	bne.n	8003b66 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	685a      	ldr	r2, [r3, #4]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b4c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d106      	bne.n	8003b66 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f7ff ffc9 	bl	8003af8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b66:	bf00      	nop
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
	...

08003b70 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	1c99      	adds	r1, r3, #2
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	6251      	str	r1, [r2, #36]	; 0x24
 8003b82:	8819      	ldrh	r1, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a1d      	ldr	r2, [pc, #116]	; (8003c00 <I2SEx_TxISR_I2SExt+0x90>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d101      	bne.n	8003b92 <I2SEx_TxISR_I2SExt+0x22>
 8003b8e:	4b1d      	ldr	r3, [pc, #116]	; (8003c04 <I2SEx_TxISR_I2SExt+0x94>)
 8003b90:	e001      	b.n	8003b96 <I2SEx_TxISR_I2SExt+0x26>
 8003b92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b96:	460a      	mov	r2, r1
 8003b98:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d121      	bne.n	8003bf6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a12      	ldr	r2, [pc, #72]	; (8003c00 <I2SEx_TxISR_I2SExt+0x90>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d101      	bne.n	8003bc0 <I2SEx_TxISR_I2SExt+0x50>
 8003bbc:	4b11      	ldr	r3, [pc, #68]	; (8003c04 <I2SEx_TxISR_I2SExt+0x94>)
 8003bbe:	e001      	b.n	8003bc4 <I2SEx_TxISR_I2SExt+0x54>
 8003bc0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	490d      	ldr	r1, [pc, #52]	; (8003c00 <I2SEx_TxISR_I2SExt+0x90>)
 8003bcc:	428b      	cmp	r3, r1
 8003bce:	d101      	bne.n	8003bd4 <I2SEx_TxISR_I2SExt+0x64>
 8003bd0:	4b0c      	ldr	r3, [pc, #48]	; (8003c04 <I2SEx_TxISR_I2SExt+0x94>)
 8003bd2:	e001      	b.n	8003bd8 <I2SEx_TxISR_I2SExt+0x68>
 8003bd4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bd8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003bdc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d106      	bne.n	8003bf6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f7ff ff81 	bl	8003af8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bf6:	bf00      	nop
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	40003800 	.word	0x40003800
 8003c04:	40003400 	.word	0x40003400

08003c08 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68d8      	ldr	r0, [r3, #12]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1a:	1c99      	adds	r1, r3, #2
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003c20:	b282      	uxth	r2, r0
 8003c22:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d113      	bne.n	8003c64 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c4a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d106      	bne.n	8003c64 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f7ff ff4a 	bl	8003af8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c64:	bf00      	nop
 8003c66:	3708      	adds	r7, #8
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a20      	ldr	r2, [pc, #128]	; (8003cfc <I2SEx_RxISR_I2SExt+0x90>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d101      	bne.n	8003c82 <I2SEx_RxISR_I2SExt+0x16>
 8003c7e:	4b20      	ldr	r3, [pc, #128]	; (8003d00 <I2SEx_RxISR_I2SExt+0x94>)
 8003c80:	e001      	b.n	8003c86 <I2SEx_RxISR_I2SExt+0x1a>
 8003c82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c86:	68d8      	ldr	r0, [r3, #12]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8c:	1c99      	adds	r1, r3, #2
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003c92:	b282      	uxth	r2, r0
 8003c94:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d121      	bne.n	8003cf2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a12      	ldr	r2, [pc, #72]	; (8003cfc <I2SEx_RxISR_I2SExt+0x90>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d101      	bne.n	8003cbc <I2SEx_RxISR_I2SExt+0x50>
 8003cb8:	4b11      	ldr	r3, [pc, #68]	; (8003d00 <I2SEx_RxISR_I2SExt+0x94>)
 8003cba:	e001      	b.n	8003cc0 <I2SEx_RxISR_I2SExt+0x54>
 8003cbc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cc0:	685a      	ldr	r2, [r3, #4]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	490d      	ldr	r1, [pc, #52]	; (8003cfc <I2SEx_RxISR_I2SExt+0x90>)
 8003cc8:	428b      	cmp	r3, r1
 8003cca:	d101      	bne.n	8003cd0 <I2SEx_RxISR_I2SExt+0x64>
 8003ccc:	4b0c      	ldr	r3, [pc, #48]	; (8003d00 <I2SEx_RxISR_I2SExt+0x94>)
 8003cce:	e001      	b.n	8003cd4 <I2SEx_RxISR_I2SExt+0x68>
 8003cd0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cd4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003cd8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d106      	bne.n	8003cf2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f7ff ff03 	bl	8003af8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003cf2:	bf00      	nop
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	40003800 	.word	0x40003800
 8003d00:	40003400 	.word	0x40003400

08003d04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e267      	b.n	80041e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d075      	beq.n	8003e0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d22:	4b88      	ldr	r3, [pc, #544]	; (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f003 030c 	and.w	r3, r3, #12
 8003d2a:	2b04      	cmp	r3, #4
 8003d2c:	d00c      	beq.n	8003d48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d2e:	4b85      	ldr	r3, [pc, #532]	; (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d36:	2b08      	cmp	r3, #8
 8003d38:	d112      	bne.n	8003d60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d3a:	4b82      	ldr	r3, [pc, #520]	; (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d46:	d10b      	bne.n	8003d60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d48:	4b7e      	ldr	r3, [pc, #504]	; (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d05b      	beq.n	8003e0c <HAL_RCC_OscConfig+0x108>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d157      	bne.n	8003e0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e242      	b.n	80041e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d68:	d106      	bne.n	8003d78 <HAL_RCC_OscConfig+0x74>
 8003d6a:	4b76      	ldr	r3, [pc, #472]	; (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a75      	ldr	r2, [pc, #468]	; (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d74:	6013      	str	r3, [r2, #0]
 8003d76:	e01d      	b.n	8003db4 <HAL_RCC_OscConfig+0xb0>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d80:	d10c      	bne.n	8003d9c <HAL_RCC_OscConfig+0x98>
 8003d82:	4b70      	ldr	r3, [pc, #448]	; (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a6f      	ldr	r2, [pc, #444]	; (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003d88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d8c:	6013      	str	r3, [r2, #0]
 8003d8e:	4b6d      	ldr	r3, [pc, #436]	; (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a6c      	ldr	r2, [pc, #432]	; (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d98:	6013      	str	r3, [r2, #0]
 8003d9a:	e00b      	b.n	8003db4 <HAL_RCC_OscConfig+0xb0>
 8003d9c:	4b69      	ldr	r3, [pc, #420]	; (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a68      	ldr	r2, [pc, #416]	; (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003da2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003da6:	6013      	str	r3, [r2, #0]
 8003da8:	4b66      	ldr	r3, [pc, #408]	; (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a65      	ldr	r2, [pc, #404]	; (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003dae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003db2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d013      	beq.n	8003de4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dbc:	f7fd fa9a 	bl	80012f4 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dc4:	f7fd fa96 	bl	80012f4 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b64      	cmp	r3, #100	; 0x64
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e207      	b.n	80041e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dd6:	4b5b      	ldr	r3, [pc, #364]	; (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0f0      	beq.n	8003dc4 <HAL_RCC_OscConfig+0xc0>
 8003de2:	e014      	b.n	8003e0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de4:	f7fd fa86 	bl	80012f4 <HAL_GetTick>
 8003de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dec:	f7fd fa82 	bl	80012f4 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b64      	cmp	r3, #100	; 0x64
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e1f3      	b.n	80041e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dfe:	4b51      	ldr	r3, [pc, #324]	; (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1f0      	bne.n	8003dec <HAL_RCC_OscConfig+0xe8>
 8003e0a:	e000      	b.n	8003e0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d063      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e1a:	4b4a      	ldr	r3, [pc, #296]	; (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f003 030c 	and.w	r3, r3, #12
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00b      	beq.n	8003e3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e26:	4b47      	ldr	r3, [pc, #284]	; (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e2e:	2b08      	cmp	r3, #8
 8003e30:	d11c      	bne.n	8003e6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e32:	4b44      	ldr	r3, [pc, #272]	; (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d116      	bne.n	8003e6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e3e:	4b41      	ldr	r3, [pc, #260]	; (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d005      	beq.n	8003e56 <HAL_RCC_OscConfig+0x152>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d001      	beq.n	8003e56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e1c7      	b.n	80041e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e56:	4b3b      	ldr	r3, [pc, #236]	; (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	4937      	ldr	r1, [pc, #220]	; (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e6a:	e03a      	b.n	8003ee2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d020      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e74:	4b34      	ldr	r3, [pc, #208]	; (8003f48 <HAL_RCC_OscConfig+0x244>)
 8003e76:	2201      	movs	r2, #1
 8003e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7a:	f7fd fa3b 	bl	80012f4 <HAL_GetTick>
 8003e7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e80:	e008      	b.n	8003e94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e82:	f7fd fa37 	bl	80012f4 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d901      	bls.n	8003e94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e1a8      	b.n	80041e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e94:	4b2b      	ldr	r3, [pc, #172]	; (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d0f0      	beq.n	8003e82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea0:	4b28      	ldr	r3, [pc, #160]	; (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	00db      	lsls	r3, r3, #3
 8003eae:	4925      	ldr	r1, [pc, #148]	; (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	600b      	str	r3, [r1, #0]
 8003eb4:	e015      	b.n	8003ee2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eb6:	4b24      	ldr	r3, [pc, #144]	; (8003f48 <HAL_RCC_OscConfig+0x244>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ebc:	f7fd fa1a 	bl	80012f4 <HAL_GetTick>
 8003ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ec2:	e008      	b.n	8003ed6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ec4:	f7fd fa16 	bl	80012f4 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e187      	b.n	80041e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ed6:	4b1b      	ldr	r3, [pc, #108]	; (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1f0      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0308 	and.w	r3, r3, #8
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d036      	beq.n	8003f5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d016      	beq.n	8003f24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ef6:	4b15      	ldr	r3, [pc, #84]	; (8003f4c <HAL_RCC_OscConfig+0x248>)
 8003ef8:	2201      	movs	r2, #1
 8003efa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003efc:	f7fd f9fa 	bl	80012f4 <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f04:	f7fd f9f6 	bl	80012f4 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e167      	b.n	80041e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f16:	4b0b      	ldr	r3, [pc, #44]	; (8003f44 <HAL_RCC_OscConfig+0x240>)
 8003f18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d0f0      	beq.n	8003f04 <HAL_RCC_OscConfig+0x200>
 8003f22:	e01b      	b.n	8003f5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f24:	4b09      	ldr	r3, [pc, #36]	; (8003f4c <HAL_RCC_OscConfig+0x248>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f2a:	f7fd f9e3 	bl	80012f4 <HAL_GetTick>
 8003f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f30:	e00e      	b.n	8003f50 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f32:	f7fd f9df 	bl	80012f4 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d907      	bls.n	8003f50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e150      	b.n	80041e6 <HAL_RCC_OscConfig+0x4e2>
 8003f44:	40023800 	.word	0x40023800
 8003f48:	42470000 	.word	0x42470000
 8003f4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f50:	4b88      	ldr	r3, [pc, #544]	; (8004174 <HAL_RCC_OscConfig+0x470>)
 8003f52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1ea      	bne.n	8003f32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0304 	and.w	r3, r3, #4
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f000 8097 	beq.w	8004098 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f6e:	4b81      	ldr	r3, [pc, #516]	; (8004174 <HAL_RCC_OscConfig+0x470>)
 8003f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10f      	bne.n	8003f9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60bb      	str	r3, [r7, #8]
 8003f7e:	4b7d      	ldr	r3, [pc, #500]	; (8004174 <HAL_RCC_OscConfig+0x470>)
 8003f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f82:	4a7c      	ldr	r2, [pc, #496]	; (8004174 <HAL_RCC_OscConfig+0x470>)
 8003f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f88:	6413      	str	r3, [r2, #64]	; 0x40
 8003f8a:	4b7a      	ldr	r3, [pc, #488]	; (8004174 <HAL_RCC_OscConfig+0x470>)
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f92:	60bb      	str	r3, [r7, #8]
 8003f94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f96:	2301      	movs	r3, #1
 8003f98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f9a:	4b77      	ldr	r3, [pc, #476]	; (8004178 <HAL_RCC_OscConfig+0x474>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d118      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fa6:	4b74      	ldr	r3, [pc, #464]	; (8004178 <HAL_RCC_OscConfig+0x474>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a73      	ldr	r2, [pc, #460]	; (8004178 <HAL_RCC_OscConfig+0x474>)
 8003fac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fb2:	f7fd f99f 	bl	80012f4 <HAL_GetTick>
 8003fb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb8:	e008      	b.n	8003fcc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fba:	f7fd f99b 	bl	80012f4 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d901      	bls.n	8003fcc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e10c      	b.n	80041e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fcc:	4b6a      	ldr	r3, [pc, #424]	; (8004178 <HAL_RCC_OscConfig+0x474>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d0f0      	beq.n	8003fba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d106      	bne.n	8003fee <HAL_RCC_OscConfig+0x2ea>
 8003fe0:	4b64      	ldr	r3, [pc, #400]	; (8004174 <HAL_RCC_OscConfig+0x470>)
 8003fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe4:	4a63      	ldr	r2, [pc, #396]	; (8004174 <HAL_RCC_OscConfig+0x470>)
 8003fe6:	f043 0301 	orr.w	r3, r3, #1
 8003fea:	6713      	str	r3, [r2, #112]	; 0x70
 8003fec:	e01c      	b.n	8004028 <HAL_RCC_OscConfig+0x324>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	2b05      	cmp	r3, #5
 8003ff4:	d10c      	bne.n	8004010 <HAL_RCC_OscConfig+0x30c>
 8003ff6:	4b5f      	ldr	r3, [pc, #380]	; (8004174 <HAL_RCC_OscConfig+0x470>)
 8003ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffa:	4a5e      	ldr	r2, [pc, #376]	; (8004174 <HAL_RCC_OscConfig+0x470>)
 8003ffc:	f043 0304 	orr.w	r3, r3, #4
 8004000:	6713      	str	r3, [r2, #112]	; 0x70
 8004002:	4b5c      	ldr	r3, [pc, #368]	; (8004174 <HAL_RCC_OscConfig+0x470>)
 8004004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004006:	4a5b      	ldr	r2, [pc, #364]	; (8004174 <HAL_RCC_OscConfig+0x470>)
 8004008:	f043 0301 	orr.w	r3, r3, #1
 800400c:	6713      	str	r3, [r2, #112]	; 0x70
 800400e:	e00b      	b.n	8004028 <HAL_RCC_OscConfig+0x324>
 8004010:	4b58      	ldr	r3, [pc, #352]	; (8004174 <HAL_RCC_OscConfig+0x470>)
 8004012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004014:	4a57      	ldr	r2, [pc, #348]	; (8004174 <HAL_RCC_OscConfig+0x470>)
 8004016:	f023 0301 	bic.w	r3, r3, #1
 800401a:	6713      	str	r3, [r2, #112]	; 0x70
 800401c:	4b55      	ldr	r3, [pc, #340]	; (8004174 <HAL_RCC_OscConfig+0x470>)
 800401e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004020:	4a54      	ldr	r2, [pc, #336]	; (8004174 <HAL_RCC_OscConfig+0x470>)
 8004022:	f023 0304 	bic.w	r3, r3, #4
 8004026:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d015      	beq.n	800405c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004030:	f7fd f960 	bl	80012f4 <HAL_GetTick>
 8004034:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004036:	e00a      	b.n	800404e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004038:	f7fd f95c 	bl	80012f4 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	f241 3288 	movw	r2, #5000	; 0x1388
 8004046:	4293      	cmp	r3, r2
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e0cb      	b.n	80041e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800404e:	4b49      	ldr	r3, [pc, #292]	; (8004174 <HAL_RCC_OscConfig+0x470>)
 8004050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004052:	f003 0302 	and.w	r3, r3, #2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d0ee      	beq.n	8004038 <HAL_RCC_OscConfig+0x334>
 800405a:	e014      	b.n	8004086 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800405c:	f7fd f94a 	bl	80012f4 <HAL_GetTick>
 8004060:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004062:	e00a      	b.n	800407a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004064:	f7fd f946 	bl	80012f4 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004072:	4293      	cmp	r3, r2
 8004074:	d901      	bls.n	800407a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e0b5      	b.n	80041e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800407a:	4b3e      	ldr	r3, [pc, #248]	; (8004174 <HAL_RCC_OscConfig+0x470>)
 800407c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1ee      	bne.n	8004064 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004086:	7dfb      	ldrb	r3, [r7, #23]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d105      	bne.n	8004098 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800408c:	4b39      	ldr	r3, [pc, #228]	; (8004174 <HAL_RCC_OscConfig+0x470>)
 800408e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004090:	4a38      	ldr	r2, [pc, #224]	; (8004174 <HAL_RCC_OscConfig+0x470>)
 8004092:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004096:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	2b00      	cmp	r3, #0
 800409e:	f000 80a1 	beq.w	80041e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040a2:	4b34      	ldr	r3, [pc, #208]	; (8004174 <HAL_RCC_OscConfig+0x470>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f003 030c 	and.w	r3, r3, #12
 80040aa:	2b08      	cmp	r3, #8
 80040ac:	d05c      	beq.n	8004168 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d141      	bne.n	800413a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040b6:	4b31      	ldr	r3, [pc, #196]	; (800417c <HAL_RCC_OscConfig+0x478>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040bc:	f7fd f91a 	bl	80012f4 <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040c2:	e008      	b.n	80040d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040c4:	f7fd f916 	bl	80012f4 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e087      	b.n	80041e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040d6:	4b27      	ldr	r3, [pc, #156]	; (8004174 <HAL_RCC_OscConfig+0x470>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1f0      	bne.n	80040c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	69da      	ldr	r2, [r3, #28]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	431a      	orrs	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f0:	019b      	lsls	r3, r3, #6
 80040f2:	431a      	orrs	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f8:	085b      	lsrs	r3, r3, #1
 80040fa:	3b01      	subs	r3, #1
 80040fc:	041b      	lsls	r3, r3, #16
 80040fe:	431a      	orrs	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004104:	061b      	lsls	r3, r3, #24
 8004106:	491b      	ldr	r1, [pc, #108]	; (8004174 <HAL_RCC_OscConfig+0x470>)
 8004108:	4313      	orrs	r3, r2
 800410a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800410c:	4b1b      	ldr	r3, [pc, #108]	; (800417c <HAL_RCC_OscConfig+0x478>)
 800410e:	2201      	movs	r2, #1
 8004110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004112:	f7fd f8ef 	bl	80012f4 <HAL_GetTick>
 8004116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004118:	e008      	b.n	800412c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800411a:	f7fd f8eb 	bl	80012f4 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	2b02      	cmp	r3, #2
 8004126:	d901      	bls.n	800412c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e05c      	b.n	80041e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800412c:	4b11      	ldr	r3, [pc, #68]	; (8004174 <HAL_RCC_OscConfig+0x470>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d0f0      	beq.n	800411a <HAL_RCC_OscConfig+0x416>
 8004138:	e054      	b.n	80041e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800413a:	4b10      	ldr	r3, [pc, #64]	; (800417c <HAL_RCC_OscConfig+0x478>)
 800413c:	2200      	movs	r2, #0
 800413e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004140:	f7fd f8d8 	bl	80012f4 <HAL_GetTick>
 8004144:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004146:	e008      	b.n	800415a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004148:	f7fd f8d4 	bl	80012f4 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b02      	cmp	r3, #2
 8004154:	d901      	bls.n	800415a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e045      	b.n	80041e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800415a:	4b06      	ldr	r3, [pc, #24]	; (8004174 <HAL_RCC_OscConfig+0x470>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1f0      	bne.n	8004148 <HAL_RCC_OscConfig+0x444>
 8004166:	e03d      	b.n	80041e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d107      	bne.n	8004180 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e038      	b.n	80041e6 <HAL_RCC_OscConfig+0x4e2>
 8004174:	40023800 	.word	0x40023800
 8004178:	40007000 	.word	0x40007000
 800417c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004180:	4b1b      	ldr	r3, [pc, #108]	; (80041f0 <HAL_RCC_OscConfig+0x4ec>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d028      	beq.n	80041e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004198:	429a      	cmp	r2, r3
 800419a:	d121      	bne.n	80041e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d11a      	bne.n	80041e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041b0:	4013      	ands	r3, r2
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d111      	bne.n	80041e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c6:	085b      	lsrs	r3, r3, #1
 80041c8:	3b01      	subs	r3, #1
 80041ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d107      	bne.n	80041e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041dc:	429a      	cmp	r2, r3
 80041de:	d001      	beq.n	80041e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e000      	b.n	80041e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3718      	adds	r7, #24
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	40023800 	.word	0x40023800

080041f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e0cc      	b.n	80043a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004208:	4b68      	ldr	r3, [pc, #416]	; (80043ac <HAL_RCC_ClockConfig+0x1b8>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0307 	and.w	r3, r3, #7
 8004210:	683a      	ldr	r2, [r7, #0]
 8004212:	429a      	cmp	r2, r3
 8004214:	d90c      	bls.n	8004230 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004216:	4b65      	ldr	r3, [pc, #404]	; (80043ac <HAL_RCC_ClockConfig+0x1b8>)
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	b2d2      	uxtb	r2, r2
 800421c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800421e:	4b63      	ldr	r3, [pc, #396]	; (80043ac <HAL_RCC_ClockConfig+0x1b8>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0307 	and.w	r3, r3, #7
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	429a      	cmp	r2, r3
 800422a:	d001      	beq.n	8004230 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e0b8      	b.n	80043a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d020      	beq.n	800427e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	2b00      	cmp	r3, #0
 8004246:	d005      	beq.n	8004254 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004248:	4b59      	ldr	r3, [pc, #356]	; (80043b0 <HAL_RCC_ClockConfig+0x1bc>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	4a58      	ldr	r2, [pc, #352]	; (80043b0 <HAL_RCC_ClockConfig+0x1bc>)
 800424e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004252:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0308 	and.w	r3, r3, #8
 800425c:	2b00      	cmp	r3, #0
 800425e:	d005      	beq.n	800426c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004260:	4b53      	ldr	r3, [pc, #332]	; (80043b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	4a52      	ldr	r2, [pc, #328]	; (80043b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004266:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800426a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800426c:	4b50      	ldr	r3, [pc, #320]	; (80043b0 <HAL_RCC_ClockConfig+0x1bc>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	494d      	ldr	r1, [pc, #308]	; (80043b0 <HAL_RCC_ClockConfig+0x1bc>)
 800427a:	4313      	orrs	r3, r2
 800427c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	d044      	beq.n	8004314 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d107      	bne.n	80042a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004292:	4b47      	ldr	r3, [pc, #284]	; (80043b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d119      	bne.n	80042d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e07f      	b.n	80043a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d003      	beq.n	80042b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042ae:	2b03      	cmp	r3, #3
 80042b0:	d107      	bne.n	80042c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042b2:	4b3f      	ldr	r3, [pc, #252]	; (80043b0 <HAL_RCC_ClockConfig+0x1bc>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d109      	bne.n	80042d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e06f      	b.n	80043a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042c2:	4b3b      	ldr	r3, [pc, #236]	; (80043b0 <HAL_RCC_ClockConfig+0x1bc>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e067      	b.n	80043a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042d2:	4b37      	ldr	r3, [pc, #220]	; (80043b0 <HAL_RCC_ClockConfig+0x1bc>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f023 0203 	bic.w	r2, r3, #3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	4934      	ldr	r1, [pc, #208]	; (80043b0 <HAL_RCC_ClockConfig+0x1bc>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042e4:	f7fd f806 	bl	80012f4 <HAL_GetTick>
 80042e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ea:	e00a      	b.n	8004302 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042ec:	f7fd f802 	bl	80012f4 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e04f      	b.n	80043a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004302:	4b2b      	ldr	r3, [pc, #172]	; (80043b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f003 020c 	and.w	r2, r3, #12
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	429a      	cmp	r2, r3
 8004312:	d1eb      	bne.n	80042ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004314:	4b25      	ldr	r3, [pc, #148]	; (80043ac <HAL_RCC_ClockConfig+0x1b8>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0307 	and.w	r3, r3, #7
 800431c:	683a      	ldr	r2, [r7, #0]
 800431e:	429a      	cmp	r2, r3
 8004320:	d20c      	bcs.n	800433c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004322:	4b22      	ldr	r3, [pc, #136]	; (80043ac <HAL_RCC_ClockConfig+0x1b8>)
 8004324:	683a      	ldr	r2, [r7, #0]
 8004326:	b2d2      	uxtb	r2, r2
 8004328:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800432a:	4b20      	ldr	r3, [pc, #128]	; (80043ac <HAL_RCC_ClockConfig+0x1b8>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0307 	and.w	r3, r3, #7
 8004332:	683a      	ldr	r2, [r7, #0]
 8004334:	429a      	cmp	r2, r3
 8004336:	d001      	beq.n	800433c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e032      	b.n	80043a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0304 	and.w	r3, r3, #4
 8004344:	2b00      	cmp	r3, #0
 8004346:	d008      	beq.n	800435a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004348:	4b19      	ldr	r3, [pc, #100]	; (80043b0 <HAL_RCC_ClockConfig+0x1bc>)
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	4916      	ldr	r1, [pc, #88]	; (80043b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004356:	4313      	orrs	r3, r2
 8004358:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0308 	and.w	r3, r3, #8
 8004362:	2b00      	cmp	r3, #0
 8004364:	d009      	beq.n	800437a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004366:	4b12      	ldr	r3, [pc, #72]	; (80043b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	00db      	lsls	r3, r3, #3
 8004374:	490e      	ldr	r1, [pc, #56]	; (80043b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004376:	4313      	orrs	r3, r2
 8004378:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800437a:	f000 f821 	bl	80043c0 <HAL_RCC_GetSysClockFreq>
 800437e:	4602      	mov	r2, r0
 8004380:	4b0b      	ldr	r3, [pc, #44]	; (80043b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	091b      	lsrs	r3, r3, #4
 8004386:	f003 030f 	and.w	r3, r3, #15
 800438a:	490a      	ldr	r1, [pc, #40]	; (80043b4 <HAL_RCC_ClockConfig+0x1c0>)
 800438c:	5ccb      	ldrb	r3, [r1, r3]
 800438e:	fa22 f303 	lsr.w	r3, r2, r3
 8004392:	4a09      	ldr	r2, [pc, #36]	; (80043b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004396:	4b09      	ldr	r3, [pc, #36]	; (80043bc <HAL_RCC_ClockConfig+0x1c8>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4618      	mov	r0, r3
 800439c:	f7fc ff66 	bl	800126c <HAL_InitTick>

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	40023c00 	.word	0x40023c00
 80043b0:	40023800 	.word	0x40023800
 80043b4:	08009a50 	.word	0x08009a50
 80043b8:	20000008 	.word	0x20000008
 80043bc:	2000000c 	.word	0x2000000c

080043c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043c4:	b094      	sub	sp, #80	; 0x50
 80043c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043c8:	2300      	movs	r3, #0
 80043ca:	647b      	str	r3, [r7, #68]	; 0x44
 80043cc:	2300      	movs	r3, #0
 80043ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043d0:	2300      	movs	r3, #0
 80043d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80043d4:	2300      	movs	r3, #0
 80043d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043d8:	4b79      	ldr	r3, [pc, #484]	; (80045c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f003 030c 	and.w	r3, r3, #12
 80043e0:	2b08      	cmp	r3, #8
 80043e2:	d00d      	beq.n	8004400 <HAL_RCC_GetSysClockFreq+0x40>
 80043e4:	2b08      	cmp	r3, #8
 80043e6:	f200 80e1 	bhi.w	80045ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d002      	beq.n	80043f4 <HAL_RCC_GetSysClockFreq+0x34>
 80043ee:	2b04      	cmp	r3, #4
 80043f0:	d003      	beq.n	80043fa <HAL_RCC_GetSysClockFreq+0x3a>
 80043f2:	e0db      	b.n	80045ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043f4:	4b73      	ldr	r3, [pc, #460]	; (80045c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80043f6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80043f8:	e0db      	b.n	80045b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043fa:	4b73      	ldr	r3, [pc, #460]	; (80045c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80043fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043fe:	e0d8      	b.n	80045b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004400:	4b6f      	ldr	r3, [pc, #444]	; (80045c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004408:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800440a:	4b6d      	ldr	r3, [pc, #436]	; (80045c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d063      	beq.n	80044de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004416:	4b6a      	ldr	r3, [pc, #424]	; (80045c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	099b      	lsrs	r3, r3, #6
 800441c:	2200      	movs	r2, #0
 800441e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004420:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004428:	633b      	str	r3, [r7, #48]	; 0x30
 800442a:	2300      	movs	r3, #0
 800442c:	637b      	str	r3, [r7, #52]	; 0x34
 800442e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004432:	4622      	mov	r2, r4
 8004434:	462b      	mov	r3, r5
 8004436:	f04f 0000 	mov.w	r0, #0
 800443a:	f04f 0100 	mov.w	r1, #0
 800443e:	0159      	lsls	r1, r3, #5
 8004440:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004444:	0150      	lsls	r0, r2, #5
 8004446:	4602      	mov	r2, r0
 8004448:	460b      	mov	r3, r1
 800444a:	4621      	mov	r1, r4
 800444c:	1a51      	subs	r1, r2, r1
 800444e:	6139      	str	r1, [r7, #16]
 8004450:	4629      	mov	r1, r5
 8004452:	eb63 0301 	sbc.w	r3, r3, r1
 8004456:	617b      	str	r3, [r7, #20]
 8004458:	f04f 0200 	mov.w	r2, #0
 800445c:	f04f 0300 	mov.w	r3, #0
 8004460:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004464:	4659      	mov	r1, fp
 8004466:	018b      	lsls	r3, r1, #6
 8004468:	4651      	mov	r1, sl
 800446a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800446e:	4651      	mov	r1, sl
 8004470:	018a      	lsls	r2, r1, #6
 8004472:	4651      	mov	r1, sl
 8004474:	ebb2 0801 	subs.w	r8, r2, r1
 8004478:	4659      	mov	r1, fp
 800447a:	eb63 0901 	sbc.w	r9, r3, r1
 800447e:	f04f 0200 	mov.w	r2, #0
 8004482:	f04f 0300 	mov.w	r3, #0
 8004486:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800448a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800448e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004492:	4690      	mov	r8, r2
 8004494:	4699      	mov	r9, r3
 8004496:	4623      	mov	r3, r4
 8004498:	eb18 0303 	adds.w	r3, r8, r3
 800449c:	60bb      	str	r3, [r7, #8]
 800449e:	462b      	mov	r3, r5
 80044a0:	eb49 0303 	adc.w	r3, r9, r3
 80044a4:	60fb      	str	r3, [r7, #12]
 80044a6:	f04f 0200 	mov.w	r2, #0
 80044aa:	f04f 0300 	mov.w	r3, #0
 80044ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80044b2:	4629      	mov	r1, r5
 80044b4:	024b      	lsls	r3, r1, #9
 80044b6:	4621      	mov	r1, r4
 80044b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80044bc:	4621      	mov	r1, r4
 80044be:	024a      	lsls	r2, r1, #9
 80044c0:	4610      	mov	r0, r2
 80044c2:	4619      	mov	r1, r3
 80044c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044c6:	2200      	movs	r2, #0
 80044c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80044ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044d0:	f7fb fe7a 	bl	80001c8 <__aeabi_uldivmod>
 80044d4:	4602      	mov	r2, r0
 80044d6:	460b      	mov	r3, r1
 80044d8:	4613      	mov	r3, r2
 80044da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044dc:	e058      	b.n	8004590 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044de:	4b38      	ldr	r3, [pc, #224]	; (80045c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	099b      	lsrs	r3, r3, #6
 80044e4:	2200      	movs	r2, #0
 80044e6:	4618      	mov	r0, r3
 80044e8:	4611      	mov	r1, r2
 80044ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80044ee:	623b      	str	r3, [r7, #32]
 80044f0:	2300      	movs	r3, #0
 80044f2:	627b      	str	r3, [r7, #36]	; 0x24
 80044f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80044f8:	4642      	mov	r2, r8
 80044fa:	464b      	mov	r3, r9
 80044fc:	f04f 0000 	mov.w	r0, #0
 8004500:	f04f 0100 	mov.w	r1, #0
 8004504:	0159      	lsls	r1, r3, #5
 8004506:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800450a:	0150      	lsls	r0, r2, #5
 800450c:	4602      	mov	r2, r0
 800450e:	460b      	mov	r3, r1
 8004510:	4641      	mov	r1, r8
 8004512:	ebb2 0a01 	subs.w	sl, r2, r1
 8004516:	4649      	mov	r1, r9
 8004518:	eb63 0b01 	sbc.w	fp, r3, r1
 800451c:	f04f 0200 	mov.w	r2, #0
 8004520:	f04f 0300 	mov.w	r3, #0
 8004524:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004528:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800452c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004530:	ebb2 040a 	subs.w	r4, r2, sl
 8004534:	eb63 050b 	sbc.w	r5, r3, fp
 8004538:	f04f 0200 	mov.w	r2, #0
 800453c:	f04f 0300 	mov.w	r3, #0
 8004540:	00eb      	lsls	r3, r5, #3
 8004542:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004546:	00e2      	lsls	r2, r4, #3
 8004548:	4614      	mov	r4, r2
 800454a:	461d      	mov	r5, r3
 800454c:	4643      	mov	r3, r8
 800454e:	18e3      	adds	r3, r4, r3
 8004550:	603b      	str	r3, [r7, #0]
 8004552:	464b      	mov	r3, r9
 8004554:	eb45 0303 	adc.w	r3, r5, r3
 8004558:	607b      	str	r3, [r7, #4]
 800455a:	f04f 0200 	mov.w	r2, #0
 800455e:	f04f 0300 	mov.w	r3, #0
 8004562:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004566:	4629      	mov	r1, r5
 8004568:	028b      	lsls	r3, r1, #10
 800456a:	4621      	mov	r1, r4
 800456c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004570:	4621      	mov	r1, r4
 8004572:	028a      	lsls	r2, r1, #10
 8004574:	4610      	mov	r0, r2
 8004576:	4619      	mov	r1, r3
 8004578:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800457a:	2200      	movs	r2, #0
 800457c:	61bb      	str	r3, [r7, #24]
 800457e:	61fa      	str	r2, [r7, #28]
 8004580:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004584:	f7fb fe20 	bl	80001c8 <__aeabi_uldivmod>
 8004588:	4602      	mov	r2, r0
 800458a:	460b      	mov	r3, r1
 800458c:	4613      	mov	r3, r2
 800458e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004590:	4b0b      	ldr	r3, [pc, #44]	; (80045c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	0c1b      	lsrs	r3, r3, #16
 8004596:	f003 0303 	and.w	r3, r3, #3
 800459a:	3301      	adds	r3, #1
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80045a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045aa:	e002      	b.n	80045b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045ac:	4b05      	ldr	r3, [pc, #20]	; (80045c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80045ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3750      	adds	r7, #80	; 0x50
 80045b8:	46bd      	mov	sp, r7
 80045ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045be:	bf00      	nop
 80045c0:	40023800 	.word	0x40023800
 80045c4:	00f42400 	.word	0x00f42400
 80045c8:	007a1200 	.word	0x007a1200

080045cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045cc:	b480      	push	{r7}
 80045ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045d0:	4b03      	ldr	r3, [pc, #12]	; (80045e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80045d2:	681b      	ldr	r3, [r3, #0]
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	20000008 	.word	0x20000008

080045e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045e8:	f7ff fff0 	bl	80045cc <HAL_RCC_GetHCLKFreq>
 80045ec:	4602      	mov	r2, r0
 80045ee:	4b05      	ldr	r3, [pc, #20]	; (8004604 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	0a9b      	lsrs	r3, r3, #10
 80045f4:	f003 0307 	and.w	r3, r3, #7
 80045f8:	4903      	ldr	r1, [pc, #12]	; (8004608 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045fa:	5ccb      	ldrb	r3, [r1, r3]
 80045fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004600:	4618      	mov	r0, r3
 8004602:	bd80      	pop	{r7, pc}
 8004604:	40023800 	.word	0x40023800
 8004608:	08009a60 	.word	0x08009a60

0800460c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004610:	f7ff ffdc 	bl	80045cc <HAL_RCC_GetHCLKFreq>
 8004614:	4602      	mov	r2, r0
 8004616:	4b05      	ldr	r3, [pc, #20]	; (800462c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	0b5b      	lsrs	r3, r3, #13
 800461c:	f003 0307 	and.w	r3, r3, #7
 8004620:	4903      	ldr	r1, [pc, #12]	; (8004630 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004622:	5ccb      	ldrb	r3, [r1, r3]
 8004624:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004628:	4618      	mov	r0, r3
 800462a:	bd80      	pop	{r7, pc}
 800462c:	40023800 	.word	0x40023800
 8004630:	08009a60 	.word	0x08009a60

08004634 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800463c:	2300      	movs	r3, #0
 800463e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004640:	2300      	movs	r3, #0
 8004642:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	2b00      	cmp	r3, #0
 800464e:	d105      	bne.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004658:	2b00      	cmp	r3, #0
 800465a:	d035      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800465c:	4b62      	ldr	r3, [pc, #392]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800465e:	2200      	movs	r2, #0
 8004660:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004662:	f7fc fe47 	bl	80012f4 <HAL_GetTick>
 8004666:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004668:	e008      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800466a:	f7fc fe43 	bl	80012f4 <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	2b02      	cmp	r3, #2
 8004676:	d901      	bls.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e0b0      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800467c:	4b5b      	ldr	r3, [pc, #364]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1f0      	bne.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	019a      	lsls	r2, r3, #6
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	071b      	lsls	r3, r3, #28
 8004694:	4955      	ldr	r1, [pc, #340]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004696:	4313      	orrs	r3, r2
 8004698:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800469c:	4b52      	ldr	r3, [pc, #328]	; (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800469e:	2201      	movs	r2, #1
 80046a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046a2:	f7fc fe27 	bl	80012f4 <HAL_GetTick>
 80046a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046a8:	e008      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80046aa:	f7fc fe23 	bl	80012f4 <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d901      	bls.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e090      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046bc:	4b4b      	ldr	r3, [pc, #300]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d0f0      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0302 	and.w	r3, r3, #2
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f000 8083 	beq.w	80047dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80046d6:	2300      	movs	r3, #0
 80046d8:	60fb      	str	r3, [r7, #12]
 80046da:	4b44      	ldr	r3, [pc, #272]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046de:	4a43      	ldr	r2, [pc, #268]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046e4:	6413      	str	r3, [r2, #64]	; 0x40
 80046e6:	4b41      	ldr	r3, [pc, #260]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80046f2:	4b3f      	ldr	r3, [pc, #252]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a3e      	ldr	r2, [pc, #248]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046fc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80046fe:	f7fc fdf9 	bl	80012f4 <HAL_GetTick>
 8004702:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004704:	e008      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004706:	f7fc fdf5 	bl	80012f4 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d901      	bls.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e062      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004718:	4b35      	ldr	r3, [pc, #212]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004720:	2b00      	cmp	r3, #0
 8004722:	d0f0      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004724:	4b31      	ldr	r3, [pc, #196]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004728:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800472c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d02f      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	429a      	cmp	r2, r3
 8004740:	d028      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004742:	4b2a      	ldr	r3, [pc, #168]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800474a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800474c:	4b29      	ldr	r3, [pc, #164]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800474e:	2201      	movs	r2, #1
 8004750:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004752:	4b28      	ldr	r3, [pc, #160]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004754:	2200      	movs	r2, #0
 8004756:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004758:	4a24      	ldr	r2, [pc, #144]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800475e:	4b23      	ldr	r3, [pc, #140]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b01      	cmp	r3, #1
 8004768:	d114      	bne.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800476a:	f7fc fdc3 	bl	80012f4 <HAL_GetTick>
 800476e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004770:	e00a      	b.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004772:	f7fc fdbf 	bl	80012f4 <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004780:	4293      	cmp	r3, r2
 8004782:	d901      	bls.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e02a      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004788:	4b18      	ldr	r3, [pc, #96]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800478a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d0ee      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800479c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047a0:	d10d      	bne.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80047a2:	4b12      	ldr	r3, [pc, #72]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80047b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047b6:	490d      	ldr	r1, [pc, #52]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	608b      	str	r3, [r1, #8]
 80047bc:	e005      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x196>
 80047be:	4b0b      	ldr	r3, [pc, #44]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	4a0a      	ldr	r2, [pc, #40]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047c4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80047c8:	6093      	str	r3, [r2, #8]
 80047ca:	4b08      	ldr	r3, [pc, #32]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047d6:	4905      	ldr	r1, [pc, #20]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3718      	adds	r7, #24
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	42470068 	.word	0x42470068
 80047ec:	40023800 	.word	0x40023800
 80047f0:	40007000 	.word	0x40007000
 80047f4:	42470e40 	.word	0x42470e40

080047f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b087      	sub	sp, #28
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004800:	2300      	movs	r3, #0
 8004802:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004804:	2300      	movs	r3, #0
 8004806:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004808:	2300      	movs	r3, #0
 800480a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800480c:	2300      	movs	r3, #0
 800480e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d13e      	bne.n	8004894 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004816:	4b23      	ldr	r3, [pc, #140]	; (80048a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800481e:	60fb      	str	r3, [r7, #12]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d005      	beq.n	8004832 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d12f      	bne.n	800488c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800482c:	4b1e      	ldr	r3, [pc, #120]	; (80048a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800482e:	617b      	str	r3, [r7, #20]
          break;
 8004830:	e02f      	b.n	8004892 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004832:	4b1c      	ldr	r3, [pc, #112]	; (80048a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800483a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800483e:	d108      	bne.n	8004852 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004840:	4b18      	ldr	r3, [pc, #96]	; (80048a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004848:	4a18      	ldr	r2, [pc, #96]	; (80048ac <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800484a:	fbb2 f3f3 	udiv	r3, r2, r3
 800484e:	613b      	str	r3, [r7, #16]
 8004850:	e007      	b.n	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004852:	4b14      	ldr	r3, [pc, #80]	; (80048a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800485a:	4a15      	ldr	r2, [pc, #84]	; (80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800485c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004860:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004862:	4b10      	ldr	r3, [pc, #64]	; (80048a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004864:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004868:	099b      	lsrs	r3, r3, #6
 800486a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	fb02 f303 	mul.w	r3, r2, r3
 8004874:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004876:	4b0b      	ldr	r3, [pc, #44]	; (80048a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004878:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800487c:	0f1b      	lsrs	r3, r3, #28
 800487e:	f003 0307 	and.w	r3, r3, #7
 8004882:	68ba      	ldr	r2, [r7, #8]
 8004884:	fbb2 f3f3 	udiv	r3, r2, r3
 8004888:	617b      	str	r3, [r7, #20]
          break;
 800488a:	e002      	b.n	8004892 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800488c:	2300      	movs	r3, #0
 800488e:	617b      	str	r3, [r7, #20]
          break;
 8004890:	bf00      	nop
        }
      }
      break;
 8004892:	bf00      	nop
    }
  }
  return frequency;
 8004894:	697b      	ldr	r3, [r7, #20]
}
 8004896:	4618      	mov	r0, r3
 8004898:	371c      	adds	r7, #28
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	40023800 	.word	0x40023800
 80048a8:	00bb8000 	.word	0x00bb8000
 80048ac:	007a1200 	.word	0x007a1200
 80048b0:	00f42400 	.word	0x00f42400

080048b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e07b      	b.n	80049be <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d108      	bne.n	80048e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048d6:	d009      	beq.n	80048ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	61da      	str	r2, [r3, #28]
 80048de:	e005      	b.n	80048ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d106      	bne.n	800490c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f7fc faf0 	bl	8000eec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2202      	movs	r2, #2
 8004910:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004922:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004934:	431a      	orrs	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800493e:	431a      	orrs	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	431a      	orrs	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	431a      	orrs	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800495c:	431a      	orrs	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	69db      	ldr	r3, [r3, #28]
 8004962:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004966:	431a      	orrs	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a1b      	ldr	r3, [r3, #32]
 800496c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004970:	ea42 0103 	orr.w	r1, r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004978:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	430a      	orrs	r2, r1
 8004982:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	0c1b      	lsrs	r3, r3, #16
 800498a:	f003 0104 	and.w	r1, r3, #4
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004992:	f003 0210 	and.w	r2, r3, #16
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	430a      	orrs	r2, r1
 800499c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	69da      	ldr	r2, [r3, #28]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3708      	adds	r7, #8
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b088      	sub	sp, #32
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	60f8      	str	r0, [r7, #12]
 80049ce:	60b9      	str	r1, [r7, #8]
 80049d0:	603b      	str	r3, [r7, #0]
 80049d2:	4613      	mov	r3, r2
 80049d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049d6:	2300      	movs	r3, #0
 80049d8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d101      	bne.n	80049e8 <HAL_SPI_Transmit+0x22>
 80049e4:	2302      	movs	r3, #2
 80049e6:	e126      	b.n	8004c36 <HAL_SPI_Transmit+0x270>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049f0:	f7fc fc80 	bl	80012f4 <HAL_GetTick>
 80049f4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80049f6:	88fb      	ldrh	r3, [r7, #6]
 80049f8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d002      	beq.n	8004a0c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004a06:	2302      	movs	r3, #2
 8004a08:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a0a:	e10b      	b.n	8004c24 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d002      	beq.n	8004a18 <HAL_SPI_Transmit+0x52>
 8004a12:	88fb      	ldrh	r3, [r7, #6]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d102      	bne.n	8004a1e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a1c:	e102      	b.n	8004c24 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2203      	movs	r2, #3
 8004a22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	68ba      	ldr	r2, [r7, #8]
 8004a30:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	88fa      	ldrh	r2, [r7, #6]
 8004a36:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	88fa      	ldrh	r2, [r7, #6]
 8004a3c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a64:	d10f      	bne.n	8004a86 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a74:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a84:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a90:	2b40      	cmp	r3, #64	; 0x40
 8004a92:	d007      	beq.n	8004aa4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004aa2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aac:	d14b      	bne.n	8004b46 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d002      	beq.n	8004abc <HAL_SPI_Transmit+0xf6>
 8004ab6:	8afb      	ldrh	r3, [r7, #22]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d13e      	bne.n	8004b3a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac0:	881a      	ldrh	r2, [r3, #0]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004acc:	1c9a      	adds	r2, r3, #2
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ae0:	e02b      	b.n	8004b3a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	f003 0302 	and.w	r3, r3, #2
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d112      	bne.n	8004b16 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af4:	881a      	ldrh	r2, [r3, #0]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b00:	1c9a      	adds	r2, r3, #2
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	b29a      	uxth	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b14:	e011      	b.n	8004b3a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b16:	f7fc fbed 	bl	80012f4 <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	683a      	ldr	r2, [r7, #0]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d803      	bhi.n	8004b2e <HAL_SPI_Transmit+0x168>
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b2c:	d102      	bne.n	8004b34 <HAL_SPI_Transmit+0x16e>
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d102      	bne.n	8004b3a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b38:	e074      	b.n	8004c24 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1ce      	bne.n	8004ae2 <HAL_SPI_Transmit+0x11c>
 8004b44:	e04c      	b.n	8004be0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d002      	beq.n	8004b54 <HAL_SPI_Transmit+0x18e>
 8004b4e:	8afb      	ldrh	r3, [r7, #22]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d140      	bne.n	8004bd6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	330c      	adds	r3, #12
 8004b5e:	7812      	ldrb	r2, [r2, #0]
 8004b60:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b66:	1c5a      	adds	r2, r3, #1
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	3b01      	subs	r3, #1
 8004b74:	b29a      	uxth	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004b7a:	e02c      	b.n	8004bd6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d113      	bne.n	8004bb2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	330c      	adds	r3, #12
 8004b94:	7812      	ldrb	r2, [r2, #0]
 8004b96:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9c:	1c5a      	adds	r2, r3, #1
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	86da      	strh	r2, [r3, #54]	; 0x36
 8004bb0:	e011      	b.n	8004bd6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bb2:	f7fc fb9f 	bl	80012f4 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d803      	bhi.n	8004bca <HAL_SPI_Transmit+0x204>
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc8:	d102      	bne.n	8004bd0 <HAL_SPI_Transmit+0x20a>
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d102      	bne.n	8004bd6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004bd4:	e026      	b.n	8004c24 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1cd      	bne.n	8004b7c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004be0:	69ba      	ldr	r2, [r7, #24]
 8004be2:	6839      	ldr	r1, [r7, #0]
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 fbcb 	bl	8005380 <SPI_EndRxTxTransaction>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d002      	beq.n	8004bf6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10a      	bne.n	8004c14 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bfe:	2300      	movs	r3, #0
 8004c00:	613b      	str	r3, [r7, #16]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	613b      	str	r3, [r7, #16]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	613b      	str	r3, [r7, #16]
 8004c12:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d002      	beq.n	8004c22 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	77fb      	strb	r3, [r7, #31]
 8004c20:	e000      	b.n	8004c24 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004c22:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c34:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3720      	adds	r7, #32
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b088      	sub	sp, #32
 8004c42:	af02      	add	r7, sp, #8
 8004c44:	60f8      	str	r0, [r7, #12]
 8004c46:	60b9      	str	r1, [r7, #8]
 8004c48:	603b      	str	r3, [r7, #0]
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c5a:	d112      	bne.n	8004c82 <HAL_SPI_Receive+0x44>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d10e      	bne.n	8004c82 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2204      	movs	r2, #4
 8004c68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004c6c:	88fa      	ldrh	r2, [r7, #6]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	9300      	str	r3, [sp, #0]
 8004c72:	4613      	mov	r3, r2
 8004c74:	68ba      	ldr	r2, [r7, #8]
 8004c76:	68b9      	ldr	r1, [r7, #8]
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f000 f8f1 	bl	8004e60 <HAL_SPI_TransmitReceive>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	e0ea      	b.n	8004e58 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d101      	bne.n	8004c90 <HAL_SPI_Receive+0x52>
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	e0e3      	b.n	8004e58 <HAL_SPI_Receive+0x21a>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c98:	f7fc fb2c 	bl	80012f4 <HAL_GetTick>
 8004c9c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d002      	beq.n	8004cb0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004caa:	2302      	movs	r3, #2
 8004cac:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004cae:	e0ca      	b.n	8004e46 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d002      	beq.n	8004cbc <HAL_SPI_Receive+0x7e>
 8004cb6:	88fb      	ldrh	r3, [r7, #6]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d102      	bne.n	8004cc2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004cc0:	e0c1      	b.n	8004e46 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2204      	movs	r2, #4
 8004cc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	68ba      	ldr	r2, [r7, #8]
 8004cd4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	88fa      	ldrh	r2, [r7, #6]
 8004cda:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	88fa      	ldrh	r2, [r7, #6]
 8004ce0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d08:	d10f      	bne.n	8004d2a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d28:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d34:	2b40      	cmp	r3, #64	; 0x40
 8004d36:	d007      	beq.n	8004d48 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d46:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d162      	bne.n	8004e16 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004d50:	e02e      	b.n	8004db0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d115      	bne.n	8004d8c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f103 020c 	add.w	r2, r3, #12
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6c:	7812      	ldrb	r2, [r2, #0]
 8004d6e:	b2d2      	uxtb	r2, r2
 8004d70:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d76:	1c5a      	adds	r2, r3, #1
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	3b01      	subs	r3, #1
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d8a:	e011      	b.n	8004db0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d8c:	f7fc fab2 	bl	80012f4 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	683a      	ldr	r2, [r7, #0]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d803      	bhi.n	8004da4 <HAL_SPI_Receive+0x166>
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da2:	d102      	bne.n	8004daa <HAL_SPI_Receive+0x16c>
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d102      	bne.n	8004db0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004dae:	e04a      	b.n	8004e46 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1cb      	bne.n	8004d52 <HAL_SPI_Receive+0x114>
 8004dba:	e031      	b.n	8004e20 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d113      	bne.n	8004df2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68da      	ldr	r2, [r3, #12]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd4:	b292      	uxth	r2, r2
 8004dd6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ddc:	1c9a      	adds	r2, r3, #2
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	3b01      	subs	r3, #1
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004df0:	e011      	b.n	8004e16 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004df2:	f7fc fa7f 	bl	80012f4 <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d803      	bhi.n	8004e0a <HAL_SPI_Receive+0x1cc>
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e08:	d102      	bne.n	8004e10 <HAL_SPI_Receive+0x1d2>
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d102      	bne.n	8004e16 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004e14:	e017      	b.n	8004e46 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1cd      	bne.n	8004dbc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	6839      	ldr	r1, [r7, #0]
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f000 fa45 	bl	80052b4 <SPI_EndRxTransaction>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d002      	beq.n	8004e36 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2220      	movs	r2, #32
 8004e34:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d002      	beq.n	8004e44 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	75fb      	strb	r3, [r7, #23]
 8004e42:	e000      	b.n	8004e46 <HAL_SPI_Receive+0x208>
  }

error :
 8004e44:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e56:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3718      	adds	r7, #24
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b08c      	sub	sp, #48	; 0x30
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
 8004e6c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004e72:	2300      	movs	r3, #0
 8004e74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d101      	bne.n	8004e86 <HAL_SPI_TransmitReceive+0x26>
 8004e82:	2302      	movs	r3, #2
 8004e84:	e18a      	b.n	800519c <HAL_SPI_TransmitReceive+0x33c>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e8e:	f7fc fa31 	bl	80012f4 <HAL_GetTick>
 8004e92:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004ea4:	887b      	ldrh	r3, [r7, #2]
 8004ea6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ea8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d00f      	beq.n	8004ed0 <HAL_SPI_TransmitReceive+0x70>
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004eb6:	d107      	bne.n	8004ec8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d103      	bne.n	8004ec8 <HAL_SPI_TransmitReceive+0x68>
 8004ec0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ec4:	2b04      	cmp	r3, #4
 8004ec6:	d003      	beq.n	8004ed0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004ec8:	2302      	movs	r3, #2
 8004eca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004ece:	e15b      	b.n	8005188 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d005      	beq.n	8004ee2 <HAL_SPI_TransmitReceive+0x82>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d002      	beq.n	8004ee2 <HAL_SPI_TransmitReceive+0x82>
 8004edc:	887b      	ldrh	r3, [r7, #2]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d103      	bne.n	8004eea <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004ee8:	e14e      	b.n	8005188 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b04      	cmp	r3, #4
 8004ef4:	d003      	beq.n	8004efe <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2205      	movs	r2, #5
 8004efa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	887a      	ldrh	r2, [r7, #2]
 8004f0e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	887a      	ldrh	r2, [r7, #2]
 8004f14:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	68ba      	ldr	r2, [r7, #8]
 8004f1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	887a      	ldrh	r2, [r7, #2]
 8004f20:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	887a      	ldrh	r2, [r7, #2]
 8004f26:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f3e:	2b40      	cmp	r3, #64	; 0x40
 8004f40:	d007      	beq.n	8004f52 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f50:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f5a:	d178      	bne.n	800504e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d002      	beq.n	8004f6a <HAL_SPI_TransmitReceive+0x10a>
 8004f64:	8b7b      	ldrh	r3, [r7, #26]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d166      	bne.n	8005038 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6e:	881a      	ldrh	r2, [r3, #0]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7a:	1c9a      	adds	r2, r3, #2
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	3b01      	subs	r3, #1
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f8e:	e053      	b.n	8005038 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d11b      	bne.n	8004fd6 <HAL_SPI_TransmitReceive+0x176>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d016      	beq.n	8004fd6 <HAL_SPI_TransmitReceive+0x176>
 8004fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d113      	bne.n	8004fd6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb2:	881a      	ldrh	r2, [r3, #0]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fbe:	1c9a      	adds	r2, r3, #2
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	f003 0301 	and.w	r3, r3, #1
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d119      	bne.n	8005018 <HAL_SPI_TransmitReceive+0x1b8>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d014      	beq.n	8005018 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68da      	ldr	r2, [r3, #12]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff8:	b292      	uxth	r2, r2
 8004ffa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005000:	1c9a      	adds	r2, r3, #2
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800500a:	b29b      	uxth	r3, r3
 800500c:	3b01      	subs	r3, #1
 800500e:	b29a      	uxth	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005014:	2301      	movs	r3, #1
 8005016:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005018:	f7fc f96c 	bl	80012f4 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005024:	429a      	cmp	r2, r3
 8005026:	d807      	bhi.n	8005038 <HAL_SPI_TransmitReceive+0x1d8>
 8005028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800502e:	d003      	beq.n	8005038 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005036:	e0a7      	b.n	8005188 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800503c:	b29b      	uxth	r3, r3
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1a6      	bne.n	8004f90 <HAL_SPI_TransmitReceive+0x130>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005046:	b29b      	uxth	r3, r3
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1a1      	bne.n	8004f90 <HAL_SPI_TransmitReceive+0x130>
 800504c:	e07c      	b.n	8005148 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d002      	beq.n	800505c <HAL_SPI_TransmitReceive+0x1fc>
 8005056:	8b7b      	ldrh	r3, [r7, #26]
 8005058:	2b01      	cmp	r3, #1
 800505a:	d16b      	bne.n	8005134 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	330c      	adds	r3, #12
 8005066:	7812      	ldrb	r2, [r2, #0]
 8005068:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506e:	1c5a      	adds	r2, r3, #1
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005078:	b29b      	uxth	r3, r3
 800507a:	3b01      	subs	r3, #1
 800507c:	b29a      	uxth	r2, r3
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005082:	e057      	b.n	8005134 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f003 0302 	and.w	r3, r3, #2
 800508e:	2b02      	cmp	r3, #2
 8005090:	d11c      	bne.n	80050cc <HAL_SPI_TransmitReceive+0x26c>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005096:	b29b      	uxth	r3, r3
 8005098:	2b00      	cmp	r3, #0
 800509a:	d017      	beq.n	80050cc <HAL_SPI_TransmitReceive+0x26c>
 800509c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d114      	bne.n	80050cc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	330c      	adds	r3, #12
 80050ac:	7812      	ldrb	r2, [r2, #0]
 80050ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b4:	1c5a      	adds	r2, r3, #1
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050be:	b29b      	uxth	r3, r3
 80050c0:	3b01      	subs	r3, #1
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050c8:	2300      	movs	r3, #0
 80050ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f003 0301 	and.w	r3, r3, #1
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d119      	bne.n	800510e <HAL_SPI_TransmitReceive+0x2ae>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050de:	b29b      	uxth	r3, r3
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d014      	beq.n	800510e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68da      	ldr	r2, [r3, #12]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ee:	b2d2      	uxtb	r2, r2
 80050f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f6:	1c5a      	adds	r2, r3, #1
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005100:	b29b      	uxth	r3, r3
 8005102:	3b01      	subs	r3, #1
 8005104:	b29a      	uxth	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800510a:	2301      	movs	r3, #1
 800510c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800510e:	f7fc f8f1 	bl	80012f4 <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800511a:	429a      	cmp	r2, r3
 800511c:	d803      	bhi.n	8005126 <HAL_SPI_TransmitReceive+0x2c6>
 800511e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005124:	d102      	bne.n	800512c <HAL_SPI_TransmitReceive+0x2cc>
 8005126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005128:	2b00      	cmp	r3, #0
 800512a:	d103      	bne.n	8005134 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005132:	e029      	b.n	8005188 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005138:	b29b      	uxth	r3, r3
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1a2      	bne.n	8005084 <HAL_SPI_TransmitReceive+0x224>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005142:	b29b      	uxth	r3, r3
 8005144:	2b00      	cmp	r3, #0
 8005146:	d19d      	bne.n	8005084 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800514a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800514c:	68f8      	ldr	r0, [r7, #12]
 800514e:	f000 f917 	bl	8005380 <SPI_EndRxTxTransaction>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d006      	beq.n	8005166 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2220      	movs	r2, #32
 8005162:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005164:	e010      	b.n	8005188 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d10b      	bne.n	8005186 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800516e:	2300      	movs	r3, #0
 8005170:	617b      	str	r3, [r7, #20]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	617b      	str	r3, [r7, #20]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	617b      	str	r3, [r7, #20]
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	e000      	b.n	8005188 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005186:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005198:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800519c:	4618      	mov	r0, r3
 800519e:	3730      	adds	r7, #48	; 0x30
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b088      	sub	sp, #32
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	603b      	str	r3, [r7, #0]
 80051b0:	4613      	mov	r3, r2
 80051b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80051b4:	f7fc f89e 	bl	80012f4 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051bc:	1a9b      	subs	r3, r3, r2
 80051be:	683a      	ldr	r2, [r7, #0]
 80051c0:	4413      	add	r3, r2
 80051c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80051c4:	f7fc f896 	bl	80012f4 <HAL_GetTick>
 80051c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80051ca:	4b39      	ldr	r3, [pc, #228]	; (80052b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	015b      	lsls	r3, r3, #5
 80051d0:	0d1b      	lsrs	r3, r3, #20
 80051d2:	69fa      	ldr	r2, [r7, #28]
 80051d4:	fb02 f303 	mul.w	r3, r2, r3
 80051d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051da:	e054      	b.n	8005286 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e2:	d050      	beq.n	8005286 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051e4:	f7fc f886 	bl	80012f4 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	69fa      	ldr	r2, [r7, #28]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d902      	bls.n	80051fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d13d      	bne.n	8005276 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	685a      	ldr	r2, [r3, #4]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005208:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005212:	d111      	bne.n	8005238 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800521c:	d004      	beq.n	8005228 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005226:	d107      	bne.n	8005238 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005236:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005240:	d10f      	bne.n	8005262 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005250:	601a      	str	r2, [r3, #0]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005260:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e017      	b.n	80052a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d101      	bne.n	8005280 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800527c:	2300      	movs	r3, #0
 800527e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	3b01      	subs	r3, #1
 8005284:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	689a      	ldr	r2, [r3, #8]
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	4013      	ands	r3, r2
 8005290:	68ba      	ldr	r2, [r7, #8]
 8005292:	429a      	cmp	r2, r3
 8005294:	bf0c      	ite	eq
 8005296:	2301      	moveq	r3, #1
 8005298:	2300      	movne	r3, #0
 800529a:	b2db      	uxtb	r3, r3
 800529c:	461a      	mov	r2, r3
 800529e:	79fb      	ldrb	r3, [r7, #7]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d19b      	bne.n	80051dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3720      	adds	r7, #32
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	20000008 	.word	0x20000008

080052b4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af02      	add	r7, sp, #8
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052c8:	d111      	bne.n	80052ee <SPI_EndRxTransaction+0x3a>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052d2:	d004      	beq.n	80052de <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052dc:	d107      	bne.n	80052ee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052ec:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052f6:	d12a      	bne.n	800534e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005300:	d012      	beq.n	8005328 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	9300      	str	r3, [sp, #0]
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	2200      	movs	r2, #0
 800530a:	2180      	movs	r1, #128	; 0x80
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f7ff ff49 	bl	80051a4 <SPI_WaitFlagStateUntilTimeout>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d02d      	beq.n	8005374 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800531c:	f043 0220 	orr.w	r2, r3, #32
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e026      	b.n	8005376 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	9300      	str	r3, [sp, #0]
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	2200      	movs	r2, #0
 8005330:	2101      	movs	r1, #1
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	f7ff ff36 	bl	80051a4 <SPI_WaitFlagStateUntilTimeout>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d01a      	beq.n	8005374 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005342:	f043 0220 	orr.w	r2, r3, #32
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e013      	b.n	8005376 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	9300      	str	r3, [sp, #0]
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	2200      	movs	r2, #0
 8005356:	2101      	movs	r1, #1
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f7ff ff23 	bl	80051a4 <SPI_WaitFlagStateUntilTimeout>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d007      	beq.n	8005374 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005368:	f043 0220 	orr.w	r2, r3, #32
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	e000      	b.n	8005376 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
	...

08005380 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b088      	sub	sp, #32
 8005384:	af02      	add	r7, sp, #8
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800538c:	4b1b      	ldr	r3, [pc, #108]	; (80053fc <SPI_EndRxTxTransaction+0x7c>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a1b      	ldr	r2, [pc, #108]	; (8005400 <SPI_EndRxTxTransaction+0x80>)
 8005392:	fba2 2303 	umull	r2, r3, r2, r3
 8005396:	0d5b      	lsrs	r3, r3, #21
 8005398:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800539c:	fb02 f303 	mul.w	r3, r2, r3
 80053a0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053aa:	d112      	bne.n	80053d2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	9300      	str	r3, [sp, #0]
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	2200      	movs	r2, #0
 80053b4:	2180      	movs	r1, #128	; 0x80
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f7ff fef4 	bl	80051a4 <SPI_WaitFlagStateUntilTimeout>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d016      	beq.n	80053f0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c6:	f043 0220 	orr.w	r2, r3, #32
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e00f      	b.n	80053f2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00a      	beq.n	80053ee <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	3b01      	subs	r3, #1
 80053dc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053e8:	2b80      	cmp	r3, #128	; 0x80
 80053ea:	d0f2      	beq.n	80053d2 <SPI_EndRxTxTransaction+0x52>
 80053ec:	e000      	b.n	80053f0 <SPI_EndRxTxTransaction+0x70>
        break;
 80053ee:	bf00      	nop
  }

  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3718      	adds	r7, #24
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	20000008 	.word	0x20000008
 8005400:	165e9f81 	.word	0x165e9f81

08005404 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d101      	bne.n	8005416 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e033      	b.n	800547e <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b00      	cmp	r3, #0
 8005420:	d106      	bne.n	8005430 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f7fb fddc 	bl	8000fe8 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2202      	movs	r2, #2
 8005434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 fc47 	bl	8005ccc <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	691a      	ldr	r2, [r3, #16]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800544c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	695a      	ldr	r2, [r3, #20]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800545c:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68da      	ldr	r2, [r3, #12]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800546c:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3708      	adds	r7, #8
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <HAL_USART_Transmit>:
  * @param  Size    Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b08a      	sub	sp, #40	; 0x28
 800548a:	af02      	add	r7, sp, #8
 800548c:	60f8      	str	r0, [r7, #12]
 800548e:	60b9      	str	r1, [r7, #8]
 8005490:	603b      	str	r3, [r7, #0]
 8005492:	4613      	mov	r3, r2
 8005494:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800549c:	b2db      	uxtb	r3, r3
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d17c      	bne.n	800559c <HAL_USART_Transmit+0x116>
  {
    if ((pTxData == NULL) || (Size == 0))
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d002      	beq.n	80054ae <HAL_USART_Transmit+0x28>
 80054a8:	88fb      	ldrh	r3, [r7, #6]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d101      	bne.n	80054b2 <HAL_USART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e075      	b.n	800559e <HAL_USART_Transmit+0x118>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d101      	bne.n	80054c0 <HAL_USART_Transmit+0x3a>
 80054bc:	2302      	movs	r3, #2
 80054be:	e06e      	b.n	800559e <HAL_USART_Transmit+0x118>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	641a      	str	r2, [r3, #64]	; 0x40
    husart->State = HAL_USART_STATE_BUSY_TX;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2212      	movs	r2, #18
 80054d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054d6:	f7fb ff0d 	bl	80012f4 <HAL_GetTick>
 80054da:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	88fa      	ldrh	r2, [r7, #6]
 80054e0:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	88fa      	ldrh	r2, [r7, #6]
 80054e6:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054f0:	d108      	bne.n	8005504 <HAL_USART_Transmit+0x7e>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d104      	bne.n	8005504 <HAL_USART_Transmit+0x7e>
    {
      ptxdata8bits  = NULL;
 80054fa:	2300      	movs	r3, #0
 80054fc:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	61bb      	str	r3, [r7, #24]
 8005502:	e003      	b.n	800550c <HAL_USART_Transmit+0x86>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8005508:	2300      	movs	r3, #0
 800550a:	61bb      	str	r3, [r7, #24]
    }

    while (husart->TxXferCount > 0U)
 800550c:	e02a      	b.n	8005564 <HAL_USART_Transmit+0xde>
    {
      /* Wait for TXE flag in order to write data in DR */
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	9300      	str	r3, [sp, #0]
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	2200      	movs	r2, #0
 8005516:	2180      	movs	r1, #128	; 0x80
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f000 f98b 	bl	8005834 <USART_WaitOnFlagUntilTimeout>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d001      	beq.n	8005528 <HAL_USART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e03a      	b.n	800559e <HAL_USART_Transmit+0x118>
      }
      if (ptxdata8bits == NULL)
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d10b      	bne.n	8005546 <HAL_USART_Transmit+0xc0>
      {
        husart->Instance->DR = (uint16_t)(*ptxdata16bits & (uint16_t)0x01FF);
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	881b      	ldrh	r3, [r3, #0]
 8005532:	461a      	mov	r2, r3
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800553c:	605a      	str	r2, [r3, #4]
        ptxdata16bits++;
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	3302      	adds	r3, #2
 8005542:	61bb      	str	r3, [r7, #24]
 8005544:	e007      	b.n	8005556 <HAL_USART_Transmit+0xd0>
      }
      else
      {
        husart->Instance->DR = (uint8_t)(*ptxdata8bits & (uint8_t)0xFF);
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	781a      	ldrb	r2, [r3, #0]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	605a      	str	r2, [r3, #4]
        ptxdata8bits++;
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	3301      	adds	r3, #1
 8005554:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800555a:	b29b      	uxth	r3, r3
 800555c:	3b01      	subs	r3, #1
 800555e:	b29a      	uxth	r2, r3
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005568:	b29b      	uxth	r3, r3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1cf      	bne.n	800550e <HAL_USART_Transmit+0x88>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	9300      	str	r3, [sp, #0]
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	2200      	movs	r2, #0
 8005576:	2140      	movs	r1, #64	; 0x40
 8005578:	68f8      	ldr	r0, [r7, #12]
 800557a:	f000 f95b 	bl	8005834 <USART_WaitOnFlagUntilTimeout>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d001      	beq.n	8005588 <HAL_USART_Transmit+0x102>
    {
      return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e00a      	b.n	800559e <HAL_USART_Transmit+0x118>
    }

    husart->State = HAL_USART_STATE_READY;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005598:	2300      	movs	r3, #0
 800559a:	e000      	b.n	800559e <HAL_USART_Transmit+0x118>
  }
  else
  {
    return HAL_BUSY;
 800559c:	2302      	movs	r3, #2
  }
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3720      	adds	r7, #32
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
	...

080055a8 <HAL_USART_IRQHandler>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b088      	sub	sp, #32
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(husart->Instance->SR);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its   = READ_REG(husart->Instance->CR1);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its   = READ_REG(husart->Instance->CR3);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80055c8:	2300      	movs	r3, #0
 80055ca:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80055cc:	2300      	movs	r3, #0
 80055ce:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	f003 030f 	and.w	r3, r3, #15
 80055d6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d117      	bne.n	800560e <HAL_USART_IRQHandler+0x66>
  {
    /* USART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	f003 0320 	and.w	r3, r3, #32
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d012      	beq.n	800560e <HAL_USART_IRQHandler+0x66>
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	f003 0320 	and.w	r3, r3, #32
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00d      	beq.n	800560e <HAL_USART_IRQHandler+0x66>
    {
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	2b22      	cmp	r3, #34	; 0x22
 80055fc:	d103      	bne.n	8005606 <HAL_USART_IRQHandler+0x5e>
      {
        USART_Receive_IT(husart);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 fa10 	bl	8005a24 <USART_Receive_IT>
      }
      else
      {
        USART_TransmitReceive_IT(husart);
      }
      return;
 8005604:	e0e9      	b.n	80057da <HAL_USART_IRQHandler+0x232>
        USART_TransmitReceive_IT(husart);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 fa92 	bl	8005b30 <USART_TransmitReceive_IT>
      return;
 800560c:	e0e5      	b.n	80057da <HAL_USART_IRQHandler+0x232>
    }
  }
  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	2b00      	cmp	r3, #0
 8005612:	f000 80bb 	beq.w	800578c <HAL_USART_IRQHandler+0x1e4>
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f003 0301 	and.w	r3, r3, #1
 800561c:	2b00      	cmp	r3, #0
 800561e:	d105      	bne.n	800562c <HAL_USART_IRQHandler+0x84>
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005626:	2b00      	cmp	r3, #0
 8005628:	f000 80b0 	beq.w	800578c <HAL_USART_IRQHandler+0x1e4>
  {
    /* USART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	f003 0301 	and.w	r3, r3, #1
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00a      	beq.n	800564c <HAL_USART_IRQHandler+0xa4>
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800563c:	2b00      	cmp	r3, #0
 800563e:	d005      	beq.n	800564c <HAL_USART_IRQHandler+0xa4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_PE;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005644:	f043 0201 	orr.w	r2, r3, #1
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* USART noise error interrupt occurred --------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	f003 0304 	and.w	r3, r3, #4
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00a      	beq.n	800566c <HAL_USART_IRQHandler+0xc4>
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f003 0301 	and.w	r3, r3, #1
 800565c:	2b00      	cmp	r3, #0
 800565e:	d005      	beq.n	800566c <HAL_USART_IRQHandler+0xc4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_NE;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005664:	f043 0202 	orr.w	r2, r3, #2
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* USART frame error interrupt occurred --------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	f003 0302 	and.w	r3, r3, #2
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00a      	beq.n	800568c <HAL_USART_IRQHandler+0xe4>
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	f003 0301 	and.w	r3, r3, #1
 800567c:	2b00      	cmp	r3, #0
 800567e:	d005      	beq.n	800568c <HAL_USART_IRQHandler+0xe4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_FE;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005684:	f043 0204 	orr.w	r2, r3, #4
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* USART Over-Run interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	f003 0308 	and.w	r3, r3, #8
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00f      	beq.n	80056b6 <HAL_USART_IRQHandler+0x10e>
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	f003 0320 	and.w	r3, r3, #32
 800569c:	2b00      	cmp	r3, #0
 800569e:	d104      	bne.n	80056aa <HAL_USART_IRQHandler+0x102>
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	f003 0301 	and.w	r3, r3, #1
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d005      	beq.n	80056b6 <HAL_USART_IRQHandler+0x10e>
    {
      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ae:	f043 0208 	orr.w	r2, r3, #8
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	f000 808c 	beq.w	80057d8 <HAL_USART_IRQHandler+0x230>
    {
      /* USART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	f003 0320 	and.w	r3, r3, #32
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d011      	beq.n	80056ee <HAL_USART_IRQHandler+0x146>
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	f003 0320 	and.w	r3, r3, #32
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d00c      	beq.n	80056ee <HAL_USART_IRQHandler+0x146>
      {
        if (husart->State == HAL_USART_STATE_BUSY_RX)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b22      	cmp	r3, #34	; 0x22
 80056de:	d103      	bne.n	80056e8 <HAL_USART_IRQHandler+0x140>
        {
          USART_Receive_IT(husart);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 f99f 	bl	8005a24 <USART_Receive_IT>
 80056e6:	e002      	b.n	80056ee <HAL_USART_IRQHandler+0x146>
        }
        else
        {
          USART_TransmitReceive_IT(husart);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 fa21 	bl	8005b30 <USART_TransmitReceive_IT>
        }
      }
      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
      consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	695b      	ldr	r3, [r3, #20]
 80056f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f8:	2b40      	cmp	r3, #64	; 0x40
 80056fa:	bf0c      	ite	eq
 80056fc:	2301      	moveq	r3, #1
 80056fe:	2300      	movne	r3, #0
 8005700:	b2db      	uxtb	r3, r3
 8005702:	60fb      	str	r3, [r7, #12]
      if (((husart->ErrorCode & HAL_USART_ERROR_ORE) != RESET) || dmarequest)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005708:	f003 0308 	and.w	r3, r3, #8
 800570c:	2b00      	cmp	r3, #0
 800570e:	d102      	bne.n	8005716 <HAL_USART_IRQHandler+0x16e>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d031      	beq.n	800577a <HAL_USART_IRQHandler+0x1d2>
      {
        /* Set the USART state ready to be able to start again the process,
        Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        USART_EndRxTransfer(husart);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 f8e2 	bl	80058e0 <USART_EndRxTransfer>

        /* Disable the USART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	695b      	ldr	r3, [r3, #20]
 8005722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005726:	2b40      	cmp	r3, #64	; 0x40
 8005728:	d123      	bne.n	8005772 <HAL_USART_IRQHandler+0x1ca>
        {
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	695a      	ldr	r2, [r3, #20]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005738:	615a      	str	r2, [r3, #20]

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573e:	2b00      	cmp	r3, #0
 8005740:	d013      	beq.n	800576a <HAL_USART_IRQHandler+0x1c2>
          {
            /* Set the USART DMA Abort callback :
            will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005746:	4a26      	ldr	r2, [pc, #152]	; (80057e0 <HAL_USART_IRQHandler+0x238>)
 8005748:	651a      	str	r2, [r3, #80]	; 0x50

            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574e:	4618      	mov	r0, r3
 8005750:	f7fb ff11 	bl	8001576 <HAL_DMA_Abort_IT>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d016      	beq.n	8005788 <HAL_USART_IRQHandler+0x1e0>
            {
              /* Call Directly XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005764:	4610      	mov	r0, r2
 8005766:	4798      	blx	r3
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8005768:	e00e      	b.n	8005788 <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 f858 	bl	8005820 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8005770:	e00a      	b.n	8005788 <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 f854 	bl	8005820 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8005778:	e006      	b.n	8005788 <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 f850 	bl	8005820 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005786:	e027      	b.n	80057d8 <HAL_USART_IRQHandler+0x230>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8005788:	bf00      	nop
    return;
 800578a:	e025      	b.n	80057d8 <HAL_USART_IRQHandler+0x230>
  }

  /* USART in mode Transmitter -----------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005792:	2b00      	cmp	r3, #0
 8005794:	d012      	beq.n	80057bc <HAL_USART_IRQHandler+0x214>
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00d      	beq.n	80057bc <HAL_USART_IRQHandler+0x214>
  {
    if (husart->State == HAL_USART_STATE_BUSY_TX)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	2b12      	cmp	r3, #18
 80057aa:	d103      	bne.n	80057b4 <HAL_USART_IRQHandler+0x20c>
    {
      USART_Transmit_IT(husart);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 f8c9 	bl	8005944 <USART_Transmit_IT>
    }
    else
    {
      USART_TransmitReceive_IT(husart);
    }
    return;
 80057b2:	e012      	b.n	80057da <HAL_USART_IRQHandler+0x232>
      USART_TransmitReceive_IT(husart);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 f9bb 	bl	8005b30 <USART_TransmitReceive_IT>
    return;
 80057ba:	e00e      	b.n	80057da <HAL_USART_IRQHandler+0x232>
  }

  /* USART in mode Transmitter (transmission end) ----------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d009      	beq.n	80057da <HAL_USART_IRQHandler+0x232>
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d004      	beq.n	80057da <HAL_USART_IRQHandler+0x232>
  {
    USART_EndTransmit_IT(husart);
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 f907 	bl	80059e4 <USART_EndTransmit_IT>
    return;
 80057d6:	e000      	b.n	80057da <HAL_USART_IRQHandler+0x232>
    return;
 80057d8:	bf00      	nop
  }
}
 80057da:	3720      	adds	r7, #32
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	0800591d 	.word	0x0800591d

080057e4 <HAL_USART_TxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxCpltCallback could be implemented in the user file
   */
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <HAL_USART_RxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_RxCpltCallback(USART_HandleTypeDef *husart)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_RxCpltCallback could be implemented in the user file
   */
}
 8005800:	bf00      	nop
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <HAL_USART_TxRxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxRxCpltCallback could be implemented in the user file
   */
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <HAL_USART_ErrorCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_ErrorCallback could be implemented in the user file
   */
}
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	603b      	str	r3, [r7, #0]
 8005840:	4613      	mov	r3, r2
 8005842:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8005844:	e038      	b.n	80058b8 <USART_WaitOnFlagUntilTimeout+0x84>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800584c:	d034      	beq.n	80058b8 <USART_WaitOnFlagUntilTimeout+0x84>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d007      	beq.n	8005864 <USART_WaitOnFlagUntilTimeout+0x30>
 8005854:	f7fb fd4e 	bl	80012f4 <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	69ba      	ldr	r2, [r7, #24]
 8005860:	429a      	cmp	r2, r3
 8005862:	d229      	bcs.n	80058b8 <USART_WaitOnFlagUntilTimeout+0x84>
      {
        /* Disable the USART Transmit Complete Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68da      	ldr	r2, [r3, #12]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005872:	60da      	str	r2, [r3, #12]

        /* Disable the USART RXNE Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	68da      	ldr	r2, [r3, #12]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f022 0220 	bic.w	r2, r2, #32
 8005882:	60da      	str	r2, [r3, #12]

        /* Disable the USART Parity Error Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68da      	ldr	r2, [r3, #12]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005892:	60da      	str	r2, [r3, #12]

        /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	695a      	ldr	r2, [r3, #20]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f022 0201 	bic.w	r2, r2, #1
 80058a2:	615a      	str	r2, [r3, #20]

        husart->State = HAL_USART_STATE_READY;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e00f      	b.n	80058d8 <USART_WaitOnFlagUntilTimeout+0xa4>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	4013      	ands	r3, r2
 80058c2:	68ba      	ldr	r2, [r7, #8]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	bf0c      	ite	eq
 80058c8:	2301      	moveq	r3, #1
 80058ca:	2300      	movne	r3, #0
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	461a      	mov	r2, r3
 80058d0:	79fb      	ldrb	r3, [r7, #7]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d0b7      	beq.n	8005846 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3710      	adds	r7, #16
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <USART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on USART peripheral (following error detection or Reception completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndRxTransfer(USART_HandleTypeDef *husart)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68da      	ldr	r2, [r3, #12]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80058f6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	695a      	ldr	r2, [r3, #20]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f022 0201 	bic.w	r2, r2, #1
 8005906:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005928:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0x00U;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	865a      	strh	r2, [r3, #50]	; 0x32
  husart->TxXferCount = 0x00U;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2200      	movs	r2, #0
 8005934:	855a      	strh	r2, [r3, #42]	; 0x2a
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	f7ff ff72 	bl	8005820 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 800593c:	bf00      	nop
 800593e:	3710      	adds	r7, #16
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <USART_Transmit_IT>:
  *                the configuration information for the specified USART module.
  * @retval HAL status
  * @note   The USART errors are not managed to avoid the overrun error.
  */
static HAL_StatusTypeDef USART_Transmit_IT(USART_HandleTypeDef *husart)
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005952:	b2db      	uxtb	r3, r3
 8005954:	2b12      	cmp	r3, #18
 8005956:	d13e      	bne.n	80059d6 <USART_Transmit_IT+0x92>
  {
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005960:	d114      	bne.n	800598c <USART_Transmit_IT+0x48>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d110      	bne.n	800598c <USART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) husart->pTxBuffPtr;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596e:	60fb      	str	r3, [r7, #12]
      husart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	881b      	ldrh	r3, [r3, #0]
 8005974:	461a      	mov	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800597e:	605a      	str	r2, [r3, #4]
      husart->pTxBuffPtr += 2U;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005984:	1c9a      	adds	r2, r3, #2
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	625a      	str	r2, [r3, #36]	; 0x24
 800598a:	e008      	b.n	800599e <USART_Transmit_IT+0x5a>
    }
    else
    {
      husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005990:	1c59      	adds	r1, r3, #1
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	6251      	str	r1, [r2, #36]	; 0x24
 8005996:	781a      	ldrb	r2, [r3, #0]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	605a      	str	r2, [r3, #4]
    }

    if (--husart->TxXferCount == 0U)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	3b01      	subs	r3, #1
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	4619      	mov	r1, r3
 80059ac:	8551      	strh	r1, [r2, #42]	; 0x2a
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d10f      	bne.n	80059d2 <USART_Transmit_IT+0x8e>
    {
      /* Disable the USART Transmit data register empty Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68da      	ldr	r2, [r3, #12]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059c0:	60da      	str	r2, [r3, #12]

      /* Enable the USART Transmit Complete Interrupt */
      SET_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68da      	ldr	r2, [r3, #12]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059d0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80059d2:	2300      	movs	r3, #0
 80059d4:	e000      	b.n	80059d8 <USART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80059d6:	2302      	movs	r3, #2
  }
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3714      	adds	r7, #20
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  CLEAR_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68da      	ldr	r2, [r3, #12]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059fa:	60da      	str	r2, [r3, #12]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	695a      	ldr	r2, [r3, #20]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f022 0201 	bic.w	r2, r2, #1
 8005a0a:	615a      	str	r2, [r3, #20]

  husart->State = HAL_USART_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Tx Complete Callback */
  husart->TxCpltCallback(husart);
#else
  /* Call legacy weak Tx Complete Callback */
  HAL_USART_TxCpltCallback(husart);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f7ff fee5 	bl	80057e4 <HAL_USART_TxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3708      	adds	r7, #8
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <USART_Receive_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_Receive_IT(USART_HandleTypeDef *husart)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  if (husart->State == HAL_USART_STATE_BUSY_RX)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	2b22      	cmp	r3, #34	; 0x22
 8005a36:	d176      	bne.n	8005b26 <USART_Receive_IT+0x102>
  {
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a40:	d117      	bne.n	8005a72 <USART_Receive_IT+0x4e>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d113      	bne.n	8005a72 <USART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) husart->pRxBuffPtr;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a52:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a60:	b29a      	uxth	r2, r3
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	801a      	strh	r2, [r3, #0]
      husart->pRxBuffPtr += 2U;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6a:	1c9a      	adds	r2, r3, #2
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	62da      	str	r2, [r3, #44]	; 0x2c
 8005a70:	e026      	b.n	8005ac0 <USART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) husart->pRxBuffPtr;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a76:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	60bb      	str	r3, [r7, #8]

      if ((husart->Init.WordLength == USART_WORDLENGTH_9B) || ((husart->Init.WordLength == USART_WORDLENGTH_8B) && (husart->Init.Parity == USART_PARITY_NONE)))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a84:	d007      	beq.n	8005a96 <USART_Receive_IT+0x72>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d10a      	bne.n	8005aa4 <USART_Receive_IT+0x80>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d106      	bne.n	8005aa4 <USART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	b2da      	uxtb	r2, r3
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	701a      	strb	r2, [r3, #0]
 8005aa2:	e008      	b.n	8005ab6 <USART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ab0:	b2da      	uxtb	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	701a      	strb	r2, [r3, #0]
      }

      husart->pRxBuffPtr += 1U;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aba:	1c5a      	adds	r2, r3, #1
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    husart->RxXferCount--;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	865a      	strh	r2, [r3, #50]	; 0x32

    if (husart->RxXferCount == 0U)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d120      	bne.n	8005b1a <USART_Receive_IT+0xf6>
    {
      /* Disable the USART RXNE Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68da      	ldr	r2, [r3, #12]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f022 0220 	bic.w	r2, r2, #32
 8005ae6:	60da      	str	r2, [r3, #12]

      /* Disable the USART Parity Error Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68da      	ldr	r2, [r3, #12]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005af6:	60da      	str	r2, [r3, #12]

      /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	695a      	ldr	r2, [r3, #20]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f022 0201 	bic.w	r2, r2, #1
 8005b06:	615a      	str	r2, [r3, #20]

      husart->State = HAL_USART_STATE_READY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
      /* Call registered Rx Complete Callback */
      husart->RxCpltCallback(husart);
#else
      /* Call legacy weak Rx Complete Callback */
      HAL_USART_RxCpltCallback(husart);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f7ff fe71 	bl	80057f8 <HAL_USART_RxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005b16:	2300      	movs	r3, #0
 8005b18:	e006      	b.n	8005b28 <USART_Receive_IT+0x104>
    else
    {
      /* Send dummy byte in order to generate the clock for the slave to send the next data.
      * Whatever the frame length (7, 8 or 9-bit long), the same dummy value
      * can be written for all the cases. */
      husart->Instance->DR = (DUMMY_DATA & (uint16_t)0x0FF);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	22ff      	movs	r2, #255	; 0xff
 8005b20:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8005b22:	2300      	movs	r3, #0
 8005b24:	e000      	b.n	8005b28 <USART_Receive_IT+0x104>
  }
  else
  {
    return HAL_BUSY;
 8005b26:	2302      	movs	r3, #2
  }
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <USART_TransmitReceive_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_TransmitReceive_IT(USART_HandleTypeDef *husart)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  const uint16_t *pdatatx16bits;
  uint16_t *pdatarx16bits;

  if (husart->State == HAL_USART_STATE_BUSY_TX_RX)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	2b32      	cmp	r3, #50	; 0x32
 8005b42:	f040 80bd 	bne.w	8005cc0 <USART_TransmitReceive_IT+0x190>
  {
    if (husart->TxXferCount != 0x00U)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d03d      	beq.n	8005bcc <USART_TransmitReceive_IT+0x9c>
    {
      if (__HAL_USART_GET_FLAG(husart, USART_FLAG_TXE) != RESET)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b5a:	2b80      	cmp	r3, #128	; 0x80
 8005b5c:	d136      	bne.n	8005bcc <USART_TransmitReceive_IT+0x9c>
      {
        if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b66:	d114      	bne.n	8005b92 <USART_TransmitReceive_IT+0x62>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d110      	bne.n	8005b92 <USART_TransmitReceive_IT+0x62>
        {
          pdatatx16bits = (const uint16_t *) husart->pTxBuffPtr;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b74:	60fb      	str	r3, [r7, #12]
          husart->Instance->DR = (uint16_t)(*pdatatx16bits & (uint16_t)0x01FF);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	881b      	ldrh	r3, [r3, #0]
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b84:	605a      	str	r2, [r3, #4]
          husart->pTxBuffPtr += 2U;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8a:	1c9a      	adds	r2, r3, #2
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	625a      	str	r2, [r3, #36]	; 0x24
 8005b90:	e008      	b.n	8005ba4 <USART_TransmitReceive_IT+0x74>
        }
        else
        {
          husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b96:	1c59      	adds	r1, r3, #1
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	6251      	str	r1, [r2, #36]	; 0x24
 8005b9c:	781a      	ldrb	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	605a      	str	r2, [r3, #4]
        }

        husart->TxXferCount--;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	3b01      	subs	r3, #1
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Check the latest data transmitted */
        if (husart->TxXferCount == 0U)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d107      	bne.n	8005bcc <USART_TransmitReceive_IT+0x9c>
        {
          CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68da      	ldr	r2, [r3, #12]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005bca:	60da      	str	r2, [r3, #12]
        }
      }
    }

    if (husart->RxXferCount != 0x00U)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d04c      	beq.n	8005c70 <USART_TransmitReceive_IT+0x140>
    {
      if (__HAL_USART_GET_FLAG(husart, USART_FLAG_RXNE) != RESET)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0320 	and.w	r3, r3, #32
 8005be0:	2b20      	cmp	r3, #32
 8005be2:	d145      	bne.n	8005c70 <USART_TransmitReceive_IT+0x140>
      {
        if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bec:	d115      	bne.n	8005c1a <USART_TransmitReceive_IT+0xea>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d111      	bne.n	8005c1a <USART_TransmitReceive_IT+0xea>
        {
          pdatarx16bits = (uint16_t *) husart->pRxBuffPtr;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfa:	60bb      	str	r3, [r7, #8]
          *pdatarx16bits = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	801a      	strh	r2, [r3, #0]
          husart->pRxBuffPtr += 2U;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c12:	1c9a      	adds	r2, r3, #2
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	62da      	str	r2, [r3, #44]	; 0x2c
 8005c18:	e023      	b.n	8005c62 <USART_TransmitReceive_IT+0x132>
        }
        else
        {
          if ((husart->Init.WordLength == USART_WORDLENGTH_9B) || ((husart->Init.WordLength == USART_WORDLENGTH_8B) && (husart->Init.Parity == USART_PARITY_NONE)))
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c22:	d007      	beq.n	8005c34 <USART_TransmitReceive_IT+0x104>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d10b      	bne.n	8005c44 <USART_TransmitReceive_IT+0x114>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d107      	bne.n	8005c44 <USART_TransmitReceive_IT+0x114>
          {
            *husart->pRxBuffPtr = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	685a      	ldr	r2, [r3, #4]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c3e:	b2d2      	uxtb	r2, r2
 8005c40:	701a      	strb	r2, [r3, #0]
 8005c42:	e009      	b.n	8005c58 <USART_TransmitReceive_IT+0x128>
          }
          else
          {
            *husart->pRxBuffPtr = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	b2da      	uxtb	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c50:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005c54:	b2d2      	uxtb	r2, r2
 8005c56:	701a      	strb	r2, [r3, #0]
          }
          husart->pRxBuffPtr += 1U;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5c:	1c5a      	adds	r2, r3, #1
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	62da      	str	r2, [r3, #44]	; 0x2c
        }

        husart->RxXferCount--;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	3b01      	subs	r3, #1
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	865a      	strh	r2, [r3, #50]	; 0x32
      }
    }

    /* Check the latest data received */
    if (husart->RxXferCount == 0U)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d120      	bne.n	8005cbc <USART_TransmitReceive_IT+0x18c>
    {
      /* Disable the USART RXNE Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68da      	ldr	r2, [r3, #12]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f022 0220 	bic.w	r2, r2, #32
 8005c88:	60da      	str	r2, [r3, #12]

      /* Disable the USART Parity Error Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68da      	ldr	r2, [r3, #12]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c98:	60da      	str	r2, [r3, #12]

      /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	695a      	ldr	r2, [r3, #20]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f022 0201 	bic.w	r2, r2, #1
 8005ca8:	615a      	str	r2, [r3, #20]

      husart->State = HAL_USART_STATE_READY;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2201      	movs	r2, #1
 8005cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
      /* Call registered Tx Rx Complete Callback */
      husart->TxRxCpltCallback(husart);
#else
      /* Call legacy weak Tx Rx Complete Callback */
      HAL_USART_TxRxCpltCallback(husart);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7ff fdaa 	bl	800580c <HAL_USART_TxRxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	e002      	b.n	8005cc2 <USART_TransmitReceive_IT+0x192>
    }

    return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	e000      	b.n	8005cc2 <USART_TransmitReceive_IT+0x192>
  }
  else
  {
    return HAL_BUSY;
 8005cc0:	2302      	movs	r3, #2
  }
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
	...

08005ccc <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8005ccc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cd0:	b0c6      	sub	sp, #280	; 0x118
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg = 0x00U;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8005cde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68d9      	ldr	r1, [r3, #12]
 8005ce6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	f021 030c 	bic.w	r3, r1, #12
 8005cf0:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8005cf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8005cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d02:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005d06:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8005d0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d0e:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8005d10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d14:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8005d16:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8005d18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
 8005d1e:	431a      	orrs	r2, r3
 8005d20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d24:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8005d26:	431a      	orrs	r2, r3
 8005d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005d32:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8005d36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d40:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8005d42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8005d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d52:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005d56:	f023 030c 	bic.w	r3, r3, #12
 8005d5a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8005d5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d62:	689a      	ldr	r2, [r3, #8]
 8005d64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	431a      	orrs	r2, r3
 8005d6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d70:	695b      	ldr	r3, [r3, #20]
 8005d72:	431a      	orrs	r2, r3
 8005d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d7e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8005d82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d8c:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8005d8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	6959      	ldr	r1, [r3, #20]
 8005d96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	f421 7340 	bic.w	r3, r1, #768	; 0x300
 8005da0:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 8005da2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	4b8b      	ldr	r3, [pc, #556]	; (8005fd8 <USART_SetConfig+0x30c>)
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d006      	beq.n	8005dbc <USART_SetConfig+0xf0>
 8005dae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	4b89      	ldr	r3, [pc, #548]	; (8005fdc <USART_SetConfig+0x310>)
 8005db6:	429a      	cmp	r2, r3
 8005db8:	f040 8114 	bne.w	8005fe4 <USART_SetConfig+0x318>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005dbc:	f7fe fc26 	bl	800460c <HAL_RCC_GetPCLK2Freq>
 8005dc0:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8005dc4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005dce:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8005dd2:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8005dd6:	4622      	mov	r2, r4
 8005dd8:	462b      	mov	r3, r5
 8005dda:	1891      	adds	r1, r2, r2
 8005ddc:	6739      	str	r1, [r7, #112]	; 0x70
 8005dde:	415b      	adcs	r3, r3
 8005de0:	677b      	str	r3, [r7, #116]	; 0x74
 8005de2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005de6:	4621      	mov	r1, r4
 8005de8:	eb12 0801 	adds.w	r8, r2, r1
 8005dec:	4629      	mov	r1, r5
 8005dee:	eb43 0901 	adc.w	r9, r3, r1
 8005df2:	f04f 0200 	mov.w	r2, #0
 8005df6:	f04f 0300 	mov.w	r3, #0
 8005dfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005dfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e06:	4690      	mov	r8, r2
 8005e08:	4699      	mov	r9, r3
 8005e0a:	4623      	mov	r3, r4
 8005e0c:	eb18 0303 	adds.w	r3, r8, r3
 8005e10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e14:	462b      	mov	r3, r5
 8005e16:	eb49 0303 	adc.w	r3, r9, r3
 8005e1a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005e1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005e2a:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8005e2e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005e32:	460b      	mov	r3, r1
 8005e34:	18db      	adds	r3, r3, r3
 8005e36:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e38:	4613      	mov	r3, r2
 8005e3a:	eb42 0303 	adc.w	r3, r2, r3
 8005e3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e40:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8005e44:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8005e48:	f7fa f9be 	bl	80001c8 <__aeabi_uldivmod>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	460b      	mov	r3, r1
 8005e50:	4b63      	ldr	r3, [pc, #396]	; (8005fe0 <USART_SetConfig+0x314>)
 8005e52:	fba3 2302 	umull	r2, r3, r3, r2
 8005e56:	095b      	lsrs	r3, r3, #5
 8005e58:	011c      	lsls	r4, r3, #4
 8005e5a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005e64:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005e68:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8005e6c:	4642      	mov	r2, r8
 8005e6e:	464b      	mov	r3, r9
 8005e70:	1891      	adds	r1, r2, r2
 8005e72:	6639      	str	r1, [r7, #96]	; 0x60
 8005e74:	415b      	adcs	r3, r3
 8005e76:	667b      	str	r3, [r7, #100]	; 0x64
 8005e78:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005e7c:	4641      	mov	r1, r8
 8005e7e:	1851      	adds	r1, r2, r1
 8005e80:	65b9      	str	r1, [r7, #88]	; 0x58
 8005e82:	4649      	mov	r1, r9
 8005e84:	414b      	adcs	r3, r1
 8005e86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e88:	f04f 0200 	mov.w	r2, #0
 8005e8c:	f04f 0300 	mov.w	r3, #0
 8005e90:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8005e94:	4659      	mov	r1, fp
 8005e96:	00cb      	lsls	r3, r1, #3
 8005e98:	4651      	mov	r1, sl
 8005e9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e9e:	4651      	mov	r1, sl
 8005ea0:	00ca      	lsls	r2, r1, #3
 8005ea2:	4610      	mov	r0, r2
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	4642      	mov	r2, r8
 8005eaa:	189b      	adds	r3, r3, r2
 8005eac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005eb0:	464b      	mov	r3, r9
 8005eb2:	460a      	mov	r2, r1
 8005eb4:	eb42 0303 	adc.w	r3, r2, r3
 8005eb8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ebc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005ec8:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005ecc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	18db      	adds	r3, r3, r3
 8005ed4:	653b      	str	r3, [r7, #80]	; 0x50
 8005ed6:	4613      	mov	r3, r2
 8005ed8:	eb42 0303 	adc.w	r3, r2, r3
 8005edc:	657b      	str	r3, [r7, #84]	; 0x54
 8005ede:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005ee2:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005ee6:	f7fa f96f 	bl	80001c8 <__aeabi_uldivmod>
 8005eea:	4602      	mov	r2, r0
 8005eec:	460b      	mov	r3, r1
 8005eee:	4611      	mov	r1, r2
 8005ef0:	4b3b      	ldr	r3, [pc, #236]	; (8005fe0 <USART_SetConfig+0x314>)
 8005ef2:	fba3 2301 	umull	r2, r3, r3, r1
 8005ef6:	095b      	lsrs	r3, r3, #5
 8005ef8:	2264      	movs	r2, #100	; 0x64
 8005efa:	fb02 f303 	mul.w	r3, r2, r3
 8005efe:	1acb      	subs	r3, r1, r3
 8005f00:	00db      	lsls	r3, r3, #3
 8005f02:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005f06:	4b36      	ldr	r3, [pc, #216]	; (8005fe0 <USART_SetConfig+0x314>)
 8005f08:	fba3 2302 	umull	r2, r3, r3, r2
 8005f0c:	095b      	lsrs	r3, r3, #5
 8005f0e:	005b      	lsls	r3, r3, #1
 8005f10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f14:	441c      	add	r4, r3
 8005f16:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f20:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005f24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005f28:	4642      	mov	r2, r8
 8005f2a:	464b      	mov	r3, r9
 8005f2c:	1891      	adds	r1, r2, r2
 8005f2e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005f30:	415b      	adcs	r3, r3
 8005f32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005f38:	4641      	mov	r1, r8
 8005f3a:	1851      	adds	r1, r2, r1
 8005f3c:	6439      	str	r1, [r7, #64]	; 0x40
 8005f3e:	4649      	mov	r1, r9
 8005f40:	414b      	adcs	r3, r1
 8005f42:	647b      	str	r3, [r7, #68]	; 0x44
 8005f44:	f04f 0200 	mov.w	r2, #0
 8005f48:	f04f 0300 	mov.w	r3, #0
 8005f4c:	e9d7 ab10 	ldrd	sl, fp, [r7, #64]	; 0x40
 8005f50:	4659      	mov	r1, fp
 8005f52:	00cb      	lsls	r3, r1, #3
 8005f54:	4651      	mov	r1, sl
 8005f56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f5a:	4651      	mov	r1, sl
 8005f5c:	00ca      	lsls	r2, r1, #3
 8005f5e:	4610      	mov	r0, r2
 8005f60:	4619      	mov	r1, r3
 8005f62:	4603      	mov	r3, r0
 8005f64:	4642      	mov	r2, r8
 8005f66:	189b      	adds	r3, r3, r2
 8005f68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f6c:	464b      	mov	r3, r9
 8005f6e:	460a      	mov	r2, r1
 8005f70:	eb42 0303 	adc.w	r3, r2, r3
 8005f74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f84:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005f88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	18db      	adds	r3, r3, r3
 8005f90:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f92:	4613      	mov	r3, r2
 8005f94:	eb42 0303 	adc.w	r3, r2, r3
 8005f98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f9a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005f9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005fa2:	f7fa f911 	bl	80001c8 <__aeabi_uldivmod>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	460b      	mov	r3, r1
 8005faa:	4b0d      	ldr	r3, [pc, #52]	; (8005fe0 <USART_SetConfig+0x314>)
 8005fac:	fba3 1302 	umull	r1, r3, r3, r2
 8005fb0:	095b      	lsrs	r3, r3, #5
 8005fb2:	2164      	movs	r1, #100	; 0x64
 8005fb4:	fb01 f303 	mul.w	r3, r1, r3
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	00db      	lsls	r3, r3, #3
 8005fbc:	3332      	adds	r3, #50	; 0x32
 8005fbe:	4a08      	ldr	r2, [pc, #32]	; (8005fe0 <USART_SetConfig+0x314>)
 8005fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8005fc4:	095b      	lsrs	r3, r3, #5
 8005fc6:	f003 0207 	and.w	r2, r3, #7
 8005fca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4422      	add	r2, r4
 8005fd2:	609a      	str	r2, [r3, #8]
 8005fd4:	e109      	b.n	80061ea <USART_SetConfig+0x51e>
 8005fd6:	bf00      	nop
 8005fd8:	40011000 	.word	0x40011000
 8005fdc:	40011400 	.word	0x40011400
 8005fe0:	51eb851f 	.word	0x51eb851f
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005fe4:	f7fe fafe 	bl	80045e4 <HAL_RCC_GetPCLK1Freq>
 8005fe8:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8005fec:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ff6:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005ffa:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005ffe:	4642      	mov	r2, r8
 8006000:	464b      	mov	r3, r9
 8006002:	1891      	adds	r1, r2, r2
 8006004:	6339      	str	r1, [r7, #48]	; 0x30
 8006006:	415b      	adcs	r3, r3
 8006008:	637b      	str	r3, [r7, #52]	; 0x34
 800600a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800600e:	4641      	mov	r1, r8
 8006010:	1854      	adds	r4, r2, r1
 8006012:	4649      	mov	r1, r9
 8006014:	eb43 0501 	adc.w	r5, r3, r1
 8006018:	f04f 0200 	mov.w	r2, #0
 800601c:	f04f 0300 	mov.w	r3, #0
 8006020:	00eb      	lsls	r3, r5, #3
 8006022:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006026:	00e2      	lsls	r2, r4, #3
 8006028:	4614      	mov	r4, r2
 800602a:	461d      	mov	r5, r3
 800602c:	4643      	mov	r3, r8
 800602e:	18e3      	adds	r3, r4, r3
 8006030:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006034:	464b      	mov	r3, r9
 8006036:	eb45 0303 	adc.w	r3, r5, r3
 800603a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800603e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800604a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800604e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006052:	460b      	mov	r3, r1
 8006054:	18db      	adds	r3, r3, r3
 8006056:	62bb      	str	r3, [r7, #40]	; 0x28
 8006058:	4613      	mov	r3, r2
 800605a:	eb42 0303 	adc.w	r3, r2, r3
 800605e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006060:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006064:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006068:	f7fa f8ae 	bl	80001c8 <__aeabi_uldivmod>
 800606c:	4602      	mov	r2, r0
 800606e:	460b      	mov	r3, r1
 8006070:	4b61      	ldr	r3, [pc, #388]	; (80061f8 <USART_SetConfig+0x52c>)
 8006072:	fba3 2302 	umull	r2, r3, r3, r2
 8006076:	095b      	lsrs	r3, r3, #5
 8006078:	011c      	lsls	r4, r3, #4
 800607a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800607e:	2200      	movs	r2, #0
 8006080:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006084:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006088:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800608c:	4642      	mov	r2, r8
 800608e:	464b      	mov	r3, r9
 8006090:	1891      	adds	r1, r2, r2
 8006092:	6239      	str	r1, [r7, #32]
 8006094:	415b      	adcs	r3, r3
 8006096:	627b      	str	r3, [r7, #36]	; 0x24
 8006098:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800609c:	4641      	mov	r1, r8
 800609e:	eb12 0a01 	adds.w	sl, r2, r1
 80060a2:	4649      	mov	r1, r9
 80060a4:	eb43 0b01 	adc.w	fp, r3, r1
 80060a8:	f04f 0200 	mov.w	r2, #0
 80060ac:	f04f 0300 	mov.w	r3, #0
 80060b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80060b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80060b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060bc:	4692      	mov	sl, r2
 80060be:	469b      	mov	fp, r3
 80060c0:	4643      	mov	r3, r8
 80060c2:	eb1a 0303 	adds.w	r3, sl, r3
 80060c6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80060ca:	464b      	mov	r3, r9
 80060cc:	eb4b 0303 	adc.w	r3, fp, r3
 80060d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80060d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80060e0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80060e4:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80060e8:	460b      	mov	r3, r1
 80060ea:	18db      	adds	r3, r3, r3
 80060ec:	61bb      	str	r3, [r7, #24]
 80060ee:	4613      	mov	r3, r2
 80060f0:	eb42 0303 	adc.w	r3, r2, r3
 80060f4:	61fb      	str	r3, [r7, #28]
 80060f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060fa:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80060fe:	f7fa f863 	bl	80001c8 <__aeabi_uldivmod>
 8006102:	4602      	mov	r2, r0
 8006104:	460b      	mov	r3, r1
 8006106:	4611      	mov	r1, r2
 8006108:	4b3b      	ldr	r3, [pc, #236]	; (80061f8 <USART_SetConfig+0x52c>)
 800610a:	fba3 2301 	umull	r2, r3, r3, r1
 800610e:	095b      	lsrs	r3, r3, #5
 8006110:	2264      	movs	r2, #100	; 0x64
 8006112:	fb02 f303 	mul.w	r3, r2, r3
 8006116:	1acb      	subs	r3, r1, r3
 8006118:	00db      	lsls	r3, r3, #3
 800611a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800611e:	4b36      	ldr	r3, [pc, #216]	; (80061f8 <USART_SetConfig+0x52c>)
 8006120:	fba3 2302 	umull	r2, r3, r3, r2
 8006124:	095b      	lsrs	r3, r3, #5
 8006126:	005b      	lsls	r3, r3, #1
 8006128:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800612c:	441c      	add	r4, r3
 800612e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006132:	2200      	movs	r2, #0
 8006134:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006138:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800613c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006140:	4642      	mov	r2, r8
 8006142:	464b      	mov	r3, r9
 8006144:	1891      	adds	r1, r2, r2
 8006146:	6139      	str	r1, [r7, #16]
 8006148:	415b      	adcs	r3, r3
 800614a:	617b      	str	r3, [r7, #20]
 800614c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006150:	4641      	mov	r1, r8
 8006152:	1851      	adds	r1, r2, r1
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	4649      	mov	r1, r9
 8006158:	414b      	adcs	r3, r1
 800615a:	60fb      	str	r3, [r7, #12]
 800615c:	f04f 0200 	mov.w	r2, #0
 8006160:	f04f 0300 	mov.w	r3, #0
 8006164:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006168:	4659      	mov	r1, fp
 800616a:	00cb      	lsls	r3, r1, #3
 800616c:	4651      	mov	r1, sl
 800616e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006172:	4651      	mov	r1, sl
 8006174:	00ca      	lsls	r2, r1, #3
 8006176:	4610      	mov	r0, r2
 8006178:	4619      	mov	r1, r3
 800617a:	4603      	mov	r3, r0
 800617c:	4642      	mov	r2, r8
 800617e:	189b      	adds	r3, r3, r2
 8006180:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006184:	464b      	mov	r3, r9
 8006186:	460a      	mov	r2, r1
 8006188:	eb42 0303 	adc.w	r3, r2, r3
 800618c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006190:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	67bb      	str	r3, [r7, #120]	; 0x78
 800619a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800619c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80061a0:	460b      	mov	r3, r1
 80061a2:	18db      	adds	r3, r3, r3
 80061a4:	603b      	str	r3, [r7, #0]
 80061a6:	4613      	mov	r3, r2
 80061a8:	eb42 0303 	adc.w	r3, r2, r3
 80061ac:	607b      	str	r3, [r7, #4]
 80061ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80061b6:	f7fa f807 	bl	80001c8 <__aeabi_uldivmod>
 80061ba:	4602      	mov	r2, r0
 80061bc:	460b      	mov	r3, r1
 80061be:	4b0e      	ldr	r3, [pc, #56]	; (80061f8 <USART_SetConfig+0x52c>)
 80061c0:	fba3 1302 	umull	r1, r3, r3, r2
 80061c4:	095b      	lsrs	r3, r3, #5
 80061c6:	2164      	movs	r1, #100	; 0x64
 80061c8:	fb01 f303 	mul.w	r3, r1, r3
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	00db      	lsls	r3, r3, #3
 80061d0:	3332      	adds	r3, #50	; 0x32
 80061d2:	4a09      	ldr	r2, [pc, #36]	; (80061f8 <USART_SetConfig+0x52c>)
 80061d4:	fba2 2303 	umull	r2, r3, r2, r3
 80061d8:	095b      	lsrs	r3, r3, #5
 80061da:	f003 0207 	and.w	r2, r3, #7
 80061de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4422      	add	r2, r4
 80061e6:	609a      	str	r2, [r3, #8]
  }
}
 80061e8:	bf00      	nop
 80061ea:	bf00      	nop
 80061ec:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80061f0:	46bd      	mov	sp, r7
 80061f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061f6:	bf00      	nop
 80061f8:	51eb851f 	.word	0x51eb851f

080061fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061fc:	b084      	sub	sp, #16
 80061fe:	b580      	push	{r7, lr}
 8006200:	b084      	sub	sp, #16
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
 8006206:	f107 001c 	add.w	r0, r7, #28
 800620a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800620e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006210:	2b01      	cmp	r3, #1
 8006212:	d122      	bne.n	800625a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006218:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006228:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800623c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800623e:	2b01      	cmp	r3, #1
 8006240:	d105      	bne.n	800624e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 f9c0 	bl	80065d4 <USB_CoreReset>
 8006254:	4603      	mov	r3, r0
 8006256:	73fb      	strb	r3, [r7, #15]
 8006258:	e01a      	b.n	8006290 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 f9b4 	bl	80065d4 <USB_CoreReset>
 800626c:	4603      	mov	r3, r0
 800626e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006272:	2b00      	cmp	r3, #0
 8006274:	d106      	bne.n	8006284 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800627a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	639a      	str	r2, [r3, #56]	; 0x38
 8006282:	e005      	b.n	8006290 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006288:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006292:	2b01      	cmp	r3, #1
 8006294:	d10b      	bne.n	80062ae <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f043 0206 	orr.w	r2, r3, #6
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f043 0220 	orr.w	r2, r3, #32
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80062ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3710      	adds	r7, #16
 80062b4:	46bd      	mov	sp, r7
 80062b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062ba:	b004      	add	sp, #16
 80062bc:	4770      	bx	lr

080062be <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062be:	b480      	push	{r7}
 80062c0:	b083      	sub	sp, #12
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	f043 0201 	orr.w	r2, r3, #1
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	f023 0201 	bic.w	r2, r3, #1
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	370c      	adds	r7, #12
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr

08006302 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006302:	b580      	push	{r7, lr}
 8006304:	b084      	sub	sp, #16
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
 800630a:	460b      	mov	r3, r1
 800630c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800630e:	2300      	movs	r3, #0
 8006310:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800631e:	78fb      	ldrb	r3, [r7, #3]
 8006320:	2b01      	cmp	r3, #1
 8006322:	d115      	bne.n	8006350 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006330:	2001      	movs	r0, #1
 8006332:	f7fa ffeb 	bl	800130c <HAL_Delay>
      ms++;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	3301      	adds	r3, #1
 800633a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 f93a 	bl	80065b6 <USB_GetMode>
 8006342:	4603      	mov	r3, r0
 8006344:	2b01      	cmp	r3, #1
 8006346:	d01e      	beq.n	8006386 <USB_SetCurrentMode+0x84>
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2b31      	cmp	r3, #49	; 0x31
 800634c:	d9f0      	bls.n	8006330 <USB_SetCurrentMode+0x2e>
 800634e:	e01a      	b.n	8006386 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006350:	78fb      	ldrb	r3, [r7, #3]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d115      	bne.n	8006382 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006362:	2001      	movs	r0, #1
 8006364:	f7fa ffd2 	bl	800130c <HAL_Delay>
      ms++;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	3301      	adds	r3, #1
 800636c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 f921 	bl	80065b6 <USB_GetMode>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d005      	beq.n	8006386 <USB_SetCurrentMode+0x84>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2b31      	cmp	r3, #49	; 0x31
 800637e:	d9f0      	bls.n	8006362 <USB_SetCurrentMode+0x60>
 8006380:	e001      	b.n	8006386 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e005      	b.n	8006392 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2b32      	cmp	r3, #50	; 0x32
 800638a:	d101      	bne.n	8006390 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	e000      	b.n	8006392 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3710      	adds	r7, #16
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
	...

0800639c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800639c:	b480      	push	{r7}
 800639e:	b085      	sub	sp, #20
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80063a6:	2300      	movs	r3, #0
 80063a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	3301      	adds	r3, #1
 80063ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	4a13      	ldr	r2, [pc, #76]	; (8006400 <USB_FlushTxFifo+0x64>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d901      	bls.n	80063bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80063b8:	2303      	movs	r3, #3
 80063ba:	e01b      	b.n	80063f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	daf2      	bge.n	80063aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80063c4:	2300      	movs	r3, #0
 80063c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	019b      	lsls	r3, r3, #6
 80063cc:	f043 0220 	orr.w	r2, r3, #32
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	3301      	adds	r3, #1
 80063d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	4a08      	ldr	r2, [pc, #32]	; (8006400 <USB_FlushTxFifo+0x64>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d901      	bls.n	80063e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e006      	b.n	80063f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	f003 0320 	and.w	r3, r3, #32
 80063ee:	2b20      	cmp	r3, #32
 80063f0:	d0f0      	beq.n	80063d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3714      	adds	r7, #20
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr
 8006400:	00030d40 	.word	0x00030d40

08006404 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006404:	b480      	push	{r7}
 8006406:	b085      	sub	sp, #20
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800640c:	2300      	movs	r3, #0
 800640e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	3301      	adds	r3, #1
 8006414:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	4a11      	ldr	r2, [pc, #68]	; (8006460 <USB_FlushRxFifo+0x5c>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d901      	bls.n	8006422 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	e018      	b.n	8006454 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	2b00      	cmp	r3, #0
 8006428:	daf2      	bge.n	8006410 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800642a:	2300      	movs	r3, #0
 800642c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2210      	movs	r2, #16
 8006432:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	3301      	adds	r3, #1
 8006438:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	4a08      	ldr	r2, [pc, #32]	; (8006460 <USB_FlushRxFifo+0x5c>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d901      	bls.n	8006446 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006442:	2303      	movs	r3, #3
 8006444:	e006      	b.n	8006454 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	f003 0310 	and.w	r3, r3, #16
 800644e:	2b10      	cmp	r3, #16
 8006450:	d0f0      	beq.n	8006434 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3714      	adds	r7, #20
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr
 8006460:	00030d40 	.word	0x00030d40

08006464 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006464:	b480      	push	{r7}
 8006466:	b089      	sub	sp, #36	; 0x24
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	4611      	mov	r1, r2
 8006470:	461a      	mov	r2, r3
 8006472:	460b      	mov	r3, r1
 8006474:	71fb      	strb	r3, [r7, #7]
 8006476:	4613      	mov	r3, r2
 8006478:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006482:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006486:	2b00      	cmp	r3, #0
 8006488:	d123      	bne.n	80064d2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800648a:	88bb      	ldrh	r3, [r7, #4]
 800648c:	3303      	adds	r3, #3
 800648e:	089b      	lsrs	r3, r3, #2
 8006490:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006492:	2300      	movs	r3, #0
 8006494:	61bb      	str	r3, [r7, #24]
 8006496:	e018      	b.n	80064ca <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006498:	79fb      	ldrb	r3, [r7, #7]
 800649a:	031a      	lsls	r2, r3, #12
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	4413      	add	r3, r2
 80064a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064a4:	461a      	mov	r2, r3
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	3301      	adds	r3, #1
 80064b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	3301      	adds	r3, #1
 80064b6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	3301      	adds	r3, #1
 80064bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	3301      	adds	r3, #1
 80064c2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	3301      	adds	r3, #1
 80064c8:	61bb      	str	r3, [r7, #24]
 80064ca:	69ba      	ldr	r2, [r7, #24]
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d3e2      	bcc.n	8006498 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3724      	adds	r7, #36	; 0x24
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b08b      	sub	sp, #44	; 0x2c
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	4613      	mov	r3, r2
 80064ec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80064f6:	88fb      	ldrh	r3, [r7, #6]
 80064f8:	089b      	lsrs	r3, r3, #2
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80064fe:	88fb      	ldrh	r3, [r7, #6]
 8006500:	f003 0303 	and.w	r3, r3, #3
 8006504:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006506:	2300      	movs	r3, #0
 8006508:	623b      	str	r3, [r7, #32]
 800650a:	e014      	b.n	8006536 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006516:	601a      	str	r2, [r3, #0]
    pDest++;
 8006518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651a:	3301      	adds	r3, #1
 800651c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800651e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006520:	3301      	adds	r3, #1
 8006522:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006526:	3301      	adds	r3, #1
 8006528:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800652a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652c:	3301      	adds	r3, #1
 800652e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006530:	6a3b      	ldr	r3, [r7, #32]
 8006532:	3301      	adds	r3, #1
 8006534:	623b      	str	r3, [r7, #32]
 8006536:	6a3a      	ldr	r2, [r7, #32]
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	429a      	cmp	r2, r3
 800653c:	d3e6      	bcc.n	800650c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800653e:	8bfb      	ldrh	r3, [r7, #30]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d01e      	beq.n	8006582 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006544:	2300      	movs	r3, #0
 8006546:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800654e:	461a      	mov	r2, r3
 8006550:	f107 0310 	add.w	r3, r7, #16
 8006554:	6812      	ldr	r2, [r2, #0]
 8006556:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006558:	693a      	ldr	r2, [r7, #16]
 800655a:	6a3b      	ldr	r3, [r7, #32]
 800655c:	b2db      	uxtb	r3, r3
 800655e:	00db      	lsls	r3, r3, #3
 8006560:	fa22 f303 	lsr.w	r3, r2, r3
 8006564:	b2da      	uxtb	r2, r3
 8006566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006568:	701a      	strb	r2, [r3, #0]
      i++;
 800656a:	6a3b      	ldr	r3, [r7, #32]
 800656c:	3301      	adds	r3, #1
 800656e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006572:	3301      	adds	r3, #1
 8006574:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006576:	8bfb      	ldrh	r3, [r7, #30]
 8006578:	3b01      	subs	r3, #1
 800657a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800657c:	8bfb      	ldrh	r3, [r7, #30]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d1ea      	bne.n	8006558 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006584:	4618      	mov	r0, r3
 8006586:	372c      	adds	r7, #44	; 0x2c
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006590:	b480      	push	{r7}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	695b      	ldr	r3, [r3, #20]
 800659c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	699b      	ldr	r3, [r3, #24]
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	4013      	ands	r3, r2
 80065a6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80065a8:	68fb      	ldr	r3, [r7, #12]
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3714      	adds	r7, #20
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr

080065b6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80065b6:	b480      	push	{r7}
 80065b8:	b083      	sub	sp, #12
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	695b      	ldr	r3, [r3, #20]
 80065c2:	f003 0301 	and.w	r3, r3, #1
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	370c      	adds	r7, #12
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr
	...

080065d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065dc:	2300      	movs	r3, #0
 80065de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	3301      	adds	r3, #1
 80065e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	4a13      	ldr	r2, [pc, #76]	; (8006638 <USB_CoreReset+0x64>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d901      	bls.n	80065f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80065ee:	2303      	movs	r3, #3
 80065f0:	e01b      	b.n	800662a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	daf2      	bge.n	80065e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80065fa:	2300      	movs	r3, #0
 80065fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	f043 0201 	orr.w	r2, r3, #1
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	3301      	adds	r3, #1
 800660e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	4a09      	ldr	r2, [pc, #36]	; (8006638 <USB_CoreReset+0x64>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d901      	bls.n	800661c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006618:	2303      	movs	r3, #3
 800661a:	e006      	b.n	800662a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	691b      	ldr	r3, [r3, #16]
 8006620:	f003 0301 	and.w	r3, r3, #1
 8006624:	2b01      	cmp	r3, #1
 8006626:	d0f0      	beq.n	800660a <USB_CoreReset+0x36>

  return HAL_OK;
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	3714      	adds	r7, #20
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	00030d40 	.word	0x00030d40

0800663c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800663c:	b084      	sub	sp, #16
 800663e:	b580      	push	{r7, lr}
 8006640:	b086      	sub	sp, #24
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
 8006646:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800664a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800664e:	2300      	movs	r3, #0
 8006650:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800665c:	461a      	mov	r2, r3
 800665e:	2300      	movs	r3, #0
 8006660:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006666:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006672:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800668a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800668e:	2b00      	cmp	r3, #0
 8006690:	d018      	beq.n	80066c4 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006694:	2b01      	cmp	r3, #1
 8006696:	d10a      	bne.n	80066ae <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80066a6:	f043 0304 	orr.w	r3, r3, #4
 80066aa:	6013      	str	r3, [r2, #0]
 80066ac:	e014      	b.n	80066d8 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80066bc:	f023 0304 	bic.w	r3, r3, #4
 80066c0:	6013      	str	r3, [r2, #0]
 80066c2:	e009      	b.n	80066d8 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80066d2:	f023 0304 	bic.w	r3, r3, #4
 80066d6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80066d8:	2110      	movs	r1, #16
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f7ff fe5e 	bl	800639c <USB_FlushTxFifo>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d001      	beq.n	80066ea <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f7ff fe8a 	bl	8006404 <USB_FlushRxFifo>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d001      	beq.n	80066fa <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80066fa:	2300      	movs	r3, #0
 80066fc:	613b      	str	r3, [r7, #16]
 80066fe:	e015      	b.n	800672c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	015a      	lsls	r2, r3, #5
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	4413      	add	r3, r2
 8006708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800670c:	461a      	mov	r2, r3
 800670e:	f04f 33ff 	mov.w	r3, #4294967295
 8006712:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	015a      	lsls	r2, r3, #5
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	4413      	add	r3, r2
 800671c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006720:	461a      	mov	r2, r3
 8006722:	2300      	movs	r3, #0
 8006724:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	3301      	adds	r3, #1
 800672a:	613b      	str	r3, [r7, #16]
 800672c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	429a      	cmp	r2, r3
 8006732:	d3e5      	bcc.n	8006700 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f04f 32ff 	mov.w	r2, #4294967295
 8006740:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00b      	beq.n	8006766 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006754:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a13      	ldr	r2, [pc, #76]	; (80067a8 <USB_HostInit+0x16c>)
 800675a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4a13      	ldr	r2, [pc, #76]	; (80067ac <USB_HostInit+0x170>)
 8006760:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006764:	e009      	b.n	800677a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2280      	movs	r2, #128	; 0x80
 800676a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4a10      	ldr	r2, [pc, #64]	; (80067b0 <USB_HostInit+0x174>)
 8006770:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a0f      	ldr	r2, [pc, #60]	; (80067b4 <USB_HostInit+0x178>)
 8006776:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800677a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677c:	2b00      	cmp	r3, #0
 800677e:	d105      	bne.n	800678c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	699b      	ldr	r3, [r3, #24]
 8006784:	f043 0210 	orr.w	r2, r3, #16
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	699a      	ldr	r2, [r3, #24]
 8006790:	4b09      	ldr	r3, [pc, #36]	; (80067b8 <USB_HostInit+0x17c>)
 8006792:	4313      	orrs	r3, r2
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006798:	7dfb      	ldrb	r3, [r7, #23]
}
 800679a:	4618      	mov	r0, r3
 800679c:	3718      	adds	r7, #24
 800679e:	46bd      	mov	sp, r7
 80067a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067a4:	b004      	add	sp, #16
 80067a6:	4770      	bx	lr
 80067a8:	01000200 	.word	0x01000200
 80067ac:	00e00300 	.word	0x00e00300
 80067b0:	00600080 	.word	0x00600080
 80067b4:	004000e0 	.word	0x004000e0
 80067b8:	a3200008 	.word	0xa3200008

080067bc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80067bc:	b480      	push	{r7}
 80067be:	b085      	sub	sp, #20
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	460b      	mov	r3, r1
 80067c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80067da:	f023 0303 	bic.w	r3, r3, #3
 80067de:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	78fb      	ldrb	r3, [r7, #3]
 80067ea:	f003 0303 	and.w	r3, r3, #3
 80067ee:	68f9      	ldr	r1, [r7, #12]
 80067f0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80067f4:	4313      	orrs	r3, r2
 80067f6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80067f8:	78fb      	ldrb	r3, [r7, #3]
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d107      	bne.n	800680e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006804:	461a      	mov	r2, r3
 8006806:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800680a:	6053      	str	r3, [r2, #4]
 800680c:	e009      	b.n	8006822 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800680e:	78fb      	ldrb	r3, [r7, #3]
 8006810:	2b02      	cmp	r3, #2
 8006812:	d106      	bne.n	8006822 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800681a:	461a      	mov	r2, r3
 800681c:	f241 7370 	movw	r3, #6000	; 0x1770
 8006820:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3714      	adds	r7, #20
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800683c:	2300      	movs	r3, #0
 800683e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006850:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800685a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800685e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006860:	2064      	movs	r0, #100	; 0x64
 8006862:	f7fa fd53 	bl	800130c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	68fa      	ldr	r2, [r7, #12]
 800686a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800686e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006872:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006874:	200a      	movs	r0, #10
 8006876:	f7fa fd49 	bl	800130c <HAL_Delay>

  return HAL_OK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	3710      	adds	r7, #16
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	460b      	mov	r3, r1
 800688e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006894:	2300      	movs	r3, #0
 8006896:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80068a8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d109      	bne.n	80068c8 <USB_DriveVbus+0x44>
 80068b4:	78fb      	ldrb	r3, [r7, #3]
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d106      	bne.n	80068c8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	68fa      	ldr	r2, [r7, #12]
 80068be:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80068c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80068c6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068d2:	d109      	bne.n	80068e8 <USB_DriveVbus+0x64>
 80068d4:	78fb      	ldrb	r3, [r7, #3]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d106      	bne.n	80068e8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	68fa      	ldr	r2, [r7, #12]
 80068de:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80068e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068e6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3714      	adds	r7, #20
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr

080068f6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80068f6:	b480      	push	{r7}
 80068f8:	b085      	sub	sp, #20
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006902:	2300      	movs	r3, #0
 8006904:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	0c5b      	lsrs	r3, r3, #17
 8006914:	f003 0303 	and.w	r3, r3, #3
}
 8006918:	4618      	mov	r0, r3
 800691a:	3714      	adds	r7, #20
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006924:	b480      	push	{r7}
 8006926:	b085      	sub	sp, #20
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	b29b      	uxth	r3, r3
}
 800693a:	4618      	mov	r0, r3
 800693c:	3714      	adds	r7, #20
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr
	...

08006948 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b088      	sub	sp, #32
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	4608      	mov	r0, r1
 8006952:	4611      	mov	r1, r2
 8006954:	461a      	mov	r2, r3
 8006956:	4603      	mov	r3, r0
 8006958:	70fb      	strb	r3, [r7, #3]
 800695a:	460b      	mov	r3, r1
 800695c:	70bb      	strb	r3, [r7, #2]
 800695e:	4613      	mov	r3, r2
 8006960:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006962:	2300      	movs	r3, #0
 8006964:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800696a:	78fb      	ldrb	r3, [r7, #3]
 800696c:	015a      	lsls	r2, r3, #5
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	4413      	add	r3, r2
 8006972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006976:	461a      	mov	r2, r3
 8006978:	f04f 33ff 	mov.w	r3, #4294967295
 800697c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800697e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006982:	2b03      	cmp	r3, #3
 8006984:	d87e      	bhi.n	8006a84 <USB_HC_Init+0x13c>
 8006986:	a201      	add	r2, pc, #4	; (adr r2, 800698c <USB_HC_Init+0x44>)
 8006988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800698c:	0800699d 	.word	0x0800699d
 8006990:	08006a47 	.word	0x08006a47
 8006994:	0800699d 	.word	0x0800699d
 8006998:	08006a09 	.word	0x08006a09
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800699c:	78fb      	ldrb	r3, [r7, #3]
 800699e:	015a      	lsls	r2, r3, #5
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	4413      	add	r3, r2
 80069a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069a8:	461a      	mov	r2, r3
 80069aa:	f240 439d 	movw	r3, #1181	; 0x49d
 80069ae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80069b0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	da10      	bge.n	80069da <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80069b8:	78fb      	ldrb	r3, [r7, #3]
 80069ba:	015a      	lsls	r2, r3, #5
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	4413      	add	r3, r2
 80069c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	78fa      	ldrb	r2, [r7, #3]
 80069c8:	0151      	lsls	r1, r2, #5
 80069ca:	693a      	ldr	r2, [r7, #16]
 80069cc:	440a      	add	r2, r1
 80069ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069d6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80069d8:	e057      	b.n	8006a8a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d051      	beq.n	8006a8a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80069e6:	78fb      	ldrb	r3, [r7, #3]
 80069e8:	015a      	lsls	r2, r3, #5
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	4413      	add	r3, r2
 80069ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	78fa      	ldrb	r2, [r7, #3]
 80069f6:	0151      	lsls	r1, r2, #5
 80069f8:	693a      	ldr	r2, [r7, #16]
 80069fa:	440a      	add	r2, r1
 80069fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a00:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006a04:	60d3      	str	r3, [r2, #12]
      break;
 8006a06:	e040      	b.n	8006a8a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006a08:	78fb      	ldrb	r3, [r7, #3]
 8006a0a:	015a      	lsls	r2, r3, #5
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	4413      	add	r3, r2
 8006a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a14:	461a      	mov	r2, r3
 8006a16:	f240 639d 	movw	r3, #1693	; 0x69d
 8006a1a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006a1c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	da34      	bge.n	8006a8e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006a24:	78fb      	ldrb	r3, [r7, #3]
 8006a26:	015a      	lsls	r2, r3, #5
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	78fa      	ldrb	r2, [r7, #3]
 8006a34:	0151      	lsls	r1, r2, #5
 8006a36:	693a      	ldr	r2, [r7, #16]
 8006a38:	440a      	add	r2, r1
 8006a3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a42:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006a44:	e023      	b.n	8006a8e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006a46:	78fb      	ldrb	r3, [r7, #3]
 8006a48:	015a      	lsls	r2, r3, #5
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	4413      	add	r3, r2
 8006a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a52:	461a      	mov	r2, r3
 8006a54:	f240 2325 	movw	r3, #549	; 0x225
 8006a58:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006a5a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	da17      	bge.n	8006a92 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006a62:	78fb      	ldrb	r3, [r7, #3]
 8006a64:	015a      	lsls	r2, r3, #5
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	4413      	add	r3, r2
 8006a6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	78fa      	ldrb	r2, [r7, #3]
 8006a72:	0151      	lsls	r1, r2, #5
 8006a74:	693a      	ldr	r2, [r7, #16]
 8006a76:	440a      	add	r2, r1
 8006a78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a7c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006a80:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006a82:	e006      	b.n	8006a92 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	77fb      	strb	r3, [r7, #31]
      break;
 8006a88:	e004      	b.n	8006a94 <USB_HC_Init+0x14c>
      break;
 8006a8a:	bf00      	nop
 8006a8c:	e002      	b.n	8006a94 <USB_HC_Init+0x14c>
      break;
 8006a8e:	bf00      	nop
 8006a90:	e000      	b.n	8006a94 <USB_HC_Init+0x14c>
      break;
 8006a92:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006a94:	78fb      	ldrb	r3, [r7, #3]
 8006a96:	015a      	lsls	r2, r3, #5
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	4413      	add	r3, r2
 8006a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	78fa      	ldrb	r2, [r7, #3]
 8006aa4:	0151      	lsls	r1, r2, #5
 8006aa6:	693a      	ldr	r2, [r7, #16]
 8006aa8:	440a      	add	r2, r1
 8006aaa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006aae:	f043 0302 	orr.w	r3, r3, #2
 8006ab2:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006aba:	699a      	ldr	r2, [r3, #24]
 8006abc:	78fb      	ldrb	r3, [r7, #3]
 8006abe:	f003 030f 	and.w	r3, r3, #15
 8006ac2:	2101      	movs	r1, #1
 8006ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ac8:	6939      	ldr	r1, [r7, #16]
 8006aca:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	699b      	ldr	r3, [r3, #24]
 8006ad6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006ade:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	da03      	bge.n	8006aee <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006ae6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006aea:	61bb      	str	r3, [r7, #24]
 8006aec:	e001      	b.n	8006af2 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8006aee:	2300      	movs	r3, #0
 8006af0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f7ff feff 	bl	80068f6 <USB_GetHostSpeed>
 8006af8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006afa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	d106      	bne.n	8006b10 <USB_HC_Init+0x1c8>
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d003      	beq.n	8006b10 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006b08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006b0c:	617b      	str	r3, [r7, #20]
 8006b0e:	e001      	b.n	8006b14 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006b10:	2300      	movs	r3, #0
 8006b12:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006b14:	787b      	ldrb	r3, [r7, #1]
 8006b16:	059b      	lsls	r3, r3, #22
 8006b18:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006b1c:	78bb      	ldrb	r3, [r7, #2]
 8006b1e:	02db      	lsls	r3, r3, #11
 8006b20:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006b24:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006b26:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006b2a:	049b      	lsls	r3, r3, #18
 8006b2c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006b30:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006b32:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006b34:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006b38:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006b3e:	78fb      	ldrb	r3, [r7, #3]
 8006b40:	0159      	lsls	r1, r3, #5
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	440b      	add	r3, r1
 8006b46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b4a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006b50:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006b52:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006b56:	2b03      	cmp	r3, #3
 8006b58:	d003      	beq.n	8006b62 <USB_HC_Init+0x21a>
 8006b5a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d10f      	bne.n	8006b82 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006b62:	78fb      	ldrb	r3, [r7, #3]
 8006b64:	015a      	lsls	r2, r3, #5
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	4413      	add	r3, r2
 8006b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	78fa      	ldrb	r2, [r7, #3]
 8006b72:	0151      	lsls	r1, r2, #5
 8006b74:	693a      	ldr	r2, [r7, #16]
 8006b76:	440a      	add	r2, r1
 8006b78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006b80:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006b82:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3720      	adds	r7, #32
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b08c      	sub	sp, #48	; 0x30
 8006b90:	af02      	add	r7, sp, #8
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	4613      	mov	r3, r2
 8006b98:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	785b      	ldrb	r3, [r3, #1]
 8006ba2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006ba4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ba8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d02d      	beq.n	8006c12 <USB_HC_StartXfer+0x86>
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	791b      	ldrb	r3, [r3, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d129      	bne.n	8006c12 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006bbe:	79fb      	ldrb	r3, [r7, #7]
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d117      	bne.n	8006bf4 <USB_HC_StartXfer+0x68>
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	79db      	ldrb	r3, [r3, #7]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d003      	beq.n	8006bd4 <USB_HC_StartXfer+0x48>
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	79db      	ldrb	r3, [r3, #7]
 8006bd0:	2b02      	cmp	r3, #2
 8006bd2:	d10f      	bne.n	8006bf4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	015a      	lsls	r2, r3, #5
 8006bd8:	6a3b      	ldr	r3, [r7, #32]
 8006bda:	4413      	add	r3, r2
 8006bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	69fa      	ldr	r2, [r7, #28]
 8006be4:	0151      	lsls	r1, r2, #5
 8006be6:	6a3a      	ldr	r2, [r7, #32]
 8006be8:	440a      	add	r2, r1
 8006bea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bf2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006bf4:	79fb      	ldrb	r3, [r7, #7]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d10b      	bne.n	8006c12 <USB_HC_StartXfer+0x86>
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	795b      	ldrb	r3, [r3, #5]
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d107      	bne.n	8006c12 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	785b      	ldrb	r3, [r3, #1]
 8006c06:	4619      	mov	r1, r3
 8006c08:	68f8      	ldr	r0, [r7, #12]
 8006c0a:	f000 fa0f 	bl	800702c <USB_DoPing>
      return HAL_OK;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	e0f8      	b.n	8006e04 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	695b      	ldr	r3, [r3, #20]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d018      	beq.n	8006c4c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	695b      	ldr	r3, [r3, #20]
 8006c1e:	68ba      	ldr	r2, [r7, #8]
 8006c20:	8912      	ldrh	r2, [r2, #8]
 8006c22:	4413      	add	r3, r2
 8006c24:	3b01      	subs	r3, #1
 8006c26:	68ba      	ldr	r2, [r7, #8]
 8006c28:	8912      	ldrh	r2, [r2, #8]
 8006c2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c2e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006c30:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006c32:	8b7b      	ldrh	r3, [r7, #26]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d90b      	bls.n	8006c50 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006c38:	8b7b      	ldrh	r3, [r7, #26]
 8006c3a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006c3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006c3e:	68ba      	ldr	r2, [r7, #8]
 8006c40:	8912      	ldrh	r2, [r2, #8]
 8006c42:	fb03 f202 	mul.w	r2, r3, r2
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	611a      	str	r2, [r3, #16]
 8006c4a:	e001      	b.n	8006c50 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	78db      	ldrb	r3, [r3, #3]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d007      	beq.n	8006c68 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006c58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006c5a:	68ba      	ldr	r2, [r7, #8]
 8006c5c:	8912      	ldrh	r2, [r2, #8]
 8006c5e:	fb03 f202 	mul.w	r2, r3, r2
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	611a      	str	r2, [r3, #16]
 8006c66:	e003      	b.n	8006c70 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	695a      	ldr	r2, [r3, #20]
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	691b      	ldr	r3, [r3, #16]
 8006c74:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006c78:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006c7a:	04d9      	lsls	r1, r3, #19
 8006c7c:	4b63      	ldr	r3, [pc, #396]	; (8006e0c <USB_HC_StartXfer+0x280>)
 8006c7e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006c80:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	7a9b      	ldrb	r3, [r3, #10]
 8006c86:	075b      	lsls	r3, r3, #29
 8006c88:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006c8c:	69f9      	ldr	r1, [r7, #28]
 8006c8e:	0148      	lsls	r0, r1, #5
 8006c90:	6a39      	ldr	r1, [r7, #32]
 8006c92:	4401      	add	r1, r0
 8006c94:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006c98:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006c9a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006c9c:	79fb      	ldrb	r3, [r7, #7]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d009      	beq.n	8006cb6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	68d9      	ldr	r1, [r3, #12]
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	015a      	lsls	r2, r3, #5
 8006caa:	6a3b      	ldr	r3, [r7, #32]
 8006cac:	4413      	add	r3, r2
 8006cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cb2:	460a      	mov	r2, r1
 8006cb4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006cb6:	6a3b      	ldr	r3, [r7, #32]
 8006cb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	f003 0301 	and.w	r3, r3, #1
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	bf0c      	ite	eq
 8006cc6:	2301      	moveq	r3, #1
 8006cc8:	2300      	movne	r3, #0
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	015a      	lsls	r2, r3, #5
 8006cd2:	6a3b      	ldr	r3, [r7, #32]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	69fa      	ldr	r2, [r7, #28]
 8006cde:	0151      	lsls	r1, r2, #5
 8006ce0:	6a3a      	ldr	r2, [r7, #32]
 8006ce2:	440a      	add	r2, r1
 8006ce4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ce8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006cec:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	015a      	lsls	r2, r3, #5
 8006cf2:	6a3b      	ldr	r3, [r7, #32]
 8006cf4:	4413      	add	r3, r2
 8006cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	7e7b      	ldrb	r3, [r7, #25]
 8006cfe:	075b      	lsls	r3, r3, #29
 8006d00:	69f9      	ldr	r1, [r7, #28]
 8006d02:	0148      	lsls	r0, r1, #5
 8006d04:	6a39      	ldr	r1, [r7, #32]
 8006d06:	4401      	add	r1, r0
 8006d08:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	015a      	lsls	r2, r3, #5
 8006d14:	6a3b      	ldr	r3, [r7, #32]
 8006d16:	4413      	add	r3, r2
 8006d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006d26:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	78db      	ldrb	r3, [r3, #3]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d004      	beq.n	8006d3a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d36:	613b      	str	r3, [r7, #16]
 8006d38:	e003      	b.n	8006d42 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d40:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d48:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	015a      	lsls	r2, r3, #5
 8006d4e:	6a3b      	ldr	r3, [r7, #32]
 8006d50:	4413      	add	r3, r2
 8006d52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d56:	461a      	mov	r2, r3
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006d5c:	79fb      	ldrb	r3, [r7, #7]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d001      	beq.n	8006d66 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006d62:	2300      	movs	r3, #0
 8006d64:	e04e      	b.n	8006e04 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	78db      	ldrb	r3, [r3, #3]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d149      	bne.n	8006e02 <USB_HC_StartXfer+0x276>
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	695b      	ldr	r3, [r3, #20]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d045      	beq.n	8006e02 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	79db      	ldrb	r3, [r3, #7]
 8006d7a:	2b03      	cmp	r3, #3
 8006d7c:	d830      	bhi.n	8006de0 <USB_HC_StartXfer+0x254>
 8006d7e:	a201      	add	r2, pc, #4	; (adr r2, 8006d84 <USB_HC_StartXfer+0x1f8>)
 8006d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d84:	08006d95 	.word	0x08006d95
 8006d88:	08006db9 	.word	0x08006db9
 8006d8c:	08006d95 	.word	0x08006d95
 8006d90:	08006db9 	.word	0x08006db9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	695b      	ldr	r3, [r3, #20]
 8006d98:	3303      	adds	r3, #3
 8006d9a:	089b      	lsrs	r3, r3, #2
 8006d9c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006d9e:	8afa      	ldrh	r2, [r7, #22]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d91c      	bls.n	8006de4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	699b      	ldr	r3, [r3, #24]
 8006dae:	f043 0220 	orr.w	r2, r3, #32
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	619a      	str	r2, [r3, #24]
        }
        break;
 8006db6:	e015      	b.n	8006de4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	695b      	ldr	r3, [r3, #20]
 8006dbc:	3303      	adds	r3, #3
 8006dbe:	089b      	lsrs	r3, r3, #2
 8006dc0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006dc2:	8afa      	ldrh	r2, [r7, #22]
 8006dc4:	6a3b      	ldr	r3, [r7, #32]
 8006dc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d90a      	bls.n	8006de8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	699b      	ldr	r3, [r3, #24]
 8006dd6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	619a      	str	r2, [r3, #24]
        }
        break;
 8006dde:	e003      	b.n	8006de8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006de0:	bf00      	nop
 8006de2:	e002      	b.n	8006dea <USB_HC_StartXfer+0x25e>
        break;
 8006de4:	bf00      	nop
 8006de6:	e000      	b.n	8006dea <USB_HC_StartXfer+0x25e>
        break;
 8006de8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	68d9      	ldr	r1, [r3, #12]
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	785a      	ldrb	r2, [r3, #1]
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	695b      	ldr	r3, [r3, #20]
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	2000      	movs	r0, #0
 8006dfa:	9000      	str	r0, [sp, #0]
 8006dfc:	68f8      	ldr	r0, [r7, #12]
 8006dfe:	f7ff fb31 	bl	8006464 <USB_WritePacket>
  }

  return HAL_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3728      	adds	r7, #40	; 0x28
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	1ff80000 	.word	0x1ff80000

08006e10 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b085      	sub	sp, #20
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e22:	695b      	ldr	r3, [r3, #20]
 8006e24:	b29b      	uxth	r3, r3
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3714      	adds	r7, #20
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr

08006e32 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006e32:	b480      	push	{r7}
 8006e34:	b089      	sub	sp, #36	; 0x24
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006e42:	78fb      	ldrb	r3, [r7, #3]
 8006e44:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006e46:	2300      	movs	r3, #0
 8006e48:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	015a      	lsls	r2, r3, #5
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	4413      	add	r3, r2
 8006e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	0c9b      	lsrs	r3, r3, #18
 8006e5a:	f003 0303 	and.w	r3, r3, #3
 8006e5e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	015a      	lsls	r2, r3, #5
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	4413      	add	r3, r2
 8006e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	0fdb      	lsrs	r3, r3, #31
 8006e70:	f003 0301 	and.w	r3, r3, #1
 8006e74:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	f003 0320 	and.w	r3, r3, #32
 8006e7e:	2b20      	cmp	r3, #32
 8006e80:	d104      	bne.n	8006e8c <USB_HC_Halt+0x5a>
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d101      	bne.n	8006e8c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	e0c8      	b.n	800701e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d002      	beq.n	8006e98 <USB_HC_Halt+0x66>
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	d163      	bne.n	8006f60 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	015a      	lsls	r2, r3, #5
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	4413      	add	r3, r2
 8006ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	69ba      	ldr	r2, [r7, #24]
 8006ea8:	0151      	lsls	r1, r2, #5
 8006eaa:	69fa      	ldr	r2, [r7, #28]
 8006eac:	440a      	add	r2, r1
 8006eae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006eb2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006eb6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	f003 0320 	and.w	r3, r3, #32
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	f040 80ab 	bne.w	800701c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d133      	bne.n	8006f3a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	015a      	lsls	r2, r3, #5
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	4413      	add	r3, r2
 8006eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	69ba      	ldr	r2, [r7, #24]
 8006ee2:	0151      	lsls	r1, r2, #5
 8006ee4:	69fa      	ldr	r2, [r7, #28]
 8006ee6:	440a      	add	r2, r1
 8006ee8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006eec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ef0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	015a      	lsls	r2, r3, #5
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	4413      	add	r3, r2
 8006efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	69ba      	ldr	r2, [r7, #24]
 8006f02:	0151      	lsls	r1, r2, #5
 8006f04:	69fa      	ldr	r2, [r7, #28]
 8006f06:	440a      	add	r2, r1
 8006f08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f10:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	3301      	adds	r3, #1
 8006f16:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f1e:	d81d      	bhi.n	8006f5c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	015a      	lsls	r2, r3, #5
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	4413      	add	r3, r2
 8006f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f36:	d0ec      	beq.n	8006f12 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006f38:	e070      	b.n	800701c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	015a      	lsls	r2, r3, #5
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	4413      	add	r3, r2
 8006f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	69ba      	ldr	r2, [r7, #24]
 8006f4a:	0151      	lsls	r1, r2, #5
 8006f4c:	69fa      	ldr	r2, [r7, #28]
 8006f4e:	440a      	add	r2, r1
 8006f50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f58:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006f5a:	e05f      	b.n	800701c <USB_HC_Halt+0x1ea>
            break;
 8006f5c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006f5e:	e05d      	b.n	800701c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	015a      	lsls	r2, r3, #5
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	4413      	add	r3, r2
 8006f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	69ba      	ldr	r2, [r7, #24]
 8006f70:	0151      	lsls	r1, r2, #5
 8006f72:	69fa      	ldr	r2, [r7, #28]
 8006f74:	440a      	add	r2, r1
 8006f76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f7e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d133      	bne.n	8006ff8 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	015a      	lsls	r2, r3, #5
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	4413      	add	r3, r2
 8006f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	69ba      	ldr	r2, [r7, #24]
 8006fa0:	0151      	lsls	r1, r2, #5
 8006fa2:	69fa      	ldr	r2, [r7, #28]
 8006fa4:	440a      	add	r2, r1
 8006fa6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006faa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006fae:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	015a      	lsls	r2, r3, #5
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	4413      	add	r3, r2
 8006fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	69ba      	ldr	r2, [r7, #24]
 8006fc0:	0151      	lsls	r1, r2, #5
 8006fc2:	69fa      	ldr	r2, [r7, #28]
 8006fc4:	440a      	add	r2, r1
 8006fc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006fce:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fdc:	d81d      	bhi.n	800701a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	015a      	lsls	r2, r3, #5
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ff0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ff4:	d0ec      	beq.n	8006fd0 <USB_HC_Halt+0x19e>
 8006ff6:	e011      	b.n	800701c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	015a      	lsls	r2, r3, #5
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	4413      	add	r3, r2
 8007000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	69ba      	ldr	r2, [r7, #24]
 8007008:	0151      	lsls	r1, r2, #5
 800700a:	69fa      	ldr	r2, [r7, #28]
 800700c:	440a      	add	r2, r1
 800700e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007012:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007016:	6013      	str	r3, [r2, #0]
 8007018:	e000      	b.n	800701c <USB_HC_Halt+0x1ea>
          break;
 800701a:	bf00      	nop
    }
  }

  return HAL_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	3724      	adds	r7, #36	; 0x24
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr
	...

0800702c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800702c:	b480      	push	{r7}
 800702e:	b087      	sub	sp, #28
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	460b      	mov	r3, r1
 8007036:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800703c:	78fb      	ldrb	r3, [r7, #3]
 800703e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007040:	2301      	movs	r3, #1
 8007042:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	04da      	lsls	r2, r3, #19
 8007048:	4b15      	ldr	r3, [pc, #84]	; (80070a0 <USB_DoPing+0x74>)
 800704a:	4013      	ands	r3, r2
 800704c:	693a      	ldr	r2, [r7, #16]
 800704e:	0151      	lsls	r1, r2, #5
 8007050:	697a      	ldr	r2, [r7, #20]
 8007052:	440a      	add	r2, r1
 8007054:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007058:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800705c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	015a      	lsls	r2, r3, #5
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	4413      	add	r3, r2
 8007066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007074:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800707c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	015a      	lsls	r2, r3, #5
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	4413      	add	r3, r2
 8007086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800708a:	461a      	mov	r2, r3
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	371c      	adds	r7, #28
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop
 80070a0:	1ff80000 	.word	0x1ff80000

080070a4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b088      	sub	sp, #32
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80070ac:	2300      	movs	r3, #0
 80070ae:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80070b4:	2300      	movs	r3, #0
 80070b6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f7ff f911 	bl	80062e0 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80070be:	2110      	movs	r1, #16
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f7ff f96b 	bl	800639c <USB_FlushTxFifo>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d001      	beq.n	80070d0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f7ff f997 	bl	8006404 <USB_FlushRxFifo>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d001      	beq.n	80070e0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80070e0:	2300      	movs	r3, #0
 80070e2:	61bb      	str	r3, [r7, #24]
 80070e4:	e01f      	b.n	8007126 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	015a      	lsls	r2, r3, #5
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	4413      	add	r3, r2
 80070ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070fc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007104:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800710c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	015a      	lsls	r2, r3, #5
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	4413      	add	r3, r2
 8007116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800711a:	461a      	mov	r2, r3
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007120:	69bb      	ldr	r3, [r7, #24]
 8007122:	3301      	adds	r3, #1
 8007124:	61bb      	str	r3, [r7, #24]
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	2b0f      	cmp	r3, #15
 800712a:	d9dc      	bls.n	80070e6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800712c:	2300      	movs	r3, #0
 800712e:	61bb      	str	r3, [r7, #24]
 8007130:	e034      	b.n	800719c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	015a      	lsls	r2, r3, #5
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	4413      	add	r3, r2
 800713a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007148:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007150:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007158:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	015a      	lsls	r2, r3, #5
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	4413      	add	r3, r2
 8007162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007166:	461a      	mov	r2, r3
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	3301      	adds	r3, #1
 8007170:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007178:	d80c      	bhi.n	8007194 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	015a      	lsls	r2, r3, #5
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	4413      	add	r3, r2
 8007182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800718c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007190:	d0ec      	beq.n	800716c <USB_StopHost+0xc8>
 8007192:	e000      	b.n	8007196 <USB_StopHost+0xf2>
        break;
 8007194:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	3301      	adds	r3, #1
 800719a:	61bb      	str	r3, [r7, #24]
 800719c:	69bb      	ldr	r3, [r7, #24]
 800719e:	2b0f      	cmp	r3, #15
 80071a0:	d9c7      	bls.n	8007132 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071a8:	461a      	mov	r2, r3
 80071aa:	f04f 33ff 	mov.w	r3, #4294967295
 80071ae:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f04f 32ff 	mov.w	r2, #4294967295
 80071b6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f7ff f880 	bl	80062be <USB_EnableGlobalInt>

  return ret;
 80071be:	7ffb      	ldrb	r3, [r7, #31]
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3720      	adds	r7, #32
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80071c8:	b590      	push	{r4, r7, lr}
 80071ca:	b089      	sub	sp, #36	; 0x24
 80071cc:	af04      	add	r7, sp, #16
 80071ce:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80071d0:	2301      	movs	r3, #1
 80071d2:	2202      	movs	r2, #2
 80071d4:	2102      	movs	r1, #2
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 fc66 	bl	8007aa8 <USBH_FindInterface>
 80071dc:	4603      	mov	r3, r0
 80071de:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80071e0:	7bfb      	ldrb	r3, [r7, #15]
 80071e2:	2bff      	cmp	r3, #255	; 0xff
 80071e4:	d002      	beq.n	80071ec <USBH_CDC_InterfaceInit+0x24>
 80071e6:	7bfb      	ldrb	r3, [r7, #15]
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d901      	bls.n	80071f0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80071ec:	2302      	movs	r3, #2
 80071ee:	e13d      	b.n	800746c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80071f0:	7bfb      	ldrb	r3, [r7, #15]
 80071f2:	4619      	mov	r1, r3
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 fc3b 	bl	8007a70 <USBH_SelectInterface>
 80071fa:	4603      	mov	r3, r0
 80071fc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80071fe:	7bbb      	ldrb	r3, [r7, #14]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d001      	beq.n	8007208 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007204:	2302      	movs	r3, #2
 8007206:	e131      	b.n	800746c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800720e:	2050      	movs	r0, #80	; 0x50
 8007210:	f002 fafa 	bl	8009808 <malloc>
 8007214:	4603      	mov	r3, r0
 8007216:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800721e:	69db      	ldr	r3, [r3, #28]
 8007220:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d101      	bne.n	800722c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007228:	2302      	movs	r3, #2
 800722a:	e11f      	b.n	800746c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800722c:	2250      	movs	r2, #80	; 0x50
 800722e:	2100      	movs	r1, #0
 8007230:	68b8      	ldr	r0, [r7, #8]
 8007232:	f002 faf9 	bl	8009828 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007236:	7bfb      	ldrb	r3, [r7, #15]
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	211a      	movs	r1, #26
 800723c:	fb01 f303 	mul.w	r3, r1, r3
 8007240:	4413      	add	r3, r2
 8007242:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	b25b      	sxtb	r3, r3
 800724a:	2b00      	cmp	r3, #0
 800724c:	da15      	bge.n	800727a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800724e:	7bfb      	ldrb	r3, [r7, #15]
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	211a      	movs	r1, #26
 8007254:	fb01 f303 	mul.w	r3, r1, r3
 8007258:	4413      	add	r3, r2
 800725a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800725e:	781a      	ldrb	r2, [r3, #0]
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007264:	7bfb      	ldrb	r3, [r7, #15]
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	211a      	movs	r1, #26
 800726a:	fb01 f303 	mul.w	r3, r1, r3
 800726e:	4413      	add	r3, r2
 8007270:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007274:	881a      	ldrh	r2, [r3, #0]
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	785b      	ldrb	r3, [r3, #1]
 800727e:	4619      	mov	r1, r3
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f001 ff2c 	bl	80090de <USBH_AllocPipe>
 8007286:	4603      	mov	r3, r0
 8007288:	461a      	mov	r2, r3
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	7819      	ldrb	r1, [r3, #0]
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	7858      	ldrb	r0, [r3, #1]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80072a2:	68ba      	ldr	r2, [r7, #8]
 80072a4:	8952      	ldrh	r2, [r2, #10]
 80072a6:	9202      	str	r2, [sp, #8]
 80072a8:	2203      	movs	r2, #3
 80072aa:	9201      	str	r2, [sp, #4]
 80072ac:	9300      	str	r3, [sp, #0]
 80072ae:	4623      	mov	r3, r4
 80072b0:	4602      	mov	r2, r0
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f001 fee4 	bl	8009080 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	2200      	movs	r2, #0
 80072be:	4619      	mov	r1, r3
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f002 f9f3 	bl	80096ac <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80072c6:	2300      	movs	r3, #0
 80072c8:	2200      	movs	r2, #0
 80072ca:	210a      	movs	r1, #10
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 fbeb 	bl	8007aa8 <USBH_FindInterface>
 80072d2:	4603      	mov	r3, r0
 80072d4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80072d6:	7bfb      	ldrb	r3, [r7, #15]
 80072d8:	2bff      	cmp	r3, #255	; 0xff
 80072da:	d002      	beq.n	80072e2 <USBH_CDC_InterfaceInit+0x11a>
 80072dc:	7bfb      	ldrb	r3, [r7, #15]
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d901      	bls.n	80072e6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80072e2:	2302      	movs	r3, #2
 80072e4:	e0c2      	b.n	800746c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80072e6:	7bfb      	ldrb	r3, [r7, #15]
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	211a      	movs	r1, #26
 80072ec:	fb01 f303 	mul.w	r3, r1, r3
 80072f0:	4413      	add	r3, r2
 80072f2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	b25b      	sxtb	r3, r3
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	da16      	bge.n	800732c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80072fe:	7bfb      	ldrb	r3, [r7, #15]
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	211a      	movs	r1, #26
 8007304:	fb01 f303 	mul.w	r3, r1, r3
 8007308:	4413      	add	r3, r2
 800730a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800730e:	781a      	ldrb	r2, [r3, #0]
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007314:	7bfb      	ldrb	r3, [r7, #15]
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	211a      	movs	r1, #26
 800731a:	fb01 f303 	mul.w	r3, r1, r3
 800731e:	4413      	add	r3, r2
 8007320:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007324:	881a      	ldrh	r2, [r3, #0]
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	835a      	strh	r2, [r3, #26]
 800732a:	e015      	b.n	8007358 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800732c:	7bfb      	ldrb	r3, [r7, #15]
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	211a      	movs	r1, #26
 8007332:	fb01 f303 	mul.w	r3, r1, r3
 8007336:	4413      	add	r3, r2
 8007338:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800733c:	781a      	ldrb	r2, [r3, #0]
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007342:	7bfb      	ldrb	r3, [r7, #15]
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	211a      	movs	r1, #26
 8007348:	fb01 f303 	mul.w	r3, r1, r3
 800734c:	4413      	add	r3, r2
 800734e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007352:	881a      	ldrh	r2, [r3, #0]
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007358:	7bfb      	ldrb	r3, [r7, #15]
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	211a      	movs	r1, #26
 800735e:	fb01 f303 	mul.w	r3, r1, r3
 8007362:	4413      	add	r3, r2
 8007364:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	b25b      	sxtb	r3, r3
 800736c:	2b00      	cmp	r3, #0
 800736e:	da16      	bge.n	800739e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007370:	7bfb      	ldrb	r3, [r7, #15]
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	211a      	movs	r1, #26
 8007376:	fb01 f303 	mul.w	r3, r1, r3
 800737a:	4413      	add	r3, r2
 800737c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007380:	781a      	ldrb	r2, [r3, #0]
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007386:	7bfb      	ldrb	r3, [r7, #15]
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	211a      	movs	r1, #26
 800738c:	fb01 f303 	mul.w	r3, r1, r3
 8007390:	4413      	add	r3, r2
 8007392:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007396:	881a      	ldrh	r2, [r3, #0]
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	835a      	strh	r2, [r3, #26]
 800739c:	e015      	b.n	80073ca <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800739e:	7bfb      	ldrb	r3, [r7, #15]
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	211a      	movs	r1, #26
 80073a4:	fb01 f303 	mul.w	r3, r1, r3
 80073a8:	4413      	add	r3, r2
 80073aa:	f203 3356 	addw	r3, r3, #854	; 0x356
 80073ae:	781a      	ldrb	r2, [r3, #0]
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80073b4:	7bfb      	ldrb	r3, [r7, #15]
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	211a      	movs	r1, #26
 80073ba:	fb01 f303 	mul.w	r3, r1, r3
 80073be:	4413      	add	r3, r2
 80073c0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80073c4:	881a      	ldrh	r2, [r3, #0]
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	7b9b      	ldrb	r3, [r3, #14]
 80073ce:	4619      	mov	r1, r3
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f001 fe84 	bl	80090de <USBH_AllocPipe>
 80073d6:	4603      	mov	r3, r0
 80073d8:	461a      	mov	r2, r3
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	7bdb      	ldrb	r3, [r3, #15]
 80073e2:	4619      	mov	r1, r3
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f001 fe7a 	bl	80090de <USBH_AllocPipe>
 80073ea:	4603      	mov	r3, r0
 80073ec:	461a      	mov	r2, r3
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	7b59      	ldrb	r1, [r3, #13]
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	7b98      	ldrb	r0, [r3, #14]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007406:	68ba      	ldr	r2, [r7, #8]
 8007408:	8b12      	ldrh	r2, [r2, #24]
 800740a:	9202      	str	r2, [sp, #8]
 800740c:	2202      	movs	r2, #2
 800740e:	9201      	str	r2, [sp, #4]
 8007410:	9300      	str	r3, [sp, #0]
 8007412:	4623      	mov	r3, r4
 8007414:	4602      	mov	r2, r0
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f001 fe32 	bl	8009080 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	7b19      	ldrb	r1, [r3, #12]
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	7bd8      	ldrb	r0, [r3, #15]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007430:	68ba      	ldr	r2, [r7, #8]
 8007432:	8b52      	ldrh	r2, [r2, #26]
 8007434:	9202      	str	r2, [sp, #8]
 8007436:	2202      	movs	r2, #2
 8007438:	9201      	str	r2, [sp, #4]
 800743a:	9300      	str	r3, [sp, #0]
 800743c:	4623      	mov	r3, r4
 800743e:	4602      	mov	r2, r0
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f001 fe1d 	bl	8009080 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	2200      	movs	r2, #0
 800744a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	7b5b      	ldrb	r3, [r3, #13]
 8007452:	2200      	movs	r2, #0
 8007454:	4619      	mov	r1, r3
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f002 f928 	bl	80096ac <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	7b1b      	ldrb	r3, [r3, #12]
 8007460:	2200      	movs	r2, #0
 8007462:	4619      	mov	r1, r3
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f002 f921 	bl	80096ac <USBH_LL_SetToggle>

  return USBH_OK;
 800746a:	2300      	movs	r3, #0
}
 800746c:	4618      	mov	r0, r3
 800746e:	3714      	adds	r7, #20
 8007470:	46bd      	mov	sp, r7
 8007472:	bd90      	pop	{r4, r7, pc}

08007474 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007482:	69db      	ldr	r3, [r3, #28]
 8007484:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00e      	beq.n	80074ac <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	4619      	mov	r1, r3
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f001 fe12 	bl	80090be <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	4619      	mov	r1, r3
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f001 fe3d 	bl	8009120 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2200      	movs	r2, #0
 80074aa:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	7b1b      	ldrb	r3, [r3, #12]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d00e      	beq.n	80074d2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	7b1b      	ldrb	r3, [r3, #12]
 80074b8:	4619      	mov	r1, r3
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f001 fdff 	bl	80090be <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	7b1b      	ldrb	r3, [r3, #12]
 80074c4:	4619      	mov	r1, r3
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f001 fe2a 	bl	8009120 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2200      	movs	r2, #0
 80074d0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	7b5b      	ldrb	r3, [r3, #13]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d00e      	beq.n	80074f8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	7b5b      	ldrb	r3, [r3, #13]
 80074de:	4619      	mov	r1, r3
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f001 fdec 	bl	80090be <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	7b5b      	ldrb	r3, [r3, #13]
 80074ea:	4619      	mov	r1, r3
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f001 fe17 	bl	8009120 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2200      	movs	r2, #0
 80074f6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074fe:	69db      	ldr	r3, [r3, #28]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d00b      	beq.n	800751c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800750a:	69db      	ldr	r3, [r3, #28]
 800750c:	4618      	mov	r0, r3
 800750e:	f002 f983 	bl	8009818 <free>
    phost->pActiveClass->pData = 0U;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007518:	2200      	movs	r2, #0
 800751a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800751c:	2300      	movs	r3, #0
}
 800751e:	4618      	mov	r0, r3
 8007520:	3710      	adds	r7, #16
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}

08007526 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007526:	b580      	push	{r7, lr}
 8007528:	b084      	sub	sp, #16
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007534:	69db      	ldr	r3, [r3, #28]
 8007536:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	3340      	adds	r3, #64	; 0x40
 800753c:	4619      	mov	r1, r3
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 f8b1 	bl	80076a6 <GetLineCoding>
 8007544:	4603      	mov	r3, r0
 8007546:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007548:	7afb      	ldrb	r3, [r7, #11]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d105      	bne.n	800755a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007554:	2102      	movs	r1, #2
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800755a:	7afb      	ldrb	r3, [r7, #11]
}
 800755c:	4618      	mov	r0, r3
 800755e:	3710      	adds	r7, #16
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800756c:	2301      	movs	r3, #1
 800756e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007570:	2300      	movs	r3, #0
 8007572:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800757a:	69db      	ldr	r3, [r3, #28]
 800757c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007584:	2b04      	cmp	r3, #4
 8007586:	d877      	bhi.n	8007678 <USBH_CDC_Process+0x114>
 8007588:	a201      	add	r2, pc, #4	; (adr r2, 8007590 <USBH_CDC_Process+0x2c>)
 800758a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800758e:	bf00      	nop
 8007590:	080075a5 	.word	0x080075a5
 8007594:	080075ab 	.word	0x080075ab
 8007598:	080075db 	.word	0x080075db
 800759c:	0800764f 	.word	0x0800764f
 80075a0:	0800765d 	.word	0x0800765d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80075a4:	2300      	movs	r3, #0
 80075a6:	73fb      	strb	r3, [r7, #15]
      break;
 80075a8:	e06d      	b.n	8007686 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075ae:	4619      	mov	r1, r3
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 f897 	bl	80076e4 <SetLineCoding>
 80075b6:	4603      	mov	r3, r0
 80075b8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80075ba:	7bbb      	ldrb	r3, [r7, #14]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d104      	bne.n	80075ca <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	2202      	movs	r2, #2
 80075c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80075c8:	e058      	b.n	800767c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80075ca:	7bbb      	ldrb	r3, [r7, #14]
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d055      	beq.n	800767c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	2204      	movs	r2, #4
 80075d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80075d8:	e050      	b.n	800767c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	3340      	adds	r3, #64	; 0x40
 80075de:	4619      	mov	r1, r3
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 f860 	bl	80076a6 <GetLineCoding>
 80075e6:	4603      	mov	r3, r0
 80075e8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80075ea:	7bbb      	ldrb	r3, [r7, #14]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d126      	bne.n	800763e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007602:	791b      	ldrb	r3, [r3, #4]
 8007604:	429a      	cmp	r2, r3
 8007606:	d13b      	bne.n	8007680 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007612:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007614:	429a      	cmp	r2, r3
 8007616:	d133      	bne.n	8007680 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007622:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007624:	429a      	cmp	r2, r3
 8007626:	d12b      	bne.n	8007680 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007630:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007632:	429a      	cmp	r2, r3
 8007634:	d124      	bne.n	8007680 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 f958 	bl	80078ec <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800763c:	e020      	b.n	8007680 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800763e:	7bbb      	ldrb	r3, [r7, #14]
 8007640:	2b01      	cmp	r3, #1
 8007642:	d01d      	beq.n	8007680 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	2204      	movs	r2, #4
 8007648:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800764c:	e018      	b.n	8007680 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 f867 	bl	8007722 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 f8da 	bl	800780e <CDC_ProcessReception>
      break;
 800765a:	e014      	b.n	8007686 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800765c:	2100      	movs	r1, #0
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 ffef 	bl	8008642 <USBH_ClrFeature>
 8007664:	4603      	mov	r3, r0
 8007666:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007668:	7bbb      	ldrb	r3, [r7, #14]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d10a      	bne.n	8007684 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	2200      	movs	r2, #0
 8007672:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007676:	e005      	b.n	8007684 <USBH_CDC_Process+0x120>

    default:
      break;
 8007678:	bf00      	nop
 800767a:	e004      	b.n	8007686 <USBH_CDC_Process+0x122>
      break;
 800767c:	bf00      	nop
 800767e:	e002      	b.n	8007686 <USBH_CDC_Process+0x122>
      break;
 8007680:	bf00      	nop
 8007682:	e000      	b.n	8007686 <USBH_CDC_Process+0x122>
      break;
 8007684:	bf00      	nop

  }

  return status;
 8007686:	7bfb      	ldrb	r3, [r7, #15]
}
 8007688:	4618      	mov	r0, r3
 800768a:	3710      	adds	r7, #16
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	370c      	adds	r7, #12
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr

080076a6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80076a6:	b580      	push	{r7, lr}
 80076a8:	b082      	sub	sp, #8
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
 80076ae:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	22a1      	movs	r2, #161	; 0xa1
 80076b4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2221      	movs	r2, #33	; 0x21
 80076ba:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2207      	movs	r2, #7
 80076cc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	2207      	movs	r2, #7
 80076d2:	4619      	mov	r1, r3
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f001 fa81 	bl	8008bdc <USBH_CtlReq>
 80076da:	4603      	mov	r3, r0
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3708      	adds	r7, #8
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2221      	movs	r2, #33	; 0x21
 80076f2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2220      	movs	r2, #32
 80076f8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2207      	movs	r2, #7
 800770a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	2207      	movs	r2, #7
 8007710:	4619      	mov	r1, r3
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f001 fa62 	bl	8008bdc <USBH_CtlReq>
 8007718:	4603      	mov	r3, r0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3708      	adds	r7, #8
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007722:	b580      	push	{r7, lr}
 8007724:	b086      	sub	sp, #24
 8007726:	af02      	add	r7, sp, #8
 8007728:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007730:	69db      	ldr	r3, [r3, #28]
 8007732:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007734:	2300      	movs	r3, #0
 8007736:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800773e:	2b01      	cmp	r3, #1
 8007740:	d002      	beq.n	8007748 <CDC_ProcessTransmission+0x26>
 8007742:	2b02      	cmp	r3, #2
 8007744:	d023      	beq.n	800778e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007746:	e05e      	b.n	8007806 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774c:	68fa      	ldr	r2, [r7, #12]
 800774e:	8b12      	ldrh	r2, [r2, #24]
 8007750:	4293      	cmp	r3, r2
 8007752:	d90b      	bls.n	800776c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	69d9      	ldr	r1, [r3, #28]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	8b1a      	ldrh	r2, [r3, #24]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	7b5b      	ldrb	r3, [r3, #13]
 8007760:	2001      	movs	r0, #1
 8007762:	9000      	str	r0, [sp, #0]
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f001 fc48 	bl	8008ffa <USBH_BulkSendData>
 800776a:	e00b      	b.n	8007784 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8007774:	b29a      	uxth	r2, r3
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	7b5b      	ldrb	r3, [r3, #13]
 800777a:	2001      	movs	r0, #1
 800777c:	9000      	str	r0, [sp, #0]
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f001 fc3b 	bl	8008ffa <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2202      	movs	r2, #2
 8007788:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800778c:	e03b      	b.n	8007806 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	7b5b      	ldrb	r3, [r3, #13]
 8007792:	4619      	mov	r1, r3
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f001 ff5f 	bl	8009658 <USBH_LL_GetURBState>
 800779a:	4603      	mov	r3, r0
 800779c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800779e:	7afb      	ldrb	r3, [r7, #11]
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d128      	bne.n	80077f6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	8b12      	ldrh	r2, [r2, #24]
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d90e      	bls.n	80077ce <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b4:	68fa      	ldr	r2, [r7, #12]
 80077b6:	8b12      	ldrh	r2, [r2, #24]
 80077b8:	1a9a      	subs	r2, r3, r2
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	69db      	ldr	r3, [r3, #28]
 80077c2:	68fa      	ldr	r2, [r7, #12]
 80077c4:	8b12      	ldrh	r2, [r2, #24]
 80077c6:	441a      	add	r2, r3
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	61da      	str	r2, [r3, #28]
 80077cc:	e002      	b.n	80077d4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2200      	movs	r2, #0
 80077d2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d004      	beq.n	80077e6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2201      	movs	r2, #1
 80077e0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80077e4:	e00e      	b.n	8007804 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 f868 	bl	80078c4 <USBH_CDC_TransmitCallback>
      break;
 80077f4:	e006      	b.n	8007804 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80077f6:	7afb      	ldrb	r3, [r7, #11]
 80077f8:	2b02      	cmp	r3, #2
 80077fa:	d103      	bne.n	8007804 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2201      	movs	r2, #1
 8007800:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007804:	bf00      	nop
  }
}
 8007806:	bf00      	nop
 8007808:	3710      	adds	r7, #16
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800780e:	b580      	push	{r7, lr}
 8007810:	b086      	sub	sp, #24
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800781c:	69db      	ldr	r3, [r3, #28]
 800781e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007820:	2300      	movs	r3, #0
 8007822:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800782a:	2b03      	cmp	r3, #3
 800782c:	d002      	beq.n	8007834 <CDC_ProcessReception+0x26>
 800782e:	2b04      	cmp	r3, #4
 8007830:	d00e      	beq.n	8007850 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007832:	e043      	b.n	80078bc <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	6a19      	ldr	r1, [r3, #32]
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	8b5a      	ldrh	r2, [r3, #26]
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	7b1b      	ldrb	r3, [r3, #12]
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f001 fbff 	bl	8009044 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	2204      	movs	r2, #4
 800784a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800784e:	e035      	b.n	80078bc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	7b1b      	ldrb	r3, [r3, #12]
 8007854:	4619      	mov	r1, r3
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f001 fefe 	bl	8009658 <USBH_LL_GetURBState>
 800785c:	4603      	mov	r3, r0
 800785e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007860:	7cfb      	ldrb	r3, [r7, #19]
 8007862:	2b01      	cmp	r3, #1
 8007864:	d129      	bne.n	80078ba <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	7b1b      	ldrb	r3, [r3, #12]
 800786a:	4619      	mov	r1, r3
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f001 fe61 	bl	8009534 <USBH_LL_GetLastXferSize>
 8007872:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007878:	68fa      	ldr	r2, [r7, #12]
 800787a:	429a      	cmp	r2, r3
 800787c:	d016      	beq.n	80078ac <CDC_ProcessReception+0x9e>
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	8b5b      	ldrh	r3, [r3, #26]
 8007882:	461a      	mov	r2, r3
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	4293      	cmp	r3, r2
 8007888:	d910      	bls.n	80078ac <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	1ad2      	subs	r2, r2, r3
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	6a1a      	ldr	r2, [r3, #32]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	441a      	add	r2, r3
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	2203      	movs	r2, #3
 80078a6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80078aa:	e006      	b.n	80078ba <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 f80f 	bl	80078d8 <USBH_CDC_ReceiveCallback>
      break;
 80078ba:	bf00      	nop
  }
}
 80078bc:	bf00      	nop
 80078be:	3718      	adds	r7, #24
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80078cc:	bf00      	nop
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80078e0:	bf00      	nop
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80078f4:	bf00      	nop
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	4613      	mov	r3, r2
 800790c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d101      	bne.n	8007918 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007914:	2302      	movs	r3, #2
 8007916:	e029      	b.n	800796c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	79fa      	ldrb	r2, [r7, #7]
 800791c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2200      	movs	r2, #0
 8007924:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2200      	movs	r2, #0
 800792c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007930:	68f8      	ldr	r0, [r7, #12]
 8007932:	f000 f81f 	bl	8007974 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2200      	movs	r2, #0
 800793a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2200      	movs	r2, #0
 8007942:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2200      	movs	r2, #0
 800794a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2200      	movs	r2, #0
 8007952:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d003      	beq.n	8007964 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	68ba      	ldr	r2, [r7, #8]
 8007960:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	f001 fd31 	bl	80093cc <USBH_LL_Init>

  return USBH_OK;
 800796a:	2300      	movs	r3, #0
}
 800796c:	4618      	mov	r0, r3
 800796e:	3710      	adds	r7, #16
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007974:	b480      	push	{r7}
 8007976:	b085      	sub	sp, #20
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800797c:	2300      	movs	r3, #0
 800797e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007980:	2300      	movs	r3, #0
 8007982:	60fb      	str	r3, [r7, #12]
 8007984:	e009      	b.n	800799a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	33e0      	adds	r3, #224	; 0xe0
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	4413      	add	r3, r2
 8007990:	2200      	movs	r2, #0
 8007992:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	3301      	adds	r3, #1
 8007998:	60fb      	str	r3, [r7, #12]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2b0f      	cmp	r3, #15
 800799e:	d9f2      	bls.n	8007986 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80079a0:	2300      	movs	r3, #0
 80079a2:	60fb      	str	r3, [r7, #12]
 80079a4:	e009      	b.n	80079ba <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	4413      	add	r3, r2
 80079ac:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80079b0:	2200      	movs	r2, #0
 80079b2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	3301      	adds	r3, #1
 80079b8:	60fb      	str	r3, [r7, #12]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079c0:	d3f1      	bcc.n	80079a6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2201      	movs	r2, #1
 80079d2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2201      	movs	r2, #1
 80079e0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2240      	movs	r2, #64	; 0x40
 80079e6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2201      	movs	r2, #1
 80079fa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007a0e:	2300      	movs	r3, #0
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3714      	adds	r7, #20
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b085      	sub	sp, #20
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007a26:	2300      	movs	r3, #0
 8007a28:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d016      	beq.n	8007a5e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d10e      	bne.n	8007a58 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007a40:	1c59      	adds	r1, r3, #1
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	33de      	adds	r3, #222	; 0xde
 8007a4c:	6839      	ldr	r1, [r7, #0]
 8007a4e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007a52:	2300      	movs	r3, #0
 8007a54:	73fb      	strb	r3, [r7, #15]
 8007a56:	e004      	b.n	8007a62 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007a58:	2302      	movs	r3, #2
 8007a5a:	73fb      	strb	r3, [r7, #15]
 8007a5c:	e001      	b.n	8007a62 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007a5e:	2302      	movs	r3, #2
 8007a60:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3714      	adds	r7, #20
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b085      	sub	sp, #20
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	460b      	mov	r3, r1
 8007a7a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007a86:	78fa      	ldrb	r2, [r7, #3]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d204      	bcs.n	8007a96 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	78fa      	ldrb	r2, [r7, #3]
 8007a90:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007a94:	e001      	b.n	8007a9a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007a96:	2302      	movs	r3, #2
 8007a98:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3714      	adds	r7, #20
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr

08007aa8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b087      	sub	sp, #28
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	4608      	mov	r0, r1
 8007ab2:	4611      	mov	r1, r2
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	70fb      	strb	r3, [r7, #3]
 8007aba:	460b      	mov	r3, r1
 8007abc:	70bb      	strb	r3, [r7, #2]
 8007abe:	4613      	mov	r3, r2
 8007ac0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007ad0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007ad2:	e025      	b.n	8007b20 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007ad4:	7dfb      	ldrb	r3, [r7, #23]
 8007ad6:	221a      	movs	r2, #26
 8007ad8:	fb02 f303 	mul.w	r3, r2, r3
 8007adc:	3308      	adds	r3, #8
 8007ade:	68fa      	ldr	r2, [r7, #12]
 8007ae0:	4413      	add	r3, r2
 8007ae2:	3302      	adds	r3, #2
 8007ae4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	795b      	ldrb	r3, [r3, #5]
 8007aea:	78fa      	ldrb	r2, [r7, #3]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d002      	beq.n	8007af6 <USBH_FindInterface+0x4e>
 8007af0:	78fb      	ldrb	r3, [r7, #3]
 8007af2:	2bff      	cmp	r3, #255	; 0xff
 8007af4:	d111      	bne.n	8007b1a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007afa:	78ba      	ldrb	r2, [r7, #2]
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d002      	beq.n	8007b06 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007b00:	78bb      	ldrb	r3, [r7, #2]
 8007b02:	2bff      	cmp	r3, #255	; 0xff
 8007b04:	d109      	bne.n	8007b1a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007b0a:	787a      	ldrb	r2, [r7, #1]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d002      	beq.n	8007b16 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007b10:	787b      	ldrb	r3, [r7, #1]
 8007b12:	2bff      	cmp	r3, #255	; 0xff
 8007b14:	d101      	bne.n	8007b1a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007b16:	7dfb      	ldrb	r3, [r7, #23]
 8007b18:	e006      	b.n	8007b28 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007b1a:	7dfb      	ldrb	r3, [r7, #23]
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007b20:	7dfb      	ldrb	r3, [r7, #23]
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d9d6      	bls.n	8007ad4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007b26:	23ff      	movs	r3, #255	; 0xff
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	371c      	adds	r7, #28
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f001 fc81 	bl	8009444 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007b42:	2101      	movs	r1, #1
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f001 fd9a 	bl	800967e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007b4a:	2300      	movs	r3, #0
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3708      	adds	r7, #8
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b088      	sub	sp, #32
 8007b58:	af04      	add	r7, sp, #16
 8007b5a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007b5c:	2302      	movs	r3, #2
 8007b5e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007b60:	2300      	movs	r3, #0
 8007b62:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d102      	bne.n	8007b76 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2203      	movs	r2, #3
 8007b74:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	2b0b      	cmp	r3, #11
 8007b7e:	f200 81be 	bhi.w	8007efe <USBH_Process+0x3aa>
 8007b82:	a201      	add	r2, pc, #4	; (adr r2, 8007b88 <USBH_Process+0x34>)
 8007b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b88:	08007bb9 	.word	0x08007bb9
 8007b8c:	08007beb 	.word	0x08007beb
 8007b90:	08007c53 	.word	0x08007c53
 8007b94:	08007e99 	.word	0x08007e99
 8007b98:	08007eff 	.word	0x08007eff
 8007b9c:	08007cf7 	.word	0x08007cf7
 8007ba0:	08007e3f 	.word	0x08007e3f
 8007ba4:	08007d2d 	.word	0x08007d2d
 8007ba8:	08007d4d 	.word	0x08007d4d
 8007bac:	08007d6d 	.word	0x08007d6d
 8007bb0:	08007db1 	.word	0x08007db1
 8007bb4:	08007e81 	.word	0x08007e81
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	f000 819e 	beq.w	8007f02 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007bcc:	20c8      	movs	r0, #200	; 0xc8
 8007bce:	f001 fd9d 	bl	800970c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f001 fc93 	bl	80094fe <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007be8:	e18b      	b.n	8007f02 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d107      	bne.n	8007c04 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2202      	movs	r2, #2
 8007c00:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007c02:	e18d      	b.n	8007f20 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007c0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c0e:	d914      	bls.n	8007c3a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007c16:	3301      	adds	r3, #1
 8007c18:	b2da      	uxtb	r2, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007c26:	2b03      	cmp	r3, #3
 8007c28:	d903      	bls.n	8007c32 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	220d      	movs	r2, #13
 8007c2e:	701a      	strb	r2, [r3, #0]
      break;
 8007c30:	e176      	b.n	8007f20 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	701a      	strb	r2, [r3, #0]
      break;
 8007c38:	e172      	b.n	8007f20 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007c40:	f103 020a 	add.w	r2, r3, #10
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007c4a:	200a      	movs	r0, #10
 8007c4c:	f001 fd5e 	bl	800970c <USBH_Delay>
      break;
 8007c50:	e166      	b.n	8007f20 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d005      	beq.n	8007c68 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c62:	2104      	movs	r1, #4
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007c68:	2064      	movs	r0, #100	; 0x64
 8007c6a:	f001 fd4f 	bl	800970c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f001 fc1e 	bl	80094b0 <USBH_LL_GetSpeed>
 8007c74:	4603      	mov	r3, r0
 8007c76:	461a      	mov	r2, r3
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2205      	movs	r2, #5
 8007c82:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007c84:	2100      	movs	r1, #0
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f001 fa29 	bl	80090de <USBH_AllocPipe>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	461a      	mov	r2, r3
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007c94:	2180      	movs	r1, #128	; 0x80
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f001 fa21 	bl	80090de <USBH_AllocPipe>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	7919      	ldrb	r1, [r3, #4]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007cb8:	b292      	uxth	r2, r2
 8007cba:	9202      	str	r2, [sp, #8]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	9201      	str	r2, [sp, #4]
 8007cc0:	9300      	str	r3, [sp, #0]
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2280      	movs	r2, #128	; 0x80
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f001 f9da 	bl	8009080 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	7959      	ldrb	r1, [r3, #5]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007ce0:	b292      	uxth	r2, r2
 8007ce2:	9202      	str	r2, [sp, #8]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	9201      	str	r2, [sp, #4]
 8007ce8:	9300      	str	r3, [sp, #0]
 8007cea:	4603      	mov	r3, r0
 8007cec:	2200      	movs	r2, #0
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f001 f9c6 	bl	8009080 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007cf4:	e114      	b.n	8007f20 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 f918 	bl	8007f2c <USBH_HandleEnum>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007d00:	7bbb      	ldrb	r3, [r7, #14]
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	f040 80fe 	bne.w	8007f06 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d103      	bne.n	8007d24 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2208      	movs	r2, #8
 8007d20:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007d22:	e0f0      	b.n	8007f06 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2207      	movs	r2, #7
 8007d28:	701a      	strb	r2, [r3, #0]
      break;
 8007d2a:	e0ec      	b.n	8007f06 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	f000 80e9 	beq.w	8007f0a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d3e:	2101      	movs	r1, #1
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2208      	movs	r2, #8
 8007d48:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007d4a:	e0de      	b.n	8007f0a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	4619      	mov	r1, r3
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 fc2c 	bl	80085b4 <USBH_SetCfg>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	f040 80d5 	bne.w	8007f0e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2209      	movs	r2, #9
 8007d68:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007d6a:	e0d0      	b.n	8007f0e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007d72:	f003 0320 	and.w	r3, r3, #32
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d016      	beq.n	8007da8 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007d7a:	2101      	movs	r1, #1
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 fc3c 	bl	80085fa <USBH_SetFeature>
 8007d82:	4603      	mov	r3, r0
 8007d84:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007d86:	7bbb      	ldrb	r3, [r7, #14]
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d103      	bne.n	8007d96 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	220a      	movs	r2, #10
 8007d92:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007d94:	e0bd      	b.n	8007f12 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8007d96:	7bbb      	ldrb	r3, [r7, #14]
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	2b03      	cmp	r3, #3
 8007d9c:	f040 80b9 	bne.w	8007f12 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	220a      	movs	r2, #10
 8007da4:	701a      	strb	r2, [r3, #0]
      break;
 8007da6:	e0b4      	b.n	8007f12 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	220a      	movs	r2, #10
 8007dac:	701a      	strb	r2, [r3, #0]
      break;
 8007dae:	e0b0      	b.n	8007f12 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	f000 80ad 	beq.w	8007f16 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	73fb      	strb	r3, [r7, #15]
 8007dc8:	e016      	b.n	8007df8 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007dca:	7bfa      	ldrb	r2, [r7, #15]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	32de      	adds	r2, #222	; 0xde
 8007dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dd4:	791a      	ldrb	r2, [r3, #4]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d108      	bne.n	8007df2 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007de0:	7bfa      	ldrb	r2, [r7, #15]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	32de      	adds	r2, #222	; 0xde
 8007de6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007df0:	e005      	b.n	8007dfe <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007df2:	7bfb      	ldrb	r3, [r7, #15]
 8007df4:	3301      	adds	r3, #1
 8007df6:	73fb      	strb	r3, [r7, #15]
 8007df8:	7bfb      	ldrb	r3, [r7, #15]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d0e5      	beq.n	8007dca <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d016      	beq.n	8007e36 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	4798      	blx	r3
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d109      	bne.n	8007e2e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2206      	movs	r2, #6
 8007e1e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007e26:	2103      	movs	r1, #3
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007e2c:	e073      	b.n	8007f16 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	220d      	movs	r2, #13
 8007e32:	701a      	strb	r2, [r3, #0]
      break;
 8007e34:	e06f      	b.n	8007f16 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	220d      	movs	r2, #13
 8007e3a:	701a      	strb	r2, [r3, #0]
      break;
 8007e3c:	e06b      	b.n	8007f16 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d017      	beq.n	8007e78 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e4e:	691b      	ldr	r3, [r3, #16]
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	4798      	blx	r3
 8007e54:	4603      	mov	r3, r0
 8007e56:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007e58:	7bbb      	ldrb	r3, [r7, #14]
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d103      	bne.n	8007e68 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	220b      	movs	r2, #11
 8007e64:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007e66:	e058      	b.n	8007f1a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8007e68:	7bbb      	ldrb	r3, [r7, #14]
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	2b02      	cmp	r3, #2
 8007e6e:	d154      	bne.n	8007f1a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	220d      	movs	r2, #13
 8007e74:	701a      	strb	r2, [r3, #0]
      break;
 8007e76:	e050      	b.n	8007f1a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	220d      	movs	r2, #13
 8007e7c:	701a      	strb	r2, [r3, #0]
      break;
 8007e7e:	e04c      	b.n	8007f1a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d049      	beq.n	8007f1e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e90:	695b      	ldr	r3, [r3, #20]
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	4798      	blx	r3
      }
      break;
 8007e96:	e042      	b.n	8007f1e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f7ff fd67 	bl	8007974 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d009      	beq.n	8007ec4 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d005      	beq.n	8007eda <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ed4:	2105      	movs	r1, #5
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d107      	bne.n	8007ef6 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f7ff fe20 	bl	8007b34 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007ef4:	e014      	b.n	8007f20 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f001 faa4 	bl	8009444 <USBH_LL_Start>
      break;
 8007efc:	e010      	b.n	8007f20 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8007efe:	bf00      	nop
 8007f00:	e00e      	b.n	8007f20 <USBH_Process+0x3cc>
      break;
 8007f02:	bf00      	nop
 8007f04:	e00c      	b.n	8007f20 <USBH_Process+0x3cc>
      break;
 8007f06:	bf00      	nop
 8007f08:	e00a      	b.n	8007f20 <USBH_Process+0x3cc>
    break;
 8007f0a:	bf00      	nop
 8007f0c:	e008      	b.n	8007f20 <USBH_Process+0x3cc>
      break;
 8007f0e:	bf00      	nop
 8007f10:	e006      	b.n	8007f20 <USBH_Process+0x3cc>
      break;
 8007f12:	bf00      	nop
 8007f14:	e004      	b.n	8007f20 <USBH_Process+0x3cc>
      break;
 8007f16:	bf00      	nop
 8007f18:	e002      	b.n	8007f20 <USBH_Process+0x3cc>
      break;
 8007f1a:	bf00      	nop
 8007f1c:	e000      	b.n	8007f20 <USBH_Process+0x3cc>
      break;
 8007f1e:	bf00      	nop
  }
  return USBH_OK;
 8007f20:	2300      	movs	r3, #0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3710      	adds	r7, #16
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	bf00      	nop

08007f2c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b088      	sub	sp, #32
 8007f30:	af04      	add	r7, sp, #16
 8007f32:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007f34:	2301      	movs	r3, #1
 8007f36:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	785b      	ldrb	r3, [r3, #1]
 8007f40:	2b07      	cmp	r3, #7
 8007f42:	f200 81c1 	bhi.w	80082c8 <USBH_HandleEnum+0x39c>
 8007f46:	a201      	add	r2, pc, #4	; (adr r2, 8007f4c <USBH_HandleEnum+0x20>)
 8007f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f4c:	08007f6d 	.word	0x08007f6d
 8007f50:	0800802b 	.word	0x0800802b
 8007f54:	08008095 	.word	0x08008095
 8007f58:	08008123 	.word	0x08008123
 8007f5c:	0800818d 	.word	0x0800818d
 8007f60:	080081fd 	.word	0x080081fd
 8007f64:	08008243 	.word	0x08008243
 8007f68:	08008289 	.word	0x08008289
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007f6c:	2108      	movs	r1, #8
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 fa50 	bl	8008414 <USBH_Get_DevDesc>
 8007f74:	4603      	mov	r3, r0
 8007f76:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007f78:	7bbb      	ldrb	r3, [r7, #14]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d130      	bne.n	8007fe0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	7919      	ldrb	r1, [r3, #4]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007fa2:	b292      	uxth	r2, r2
 8007fa4:	9202      	str	r2, [sp, #8]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	9201      	str	r2, [sp, #4]
 8007faa:	9300      	str	r3, [sp, #0]
 8007fac:	4603      	mov	r3, r0
 8007fae:	2280      	movs	r2, #128	; 0x80
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f001 f865 	bl	8009080 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	7959      	ldrb	r1, [r3, #5]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007fca:	b292      	uxth	r2, r2
 8007fcc:	9202      	str	r2, [sp, #8]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	9201      	str	r2, [sp, #4]
 8007fd2:	9300      	str	r3, [sp, #0]
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f001 f851 	bl	8009080 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007fde:	e175      	b.n	80082cc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007fe0:	7bbb      	ldrb	r3, [r7, #14]
 8007fe2:	2b03      	cmp	r3, #3
 8007fe4:	f040 8172 	bne.w	80082cc <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007fee:	3301      	adds	r3, #1
 8007ff0:	b2da      	uxtb	r2, r3
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007ffe:	2b03      	cmp	r3, #3
 8008000:	d903      	bls.n	800800a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	220d      	movs	r2, #13
 8008006:	701a      	strb	r2, [r3, #0]
      break;
 8008008:	e160      	b.n	80082cc <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	795b      	ldrb	r3, [r3, #5]
 800800e:	4619      	mov	r1, r3
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f001 f885 	bl	8009120 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	791b      	ldrb	r3, [r3, #4]
 800801a:	4619      	mov	r1, r3
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f001 f87f 	bl	8009120 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	701a      	strb	r2, [r3, #0]
      break;
 8008028:	e150      	b.n	80082cc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800802a:	2112      	movs	r1, #18
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 f9f1 	bl	8008414 <USBH_Get_DevDesc>
 8008032:	4603      	mov	r3, r0
 8008034:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008036:	7bbb      	ldrb	r3, [r7, #14]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d103      	bne.n	8008044 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2202      	movs	r2, #2
 8008040:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008042:	e145      	b.n	80082d0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008044:	7bbb      	ldrb	r3, [r7, #14]
 8008046:	2b03      	cmp	r3, #3
 8008048:	f040 8142 	bne.w	80082d0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008052:	3301      	adds	r3, #1
 8008054:	b2da      	uxtb	r2, r3
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008062:	2b03      	cmp	r3, #3
 8008064:	d903      	bls.n	800806e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	220d      	movs	r2, #13
 800806a:	701a      	strb	r2, [r3, #0]
      break;
 800806c:	e130      	b.n	80082d0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	795b      	ldrb	r3, [r3, #5]
 8008072:	4619      	mov	r1, r3
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f001 f853 	bl	8009120 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	791b      	ldrb	r3, [r3, #4]
 800807e:	4619      	mov	r1, r3
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f001 f84d 	bl	8009120 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2200      	movs	r2, #0
 800808a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	701a      	strb	r2, [r3, #0]
      break;
 8008092:	e11d      	b.n	80082d0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008094:	2101      	movs	r1, #1
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 fa68 	bl	800856c <USBH_SetAddress>
 800809c:	4603      	mov	r3, r0
 800809e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80080a0:	7bbb      	ldrb	r3, [r7, #14]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d132      	bne.n	800810c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80080a6:	2002      	movs	r0, #2
 80080a8:	f001 fb30 	bl	800970c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2201      	movs	r2, #1
 80080b0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2203      	movs	r2, #3
 80080b8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	7919      	ldrb	r1, [r3, #4]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80080ce:	b292      	uxth	r2, r2
 80080d0:	9202      	str	r2, [sp, #8]
 80080d2:	2200      	movs	r2, #0
 80080d4:	9201      	str	r2, [sp, #4]
 80080d6:	9300      	str	r3, [sp, #0]
 80080d8:	4603      	mov	r3, r0
 80080da:	2280      	movs	r2, #128	; 0x80
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 ffcf 	bl	8009080 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	7959      	ldrb	r1, [r3, #5]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80080f6:	b292      	uxth	r2, r2
 80080f8:	9202      	str	r2, [sp, #8]
 80080fa:	2200      	movs	r2, #0
 80080fc:	9201      	str	r2, [sp, #4]
 80080fe:	9300      	str	r3, [sp, #0]
 8008100:	4603      	mov	r3, r0
 8008102:	2200      	movs	r2, #0
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 ffbb 	bl	8009080 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800810a:	e0e3      	b.n	80082d4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800810c:	7bbb      	ldrb	r3, [r7, #14]
 800810e:	2b03      	cmp	r3, #3
 8008110:	f040 80e0 	bne.w	80082d4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	220d      	movs	r2, #13
 8008118:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	705a      	strb	r2, [r3, #1]
      break;
 8008120:	e0d8      	b.n	80082d4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008122:	2109      	movs	r1, #9
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 f99d 	bl	8008464 <USBH_Get_CfgDesc>
 800812a:	4603      	mov	r3, r0
 800812c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800812e:	7bbb      	ldrb	r3, [r7, #14]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d103      	bne.n	800813c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2204      	movs	r2, #4
 8008138:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800813a:	e0cd      	b.n	80082d8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800813c:	7bbb      	ldrb	r3, [r7, #14]
 800813e:	2b03      	cmp	r3, #3
 8008140:	f040 80ca 	bne.w	80082d8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800814a:	3301      	adds	r3, #1
 800814c:	b2da      	uxtb	r2, r3
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800815a:	2b03      	cmp	r3, #3
 800815c:	d903      	bls.n	8008166 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	220d      	movs	r2, #13
 8008162:	701a      	strb	r2, [r3, #0]
      break;
 8008164:	e0b8      	b.n	80082d8 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	795b      	ldrb	r3, [r3, #5]
 800816a:	4619      	mov	r1, r3
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 ffd7 	bl	8009120 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	791b      	ldrb	r3, [r3, #4]
 8008176:	4619      	mov	r1, r3
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 ffd1 	bl	8009120 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	701a      	strb	r2, [r3, #0]
      break;
 800818a:	e0a5      	b.n	80082d8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008192:	4619      	mov	r1, r3
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 f965 	bl	8008464 <USBH_Get_CfgDesc>
 800819a:	4603      	mov	r3, r0
 800819c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800819e:	7bbb      	ldrb	r3, [r7, #14]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d103      	bne.n	80081ac <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2205      	movs	r2, #5
 80081a8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80081aa:	e097      	b.n	80082dc <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80081ac:	7bbb      	ldrb	r3, [r7, #14]
 80081ae:	2b03      	cmp	r3, #3
 80081b0:	f040 8094 	bne.w	80082dc <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80081ba:	3301      	adds	r3, #1
 80081bc:	b2da      	uxtb	r2, r3
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80081ca:	2b03      	cmp	r3, #3
 80081cc:	d903      	bls.n	80081d6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	220d      	movs	r2, #13
 80081d2:	701a      	strb	r2, [r3, #0]
      break;
 80081d4:	e082      	b.n	80082dc <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	795b      	ldrb	r3, [r3, #5]
 80081da:	4619      	mov	r1, r3
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 ff9f 	bl	8009120 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	791b      	ldrb	r3, [r3, #4]
 80081e6:	4619      	mov	r1, r3
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 ff99 	bl	8009120 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2200      	movs	r2, #0
 80081f2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	701a      	strb	r2, [r3, #0]
      break;
 80081fa:	e06f      	b.n	80082dc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008202:	2b00      	cmp	r3, #0
 8008204:	d019      	beq.n	800823a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008212:	23ff      	movs	r3, #255	; 0xff
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 f949 	bl	80084ac <USBH_Get_StringDesc>
 800821a:	4603      	mov	r3, r0
 800821c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800821e:	7bbb      	ldrb	r3, [r7, #14]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d103      	bne.n	800822c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2206      	movs	r2, #6
 8008228:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800822a:	e059      	b.n	80082e0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800822c:	7bbb      	ldrb	r3, [r7, #14]
 800822e:	2b03      	cmp	r3, #3
 8008230:	d156      	bne.n	80082e0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2206      	movs	r2, #6
 8008236:	705a      	strb	r2, [r3, #1]
      break;
 8008238:	e052      	b.n	80082e0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2206      	movs	r2, #6
 800823e:	705a      	strb	r2, [r3, #1]
      break;
 8008240:	e04e      	b.n	80082e0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008248:	2b00      	cmp	r3, #0
 800824a:	d019      	beq.n	8008280 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008258:	23ff      	movs	r3, #255	; 0xff
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 f926 	bl	80084ac <USBH_Get_StringDesc>
 8008260:	4603      	mov	r3, r0
 8008262:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008264:	7bbb      	ldrb	r3, [r7, #14]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d103      	bne.n	8008272 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2207      	movs	r2, #7
 800826e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008270:	e038      	b.n	80082e4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008272:	7bbb      	ldrb	r3, [r7, #14]
 8008274:	2b03      	cmp	r3, #3
 8008276:	d135      	bne.n	80082e4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2207      	movs	r2, #7
 800827c:	705a      	strb	r2, [r3, #1]
      break;
 800827e:	e031      	b.n	80082e4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2207      	movs	r2, #7
 8008284:	705a      	strb	r2, [r3, #1]
      break;
 8008286:	e02d      	b.n	80082e4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800828e:	2b00      	cmp	r3, #0
 8008290:	d017      	beq.n	80082c2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800829e:	23ff      	movs	r3, #255	; 0xff
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 f903 	bl	80084ac <USBH_Get_StringDesc>
 80082a6:	4603      	mov	r3, r0
 80082a8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80082aa:	7bbb      	ldrb	r3, [r7, #14]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d102      	bne.n	80082b6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80082b0:	2300      	movs	r3, #0
 80082b2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80082b4:	e018      	b.n	80082e8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80082b6:	7bbb      	ldrb	r3, [r7, #14]
 80082b8:	2b03      	cmp	r3, #3
 80082ba:	d115      	bne.n	80082e8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80082bc:	2300      	movs	r3, #0
 80082be:	73fb      	strb	r3, [r7, #15]
      break;
 80082c0:	e012      	b.n	80082e8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80082c2:	2300      	movs	r3, #0
 80082c4:	73fb      	strb	r3, [r7, #15]
      break;
 80082c6:	e00f      	b.n	80082e8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80082c8:	bf00      	nop
 80082ca:	e00e      	b.n	80082ea <USBH_HandleEnum+0x3be>
      break;
 80082cc:	bf00      	nop
 80082ce:	e00c      	b.n	80082ea <USBH_HandleEnum+0x3be>
      break;
 80082d0:	bf00      	nop
 80082d2:	e00a      	b.n	80082ea <USBH_HandleEnum+0x3be>
      break;
 80082d4:	bf00      	nop
 80082d6:	e008      	b.n	80082ea <USBH_HandleEnum+0x3be>
      break;
 80082d8:	bf00      	nop
 80082da:	e006      	b.n	80082ea <USBH_HandleEnum+0x3be>
      break;
 80082dc:	bf00      	nop
 80082de:	e004      	b.n	80082ea <USBH_HandleEnum+0x3be>
      break;
 80082e0:	bf00      	nop
 80082e2:	e002      	b.n	80082ea <USBH_HandleEnum+0x3be>
      break;
 80082e4:	bf00      	nop
 80082e6:	e000      	b.n	80082ea <USBH_HandleEnum+0x3be>
      break;
 80082e8:	bf00      	nop
  }
  return Status;
 80082ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3710      	adds	r7, #16
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	683a      	ldr	r2, [r7, #0]
 8008302:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008306:	bf00      	nop
 8008308:	370c      	adds	r7, #12
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr

08008312 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008312:	b580      	push	{r7, lr}
 8008314:	b082      	sub	sp, #8
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008320:	1c5a      	adds	r2, r3, #1
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 f804 	bl	8008336 <USBH_HandleSof>
}
 800832e:	bf00      	nop
 8008330:	3708      	adds	r7, #8
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}

08008336 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008336:	b580      	push	{r7, lr}
 8008338:	b082      	sub	sp, #8
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	b2db      	uxtb	r3, r3
 8008344:	2b0b      	cmp	r3, #11
 8008346:	d10a      	bne.n	800835e <USBH_HandleSof+0x28>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800834e:	2b00      	cmp	r3, #0
 8008350:	d005      	beq.n	800835e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008358:	699b      	ldr	r3, [r3, #24]
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	4798      	blx	r3
  }
}
 800835e:	bf00      	nop
 8008360:	3708      	adds	r7, #8
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008366:	b480      	push	{r7}
 8008368:	b083      	sub	sp, #12
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2201      	movs	r2, #1
 8008372:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008376:	bf00      	nop
}
 8008378:	370c      	adds	r7, #12
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr

08008382 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008382:	b480      	push	{r7}
 8008384:	b083      	sub	sp, #12
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008392:	bf00      	nop
}
 8008394:	370c      	adds	r7, #12
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr

0800839e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800839e:	b480      	push	{r7}
 80083a0:	b083      	sub	sp, #12
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2201      	movs	r2, #1
 80083aa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80083be:	2300      	movs	r3, #0
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	370c      	adds	r7, #12
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr

080083cc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b082      	sub	sp, #8
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2201      	movs	r2, #1
 80083d8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2200      	movs	r2, #0
 80083e0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f001 f844 	bl	800947a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	791b      	ldrb	r3, [r3, #4]
 80083f6:	4619      	mov	r1, r3
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 fe91 	bl	8009120 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	795b      	ldrb	r3, [r3, #5]
 8008402:	4619      	mov	r1, r3
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 fe8b 	bl	8009120 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800840a:	2300      	movs	r3, #0
}
 800840c:	4618      	mov	r0, r3
 800840e:	3708      	adds	r7, #8
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b086      	sub	sp, #24
 8008418:	af02      	add	r7, sp, #8
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	460b      	mov	r3, r1
 800841e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008426:	78fb      	ldrb	r3, [r7, #3]
 8008428:	b29b      	uxth	r3, r3
 800842a:	9300      	str	r3, [sp, #0]
 800842c:	4613      	mov	r3, r2
 800842e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008432:	2100      	movs	r1, #0
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 f864 	bl	8008502 <USBH_GetDescriptor>
 800843a:	4603      	mov	r3, r0
 800843c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800843e:	7bfb      	ldrb	r3, [r7, #15]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d10a      	bne.n	800845a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f203 3026 	addw	r0, r3, #806	; 0x326
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008450:	78fa      	ldrb	r2, [r7, #3]
 8008452:	b292      	uxth	r2, r2
 8008454:	4619      	mov	r1, r3
 8008456:	f000 f918 	bl	800868a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800845a:	7bfb      	ldrb	r3, [r7, #15]
}
 800845c:	4618      	mov	r0, r3
 800845e:	3710      	adds	r7, #16
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008464:	b580      	push	{r7, lr}
 8008466:	b086      	sub	sp, #24
 8008468:	af02      	add	r7, sp, #8
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	460b      	mov	r3, r1
 800846e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	331c      	adds	r3, #28
 8008474:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008476:	887b      	ldrh	r3, [r7, #2]
 8008478:	9300      	str	r3, [sp, #0]
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008480:	2100      	movs	r1, #0
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 f83d 	bl	8008502 <USBH_GetDescriptor>
 8008488:	4603      	mov	r3, r0
 800848a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800848c:	7bfb      	ldrb	r3, [r7, #15]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d107      	bne.n	80084a2 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008492:	887b      	ldrh	r3, [r7, #2]
 8008494:	461a      	mov	r2, r3
 8008496:	68b9      	ldr	r1, [r7, #8]
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f000 f987 	bl	80087ac <USBH_ParseCfgDesc>
 800849e:	4603      	mov	r3, r0
 80084a0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80084a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3710      	adds	r7, #16
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}

080084ac <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b088      	sub	sp, #32
 80084b0:	af02      	add	r7, sp, #8
 80084b2:	60f8      	str	r0, [r7, #12]
 80084b4:	607a      	str	r2, [r7, #4]
 80084b6:	461a      	mov	r2, r3
 80084b8:	460b      	mov	r3, r1
 80084ba:	72fb      	strb	r3, [r7, #11]
 80084bc:	4613      	mov	r3, r2
 80084be:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80084c0:	7afb      	ldrb	r3, [r7, #11]
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80084c8:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80084d0:	893b      	ldrh	r3, [r7, #8]
 80084d2:	9300      	str	r3, [sp, #0]
 80084d4:	460b      	mov	r3, r1
 80084d6:	2100      	movs	r1, #0
 80084d8:	68f8      	ldr	r0, [r7, #12]
 80084da:	f000 f812 	bl	8008502 <USBH_GetDescriptor>
 80084de:	4603      	mov	r3, r0
 80084e0:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80084e2:	7dfb      	ldrb	r3, [r7, #23]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d107      	bne.n	80084f8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80084ee:	893a      	ldrh	r2, [r7, #8]
 80084f0:	6879      	ldr	r1, [r7, #4]
 80084f2:	4618      	mov	r0, r3
 80084f4:	f000 fb24 	bl	8008b40 <USBH_ParseStringDesc>
  }

  return status;
 80084f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3718      	adds	r7, #24
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}

08008502 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008502:	b580      	push	{r7, lr}
 8008504:	b084      	sub	sp, #16
 8008506:	af00      	add	r7, sp, #0
 8008508:	60f8      	str	r0, [r7, #12]
 800850a:	607b      	str	r3, [r7, #4]
 800850c:	460b      	mov	r3, r1
 800850e:	72fb      	strb	r3, [r7, #11]
 8008510:	4613      	mov	r3, r2
 8008512:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	789b      	ldrb	r3, [r3, #2]
 8008518:	2b01      	cmp	r3, #1
 800851a:	d11c      	bne.n	8008556 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800851c:	7afb      	ldrb	r3, [r7, #11]
 800851e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008522:	b2da      	uxtb	r2, r3
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2206      	movs	r2, #6
 800852c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	893a      	ldrh	r2, [r7, #8]
 8008532:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008534:	893b      	ldrh	r3, [r7, #8]
 8008536:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800853a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800853e:	d104      	bne.n	800854a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f240 4209 	movw	r2, #1033	; 0x409
 8008546:	829a      	strh	r2, [r3, #20]
 8008548:	e002      	b.n	8008550 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2200      	movs	r2, #0
 800854e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	8b3a      	ldrh	r2, [r7, #24]
 8008554:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008556:	8b3b      	ldrh	r3, [r7, #24]
 8008558:	461a      	mov	r2, r3
 800855a:	6879      	ldr	r1, [r7, #4]
 800855c:	68f8      	ldr	r0, [r7, #12]
 800855e:	f000 fb3d 	bl	8008bdc <USBH_CtlReq>
 8008562:	4603      	mov	r3, r0
}
 8008564:	4618      	mov	r0, r3
 8008566:	3710      	adds	r7, #16
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b082      	sub	sp, #8
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	460b      	mov	r3, r1
 8008576:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	789b      	ldrb	r3, [r3, #2]
 800857c:	2b01      	cmp	r3, #1
 800857e:	d10f      	bne.n	80085a0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2205      	movs	r2, #5
 800858a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800858c:	78fb      	ldrb	r3, [r7, #3]
 800858e:	b29a      	uxth	r2, r3
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2200      	movs	r2, #0
 8008598:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80085a0:	2200      	movs	r2, #0
 80085a2:	2100      	movs	r1, #0
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 fb19 	bl	8008bdc <USBH_CtlReq>
 80085aa:	4603      	mov	r3, r0
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3708      	adds	r7, #8
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b082      	sub	sp, #8
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	460b      	mov	r3, r1
 80085be:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	789b      	ldrb	r3, [r3, #2]
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d10e      	bne.n	80085e6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2200      	movs	r2, #0
 80085cc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2209      	movs	r2, #9
 80085d2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	887a      	ldrh	r2, [r7, #2]
 80085d8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2200      	movs	r2, #0
 80085de:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80085e6:	2200      	movs	r2, #0
 80085e8:	2100      	movs	r1, #0
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 faf6 	bl	8008bdc <USBH_CtlReq>
 80085f0:	4603      	mov	r3, r0
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3708      	adds	r7, #8
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}

080085fa <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80085fa:	b580      	push	{r7, lr}
 80085fc:	b082      	sub	sp, #8
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
 8008602:	460b      	mov	r3, r1
 8008604:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	789b      	ldrb	r3, [r3, #2]
 800860a:	2b01      	cmp	r3, #1
 800860c:	d10f      	bne.n	800862e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2203      	movs	r2, #3
 8008618:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800861a:	78fb      	ldrb	r3, [r7, #3]
 800861c:	b29a      	uxth	r2, r3
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800862e:	2200      	movs	r2, #0
 8008630:	2100      	movs	r1, #0
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 fad2 	bl	8008bdc <USBH_CtlReq>
 8008638:	4603      	mov	r3, r0
}
 800863a:	4618      	mov	r0, r3
 800863c:	3708      	adds	r7, #8
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}

08008642 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008642:	b580      	push	{r7, lr}
 8008644:	b082      	sub	sp, #8
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
 800864a:	460b      	mov	r3, r1
 800864c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	789b      	ldrb	r3, [r3, #2]
 8008652:	2b01      	cmp	r3, #1
 8008654:	d10f      	bne.n	8008676 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2202      	movs	r2, #2
 800865a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2201      	movs	r2, #1
 8008660:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2200      	movs	r2, #0
 8008666:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008668:	78fb      	ldrb	r3, [r7, #3]
 800866a:	b29a      	uxth	r2, r3
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2200      	movs	r2, #0
 8008674:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8008676:	2200      	movs	r2, #0
 8008678:	2100      	movs	r1, #0
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 faae 	bl	8008bdc <USBH_CtlReq>
 8008680:	4603      	mov	r3, r0
}
 8008682:	4618      	mov	r0, r3
 8008684:	3708      	adds	r7, #8
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}

0800868a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800868a:	b480      	push	{r7}
 800868c:	b085      	sub	sp, #20
 800868e:	af00      	add	r7, sp, #0
 8008690:	60f8      	str	r0, [r7, #12]
 8008692:	60b9      	str	r1, [r7, #8]
 8008694:	4613      	mov	r3, r2
 8008696:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	781a      	ldrb	r2, [r3, #0]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	785a      	ldrb	r2, [r3, #1]
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	3302      	adds	r3, #2
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	b29a      	uxth	r2, r3
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	3303      	adds	r3, #3
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	021b      	lsls	r3, r3, #8
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	4313      	orrs	r3, r2
 80086be:	b29a      	uxth	r2, r3
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	791a      	ldrb	r2, [r3, #4]
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	795a      	ldrb	r2, [r3, #5]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	799a      	ldrb	r2, [r3, #6]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	79da      	ldrb	r2, [r3, #7]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	79db      	ldrb	r3, [r3, #7]
 80086e8:	2b20      	cmp	r3, #32
 80086ea:	dc11      	bgt.n	8008710 <USBH_ParseDevDesc+0x86>
 80086ec:	2b08      	cmp	r3, #8
 80086ee:	db16      	blt.n	800871e <USBH_ParseDevDesc+0x94>
 80086f0:	3b08      	subs	r3, #8
 80086f2:	2201      	movs	r2, #1
 80086f4:	fa02 f303 	lsl.w	r3, r2, r3
 80086f8:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80086fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008700:	2b00      	cmp	r3, #0
 8008702:	bf14      	ite	ne
 8008704:	2301      	movne	r3, #1
 8008706:	2300      	moveq	r3, #0
 8008708:	b2db      	uxtb	r3, r3
 800870a:	2b00      	cmp	r3, #0
 800870c:	d102      	bne.n	8008714 <USBH_ParseDevDesc+0x8a>
 800870e:	e006      	b.n	800871e <USBH_ParseDevDesc+0x94>
 8008710:	2b40      	cmp	r3, #64	; 0x40
 8008712:	d104      	bne.n	800871e <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	79da      	ldrb	r2, [r3, #7]
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	71da      	strb	r2, [r3, #7]
      break;
 800871c:	e003      	b.n	8008726 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2240      	movs	r2, #64	; 0x40
 8008722:	71da      	strb	r2, [r3, #7]
      break;
 8008724:	bf00      	nop
  }

  if (length > 8U)
 8008726:	88fb      	ldrh	r3, [r7, #6]
 8008728:	2b08      	cmp	r3, #8
 800872a:	d939      	bls.n	80087a0 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	3308      	adds	r3, #8
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	b29a      	uxth	r2, r3
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	3309      	adds	r3, #9
 8008738:	781b      	ldrb	r3, [r3, #0]
 800873a:	b29b      	uxth	r3, r3
 800873c:	021b      	lsls	r3, r3, #8
 800873e:	b29b      	uxth	r3, r3
 8008740:	4313      	orrs	r3, r2
 8008742:	b29a      	uxth	r2, r3
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	330a      	adds	r3, #10
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	b29a      	uxth	r2, r3
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	330b      	adds	r3, #11
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	b29b      	uxth	r3, r3
 8008758:	021b      	lsls	r3, r3, #8
 800875a:	b29b      	uxth	r3, r3
 800875c:	4313      	orrs	r3, r2
 800875e:	b29a      	uxth	r2, r3
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	330c      	adds	r3, #12
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	b29a      	uxth	r2, r3
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	330d      	adds	r3, #13
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	b29b      	uxth	r3, r3
 8008774:	021b      	lsls	r3, r3, #8
 8008776:	b29b      	uxth	r3, r3
 8008778:	4313      	orrs	r3, r2
 800877a:	b29a      	uxth	r2, r3
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	7b9a      	ldrb	r2, [r3, #14]
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	7bda      	ldrb	r2, [r3, #15]
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	7c1a      	ldrb	r2, [r3, #16]
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	7c5a      	ldrb	r2, [r3, #17]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	745a      	strb	r2, [r3, #17]
  }
}
 80087a0:	bf00      	nop
 80087a2:	3714      	adds	r7, #20
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr

080087ac <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b08c      	sub	sp, #48	; 0x30
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	60f8      	str	r0, [r7, #12]
 80087b4:	60b9      	str	r1, [r7, #8]
 80087b6:	4613      	mov	r3, r2
 80087b8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80087c0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80087c2:	2300      	movs	r3, #0
 80087c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80087cc:	2300      	movs	r3, #0
 80087ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80087d2:	2300      	movs	r3, #0
 80087d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	781a      	ldrb	r2, [r3, #0]
 80087e0:	6a3b      	ldr	r3, [r7, #32]
 80087e2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	785a      	ldrb	r2, [r3, #1]
 80087e8:	6a3b      	ldr	r3, [r7, #32]
 80087ea:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	3302      	adds	r3, #2
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	b29a      	uxth	r2, r3
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	3303      	adds	r3, #3
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	021b      	lsls	r3, r3, #8
 80087fe:	b29b      	uxth	r3, r3
 8008800:	4313      	orrs	r3, r2
 8008802:	b29b      	uxth	r3, r3
 8008804:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008808:	bf28      	it	cs
 800880a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800880e:	b29a      	uxth	r2, r3
 8008810:	6a3b      	ldr	r3, [r7, #32]
 8008812:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	791a      	ldrb	r2, [r3, #4]
 8008818:	6a3b      	ldr	r3, [r7, #32]
 800881a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	795a      	ldrb	r2, [r3, #5]
 8008820:	6a3b      	ldr	r3, [r7, #32]
 8008822:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	799a      	ldrb	r2, [r3, #6]
 8008828:	6a3b      	ldr	r3, [r7, #32]
 800882a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	79da      	ldrb	r2, [r3, #7]
 8008830:	6a3b      	ldr	r3, [r7, #32]
 8008832:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	7a1a      	ldrb	r2, [r3, #8]
 8008838:	6a3b      	ldr	r3, [r7, #32]
 800883a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800883c:	6a3b      	ldr	r3, [r7, #32]
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	2b09      	cmp	r3, #9
 8008842:	d002      	beq.n	800884a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008844:	6a3b      	ldr	r3, [r7, #32]
 8008846:	2209      	movs	r2, #9
 8008848:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800884a:	88fb      	ldrh	r3, [r7, #6]
 800884c:	2b09      	cmp	r3, #9
 800884e:	f240 809d 	bls.w	800898c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8008852:	2309      	movs	r3, #9
 8008854:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008856:	2300      	movs	r3, #0
 8008858:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800885a:	e081      	b.n	8008960 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800885c:	f107 0316 	add.w	r3, r7, #22
 8008860:	4619      	mov	r1, r3
 8008862:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008864:	f000 f99f 	bl	8008ba6 <USBH_GetNextDesc>
 8008868:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800886a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800886c:	785b      	ldrb	r3, [r3, #1]
 800886e:	2b04      	cmp	r3, #4
 8008870:	d176      	bne.n	8008960 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	2b09      	cmp	r3, #9
 8008878:	d002      	beq.n	8008880 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800887a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800887c:	2209      	movs	r2, #9
 800887e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008880:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008884:	221a      	movs	r2, #26
 8008886:	fb02 f303 	mul.w	r3, r2, r3
 800888a:	3308      	adds	r3, #8
 800888c:	6a3a      	ldr	r2, [r7, #32]
 800888e:	4413      	add	r3, r2
 8008890:	3302      	adds	r3, #2
 8008892:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008894:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008896:	69f8      	ldr	r0, [r7, #28]
 8008898:	f000 f87e 	bl	8008998 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800889c:	2300      	movs	r3, #0
 800889e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80088a2:	2300      	movs	r3, #0
 80088a4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80088a6:	e043      	b.n	8008930 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80088a8:	f107 0316 	add.w	r3, r7, #22
 80088ac:	4619      	mov	r1, r3
 80088ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088b0:	f000 f979 	bl	8008ba6 <USBH_GetNextDesc>
 80088b4:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80088b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b8:	785b      	ldrb	r3, [r3, #1]
 80088ba:	2b05      	cmp	r3, #5
 80088bc:	d138      	bne.n	8008930 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 80088be:	69fb      	ldr	r3, [r7, #28]
 80088c0:	795b      	ldrb	r3, [r3, #5]
 80088c2:	2b01      	cmp	r3, #1
 80088c4:	d10f      	bne.n	80088e6 <USBH_ParseCfgDesc+0x13a>
 80088c6:	69fb      	ldr	r3, [r7, #28]
 80088c8:	799b      	ldrb	r3, [r3, #6]
 80088ca:	2b02      	cmp	r3, #2
 80088cc:	d10b      	bne.n	80088e6 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80088ce:	69fb      	ldr	r3, [r7, #28]
 80088d0:	79db      	ldrb	r3, [r3, #7]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d10f      	bne.n	80088f6 <USBH_ParseCfgDesc+0x14a>
 80088d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	2b09      	cmp	r3, #9
 80088dc:	d00b      	beq.n	80088f6 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 80088de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e0:	2209      	movs	r2, #9
 80088e2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80088e4:	e007      	b.n	80088f6 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 80088e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e8:	781b      	ldrb	r3, [r3, #0]
 80088ea:	2b07      	cmp	r3, #7
 80088ec:	d004      	beq.n	80088f8 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80088ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f0:	2207      	movs	r2, #7
 80088f2:	701a      	strb	r2, [r3, #0]
 80088f4:	e000      	b.n	80088f8 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80088f6:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80088f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088fc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008900:	3201      	adds	r2, #1
 8008902:	00d2      	lsls	r2, r2, #3
 8008904:	211a      	movs	r1, #26
 8008906:	fb01 f303 	mul.w	r3, r1, r3
 800890a:	4413      	add	r3, r2
 800890c:	3308      	adds	r3, #8
 800890e:	6a3a      	ldr	r2, [r7, #32]
 8008910:	4413      	add	r3, r2
 8008912:	3304      	adds	r3, #4
 8008914:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008916:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008918:	69b9      	ldr	r1, [r7, #24]
 800891a:	68f8      	ldr	r0, [r7, #12]
 800891c:	f000 f86b 	bl	80089f6 <USBH_ParseEPDesc>
 8008920:	4603      	mov	r3, r0
 8008922:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8008926:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800892a:	3301      	adds	r3, #1
 800892c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008930:	69fb      	ldr	r3, [r7, #28]
 8008932:	791b      	ldrb	r3, [r3, #4]
 8008934:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008938:	429a      	cmp	r2, r3
 800893a:	d204      	bcs.n	8008946 <USBH_ParseCfgDesc+0x19a>
 800893c:	6a3b      	ldr	r3, [r7, #32]
 800893e:	885a      	ldrh	r2, [r3, #2]
 8008940:	8afb      	ldrh	r3, [r7, #22]
 8008942:	429a      	cmp	r2, r3
 8008944:	d8b0      	bhi.n	80088a8 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008946:	69fb      	ldr	r3, [r7, #28]
 8008948:	791b      	ldrb	r3, [r3, #4]
 800894a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800894e:	429a      	cmp	r2, r3
 8008950:	d201      	bcs.n	8008956 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8008952:	2303      	movs	r3, #3
 8008954:	e01c      	b.n	8008990 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8008956:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800895a:	3301      	adds	r3, #1
 800895c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008960:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008964:	2b01      	cmp	r3, #1
 8008966:	d805      	bhi.n	8008974 <USBH_ParseCfgDesc+0x1c8>
 8008968:	6a3b      	ldr	r3, [r7, #32]
 800896a:	885a      	ldrh	r2, [r3, #2]
 800896c:	8afb      	ldrh	r3, [r7, #22]
 800896e:	429a      	cmp	r2, r3
 8008970:	f63f af74 	bhi.w	800885c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008974:	6a3b      	ldr	r3, [r7, #32]
 8008976:	791b      	ldrb	r3, [r3, #4]
 8008978:	2b02      	cmp	r3, #2
 800897a:	bf28      	it	cs
 800897c:	2302      	movcs	r3, #2
 800897e:	b2db      	uxtb	r3, r3
 8008980:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008984:	429a      	cmp	r2, r3
 8008986:	d201      	bcs.n	800898c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008988:	2303      	movs	r3, #3
 800898a:	e001      	b.n	8008990 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800898c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008990:	4618      	mov	r0, r3
 8008992:	3730      	adds	r7, #48	; 0x30
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	781a      	ldrb	r2, [r3, #0]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	785a      	ldrb	r2, [r3, #1]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	789a      	ldrb	r2, [r3, #2]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	78da      	ldrb	r2, [r3, #3]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	791a      	ldrb	r2, [r3, #4]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	795a      	ldrb	r2, [r3, #5]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	799a      	ldrb	r2, [r3, #6]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	79da      	ldrb	r2, [r3, #7]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	7a1a      	ldrb	r2, [r3, #8]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	721a      	strb	r2, [r3, #8]
}
 80089ea:	bf00      	nop
 80089ec:	370c      	adds	r7, #12
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr

080089f6 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 80089f6:	b480      	push	{r7}
 80089f8:	b087      	sub	sp, #28
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	60f8      	str	r0, [r7, #12]
 80089fe:	60b9      	str	r1, [r7, #8]
 8008a00:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008a02:	2300      	movs	r3, #0
 8008a04:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	781a      	ldrb	r2, [r3, #0]
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	785a      	ldrb	r2, [r3, #1]
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	789a      	ldrb	r2, [r3, #2]
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	78da      	ldrb	r2, [r3, #3]
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	3304      	adds	r3, #4
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	b29a      	uxth	r2, r3
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	3305      	adds	r3, #5
 8008a32:	781b      	ldrb	r3, [r3, #0]
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	021b      	lsls	r3, r3, #8
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	b29a      	uxth	r2, r3
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	799a      	ldrb	r2, [r3, #6]
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	889b      	ldrh	r3, [r3, #4]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d102      	bne.n	8008a58 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8008a52:	2303      	movs	r3, #3
 8008a54:	75fb      	strb	r3, [r7, #23]
 8008a56:	e033      	b.n	8008ac0 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	889b      	ldrh	r3, [r3, #4]
 8008a5c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008a60:	f023 0307 	bic.w	r3, r3, #7
 8008a64:	b29a      	uxth	r2, r3
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	889b      	ldrh	r3, [r3, #4]
 8008a6e:	b21a      	sxth	r2, r3
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	3304      	adds	r3, #4
 8008a74:	781b      	ldrb	r3, [r3, #0]
 8008a76:	b299      	uxth	r1, r3
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	3305      	adds	r3, #5
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	021b      	lsls	r3, r3, #8
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	430b      	orrs	r3, r1
 8008a86:	b29b      	uxth	r3, r3
 8008a88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d110      	bne.n	8008ab2 <USBH_ParseEPDesc+0xbc>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	3304      	adds	r3, #4
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	b299      	uxth	r1, r3
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	3305      	adds	r3, #5
 8008a9c:	781b      	ldrb	r3, [r3, #0]
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	021b      	lsls	r3, r3, #8
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	430b      	orrs	r3, r1
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	b21b      	sxth	r3, r3
 8008aaa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008aae:	b21b      	sxth	r3, r3
 8008ab0:	e001      	b.n	8008ab6 <USBH_ParseEPDesc+0xc0>
 8008ab2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	b21b      	sxth	r3, r3
 8008aba:	b29a      	uxth	r2, r3
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d116      	bne.n	8008af8 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	78db      	ldrb	r3, [r3, #3]
 8008ace:	f003 0303 	and.w	r3, r3, #3
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d005      	beq.n	8008ae2 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	78db      	ldrb	r3, [r3, #3]
 8008ada:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008ade:	2b03      	cmp	r3, #3
 8008ae0:	d127      	bne.n	8008b32 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	799b      	ldrb	r3, [r3, #6]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d003      	beq.n	8008af2 <USBH_ParseEPDesc+0xfc>
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	799b      	ldrb	r3, [r3, #6]
 8008aee:	2b10      	cmp	r3, #16
 8008af0:	d91f      	bls.n	8008b32 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008af2:	2303      	movs	r3, #3
 8008af4:	75fb      	strb	r3, [r7, #23]
 8008af6:	e01c      	b.n	8008b32 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	78db      	ldrb	r3, [r3, #3]
 8008afc:	f003 0303 	and.w	r3, r3, #3
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d10a      	bne.n	8008b1a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	799b      	ldrb	r3, [r3, #6]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d003      	beq.n	8008b14 <USBH_ParseEPDesc+0x11e>
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	799b      	ldrb	r3, [r3, #6]
 8008b10:	2b10      	cmp	r3, #16
 8008b12:	d90e      	bls.n	8008b32 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008b14:	2303      	movs	r3, #3
 8008b16:	75fb      	strb	r3, [r7, #23]
 8008b18:	e00b      	b.n	8008b32 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	78db      	ldrb	r3, [r3, #3]
 8008b1e:	f003 0303 	and.w	r3, r3, #3
 8008b22:	2b03      	cmp	r3, #3
 8008b24:	d105      	bne.n	8008b32 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	799b      	ldrb	r3, [r3, #6]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d101      	bne.n	8008b32 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008b2e:	2303      	movs	r3, #3
 8008b30:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8008b32:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	371c      	adds	r7, #28
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr

08008b40 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b087      	sub	sp, #28
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	60b9      	str	r1, [r7, #8]
 8008b4a:	4613      	mov	r3, r2
 8008b4c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	3301      	adds	r3, #1
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	2b03      	cmp	r3, #3
 8008b56:	d120      	bne.n	8008b9a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	1e9a      	subs	r2, r3, #2
 8008b5e:	88fb      	ldrh	r3, [r7, #6]
 8008b60:	4293      	cmp	r3, r2
 8008b62:	bf28      	it	cs
 8008b64:	4613      	movcs	r3, r2
 8008b66:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	3302      	adds	r3, #2
 8008b6c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008b6e:	2300      	movs	r3, #0
 8008b70:	82fb      	strh	r3, [r7, #22]
 8008b72:	e00b      	b.n	8008b8c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008b74:	8afb      	ldrh	r3, [r7, #22]
 8008b76:	68fa      	ldr	r2, [r7, #12]
 8008b78:	4413      	add	r3, r2
 8008b7a:	781a      	ldrb	r2, [r3, #0]
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	3301      	adds	r3, #1
 8008b84:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008b86:	8afb      	ldrh	r3, [r7, #22]
 8008b88:	3302      	adds	r3, #2
 8008b8a:	82fb      	strh	r3, [r7, #22]
 8008b8c:	8afa      	ldrh	r2, [r7, #22]
 8008b8e:	8abb      	ldrh	r3, [r7, #20]
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d3ef      	bcc.n	8008b74 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	2200      	movs	r2, #0
 8008b98:	701a      	strb	r2, [r3, #0]
  }
}
 8008b9a:	bf00      	nop
 8008b9c:	371c      	adds	r7, #28
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba4:	4770      	bx	lr

08008ba6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008ba6:	b480      	push	{r7}
 8008ba8:	b085      	sub	sp, #20
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
 8008bae:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	881a      	ldrh	r2, [r3, #0]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	4413      	add	r3, r2
 8008bbc:	b29a      	uxth	r2, r3
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	4413      	add	r3, r2
 8008bcc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008bce:	68fb      	ldr	r3, [r7, #12]
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3714      	adds	r7, #20
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr

08008bdc <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b086      	sub	sp, #24
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	60f8      	str	r0, [r7, #12]
 8008be4:	60b9      	str	r1, [r7, #8]
 8008be6:	4613      	mov	r3, r2
 8008be8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008bea:	2301      	movs	r3, #1
 8008bec:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	789b      	ldrb	r3, [r3, #2]
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	d002      	beq.n	8008bfc <USBH_CtlReq+0x20>
 8008bf6:	2b02      	cmp	r3, #2
 8008bf8:	d00f      	beq.n	8008c1a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008bfa:	e027      	b.n	8008c4c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	68ba      	ldr	r2, [r7, #8]
 8008c00:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	88fa      	ldrh	r2, [r7, #6]
 8008c06:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2202      	movs	r2, #2
 8008c12:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008c14:	2301      	movs	r3, #1
 8008c16:	75fb      	strb	r3, [r7, #23]
      break;
 8008c18:	e018      	b.n	8008c4c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008c1a:	68f8      	ldr	r0, [r7, #12]
 8008c1c:	f000 f81c 	bl	8008c58 <USBH_HandleControl>
 8008c20:	4603      	mov	r3, r0
 8008c22:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008c24:	7dfb      	ldrb	r3, [r7, #23]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d002      	beq.n	8008c30 <USBH_CtlReq+0x54>
 8008c2a:	7dfb      	ldrb	r3, [r7, #23]
 8008c2c:	2b03      	cmp	r3, #3
 8008c2e:	d106      	bne.n	8008c3e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2201      	movs	r2, #1
 8008c34:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	761a      	strb	r2, [r3, #24]
      break;
 8008c3c:	e005      	b.n	8008c4a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008c3e:	7dfb      	ldrb	r3, [r7, #23]
 8008c40:	2b02      	cmp	r3, #2
 8008c42:	d102      	bne.n	8008c4a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2201      	movs	r2, #1
 8008c48:	709a      	strb	r2, [r3, #2]
      break;
 8008c4a:	bf00      	nop
  }
  return status;
 8008c4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3718      	adds	r7, #24
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
	...

08008c58 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b086      	sub	sp, #24
 8008c5c:	af02      	add	r7, sp, #8
 8008c5e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008c60:	2301      	movs	r3, #1
 8008c62:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008c64:	2300      	movs	r3, #0
 8008c66:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	7e1b      	ldrb	r3, [r3, #24]
 8008c6c:	3b01      	subs	r3, #1
 8008c6e:	2b0a      	cmp	r3, #10
 8008c70:	f200 8156 	bhi.w	8008f20 <USBH_HandleControl+0x2c8>
 8008c74:	a201      	add	r2, pc, #4	; (adr r2, 8008c7c <USBH_HandleControl+0x24>)
 8008c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c7a:	bf00      	nop
 8008c7c:	08008ca9 	.word	0x08008ca9
 8008c80:	08008cc3 	.word	0x08008cc3
 8008c84:	08008d2d 	.word	0x08008d2d
 8008c88:	08008d53 	.word	0x08008d53
 8008c8c:	08008d8b 	.word	0x08008d8b
 8008c90:	08008db5 	.word	0x08008db5
 8008c94:	08008e07 	.word	0x08008e07
 8008c98:	08008e29 	.word	0x08008e29
 8008c9c:	08008e65 	.word	0x08008e65
 8008ca0:	08008e8b 	.word	0x08008e8b
 8008ca4:	08008ec9 	.word	0x08008ec9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f103 0110 	add.w	r1, r3, #16
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	795b      	ldrb	r3, [r3, #5]
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 f943 	bl	8008f40 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2202      	movs	r2, #2
 8008cbe:	761a      	strb	r2, [r3, #24]
      break;
 8008cc0:	e139      	b.n	8008f36 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	795b      	ldrb	r3, [r3, #5]
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 fcc5 	bl	8009658 <USBH_LL_GetURBState>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008cd2:	7bbb      	ldrb	r3, [r7, #14]
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	d11e      	bne.n	8008d16 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	7c1b      	ldrb	r3, [r3, #16]
 8008cdc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008ce0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	8adb      	ldrh	r3, [r3, #22]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d00a      	beq.n	8008d00 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008cea:	7b7b      	ldrb	r3, [r7, #13]
 8008cec:	2b80      	cmp	r3, #128	; 0x80
 8008cee:	d103      	bne.n	8008cf8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2203      	movs	r2, #3
 8008cf4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008cf6:	e115      	b.n	8008f24 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2205      	movs	r2, #5
 8008cfc:	761a      	strb	r2, [r3, #24]
      break;
 8008cfe:	e111      	b.n	8008f24 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008d00:	7b7b      	ldrb	r3, [r7, #13]
 8008d02:	2b80      	cmp	r3, #128	; 0x80
 8008d04:	d103      	bne.n	8008d0e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2209      	movs	r2, #9
 8008d0a:	761a      	strb	r2, [r3, #24]
      break;
 8008d0c:	e10a      	b.n	8008f24 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2207      	movs	r2, #7
 8008d12:	761a      	strb	r2, [r3, #24]
      break;
 8008d14:	e106      	b.n	8008f24 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008d16:	7bbb      	ldrb	r3, [r7, #14]
 8008d18:	2b04      	cmp	r3, #4
 8008d1a:	d003      	beq.n	8008d24 <USBH_HandleControl+0xcc>
 8008d1c:	7bbb      	ldrb	r3, [r7, #14]
 8008d1e:	2b02      	cmp	r3, #2
 8008d20:	f040 8100 	bne.w	8008f24 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	220b      	movs	r2, #11
 8008d28:	761a      	strb	r2, [r3, #24]
      break;
 8008d2a:	e0fb      	b.n	8008f24 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008d32:	b29a      	uxth	r2, r3
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6899      	ldr	r1, [r3, #8]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	899a      	ldrh	r2, [r3, #12]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	791b      	ldrb	r3, [r3, #4]
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f000 f93a 	bl	8008fbe <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2204      	movs	r2, #4
 8008d4e:	761a      	strb	r2, [r3, #24]
      break;
 8008d50:	e0f1      	b.n	8008f36 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	791b      	ldrb	r3, [r3, #4]
 8008d56:	4619      	mov	r1, r3
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f000 fc7d 	bl	8009658 <USBH_LL_GetURBState>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008d62:	7bbb      	ldrb	r3, [r7, #14]
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d102      	bne.n	8008d6e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2209      	movs	r2, #9
 8008d6c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008d6e:	7bbb      	ldrb	r3, [r7, #14]
 8008d70:	2b05      	cmp	r3, #5
 8008d72:	d102      	bne.n	8008d7a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008d74:	2303      	movs	r3, #3
 8008d76:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008d78:	e0d6      	b.n	8008f28 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008d7a:	7bbb      	ldrb	r3, [r7, #14]
 8008d7c:	2b04      	cmp	r3, #4
 8008d7e:	f040 80d3 	bne.w	8008f28 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	220b      	movs	r2, #11
 8008d86:	761a      	strb	r2, [r3, #24]
      break;
 8008d88:	e0ce      	b.n	8008f28 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6899      	ldr	r1, [r3, #8]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	899a      	ldrh	r2, [r3, #12]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	795b      	ldrb	r3, [r3, #5]
 8008d96:	2001      	movs	r0, #1
 8008d98:	9000      	str	r0, [sp, #0]
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 f8ea 	bl	8008f74 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008da6:	b29a      	uxth	r2, r3
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2206      	movs	r2, #6
 8008db0:	761a      	strb	r2, [r3, #24]
      break;
 8008db2:	e0c0      	b.n	8008f36 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	795b      	ldrb	r3, [r3, #5]
 8008db8:	4619      	mov	r1, r3
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 fc4c 	bl	8009658 <USBH_LL_GetURBState>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008dc4:	7bbb      	ldrb	r3, [r7, #14]
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	d103      	bne.n	8008dd2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2207      	movs	r2, #7
 8008dce:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008dd0:	e0ac      	b.n	8008f2c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008dd2:	7bbb      	ldrb	r3, [r7, #14]
 8008dd4:	2b05      	cmp	r3, #5
 8008dd6:	d105      	bne.n	8008de4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	220c      	movs	r2, #12
 8008ddc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008dde:	2303      	movs	r3, #3
 8008de0:	73fb      	strb	r3, [r7, #15]
      break;
 8008de2:	e0a3      	b.n	8008f2c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008de4:	7bbb      	ldrb	r3, [r7, #14]
 8008de6:	2b02      	cmp	r3, #2
 8008de8:	d103      	bne.n	8008df2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2205      	movs	r2, #5
 8008dee:	761a      	strb	r2, [r3, #24]
      break;
 8008df0:	e09c      	b.n	8008f2c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008df2:	7bbb      	ldrb	r3, [r7, #14]
 8008df4:	2b04      	cmp	r3, #4
 8008df6:	f040 8099 	bne.w	8008f2c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	220b      	movs	r2, #11
 8008dfe:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008e00:	2302      	movs	r3, #2
 8008e02:	73fb      	strb	r3, [r7, #15]
      break;
 8008e04:	e092      	b.n	8008f2c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	791b      	ldrb	r3, [r3, #4]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	2100      	movs	r1, #0
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 f8d5 	bl	8008fbe <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008e1a:	b29a      	uxth	r2, r3
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2208      	movs	r2, #8
 8008e24:	761a      	strb	r2, [r3, #24]

      break;
 8008e26:	e086      	b.n	8008f36 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	791b      	ldrb	r3, [r3, #4]
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 fc12 	bl	8009658 <USBH_LL_GetURBState>
 8008e34:	4603      	mov	r3, r0
 8008e36:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008e38:	7bbb      	ldrb	r3, [r7, #14]
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	d105      	bne.n	8008e4a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	220d      	movs	r2, #13
 8008e42:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008e44:	2300      	movs	r3, #0
 8008e46:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008e48:	e072      	b.n	8008f30 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008e4a:	7bbb      	ldrb	r3, [r7, #14]
 8008e4c:	2b04      	cmp	r3, #4
 8008e4e:	d103      	bne.n	8008e58 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	220b      	movs	r2, #11
 8008e54:	761a      	strb	r2, [r3, #24]
      break;
 8008e56:	e06b      	b.n	8008f30 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008e58:	7bbb      	ldrb	r3, [r7, #14]
 8008e5a:	2b05      	cmp	r3, #5
 8008e5c:	d168      	bne.n	8008f30 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008e5e:	2303      	movs	r3, #3
 8008e60:	73fb      	strb	r3, [r7, #15]
      break;
 8008e62:	e065      	b.n	8008f30 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	795b      	ldrb	r3, [r3, #5]
 8008e68:	2201      	movs	r2, #1
 8008e6a:	9200      	str	r2, [sp, #0]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	2100      	movs	r1, #0
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 f87f 	bl	8008f74 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008e7c:	b29a      	uxth	r2, r3
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	220a      	movs	r2, #10
 8008e86:	761a      	strb	r2, [r3, #24]
      break;
 8008e88:	e055      	b.n	8008f36 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	795b      	ldrb	r3, [r3, #5]
 8008e8e:	4619      	mov	r1, r3
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 fbe1 	bl	8009658 <USBH_LL_GetURBState>
 8008e96:	4603      	mov	r3, r0
 8008e98:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008e9a:	7bbb      	ldrb	r3, [r7, #14]
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d105      	bne.n	8008eac <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	220d      	movs	r2, #13
 8008ea8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008eaa:	e043      	b.n	8008f34 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008eac:	7bbb      	ldrb	r3, [r7, #14]
 8008eae:	2b02      	cmp	r3, #2
 8008eb0:	d103      	bne.n	8008eba <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2209      	movs	r2, #9
 8008eb6:	761a      	strb	r2, [r3, #24]
      break;
 8008eb8:	e03c      	b.n	8008f34 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008eba:	7bbb      	ldrb	r3, [r7, #14]
 8008ebc:	2b04      	cmp	r3, #4
 8008ebe:	d139      	bne.n	8008f34 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	220b      	movs	r2, #11
 8008ec4:	761a      	strb	r2, [r3, #24]
      break;
 8008ec6:	e035      	b.n	8008f34 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	7e5b      	ldrb	r3, [r3, #25]
 8008ecc:	3301      	adds	r3, #1
 8008ece:	b2da      	uxtb	r2, r3
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	765a      	strb	r2, [r3, #25]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	7e5b      	ldrb	r3, [r3, #25]
 8008ed8:	2b02      	cmp	r3, #2
 8008eda:	d806      	bhi.n	8008eea <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2201      	movs	r2, #1
 8008ee0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008ee8:	e025      	b.n	8008f36 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008ef0:	2106      	movs	r1, #6
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	795b      	ldrb	r3, [r3, #5]
 8008f00:	4619      	mov	r1, r3
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 f90c 	bl	8009120 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	791b      	ldrb	r3, [r3, #4]
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f000 f906 	bl	8009120 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2200      	movs	r2, #0
 8008f18:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008f1a:	2302      	movs	r3, #2
 8008f1c:	73fb      	strb	r3, [r7, #15]
      break;
 8008f1e:	e00a      	b.n	8008f36 <USBH_HandleControl+0x2de>

    default:
      break;
 8008f20:	bf00      	nop
 8008f22:	e008      	b.n	8008f36 <USBH_HandleControl+0x2de>
      break;
 8008f24:	bf00      	nop
 8008f26:	e006      	b.n	8008f36 <USBH_HandleControl+0x2de>
      break;
 8008f28:	bf00      	nop
 8008f2a:	e004      	b.n	8008f36 <USBH_HandleControl+0x2de>
      break;
 8008f2c:	bf00      	nop
 8008f2e:	e002      	b.n	8008f36 <USBH_HandleControl+0x2de>
      break;
 8008f30:	bf00      	nop
 8008f32:	e000      	b.n	8008f36 <USBH_HandleControl+0x2de>
      break;
 8008f34:	bf00      	nop
  }

  return status;
 8008f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3710      	adds	r7, #16
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b088      	sub	sp, #32
 8008f44:	af04      	add	r7, sp, #16
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	60b9      	str	r1, [r7, #8]
 8008f4a:	4613      	mov	r3, r2
 8008f4c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008f4e:	79f9      	ldrb	r1, [r7, #7]
 8008f50:	2300      	movs	r3, #0
 8008f52:	9303      	str	r3, [sp, #12]
 8008f54:	2308      	movs	r3, #8
 8008f56:	9302      	str	r3, [sp, #8]
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	9301      	str	r3, [sp, #4]
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	9300      	str	r3, [sp, #0]
 8008f60:	2300      	movs	r3, #0
 8008f62:	2200      	movs	r2, #0
 8008f64:	68f8      	ldr	r0, [r7, #12]
 8008f66:	f000 fb46 	bl	80095f6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008f6a:	2300      	movs	r3, #0
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3710      	adds	r7, #16
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b088      	sub	sp, #32
 8008f78:	af04      	add	r7, sp, #16
 8008f7a:	60f8      	str	r0, [r7, #12]
 8008f7c:	60b9      	str	r1, [r7, #8]
 8008f7e:	4611      	mov	r1, r2
 8008f80:	461a      	mov	r2, r3
 8008f82:	460b      	mov	r3, r1
 8008f84:	80fb      	strh	r3, [r7, #6]
 8008f86:	4613      	mov	r3, r2
 8008f88:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d001      	beq.n	8008f98 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008f94:	2300      	movs	r3, #0
 8008f96:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008f98:	7979      	ldrb	r1, [r7, #5]
 8008f9a:	7e3b      	ldrb	r3, [r7, #24]
 8008f9c:	9303      	str	r3, [sp, #12]
 8008f9e:	88fb      	ldrh	r3, [r7, #6]
 8008fa0:	9302      	str	r3, [sp, #8]
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	9301      	str	r3, [sp, #4]
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	9300      	str	r3, [sp, #0]
 8008faa:	2300      	movs	r3, #0
 8008fac:	2200      	movs	r2, #0
 8008fae:	68f8      	ldr	r0, [r7, #12]
 8008fb0:	f000 fb21 	bl	80095f6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008fb4:	2300      	movs	r3, #0
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3710      	adds	r7, #16
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008fbe:	b580      	push	{r7, lr}
 8008fc0:	b088      	sub	sp, #32
 8008fc2:	af04      	add	r7, sp, #16
 8008fc4:	60f8      	str	r0, [r7, #12]
 8008fc6:	60b9      	str	r1, [r7, #8]
 8008fc8:	4611      	mov	r1, r2
 8008fca:	461a      	mov	r2, r3
 8008fcc:	460b      	mov	r3, r1
 8008fce:	80fb      	strh	r3, [r7, #6]
 8008fd0:	4613      	mov	r3, r2
 8008fd2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008fd4:	7979      	ldrb	r1, [r7, #5]
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	9303      	str	r3, [sp, #12]
 8008fda:	88fb      	ldrh	r3, [r7, #6]
 8008fdc:	9302      	str	r3, [sp, #8]
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	9301      	str	r3, [sp, #4]
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	9300      	str	r3, [sp, #0]
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	2201      	movs	r2, #1
 8008fea:	68f8      	ldr	r0, [r7, #12]
 8008fec:	f000 fb03 	bl	80095f6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008ff0:	2300      	movs	r3, #0

}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3710      	adds	r7, #16
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}

08008ffa <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008ffa:	b580      	push	{r7, lr}
 8008ffc:	b088      	sub	sp, #32
 8008ffe:	af04      	add	r7, sp, #16
 8009000:	60f8      	str	r0, [r7, #12]
 8009002:	60b9      	str	r1, [r7, #8]
 8009004:	4611      	mov	r1, r2
 8009006:	461a      	mov	r2, r3
 8009008:	460b      	mov	r3, r1
 800900a:	80fb      	strh	r3, [r7, #6]
 800900c:	4613      	mov	r3, r2
 800900e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009016:	2b00      	cmp	r3, #0
 8009018:	d001      	beq.n	800901e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800901a:	2300      	movs	r3, #0
 800901c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800901e:	7979      	ldrb	r1, [r7, #5]
 8009020:	7e3b      	ldrb	r3, [r7, #24]
 8009022:	9303      	str	r3, [sp, #12]
 8009024:	88fb      	ldrh	r3, [r7, #6]
 8009026:	9302      	str	r3, [sp, #8]
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	9301      	str	r3, [sp, #4]
 800902c:	2301      	movs	r3, #1
 800902e:	9300      	str	r3, [sp, #0]
 8009030:	2302      	movs	r3, #2
 8009032:	2200      	movs	r2, #0
 8009034:	68f8      	ldr	r0, [r7, #12]
 8009036:	f000 fade 	bl	80095f6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800903a:	2300      	movs	r3, #0
}
 800903c:	4618      	mov	r0, r3
 800903e:	3710      	adds	r7, #16
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b088      	sub	sp, #32
 8009048:	af04      	add	r7, sp, #16
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	60b9      	str	r1, [r7, #8]
 800904e:	4611      	mov	r1, r2
 8009050:	461a      	mov	r2, r3
 8009052:	460b      	mov	r3, r1
 8009054:	80fb      	strh	r3, [r7, #6]
 8009056:	4613      	mov	r3, r2
 8009058:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800905a:	7979      	ldrb	r1, [r7, #5]
 800905c:	2300      	movs	r3, #0
 800905e:	9303      	str	r3, [sp, #12]
 8009060:	88fb      	ldrh	r3, [r7, #6]
 8009062:	9302      	str	r3, [sp, #8]
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	9301      	str	r3, [sp, #4]
 8009068:	2301      	movs	r3, #1
 800906a:	9300      	str	r3, [sp, #0]
 800906c:	2302      	movs	r3, #2
 800906e:	2201      	movs	r2, #1
 8009070:	68f8      	ldr	r0, [r7, #12]
 8009072:	f000 fac0 	bl	80095f6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009076:	2300      	movs	r3, #0
}
 8009078:	4618      	mov	r0, r3
 800907a:	3710      	adds	r7, #16
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b086      	sub	sp, #24
 8009084:	af04      	add	r7, sp, #16
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	4608      	mov	r0, r1
 800908a:	4611      	mov	r1, r2
 800908c:	461a      	mov	r2, r3
 800908e:	4603      	mov	r3, r0
 8009090:	70fb      	strb	r3, [r7, #3]
 8009092:	460b      	mov	r3, r1
 8009094:	70bb      	strb	r3, [r7, #2]
 8009096:	4613      	mov	r3, r2
 8009098:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800909a:	7878      	ldrb	r0, [r7, #1]
 800909c:	78ba      	ldrb	r2, [r7, #2]
 800909e:	78f9      	ldrb	r1, [r7, #3]
 80090a0:	8b3b      	ldrh	r3, [r7, #24]
 80090a2:	9302      	str	r3, [sp, #8]
 80090a4:	7d3b      	ldrb	r3, [r7, #20]
 80090a6:	9301      	str	r3, [sp, #4]
 80090a8:	7c3b      	ldrb	r3, [r7, #16]
 80090aa:	9300      	str	r3, [sp, #0]
 80090ac:	4603      	mov	r3, r0
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 fa53 	bl	800955a <USBH_LL_OpenPipe>

  return USBH_OK;
 80090b4:	2300      	movs	r3, #0
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3708      	adds	r7, #8
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}

080090be <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80090be:	b580      	push	{r7, lr}
 80090c0:	b082      	sub	sp, #8
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]
 80090c6:	460b      	mov	r3, r1
 80090c8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80090ca:	78fb      	ldrb	r3, [r7, #3]
 80090cc:	4619      	mov	r1, r3
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 fa72 	bl	80095b8 <USBH_LL_ClosePipe>

  return USBH_OK;
 80090d4:	2300      	movs	r3, #0
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3708      	adds	r7, #8
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}

080090de <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80090de:	b580      	push	{r7, lr}
 80090e0:	b084      	sub	sp, #16
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
 80090e6:	460b      	mov	r3, r1
 80090e8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 f836 	bl	800915c <USBH_GetFreePipe>
 80090f0:	4603      	mov	r3, r0
 80090f2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80090f4:	89fb      	ldrh	r3, [r7, #14]
 80090f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d00a      	beq.n	8009114 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80090fe:	78fa      	ldrb	r2, [r7, #3]
 8009100:	89fb      	ldrh	r3, [r7, #14]
 8009102:	f003 030f 	and.w	r3, r3, #15
 8009106:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800910a:	6879      	ldr	r1, [r7, #4]
 800910c:	33e0      	adds	r3, #224	; 0xe0
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	440b      	add	r3, r1
 8009112:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009114:	89fb      	ldrh	r3, [r7, #14]
 8009116:	b2db      	uxtb	r3, r3
}
 8009118:	4618      	mov	r0, r3
 800911a:	3710      	adds	r7, #16
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009120:	b480      	push	{r7}
 8009122:	b083      	sub	sp, #12
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	460b      	mov	r3, r1
 800912a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800912c:	78fb      	ldrb	r3, [r7, #3]
 800912e:	2b0f      	cmp	r3, #15
 8009130:	d80d      	bhi.n	800914e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009132:	78fb      	ldrb	r3, [r7, #3]
 8009134:	687a      	ldr	r2, [r7, #4]
 8009136:	33e0      	adds	r3, #224	; 0xe0
 8009138:	009b      	lsls	r3, r3, #2
 800913a:	4413      	add	r3, r2
 800913c:	685a      	ldr	r2, [r3, #4]
 800913e:	78fb      	ldrb	r3, [r7, #3]
 8009140:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009144:	6879      	ldr	r1, [r7, #4]
 8009146:	33e0      	adds	r3, #224	; 0xe0
 8009148:	009b      	lsls	r3, r3, #2
 800914a:	440b      	add	r3, r1
 800914c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800914e:	2300      	movs	r3, #0
}
 8009150:	4618      	mov	r0, r3
 8009152:	370c      	adds	r7, #12
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr

0800915c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800915c:	b480      	push	{r7}
 800915e:	b085      	sub	sp, #20
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009164:	2300      	movs	r3, #0
 8009166:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009168:	2300      	movs	r3, #0
 800916a:	73fb      	strb	r3, [r7, #15]
 800916c:	e00f      	b.n	800918e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800916e:	7bfb      	ldrb	r3, [r7, #15]
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	33e0      	adds	r3, #224	; 0xe0
 8009174:	009b      	lsls	r3, r3, #2
 8009176:	4413      	add	r3, r2
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800917e:	2b00      	cmp	r3, #0
 8009180:	d102      	bne.n	8009188 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009182:	7bfb      	ldrb	r3, [r7, #15]
 8009184:	b29b      	uxth	r3, r3
 8009186:	e007      	b.n	8009198 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009188:	7bfb      	ldrb	r3, [r7, #15]
 800918a:	3301      	adds	r3, #1
 800918c:	73fb      	strb	r3, [r7, #15]
 800918e:	7bfb      	ldrb	r3, [r7, #15]
 8009190:	2b0f      	cmp	r3, #15
 8009192:	d9ec      	bls.n	800916e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009194:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009198:	4618      	mov	r0, r3
 800919a:	3714      	adds	r7, #20
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80091a8:	2201      	movs	r2, #1
 80091aa:	490e      	ldr	r1, [pc, #56]	; (80091e4 <MX_USB_HOST_Init+0x40>)
 80091ac:	480e      	ldr	r0, [pc, #56]	; (80091e8 <MX_USB_HOST_Init+0x44>)
 80091ae:	f7fe fba7 	bl	8007900 <USBH_Init>
 80091b2:	4603      	mov	r3, r0
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d001      	beq.n	80091bc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80091b8:	f7f7 fc52 	bl	8000a60 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80091bc:	490b      	ldr	r1, [pc, #44]	; (80091ec <MX_USB_HOST_Init+0x48>)
 80091be:	480a      	ldr	r0, [pc, #40]	; (80091e8 <MX_USB_HOST_Init+0x44>)
 80091c0:	f7fe fc2c 	bl	8007a1c <USBH_RegisterClass>
 80091c4:	4603      	mov	r3, r0
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d001      	beq.n	80091ce <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80091ca:	f7f7 fc49 	bl	8000a60 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80091ce:	4806      	ldr	r0, [pc, #24]	; (80091e8 <MX_USB_HOST_Init+0x44>)
 80091d0:	f7fe fcb0 	bl	8007b34 <USBH_Start>
 80091d4:	4603      	mov	r3, r0
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d001      	beq.n	80091de <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80091da:	f7f7 fc41 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80091de:	bf00      	nop
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	08009205 	.word	0x08009205
 80091e8:	20000270 	.word	0x20000270
 80091ec:	20000014 	.word	0x20000014

080091f0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80091f4:	4802      	ldr	r0, [pc, #8]	; (8009200 <MX_USB_HOST_Process+0x10>)
 80091f6:	f7fe fcad 	bl	8007b54 <USBH_Process>
}
 80091fa:	bf00      	nop
 80091fc:	bd80      	pop	{r7, pc}
 80091fe:	bf00      	nop
 8009200:	20000270 	.word	0x20000270

08009204 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009204:	b480      	push	{r7}
 8009206:	b083      	sub	sp, #12
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	460b      	mov	r3, r1
 800920e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009210:	78fb      	ldrb	r3, [r7, #3]
 8009212:	3b01      	subs	r3, #1
 8009214:	2b04      	cmp	r3, #4
 8009216:	d819      	bhi.n	800924c <USBH_UserProcess+0x48>
 8009218:	a201      	add	r2, pc, #4	; (adr r2, 8009220 <USBH_UserProcess+0x1c>)
 800921a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800921e:	bf00      	nop
 8009220:	0800924d 	.word	0x0800924d
 8009224:	0800923d 	.word	0x0800923d
 8009228:	0800924d 	.word	0x0800924d
 800922c:	08009245 	.word	0x08009245
 8009230:	08009235 	.word	0x08009235
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009234:	4b09      	ldr	r3, [pc, #36]	; (800925c <USBH_UserProcess+0x58>)
 8009236:	2203      	movs	r2, #3
 8009238:	701a      	strb	r2, [r3, #0]
  break;
 800923a:	e008      	b.n	800924e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800923c:	4b07      	ldr	r3, [pc, #28]	; (800925c <USBH_UserProcess+0x58>)
 800923e:	2202      	movs	r2, #2
 8009240:	701a      	strb	r2, [r3, #0]
  break;
 8009242:	e004      	b.n	800924e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009244:	4b05      	ldr	r3, [pc, #20]	; (800925c <USBH_UserProcess+0x58>)
 8009246:	2201      	movs	r2, #1
 8009248:	701a      	strb	r2, [r3, #0]
  break;
 800924a:	e000      	b.n	800924e <USBH_UserProcess+0x4a>

  default:
  break;
 800924c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800924e:	bf00      	nop
 8009250:	370c      	adds	r7, #12
 8009252:	46bd      	mov	sp, r7
 8009254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009258:	4770      	bx	lr
 800925a:	bf00      	nop
 800925c:	20000648 	.word	0x20000648

08009260 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b08a      	sub	sp, #40	; 0x28
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009268:	f107 0314 	add.w	r3, r7, #20
 800926c:	2200      	movs	r2, #0
 800926e:	601a      	str	r2, [r3, #0]
 8009270:	605a      	str	r2, [r3, #4]
 8009272:	609a      	str	r2, [r3, #8]
 8009274:	60da      	str	r2, [r3, #12]
 8009276:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009280:	d147      	bne.n	8009312 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009282:	2300      	movs	r3, #0
 8009284:	613b      	str	r3, [r7, #16]
 8009286:	4b25      	ldr	r3, [pc, #148]	; (800931c <HAL_HCD_MspInit+0xbc>)
 8009288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800928a:	4a24      	ldr	r2, [pc, #144]	; (800931c <HAL_HCD_MspInit+0xbc>)
 800928c:	f043 0301 	orr.w	r3, r3, #1
 8009290:	6313      	str	r3, [r2, #48]	; 0x30
 8009292:	4b22      	ldr	r3, [pc, #136]	; (800931c <HAL_HCD_MspInit+0xbc>)
 8009294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009296:	f003 0301 	and.w	r3, r3, #1
 800929a:	613b      	str	r3, [r7, #16]
 800929c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800929e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80092a4:	2300      	movs	r3, #0
 80092a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092a8:	2300      	movs	r3, #0
 80092aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80092ac:	f107 0314 	add.w	r3, r7, #20
 80092b0:	4619      	mov	r1, r3
 80092b2:	481b      	ldr	r0, [pc, #108]	; (8009320 <HAL_HCD_MspInit+0xc0>)
 80092b4:	f7f8 f982 	bl	80015bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80092b8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80092bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092be:	2302      	movs	r3, #2
 80092c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092c2:	2300      	movs	r3, #0
 80092c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80092c6:	2300      	movs	r3, #0
 80092c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80092ca:	230a      	movs	r3, #10
 80092cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80092ce:	f107 0314 	add.w	r3, r7, #20
 80092d2:	4619      	mov	r1, r3
 80092d4:	4812      	ldr	r0, [pc, #72]	; (8009320 <HAL_HCD_MspInit+0xc0>)
 80092d6:	f7f8 f971 	bl	80015bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80092da:	4b10      	ldr	r3, [pc, #64]	; (800931c <HAL_HCD_MspInit+0xbc>)
 80092dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092de:	4a0f      	ldr	r2, [pc, #60]	; (800931c <HAL_HCD_MspInit+0xbc>)
 80092e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092e4:	6353      	str	r3, [r2, #52]	; 0x34
 80092e6:	2300      	movs	r3, #0
 80092e8:	60fb      	str	r3, [r7, #12]
 80092ea:	4b0c      	ldr	r3, [pc, #48]	; (800931c <HAL_HCD_MspInit+0xbc>)
 80092ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092ee:	4a0b      	ldr	r2, [pc, #44]	; (800931c <HAL_HCD_MspInit+0xbc>)
 80092f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80092f4:	6453      	str	r3, [r2, #68]	; 0x44
 80092f6:	4b09      	ldr	r3, [pc, #36]	; (800931c <HAL_HCD_MspInit+0xbc>)
 80092f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092fe:	60fb      	str	r3, [r7, #12]
 8009300:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009302:	2200      	movs	r2, #0
 8009304:	2100      	movs	r1, #0
 8009306:	2043      	movs	r0, #67	; 0x43
 8009308:	f7f8 f8ff 	bl	800150a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800930c:	2043      	movs	r0, #67	; 0x43
 800930e:	f7f8 f918 	bl	8001542 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009312:	bf00      	nop
 8009314:	3728      	adds	r7, #40	; 0x28
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}
 800931a:	bf00      	nop
 800931c:	40023800 	.word	0x40023800
 8009320:	40020000 	.word	0x40020000

08009324 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b082      	sub	sp, #8
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009332:	4618      	mov	r0, r3
 8009334:	f7fe ffed 	bl	8008312 <USBH_LL_IncTimer>
}
 8009338:	bf00      	nop
 800933a:	3708      	adds	r7, #8
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800934e:	4618      	mov	r0, r3
 8009350:	f7ff f825 	bl	800839e <USBH_LL_Connect>
}
 8009354:	bf00      	nop
 8009356:	3708      	adds	r7, #8
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}

0800935c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b082      	sub	sp, #8
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800936a:	4618      	mov	r0, r3
 800936c:	f7ff f82e 	bl	80083cc <USBH_LL_Disconnect>
}
 8009370:	bf00      	nop
 8009372:	3708      	adds	r7, #8
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009378:	b480      	push	{r7}
 800937a:	b083      	sub	sp, #12
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	460b      	mov	r3, r1
 8009382:	70fb      	strb	r3, [r7, #3]
 8009384:	4613      	mov	r3, r2
 8009386:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009388:	bf00      	nop
 800938a:	370c      	adds	r7, #12
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr

08009394 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b082      	sub	sp, #8
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80093a2:	4618      	mov	r0, r3
 80093a4:	f7fe ffdf 	bl	8008366 <USBH_LL_PortEnabled>
}
 80093a8:	bf00      	nop
 80093aa:	3708      	adds	r7, #8
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b082      	sub	sp, #8
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80093be:	4618      	mov	r0, r3
 80093c0:	f7fe ffdf 	bl	8008382 <USBH_LL_PortDisabled>
}
 80093c4:	bf00      	nop
 80093c6:	3708      	adds	r7, #8
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b082      	sub	sp, #8
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80093da:	2b01      	cmp	r3, #1
 80093dc:	d12a      	bne.n	8009434 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80093de:	4a18      	ldr	r2, [pc, #96]	; (8009440 <USBH_LL_Init+0x74>)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	4a15      	ldr	r2, [pc, #84]	; (8009440 <USBH_LL_Init+0x74>)
 80093ea:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80093ee:	4b14      	ldr	r3, [pc, #80]	; (8009440 <USBH_LL_Init+0x74>)
 80093f0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80093f4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80093f6:	4b12      	ldr	r3, [pc, #72]	; (8009440 <USBH_LL_Init+0x74>)
 80093f8:	2208      	movs	r2, #8
 80093fa:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80093fc:	4b10      	ldr	r3, [pc, #64]	; (8009440 <USBH_LL_Init+0x74>)
 80093fe:	2201      	movs	r2, #1
 8009400:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009402:	4b0f      	ldr	r3, [pc, #60]	; (8009440 <USBH_LL_Init+0x74>)
 8009404:	2200      	movs	r2, #0
 8009406:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009408:	4b0d      	ldr	r3, [pc, #52]	; (8009440 <USBH_LL_Init+0x74>)
 800940a:	2202      	movs	r2, #2
 800940c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800940e:	4b0c      	ldr	r3, [pc, #48]	; (8009440 <USBH_LL_Init+0x74>)
 8009410:	2200      	movs	r2, #0
 8009412:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009414:	480a      	ldr	r0, [pc, #40]	; (8009440 <USBH_LL_Init+0x74>)
 8009416:	f7f8 fa86 	bl	8001926 <HAL_HCD_Init>
 800941a:	4603      	mov	r3, r0
 800941c:	2b00      	cmp	r3, #0
 800941e:	d001      	beq.n	8009424 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009420:	f7f7 fb1e 	bl	8000a60 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009424:	4806      	ldr	r0, [pc, #24]	; (8009440 <USBH_LL_Init+0x74>)
 8009426:	f7f8 fe6a 	bl	80020fe <HAL_HCD_GetCurrentFrame>
 800942a:	4603      	mov	r3, r0
 800942c:	4619      	mov	r1, r3
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f7fe ff60 	bl	80082f4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009434:	2300      	movs	r3, #0
}
 8009436:	4618      	mov	r0, r3
 8009438:	3708      	adds	r7, #8
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
 800943e:	bf00      	nop
 8009440:	2000064c 	.word	0x2000064c

08009444 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b084      	sub	sp, #16
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800944c:	2300      	movs	r3, #0
 800944e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009450:	2300      	movs	r3, #0
 8009452:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800945a:	4618      	mov	r0, r3
 800945c:	f7f8 fdd9 	bl	8002012 <HAL_HCD_Start>
 8009460:	4603      	mov	r3, r0
 8009462:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009464:	7bfb      	ldrb	r3, [r7, #15]
 8009466:	4618      	mov	r0, r3
 8009468:	f000 f95c 	bl	8009724 <USBH_Get_USB_Status>
 800946c:	4603      	mov	r3, r0
 800946e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009470:	7bbb      	ldrb	r3, [r7, #14]
}
 8009472:	4618      	mov	r0, r3
 8009474:	3710      	adds	r7, #16
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}

0800947a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800947a:	b580      	push	{r7, lr}
 800947c:	b084      	sub	sp, #16
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009482:	2300      	movs	r3, #0
 8009484:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009486:	2300      	movs	r3, #0
 8009488:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009490:	4618      	mov	r0, r3
 8009492:	f7f8 fde1 	bl	8002058 <HAL_HCD_Stop>
 8009496:	4603      	mov	r3, r0
 8009498:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800949a:	7bfb      	ldrb	r3, [r7, #15]
 800949c:	4618      	mov	r0, r3
 800949e:	f000 f941 	bl	8009724 <USBH_Get_USB_Status>
 80094a2:	4603      	mov	r3, r0
 80094a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3710      	adds	r7, #16
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b084      	sub	sp, #16
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80094b8:	2301      	movs	r3, #1
 80094ba:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80094c2:	4618      	mov	r0, r3
 80094c4:	f7f8 fe29 	bl	800211a <HAL_HCD_GetCurrentSpeed>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b02      	cmp	r3, #2
 80094cc:	d00c      	beq.n	80094e8 <USBH_LL_GetSpeed+0x38>
 80094ce:	2b02      	cmp	r3, #2
 80094d0:	d80d      	bhi.n	80094ee <USBH_LL_GetSpeed+0x3e>
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d002      	beq.n	80094dc <USBH_LL_GetSpeed+0x2c>
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d003      	beq.n	80094e2 <USBH_LL_GetSpeed+0x32>
 80094da:	e008      	b.n	80094ee <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80094dc:	2300      	movs	r3, #0
 80094de:	73fb      	strb	r3, [r7, #15]
    break;
 80094e0:	e008      	b.n	80094f4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80094e2:	2301      	movs	r3, #1
 80094e4:	73fb      	strb	r3, [r7, #15]
    break;
 80094e6:	e005      	b.n	80094f4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80094e8:	2302      	movs	r3, #2
 80094ea:	73fb      	strb	r3, [r7, #15]
    break;
 80094ec:	e002      	b.n	80094f4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80094ee:	2301      	movs	r3, #1
 80094f0:	73fb      	strb	r3, [r7, #15]
    break;
 80094f2:	bf00      	nop
  }
  return  speed;
 80094f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3710      	adds	r7, #16
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}

080094fe <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80094fe:	b580      	push	{r7, lr}
 8009500:	b084      	sub	sp, #16
 8009502:	af00      	add	r7, sp, #0
 8009504:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009506:	2300      	movs	r3, #0
 8009508:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800950a:	2300      	movs	r3, #0
 800950c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009514:	4618      	mov	r0, r3
 8009516:	f7f8 fdbc 	bl	8002092 <HAL_HCD_ResetPort>
 800951a:	4603      	mov	r3, r0
 800951c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800951e:	7bfb      	ldrb	r3, [r7, #15]
 8009520:	4618      	mov	r0, r3
 8009522:	f000 f8ff 	bl	8009724 <USBH_Get_USB_Status>
 8009526:	4603      	mov	r3, r0
 8009528:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800952a:	7bbb      	ldrb	r3, [r7, #14]
}
 800952c:	4618      	mov	r0, r3
 800952e:	3710      	adds	r7, #16
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b082      	sub	sp, #8
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	460b      	mov	r3, r1
 800953e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009546:	78fa      	ldrb	r2, [r7, #3]
 8009548:	4611      	mov	r1, r2
 800954a:	4618      	mov	r0, r3
 800954c:	f7f8 fdc3 	bl	80020d6 <HAL_HCD_HC_GetXferCount>
 8009550:	4603      	mov	r3, r0
}
 8009552:	4618      	mov	r0, r3
 8009554:	3708      	adds	r7, #8
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}

0800955a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800955a:	b590      	push	{r4, r7, lr}
 800955c:	b089      	sub	sp, #36	; 0x24
 800955e:	af04      	add	r7, sp, #16
 8009560:	6078      	str	r0, [r7, #4]
 8009562:	4608      	mov	r0, r1
 8009564:	4611      	mov	r1, r2
 8009566:	461a      	mov	r2, r3
 8009568:	4603      	mov	r3, r0
 800956a:	70fb      	strb	r3, [r7, #3]
 800956c:	460b      	mov	r3, r1
 800956e:	70bb      	strb	r3, [r7, #2]
 8009570:	4613      	mov	r3, r2
 8009572:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009574:	2300      	movs	r3, #0
 8009576:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009578:	2300      	movs	r3, #0
 800957a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009582:	787c      	ldrb	r4, [r7, #1]
 8009584:	78ba      	ldrb	r2, [r7, #2]
 8009586:	78f9      	ldrb	r1, [r7, #3]
 8009588:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800958a:	9302      	str	r3, [sp, #8]
 800958c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009590:	9301      	str	r3, [sp, #4]
 8009592:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009596:	9300      	str	r3, [sp, #0]
 8009598:	4623      	mov	r3, r4
 800959a:	f7f8 fa26 	bl	80019ea <HAL_HCD_HC_Init>
 800959e:	4603      	mov	r3, r0
 80095a0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80095a2:	7bfb      	ldrb	r3, [r7, #15]
 80095a4:	4618      	mov	r0, r3
 80095a6:	f000 f8bd 	bl	8009724 <USBH_Get_USB_Status>
 80095aa:	4603      	mov	r3, r0
 80095ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3714      	adds	r7, #20
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd90      	pop	{r4, r7, pc}

080095b8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	460b      	mov	r3, r1
 80095c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095c4:	2300      	movs	r3, #0
 80095c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80095c8:	2300      	movs	r3, #0
 80095ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80095d2:	78fa      	ldrb	r2, [r7, #3]
 80095d4:	4611      	mov	r1, r2
 80095d6:	4618      	mov	r0, r3
 80095d8:	f7f8 fa96 	bl	8001b08 <HAL_HCD_HC_Halt>
 80095dc:	4603      	mov	r3, r0
 80095de:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80095e0:	7bfb      	ldrb	r3, [r7, #15]
 80095e2:	4618      	mov	r0, r3
 80095e4:	f000 f89e 	bl	8009724 <USBH_Get_USB_Status>
 80095e8:	4603      	mov	r3, r0
 80095ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3710      	adds	r7, #16
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}

080095f6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80095f6:	b590      	push	{r4, r7, lr}
 80095f8:	b089      	sub	sp, #36	; 0x24
 80095fa:	af04      	add	r7, sp, #16
 80095fc:	6078      	str	r0, [r7, #4]
 80095fe:	4608      	mov	r0, r1
 8009600:	4611      	mov	r1, r2
 8009602:	461a      	mov	r2, r3
 8009604:	4603      	mov	r3, r0
 8009606:	70fb      	strb	r3, [r7, #3]
 8009608:	460b      	mov	r3, r1
 800960a:	70bb      	strb	r3, [r7, #2]
 800960c:	4613      	mov	r3, r2
 800960e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009610:	2300      	movs	r3, #0
 8009612:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009614:	2300      	movs	r3, #0
 8009616:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800961e:	787c      	ldrb	r4, [r7, #1]
 8009620:	78ba      	ldrb	r2, [r7, #2]
 8009622:	78f9      	ldrb	r1, [r7, #3]
 8009624:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009628:	9303      	str	r3, [sp, #12]
 800962a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800962c:	9302      	str	r3, [sp, #8]
 800962e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009630:	9301      	str	r3, [sp, #4]
 8009632:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009636:	9300      	str	r3, [sp, #0]
 8009638:	4623      	mov	r3, r4
 800963a:	f7f8 fa89 	bl	8001b50 <HAL_HCD_HC_SubmitRequest>
 800963e:	4603      	mov	r3, r0
 8009640:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009642:	7bfb      	ldrb	r3, [r7, #15]
 8009644:	4618      	mov	r0, r3
 8009646:	f000 f86d 	bl	8009724 <USBH_Get_USB_Status>
 800964a:	4603      	mov	r3, r0
 800964c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800964e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009650:	4618      	mov	r0, r3
 8009652:	3714      	adds	r7, #20
 8009654:	46bd      	mov	sp, r7
 8009656:	bd90      	pop	{r4, r7, pc}

08009658 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b082      	sub	sp, #8
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	460b      	mov	r3, r1
 8009662:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800966a:	78fa      	ldrb	r2, [r7, #3]
 800966c:	4611      	mov	r1, r2
 800966e:	4618      	mov	r0, r3
 8009670:	f7f8 fd1d 	bl	80020ae <HAL_HCD_HC_GetURBState>
 8009674:	4603      	mov	r3, r0
}
 8009676:	4618      	mov	r0, r3
 8009678:	3708      	adds	r7, #8
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}

0800967e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800967e:	b580      	push	{r7, lr}
 8009680:	b082      	sub	sp, #8
 8009682:	af00      	add	r7, sp, #0
 8009684:	6078      	str	r0, [r7, #4]
 8009686:	460b      	mov	r3, r1
 8009688:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009690:	2b01      	cmp	r3, #1
 8009692:	d103      	bne.n	800969c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009694:	78fb      	ldrb	r3, [r7, #3]
 8009696:	4618      	mov	r0, r3
 8009698:	f000 f870 	bl	800977c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800969c:	20c8      	movs	r0, #200	; 0xc8
 800969e:	f7f7 fe35 	bl	800130c <HAL_Delay>
  return USBH_OK;
 80096a2:	2300      	movs	r3, #0
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3708      	adds	r7, #8
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b085      	sub	sp, #20
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	460b      	mov	r3, r1
 80096b6:	70fb      	strb	r3, [r7, #3]
 80096b8:	4613      	mov	r3, r2
 80096ba:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80096c2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80096c4:	78fb      	ldrb	r3, [r7, #3]
 80096c6:	68fa      	ldr	r2, [r7, #12]
 80096c8:	212c      	movs	r1, #44	; 0x2c
 80096ca:	fb01 f303 	mul.w	r3, r1, r3
 80096ce:	4413      	add	r3, r2
 80096d0:	333b      	adds	r3, #59	; 0x3b
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d009      	beq.n	80096ec <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80096d8:	78fb      	ldrb	r3, [r7, #3]
 80096da:	68fa      	ldr	r2, [r7, #12]
 80096dc:	212c      	movs	r1, #44	; 0x2c
 80096de:	fb01 f303 	mul.w	r3, r1, r3
 80096e2:	4413      	add	r3, r2
 80096e4:	3354      	adds	r3, #84	; 0x54
 80096e6:	78ba      	ldrb	r2, [r7, #2]
 80096e8:	701a      	strb	r2, [r3, #0]
 80096ea:	e008      	b.n	80096fe <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80096ec:	78fb      	ldrb	r3, [r7, #3]
 80096ee:	68fa      	ldr	r2, [r7, #12]
 80096f0:	212c      	movs	r1, #44	; 0x2c
 80096f2:	fb01 f303 	mul.w	r3, r1, r3
 80096f6:	4413      	add	r3, r2
 80096f8:	3355      	adds	r3, #85	; 0x55
 80096fa:	78ba      	ldrb	r2, [r7, #2]
 80096fc:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80096fe:	2300      	movs	r3, #0
}
 8009700:	4618      	mov	r0, r3
 8009702:	3714      	adds	r7, #20
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr

0800970c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b082      	sub	sp, #8
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f7f7 fdf9 	bl	800130c <HAL_Delay>
}
 800971a:	bf00      	nop
 800971c:	3708      	adds	r7, #8
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
	...

08009724 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009724:	b480      	push	{r7}
 8009726:	b085      	sub	sp, #20
 8009728:	af00      	add	r7, sp, #0
 800972a:	4603      	mov	r3, r0
 800972c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800972e:	2300      	movs	r3, #0
 8009730:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009732:	79fb      	ldrb	r3, [r7, #7]
 8009734:	2b03      	cmp	r3, #3
 8009736:	d817      	bhi.n	8009768 <USBH_Get_USB_Status+0x44>
 8009738:	a201      	add	r2, pc, #4	; (adr r2, 8009740 <USBH_Get_USB_Status+0x1c>)
 800973a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800973e:	bf00      	nop
 8009740:	08009751 	.word	0x08009751
 8009744:	08009757 	.word	0x08009757
 8009748:	0800975d 	.word	0x0800975d
 800974c:	08009763 	.word	0x08009763
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009750:	2300      	movs	r3, #0
 8009752:	73fb      	strb	r3, [r7, #15]
    break;
 8009754:	e00b      	b.n	800976e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009756:	2302      	movs	r3, #2
 8009758:	73fb      	strb	r3, [r7, #15]
    break;
 800975a:	e008      	b.n	800976e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800975c:	2301      	movs	r3, #1
 800975e:	73fb      	strb	r3, [r7, #15]
    break;
 8009760:	e005      	b.n	800976e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009762:	2302      	movs	r3, #2
 8009764:	73fb      	strb	r3, [r7, #15]
    break;
 8009766:	e002      	b.n	800976e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009768:	2302      	movs	r3, #2
 800976a:	73fb      	strb	r3, [r7, #15]
    break;
 800976c:	bf00      	nop
  }
  return usb_status;
 800976e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009770:	4618      	mov	r0, r3
 8009772:	3714      	adds	r7, #20
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr

0800977c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b084      	sub	sp, #16
 8009780:	af00      	add	r7, sp, #0
 8009782:	4603      	mov	r3, r0
 8009784:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009786:	79fb      	ldrb	r3, [r7, #7]
 8009788:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800978a:	79fb      	ldrb	r3, [r7, #7]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d102      	bne.n	8009796 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009790:	2300      	movs	r3, #0
 8009792:	73fb      	strb	r3, [r7, #15]
 8009794:	e001      	b.n	800979a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009796:	2301      	movs	r3, #1
 8009798:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800979a:	7bfb      	ldrb	r3, [r7, #15]
 800979c:	461a      	mov	r2, r3
 800979e:	2101      	movs	r1, #1
 80097a0:	4803      	ldr	r0, [pc, #12]	; (80097b0 <MX_DriverVbusFS+0x34>)
 80097a2:	f7f8 f8a7 	bl	80018f4 <HAL_GPIO_WritePin>
}
 80097a6:	bf00      	nop
 80097a8:	3710      	adds	r7, #16
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
 80097ae:	bf00      	nop
 80097b0:	40020800 	.word	0x40020800

080097b4 <__errno>:
 80097b4:	4b01      	ldr	r3, [pc, #4]	; (80097bc <__errno+0x8>)
 80097b6:	6818      	ldr	r0, [r3, #0]
 80097b8:	4770      	bx	lr
 80097ba:	bf00      	nop
 80097bc:	20000034 	.word	0x20000034

080097c0 <__libc_init_array>:
 80097c0:	b570      	push	{r4, r5, r6, lr}
 80097c2:	4d0d      	ldr	r5, [pc, #52]	; (80097f8 <__libc_init_array+0x38>)
 80097c4:	4c0d      	ldr	r4, [pc, #52]	; (80097fc <__libc_init_array+0x3c>)
 80097c6:	1b64      	subs	r4, r4, r5
 80097c8:	10a4      	asrs	r4, r4, #2
 80097ca:	2600      	movs	r6, #0
 80097cc:	42a6      	cmp	r6, r4
 80097ce:	d109      	bne.n	80097e4 <__libc_init_array+0x24>
 80097d0:	4d0b      	ldr	r5, [pc, #44]	; (8009800 <__libc_init_array+0x40>)
 80097d2:	4c0c      	ldr	r4, [pc, #48]	; (8009804 <__libc_init_array+0x44>)
 80097d4:	f000 f92e 	bl	8009a34 <_init>
 80097d8:	1b64      	subs	r4, r4, r5
 80097da:	10a4      	asrs	r4, r4, #2
 80097dc:	2600      	movs	r6, #0
 80097de:	42a6      	cmp	r6, r4
 80097e0:	d105      	bne.n	80097ee <__libc_init_array+0x2e>
 80097e2:	bd70      	pop	{r4, r5, r6, pc}
 80097e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80097e8:	4798      	blx	r3
 80097ea:	3601      	adds	r6, #1
 80097ec:	e7ee      	b.n	80097cc <__libc_init_array+0xc>
 80097ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80097f2:	4798      	blx	r3
 80097f4:	3601      	adds	r6, #1
 80097f6:	e7f2      	b.n	80097de <__libc_init_array+0x1e>
 80097f8:	08009a70 	.word	0x08009a70
 80097fc:	08009a70 	.word	0x08009a70
 8009800:	08009a70 	.word	0x08009a70
 8009804:	08009a74 	.word	0x08009a74

08009808 <malloc>:
 8009808:	4b02      	ldr	r3, [pc, #8]	; (8009814 <malloc+0xc>)
 800980a:	4601      	mov	r1, r0
 800980c:	6818      	ldr	r0, [r3, #0]
 800980e:	f000 b87f 	b.w	8009910 <_malloc_r>
 8009812:	bf00      	nop
 8009814:	20000034 	.word	0x20000034

08009818 <free>:
 8009818:	4b02      	ldr	r3, [pc, #8]	; (8009824 <free+0xc>)
 800981a:	4601      	mov	r1, r0
 800981c:	6818      	ldr	r0, [r3, #0]
 800981e:	f000 b80b 	b.w	8009838 <_free_r>
 8009822:	bf00      	nop
 8009824:	20000034 	.word	0x20000034

08009828 <memset>:
 8009828:	4402      	add	r2, r0
 800982a:	4603      	mov	r3, r0
 800982c:	4293      	cmp	r3, r2
 800982e:	d100      	bne.n	8009832 <memset+0xa>
 8009830:	4770      	bx	lr
 8009832:	f803 1b01 	strb.w	r1, [r3], #1
 8009836:	e7f9      	b.n	800982c <memset+0x4>

08009838 <_free_r>:
 8009838:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800983a:	2900      	cmp	r1, #0
 800983c:	d044      	beq.n	80098c8 <_free_r+0x90>
 800983e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009842:	9001      	str	r0, [sp, #4]
 8009844:	2b00      	cmp	r3, #0
 8009846:	f1a1 0404 	sub.w	r4, r1, #4
 800984a:	bfb8      	it	lt
 800984c:	18e4      	addlt	r4, r4, r3
 800984e:	f000 f8e3 	bl	8009a18 <__malloc_lock>
 8009852:	4a1e      	ldr	r2, [pc, #120]	; (80098cc <_free_r+0x94>)
 8009854:	9801      	ldr	r0, [sp, #4]
 8009856:	6813      	ldr	r3, [r2, #0]
 8009858:	b933      	cbnz	r3, 8009868 <_free_r+0x30>
 800985a:	6063      	str	r3, [r4, #4]
 800985c:	6014      	str	r4, [r2, #0]
 800985e:	b003      	add	sp, #12
 8009860:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009864:	f000 b8de 	b.w	8009a24 <__malloc_unlock>
 8009868:	42a3      	cmp	r3, r4
 800986a:	d908      	bls.n	800987e <_free_r+0x46>
 800986c:	6825      	ldr	r5, [r4, #0]
 800986e:	1961      	adds	r1, r4, r5
 8009870:	428b      	cmp	r3, r1
 8009872:	bf01      	itttt	eq
 8009874:	6819      	ldreq	r1, [r3, #0]
 8009876:	685b      	ldreq	r3, [r3, #4]
 8009878:	1949      	addeq	r1, r1, r5
 800987a:	6021      	streq	r1, [r4, #0]
 800987c:	e7ed      	b.n	800985a <_free_r+0x22>
 800987e:	461a      	mov	r2, r3
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	b10b      	cbz	r3, 8009888 <_free_r+0x50>
 8009884:	42a3      	cmp	r3, r4
 8009886:	d9fa      	bls.n	800987e <_free_r+0x46>
 8009888:	6811      	ldr	r1, [r2, #0]
 800988a:	1855      	adds	r5, r2, r1
 800988c:	42a5      	cmp	r5, r4
 800988e:	d10b      	bne.n	80098a8 <_free_r+0x70>
 8009890:	6824      	ldr	r4, [r4, #0]
 8009892:	4421      	add	r1, r4
 8009894:	1854      	adds	r4, r2, r1
 8009896:	42a3      	cmp	r3, r4
 8009898:	6011      	str	r1, [r2, #0]
 800989a:	d1e0      	bne.n	800985e <_free_r+0x26>
 800989c:	681c      	ldr	r4, [r3, #0]
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	6053      	str	r3, [r2, #4]
 80098a2:	4421      	add	r1, r4
 80098a4:	6011      	str	r1, [r2, #0]
 80098a6:	e7da      	b.n	800985e <_free_r+0x26>
 80098a8:	d902      	bls.n	80098b0 <_free_r+0x78>
 80098aa:	230c      	movs	r3, #12
 80098ac:	6003      	str	r3, [r0, #0]
 80098ae:	e7d6      	b.n	800985e <_free_r+0x26>
 80098b0:	6825      	ldr	r5, [r4, #0]
 80098b2:	1961      	adds	r1, r4, r5
 80098b4:	428b      	cmp	r3, r1
 80098b6:	bf04      	itt	eq
 80098b8:	6819      	ldreq	r1, [r3, #0]
 80098ba:	685b      	ldreq	r3, [r3, #4]
 80098bc:	6063      	str	r3, [r4, #4]
 80098be:	bf04      	itt	eq
 80098c0:	1949      	addeq	r1, r1, r5
 80098c2:	6021      	streq	r1, [r4, #0]
 80098c4:	6054      	str	r4, [r2, #4]
 80098c6:	e7ca      	b.n	800985e <_free_r+0x26>
 80098c8:	b003      	add	sp, #12
 80098ca:	bd30      	pop	{r4, r5, pc}
 80098cc:	20000950 	.word	0x20000950

080098d0 <sbrk_aligned>:
 80098d0:	b570      	push	{r4, r5, r6, lr}
 80098d2:	4e0e      	ldr	r6, [pc, #56]	; (800990c <sbrk_aligned+0x3c>)
 80098d4:	460c      	mov	r4, r1
 80098d6:	6831      	ldr	r1, [r6, #0]
 80098d8:	4605      	mov	r5, r0
 80098da:	b911      	cbnz	r1, 80098e2 <sbrk_aligned+0x12>
 80098dc:	f000 f88c 	bl	80099f8 <_sbrk_r>
 80098e0:	6030      	str	r0, [r6, #0]
 80098e2:	4621      	mov	r1, r4
 80098e4:	4628      	mov	r0, r5
 80098e6:	f000 f887 	bl	80099f8 <_sbrk_r>
 80098ea:	1c43      	adds	r3, r0, #1
 80098ec:	d00a      	beq.n	8009904 <sbrk_aligned+0x34>
 80098ee:	1cc4      	adds	r4, r0, #3
 80098f0:	f024 0403 	bic.w	r4, r4, #3
 80098f4:	42a0      	cmp	r0, r4
 80098f6:	d007      	beq.n	8009908 <sbrk_aligned+0x38>
 80098f8:	1a21      	subs	r1, r4, r0
 80098fa:	4628      	mov	r0, r5
 80098fc:	f000 f87c 	bl	80099f8 <_sbrk_r>
 8009900:	3001      	adds	r0, #1
 8009902:	d101      	bne.n	8009908 <sbrk_aligned+0x38>
 8009904:	f04f 34ff 	mov.w	r4, #4294967295
 8009908:	4620      	mov	r0, r4
 800990a:	bd70      	pop	{r4, r5, r6, pc}
 800990c:	20000954 	.word	0x20000954

08009910 <_malloc_r>:
 8009910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009914:	1ccd      	adds	r5, r1, #3
 8009916:	f025 0503 	bic.w	r5, r5, #3
 800991a:	3508      	adds	r5, #8
 800991c:	2d0c      	cmp	r5, #12
 800991e:	bf38      	it	cc
 8009920:	250c      	movcc	r5, #12
 8009922:	2d00      	cmp	r5, #0
 8009924:	4607      	mov	r7, r0
 8009926:	db01      	blt.n	800992c <_malloc_r+0x1c>
 8009928:	42a9      	cmp	r1, r5
 800992a:	d905      	bls.n	8009938 <_malloc_r+0x28>
 800992c:	230c      	movs	r3, #12
 800992e:	603b      	str	r3, [r7, #0]
 8009930:	2600      	movs	r6, #0
 8009932:	4630      	mov	r0, r6
 8009934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009938:	4e2e      	ldr	r6, [pc, #184]	; (80099f4 <_malloc_r+0xe4>)
 800993a:	f000 f86d 	bl	8009a18 <__malloc_lock>
 800993e:	6833      	ldr	r3, [r6, #0]
 8009940:	461c      	mov	r4, r3
 8009942:	bb34      	cbnz	r4, 8009992 <_malloc_r+0x82>
 8009944:	4629      	mov	r1, r5
 8009946:	4638      	mov	r0, r7
 8009948:	f7ff ffc2 	bl	80098d0 <sbrk_aligned>
 800994c:	1c43      	adds	r3, r0, #1
 800994e:	4604      	mov	r4, r0
 8009950:	d14d      	bne.n	80099ee <_malloc_r+0xde>
 8009952:	6834      	ldr	r4, [r6, #0]
 8009954:	4626      	mov	r6, r4
 8009956:	2e00      	cmp	r6, #0
 8009958:	d140      	bne.n	80099dc <_malloc_r+0xcc>
 800995a:	6823      	ldr	r3, [r4, #0]
 800995c:	4631      	mov	r1, r6
 800995e:	4638      	mov	r0, r7
 8009960:	eb04 0803 	add.w	r8, r4, r3
 8009964:	f000 f848 	bl	80099f8 <_sbrk_r>
 8009968:	4580      	cmp	r8, r0
 800996a:	d13a      	bne.n	80099e2 <_malloc_r+0xd2>
 800996c:	6821      	ldr	r1, [r4, #0]
 800996e:	3503      	adds	r5, #3
 8009970:	1a6d      	subs	r5, r5, r1
 8009972:	f025 0503 	bic.w	r5, r5, #3
 8009976:	3508      	adds	r5, #8
 8009978:	2d0c      	cmp	r5, #12
 800997a:	bf38      	it	cc
 800997c:	250c      	movcc	r5, #12
 800997e:	4629      	mov	r1, r5
 8009980:	4638      	mov	r0, r7
 8009982:	f7ff ffa5 	bl	80098d0 <sbrk_aligned>
 8009986:	3001      	adds	r0, #1
 8009988:	d02b      	beq.n	80099e2 <_malloc_r+0xd2>
 800998a:	6823      	ldr	r3, [r4, #0]
 800998c:	442b      	add	r3, r5
 800998e:	6023      	str	r3, [r4, #0]
 8009990:	e00e      	b.n	80099b0 <_malloc_r+0xa0>
 8009992:	6822      	ldr	r2, [r4, #0]
 8009994:	1b52      	subs	r2, r2, r5
 8009996:	d41e      	bmi.n	80099d6 <_malloc_r+0xc6>
 8009998:	2a0b      	cmp	r2, #11
 800999a:	d916      	bls.n	80099ca <_malloc_r+0xba>
 800999c:	1961      	adds	r1, r4, r5
 800999e:	42a3      	cmp	r3, r4
 80099a0:	6025      	str	r5, [r4, #0]
 80099a2:	bf18      	it	ne
 80099a4:	6059      	strne	r1, [r3, #4]
 80099a6:	6863      	ldr	r3, [r4, #4]
 80099a8:	bf08      	it	eq
 80099aa:	6031      	streq	r1, [r6, #0]
 80099ac:	5162      	str	r2, [r4, r5]
 80099ae:	604b      	str	r3, [r1, #4]
 80099b0:	4638      	mov	r0, r7
 80099b2:	f104 060b 	add.w	r6, r4, #11
 80099b6:	f000 f835 	bl	8009a24 <__malloc_unlock>
 80099ba:	f026 0607 	bic.w	r6, r6, #7
 80099be:	1d23      	adds	r3, r4, #4
 80099c0:	1af2      	subs	r2, r6, r3
 80099c2:	d0b6      	beq.n	8009932 <_malloc_r+0x22>
 80099c4:	1b9b      	subs	r3, r3, r6
 80099c6:	50a3      	str	r3, [r4, r2]
 80099c8:	e7b3      	b.n	8009932 <_malloc_r+0x22>
 80099ca:	6862      	ldr	r2, [r4, #4]
 80099cc:	42a3      	cmp	r3, r4
 80099ce:	bf0c      	ite	eq
 80099d0:	6032      	streq	r2, [r6, #0]
 80099d2:	605a      	strne	r2, [r3, #4]
 80099d4:	e7ec      	b.n	80099b0 <_malloc_r+0xa0>
 80099d6:	4623      	mov	r3, r4
 80099d8:	6864      	ldr	r4, [r4, #4]
 80099da:	e7b2      	b.n	8009942 <_malloc_r+0x32>
 80099dc:	4634      	mov	r4, r6
 80099de:	6876      	ldr	r6, [r6, #4]
 80099e0:	e7b9      	b.n	8009956 <_malloc_r+0x46>
 80099e2:	230c      	movs	r3, #12
 80099e4:	603b      	str	r3, [r7, #0]
 80099e6:	4638      	mov	r0, r7
 80099e8:	f000 f81c 	bl	8009a24 <__malloc_unlock>
 80099ec:	e7a1      	b.n	8009932 <_malloc_r+0x22>
 80099ee:	6025      	str	r5, [r4, #0]
 80099f0:	e7de      	b.n	80099b0 <_malloc_r+0xa0>
 80099f2:	bf00      	nop
 80099f4:	20000950 	.word	0x20000950

080099f8 <_sbrk_r>:
 80099f8:	b538      	push	{r3, r4, r5, lr}
 80099fa:	4d06      	ldr	r5, [pc, #24]	; (8009a14 <_sbrk_r+0x1c>)
 80099fc:	2300      	movs	r3, #0
 80099fe:	4604      	mov	r4, r0
 8009a00:	4608      	mov	r0, r1
 8009a02:	602b      	str	r3, [r5, #0]
 8009a04:	f7f7 fb9e 	bl	8001144 <_sbrk>
 8009a08:	1c43      	adds	r3, r0, #1
 8009a0a:	d102      	bne.n	8009a12 <_sbrk_r+0x1a>
 8009a0c:	682b      	ldr	r3, [r5, #0]
 8009a0e:	b103      	cbz	r3, 8009a12 <_sbrk_r+0x1a>
 8009a10:	6023      	str	r3, [r4, #0]
 8009a12:	bd38      	pop	{r3, r4, r5, pc}
 8009a14:	20000958 	.word	0x20000958

08009a18 <__malloc_lock>:
 8009a18:	4801      	ldr	r0, [pc, #4]	; (8009a20 <__malloc_lock+0x8>)
 8009a1a:	f000 b809 	b.w	8009a30 <__retarget_lock_acquire_recursive>
 8009a1e:	bf00      	nop
 8009a20:	2000095c 	.word	0x2000095c

08009a24 <__malloc_unlock>:
 8009a24:	4801      	ldr	r0, [pc, #4]	; (8009a2c <__malloc_unlock+0x8>)
 8009a26:	f000 b804 	b.w	8009a32 <__retarget_lock_release_recursive>
 8009a2a:	bf00      	nop
 8009a2c:	2000095c 	.word	0x2000095c

08009a30 <__retarget_lock_acquire_recursive>:
 8009a30:	4770      	bx	lr

08009a32 <__retarget_lock_release_recursive>:
 8009a32:	4770      	bx	lr

08009a34 <_init>:
 8009a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a36:	bf00      	nop
 8009a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a3a:	bc08      	pop	{r3}
 8009a3c:	469e      	mov	lr, r3
 8009a3e:	4770      	bx	lr

08009a40 <_fini>:
 8009a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a42:	bf00      	nop
 8009a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a46:	bc08      	pop	{r3}
 8009a48:	469e      	mov	lr, r3
 8009a4a:	4770      	bx	lr
