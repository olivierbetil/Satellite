
Turbo_Sat_CSB_Fonctionnel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008180  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008308  08008308  00018308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008324  08008324  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  08008324  08008324  00018324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800832c  0800832c  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800832c  0800832c  0001832c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008330  08008330  00018330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08008334  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200b8  2**0
                  CONTENTS
 10 .bss          000008c8  200000b8  200000b8  000200b8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000980  20000980  000200b8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017adf  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b98  00000000  00000000  00037bc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001340  00000000  00000000  0003b760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011b0  00000000  00000000  0003caa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023eef  00000000  00000000  0003dc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019703  00000000  00000000  00061b3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd59a  00000000  00000000  0007b242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001487dc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005210  00000000  00000000  0014882c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000b8 	.word	0x200000b8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080082f0 	.word	0x080082f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000bc 	.word	0x200000bc
 80001c4:	080082f0 	.word	0x080082f0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fe94 	bl	80011fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f814 	bl	8000500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f972 	bl	80007c0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004dc:	f000 f87a 	bl	80005d4 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004e0:	f000 f8a6 	bl	8000630 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e4:	f000 f8d4 	bl	8000690 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e8:	f007 fb12 	bl	8007b10 <MX_USB_HOST_Init>
  MX_SPI2_Init();
 80004ec:	f000 f906 	bl	80006fc <MX_SPI2_Init>
  MX_USART2_Init();
 80004f0:	f000 f93a 	bl	8000768 <MX_USART2_Init>
  /* USER CODE BEGIN 2 */
   nrf24_Init();
 80004f4:	f000 fb62 	bl	8000bbc <nrf24_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  stateMachine();
 80004f8:	f000 fa74 	bl	80009e4 <stateMachine>
 80004fc:	e7fc      	b.n	80004f8 <main+0x2c>
	...

08000500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b094      	sub	sp, #80	; 0x50
 8000504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000506:	f107 0320 	add.w	r3, r7, #32
 800050a:	2230      	movs	r2, #48	; 0x30
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f007 fde8 	bl	80080e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000514:	f107 030c 	add.w	r3, r7, #12
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000524:	2300      	movs	r3, #0
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	4b28      	ldr	r3, [pc, #160]	; (80005cc <SystemClock_Config+0xcc>)
 800052a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052c:	4a27      	ldr	r2, [pc, #156]	; (80005cc <SystemClock_Config+0xcc>)
 800052e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000532:	6413      	str	r3, [r2, #64]	; 0x40
 8000534:	4b25      	ldr	r3, [pc, #148]	; (80005cc <SystemClock_Config+0xcc>)
 8000536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000540:	2300      	movs	r3, #0
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	4b22      	ldr	r3, [pc, #136]	; (80005d0 <SystemClock_Config+0xd0>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a21      	ldr	r2, [pc, #132]	; (80005d0 <SystemClock_Config+0xd0>)
 800054a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800054e:	6013      	str	r3, [r2, #0]
 8000550:	4b1f      	ldr	r3, [pc, #124]	; (80005d0 <SystemClock_Config+0xd0>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000558:	607b      	str	r3, [r7, #4]
 800055a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800055c:	2301      	movs	r3, #1
 800055e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000560:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000564:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000566:	2302      	movs	r3, #2
 8000568:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800056a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800056e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000570:	2308      	movs	r3, #8
 8000572:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000574:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000578:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800057a:	2302      	movs	r3, #2
 800057c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800057e:	2307      	movs	r3, #7
 8000580:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000582:	f107 0320 	add.w	r3, r7, #32
 8000586:	4618      	mov	r0, r3
 8000588:	f003 fb68 	bl	8003c5c <HAL_RCC_OscConfig>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000592:	f000 fa61 	bl	8000a58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000596:	230f      	movs	r3, #15
 8000598:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059a:	2302      	movs	r3, #2
 800059c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ae:	f107 030c 	add.w	r3, r7, #12
 80005b2:	2105      	movs	r1, #5
 80005b4:	4618      	mov	r0, r3
 80005b6:	f003 fdc9 	bl	800414c <HAL_RCC_ClockConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005c0:	f000 fa4a 	bl	8000a58 <Error_Handler>
  }
}
 80005c4:	bf00      	nop
 80005c6:	3750      	adds	r7, #80	; 0x50
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40023800 	.word	0x40023800
 80005d0:	40007000 	.word	0x40007000

080005d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005d8:	4b12      	ldr	r3, [pc, #72]	; (8000624 <MX_I2C1_Init+0x50>)
 80005da:	4a13      	ldr	r2, [pc, #76]	; (8000628 <MX_I2C1_Init+0x54>)
 80005dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005de:	4b11      	ldr	r3, [pc, #68]	; (8000624 <MX_I2C1_Init+0x50>)
 80005e0:	4a12      	ldr	r2, [pc, #72]	; (800062c <MX_I2C1_Init+0x58>)
 80005e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005e4:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <MX_I2C1_Init+0x50>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <MX_I2C1_Init+0x50>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005f0:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <MX_I2C1_Init+0x50>)
 80005f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005f8:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <MX_I2C1_Init+0x50>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005fe:	4b09      	ldr	r3, [pc, #36]	; (8000624 <MX_I2C1_Init+0x50>)
 8000600:	2200      	movs	r2, #0
 8000602:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000604:	4b07      	ldr	r3, [pc, #28]	; (8000624 <MX_I2C1_Init+0x50>)
 8000606:	2200      	movs	r2, #0
 8000608:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800060a:	4b06      	ldr	r3, [pc, #24]	; (8000624 <MX_I2C1_Init+0x50>)
 800060c:	2200      	movs	r2, #0
 800060e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000610:	4804      	ldr	r0, [pc, #16]	; (8000624 <MX_I2C1_Init+0x50>)
 8000612:	f002 fd3f 	bl	8003094 <HAL_I2C_Init>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800061c:	f000 fa1c 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}
 8000624:	200000d4 	.word	0x200000d4
 8000628:	40005400 	.word	0x40005400
 800062c:	000186a0 	.word	0x000186a0

08000630 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000634:	4b13      	ldr	r3, [pc, #76]	; (8000684 <MX_I2S3_Init+0x54>)
 8000636:	4a14      	ldr	r2, [pc, #80]	; (8000688 <MX_I2S3_Init+0x58>)
 8000638:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800063a:	4b12      	ldr	r3, [pc, #72]	; (8000684 <MX_I2S3_Init+0x54>)
 800063c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000640:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000642:	4b10      	ldr	r3, [pc, #64]	; (8000684 <MX_I2S3_Init+0x54>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000648:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <MX_I2S3_Init+0x54>)
 800064a:	2200      	movs	r2, #0
 800064c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800064e:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <MX_I2S3_Init+0x54>)
 8000650:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000654:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000656:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <MX_I2S3_Init+0x54>)
 8000658:	4a0c      	ldr	r2, [pc, #48]	; (800068c <MX_I2S3_Init+0x5c>)
 800065a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800065c:	4b09      	ldr	r3, [pc, #36]	; (8000684 <MX_I2S3_Init+0x54>)
 800065e:	2200      	movs	r2, #0
 8000660:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000662:	4b08      	ldr	r3, [pc, #32]	; (8000684 <MX_I2S3_Init+0x54>)
 8000664:	2200      	movs	r2, #0
 8000666:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <MX_I2S3_Init+0x54>)
 800066a:	2200      	movs	r2, #0
 800066c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800066e:	4805      	ldr	r0, [pc, #20]	; (8000684 <MX_I2S3_Init+0x54>)
 8000670:	f002 fe54 	bl	800331c <HAL_I2S_Init>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800067a:	f000 f9ed 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000128 	.word	0x20000128
 8000688:	40003c00 	.word	0x40003c00
 800068c:	00017700 	.word	0x00017700

08000690 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000694:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <MX_SPI1_Init+0x64>)
 8000696:	4a18      	ldr	r2, [pc, #96]	; (80006f8 <MX_SPI1_Init+0x68>)
 8000698:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800069a:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <MX_SPI1_Init+0x64>)
 800069c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006a2:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006a8:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006c2:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006dc:	220a      	movs	r2, #10
 80006de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006e2:	f004 f893 	bl	800480c <HAL_SPI_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006ec:	f000 f9b4 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000170 	.word	0x20000170
 80006f8:	40013000 	.word	0x40013000

080006fc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000700:	4b17      	ldr	r3, [pc, #92]	; (8000760 <MX_SPI2_Init+0x64>)
 8000702:	4a18      	ldr	r2, [pc, #96]	; (8000764 <MX_SPI2_Init+0x68>)
 8000704:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000706:	4b16      	ldr	r3, [pc, #88]	; (8000760 <MX_SPI2_Init+0x64>)
 8000708:	f44f 7282 	mov.w	r2, #260	; 0x104
 800070c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800070e:	4b14      	ldr	r3, [pc, #80]	; (8000760 <MX_SPI2_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <MX_SPI2_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800071a:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_SPI2_Init+0x64>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000720:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <MX_SPI2_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_SPI2_Init+0x64>)
 8000728:	f44f 7200 	mov.w	r2, #512	; 0x200
 800072c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_SPI2_Init+0x64>)
 8000730:	2218      	movs	r2, #24
 8000732:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000734:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <MX_SPI2_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_SPI2_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000740:	4b07      	ldr	r3, [pc, #28]	; (8000760 <MX_SPI2_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_SPI2_Init+0x64>)
 8000748:	220a      	movs	r2, #10
 800074a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800074c:	4804      	ldr	r0, [pc, #16]	; (8000760 <MX_SPI2_Init+0x64>)
 800074e:	f004 f85d 	bl	800480c <HAL_SPI_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000758:	f000 f97e 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	200001c8 	.word	0x200001c8
 8000764:	40003800 	.word	0x40003800

08000768 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <MX_USART2_Init+0x50>)
 800076e:	4a13      	ldr	r2, [pc, #76]	; (80007bc <MX_USART2_Init+0x54>)
 8000770:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 9600;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_USART2_Init+0x50>)
 8000774:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000778:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 800077a:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <MX_USART2_Init+0x50>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 8000780:	4b0d      	ldr	r3, [pc, #52]	; (80007b8 <MX_USART2_Init+0x50>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 8000786:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <MX_USART2_Init+0x50>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 800078c:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <MX_USART2_Init+0x50>)
 800078e:	220c      	movs	r2, #12
 8000790:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_USART2_Init+0x50>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8000798:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <MX_USART2_Init+0x50>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_USART2_Init+0x50>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 80007a4:	4804      	ldr	r0, [pc, #16]	; (80007b8 <MX_USART2_Init+0x50>)
 80007a6:	f004 fdd9 	bl	800535c <HAL_USART_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 80007b0:	f000 f952 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000220 	.word	0x20000220
 80007bc:	40004400 	.word	0x40004400

080007c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08c      	sub	sp, #48	; 0x30
 80007c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c6:	f107 031c 	add.w	r3, r7, #28
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
 80007d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	61bb      	str	r3, [r7, #24]
 80007da:	4b7c      	ldr	r3, [pc, #496]	; (80009cc <MX_GPIO_Init+0x20c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a7b      	ldr	r2, [pc, #492]	; (80009cc <MX_GPIO_Init+0x20c>)
 80007e0:	f043 0310 	orr.w	r3, r3, #16
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b79      	ldr	r3, [pc, #484]	; (80009cc <MX_GPIO_Init+0x20c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0310 	and.w	r3, r3, #16
 80007ee:	61bb      	str	r3, [r7, #24]
 80007f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
 80007f6:	4b75      	ldr	r3, [pc, #468]	; (80009cc <MX_GPIO_Init+0x20c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a74      	ldr	r2, [pc, #464]	; (80009cc <MX_GPIO_Init+0x20c>)
 80007fc:	f043 0304 	orr.w	r3, r3, #4
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b72      	ldr	r3, [pc, #456]	; (80009cc <MX_GPIO_Init+0x20c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0304 	and.w	r3, r3, #4
 800080a:	617b      	str	r3, [r7, #20]
 800080c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
 8000812:	4b6e      	ldr	r3, [pc, #440]	; (80009cc <MX_GPIO_Init+0x20c>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a6d      	ldr	r2, [pc, #436]	; (80009cc <MX_GPIO_Init+0x20c>)
 8000818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b6b      	ldr	r3, [pc, #428]	; (80009cc <MX_GPIO_Init+0x20c>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	4b67      	ldr	r3, [pc, #412]	; (80009cc <MX_GPIO_Init+0x20c>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a66      	ldr	r2, [pc, #408]	; (80009cc <MX_GPIO_Init+0x20c>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b64      	ldr	r3, [pc, #400]	; (80009cc <MX_GPIO_Init+0x20c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	4b60      	ldr	r3, [pc, #384]	; (80009cc <MX_GPIO_Init+0x20c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a5f      	ldr	r2, [pc, #380]	; (80009cc <MX_GPIO_Init+0x20c>)
 8000850:	f043 0302 	orr.w	r3, r3, #2
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b5d      	ldr	r3, [pc, #372]	; (80009cc <MX_GPIO_Init+0x20c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0302 	and.w	r3, r3, #2
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	4b59      	ldr	r3, [pc, #356]	; (80009cc <MX_GPIO_Init+0x20c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a58      	ldr	r2, [pc, #352]	; (80009cc <MX_GPIO_Init+0x20c>)
 800086c:	f043 0308 	orr.w	r3, r3, #8
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b56      	ldr	r3, [pc, #344]	; (80009cc <MX_GPIO_Init+0x20c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0308 	and.w	r3, r3, #8
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2108      	movs	r1, #8
 8000882:	4853      	ldr	r0, [pc, #332]	; (80009d0 <MX_GPIO_Init+0x210>)
 8000884:	f000 fffe 	bl	8001884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000888:	2201      	movs	r2, #1
 800088a:	2101      	movs	r1, #1
 800088c:	4851      	ldr	r0, [pc, #324]	; (80009d4 <MX_GPIO_Init+0x214>)
 800088e:	f000 fff9 	bl	8001884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000898:	484f      	ldr	r0, [pc, #316]	; (80009d8 <MX_GPIO_Init+0x218>)
 800089a:	f000 fff3 	bl	8001884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800089e:	2200      	movs	r2, #0
 80008a0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008a4:	484d      	ldr	r0, [pc, #308]	; (80009dc <MX_GPIO_Init+0x21c>)
 80008a6:	f000 ffed 	bl	8001884 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008aa:	2308      	movs	r3, #8
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ae:	2301      	movs	r3, #1
 80008b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	4843      	ldr	r0, [pc, #268]	; (80009d0 <MX_GPIO_Init+0x210>)
 80008c2:	f000 fe43 	bl	800154c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008c6:	2301      	movs	r3, #1
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ca:	2301      	movs	r3, #1
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	483d      	ldr	r0, [pc, #244]	; (80009d4 <MX_GPIO_Init+0x214>)
 80008de:	f000 fe35 	bl	800154c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008e2:	2308      	movs	r3, #8
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	2302      	movs	r3, #2
 80008e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008f2:	2305      	movs	r3, #5
 80008f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	4835      	ldr	r0, [pc, #212]	; (80009d4 <MX_GPIO_Init+0x214>)
 80008fe:	f000 fe25 	bl	800154c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000902:	2301      	movs	r3, #1
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000906:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800090a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	4619      	mov	r1, r3
 8000916:	4832      	ldr	r0, [pc, #200]	; (80009e0 <MX_GPIO_Init+0x220>)
 8000918:	f000 fe18 	bl	800154c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800091c:	2304      	movs	r3, #4
 800091e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000920:	2300      	movs	r3, #0
 8000922:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000928:	f107 031c 	add.w	r3, r7, #28
 800092c:	4619      	mov	r1, r3
 800092e:	482a      	ldr	r0, [pc, #168]	; (80009d8 <MX_GPIO_Init+0x218>)
 8000930:	f000 fe0c 	bl	800154c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000934:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093a:	2302      	movs	r3, #2
 800093c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000946:	2305      	movs	r3, #5
 8000948:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	4619      	mov	r1, r3
 8000950:	4821      	ldr	r0, [pc, #132]	; (80009d8 <MX_GPIO_Init+0x218>)
 8000952:	f000 fdfb 	bl	800154c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000956:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800095a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095c:	2301      	movs	r3, #1
 800095e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	2300      	movs	r3, #0
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4619      	mov	r1, r3
 800096e:	481a      	ldr	r0, [pc, #104]	; (80009d8 <MX_GPIO_Init+0x218>)
 8000970:	f000 fdec 	bl	800154c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000974:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000978:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097a:	2301      	movs	r3, #1
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	4813      	ldr	r0, [pc, #76]	; (80009dc <MX_GPIO_Init+0x21c>)
 800098e:	f000 fddd 	bl	800154c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000992:	2320      	movs	r3, #32
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000996:	2300      	movs	r3, #0
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4619      	mov	r1, r3
 80009a4:	480d      	ldr	r0, [pc, #52]	; (80009dc <MX_GPIO_Init+0x21c>)
 80009a6:	f000 fdd1 	bl	800154c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009aa:	2302      	movs	r3, #2
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009ae:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f107 031c 	add.w	r3, r7, #28
 80009bc:	4619      	mov	r1, r3
 80009be:	4804      	ldr	r0, [pc, #16]	; (80009d0 <MX_GPIO_Init+0x210>)
 80009c0:	f000 fdc4 	bl	800154c <HAL_GPIO_Init>

}
 80009c4:	bf00      	nop
 80009c6:	3730      	adds	r7, #48	; 0x30
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40023800 	.word	0x40023800
 80009d0:	40021000 	.word	0x40021000
 80009d4:	40020800 	.word	0x40020800
 80009d8:	40020400 	.word	0x40020400
 80009dc:	40020c00 	.word	0x40020c00
 80009e0:	40020000 	.word	0x40020000

080009e4 <stateMachine>:

/* USER CODE BEGIN 4 */
void stateMachine(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
	switch(SPI_Mode)
 80009e8:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <stateMachine+0x5c>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d002      	beq.n	80009f6 <stateMachine+0x12>
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d021      	beq.n	8000a38 <stateMachine+0x54>

	case TX:
		break;

	default:
		break;
 80009f4:	e021      	b.n	8000a3a <stateMachine+0x56>
		if(init==1)
 80009f6:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <stateMachine+0x60>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d106      	bne.n	8000a0c <stateMachine+0x28>
			nrf24_RxMode(Address, 10);
 80009fe:	210a      	movs	r1, #10
 8000a00:	4811      	ldr	r0, [pc, #68]	; (8000a48 <stateMachine+0x64>)
 8000a02:	f000 f8ff 	bl	8000c04 <nrf24_RxMode>
			init=0;
 8000a06:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <stateMachine+0x60>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	701a      	strb	r2, [r3, #0]
		if(isDataAvailable(1))
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	f000 f931 	bl	8000c74 <isDataAvailable>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d008      	beq.n	8000a2a <stateMachine+0x46>
			nrf24_Receive(buffer);
 8000a18:	480c      	ldr	r0, [pc, #48]	; (8000a4c <stateMachine+0x68>)
 8000a1a:	f000 f94b 	bl	8000cb4 <nrf24_Receive>
			HAL_USART_Transmit(&husart2, buffer, 32, 100);
 8000a1e:	2364      	movs	r3, #100	; 0x64
 8000a20:	2220      	movs	r2, #32
 8000a22:	490a      	ldr	r1, [pc, #40]	; (8000a4c <stateMachine+0x68>)
 8000a24:	480a      	ldr	r0, [pc, #40]	; (8000a50 <stateMachine+0x6c>)
 8000a26:	f004 fcda 	bl	80053de <HAL_USART_Transmit>
		HAL_USART_Transmit(&husart2, hello, 32, 100);
 8000a2a:	2364      	movs	r3, #100	; 0x64
 8000a2c:	2220      	movs	r2, #32
 8000a2e:	4909      	ldr	r1, [pc, #36]	; (8000a54 <stateMachine+0x70>)
 8000a30:	4807      	ldr	r0, [pc, #28]	; (8000a50 <stateMachine+0x6c>)
 8000a32:	f004 fcd4 	bl	80053de <HAL_USART_Transmit>
		break;
 8000a36:	e000      	b.n	8000a3a <stateMachine+0x56>
		break;
 8000a38:	bf00      	nop
	}
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000284 	.word	0x20000284
 8000a44:	20000005 	.word	0x20000005
 8000a48:	20000000 	.word	0x20000000
 8000a4c:	20000264 	.word	0x20000264
 8000a50:	20000220 	.word	0x20000220
 8000a54:	20000008 	.word	0x20000008

08000a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a5c:	b672      	cpsid	i
}
 8000a5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <Error_Handler+0x8>
	...

08000a64 <selectCS>:
#define SPI_CS_PIN			GPIO_PIN_12

/**
 * @brief met le pin CS a 0
 */
void selectCS(void){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI_CS_GPIO, SPI_CS_PIN, GPIO_PIN_RESET);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a6e:	4802      	ldr	r0, [pc, #8]	; (8000a78 <selectCS+0x14>)
 8000a70:	f000 ff08 	bl	8001884 <HAL_GPIO_WritePin>
}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40020400 	.word	0x40020400

08000a7c <unselectCS>:

/**
 * @brief met le pin CS a 1
 */
void unselectCS(void){
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI_CS_GPIO, SPI_CS_PIN, GPIO_PIN_SET);
 8000a80:	2201      	movs	r2, #1
 8000a82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a86:	4802      	ldr	r0, [pc, #8]	; (8000a90 <unselectCS+0x14>)
 8000a88:	f000 fefc 	bl	8001884 <HAL_GPIO_WritePin>
}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40020400 	.word	0x40020400

08000a94 <enableCE>:

/**
 * @brief met le pin CE a 1
 */
void enableCE(void){
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI_CE_GPIO, SPI_CE_PIN, GPIO_PIN_SET);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a9e:	4802      	ldr	r0, [pc, #8]	; (8000aa8 <enableCE+0x14>)
 8000aa0:	f000 fef0 	bl	8001884 <HAL_GPIO_WritePin>
}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40020400 	.word	0x40020400

08000aac <disableCE>:

/**
 * @brief met le pin CE a 0
 */
void disableCE(void){
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI_CE_GPIO, SPI_CE_PIN, GPIO_PIN_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ab6:	4802      	ldr	r0, [pc, #8]	; (8000ac0 <disableCE+0x14>)
 8000ab8:	f000 fee4 	bl	8001884 <HAL_GPIO_WritePin>
}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40020400 	.word	0x40020400

08000ac4 <nrf24_WriteReg>:
 * @brief Ecrit une valeur dans un registre du module
 *
 * @param Reg : Registre a modifier
 * @param Data : Donnee a ecrire dans le registre
 */
void nrf24_WriteReg(uint8_t Reg, uint8_t Data){
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	460a      	mov	r2, r1
 8000ace:	71fb      	strb	r3, [r7, #7]
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0]=Reg|1<<5;
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	f043 0320 	orr.w	r3, r3, #32
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	733b      	strb	r3, [r7, #12]
	buf[1]=Data;
 8000ade:	79bb      	ldrb	r3, [r7, #6]
 8000ae0:	737b      	strb	r3, [r7, #13]

	selectCS();
 8000ae2:	f7ff ffbf 	bl	8000a64 <selectCS>
	HAL_SPI_Transmit(SPI_PROTO, buf, 2, 100);
 8000ae6:	f107 010c 	add.w	r1, r7, #12
 8000aea:	2364      	movs	r3, #100	; 0x64
 8000aec:	2202      	movs	r2, #2
 8000aee:	4804      	ldr	r0, [pc, #16]	; (8000b00 <nrf24_WriteReg+0x3c>)
 8000af0:	f003 ff15 	bl	800491e <HAL_SPI_Transmit>
	unselectCS();
 8000af4:	f7ff ffc2 	bl	8000a7c <unselectCS>
}
 8000af8:	bf00      	nop
 8000afa:	3710      	adds	r7, #16
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	200001c8 	.word	0x200001c8

08000b04 <nrf24_WriteRegMulti>:
 *
 * @param Reg : Registre a modifier
 * @param Data : Donnee a ecrire dans le registre
 * @param size : Taille de la donnee (en octets)
 */
void nrf24_WriteRegMulti(uint8_t Reg, uint8_t *Data, uint8_t size){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	6039      	str	r1, [r7, #0]
 8000b0e:	71fb      	strb	r3, [r7, #7]
 8000b10:	4613      	mov	r3, r2
 8000b12:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0]=Reg|1<<5;
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	f043 0320 	orr.w	r3, r3, #32
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	733b      	strb	r3, [r7, #12]
	//buf[1]=Data;

	selectCS();
 8000b1e:	f7ff ffa1 	bl	8000a64 <selectCS>
	HAL_SPI_Transmit(SPI_PROTO, &buf[0], 1, 100);
 8000b22:	f107 010c 	add.w	r1, r7, #12
 8000b26:	2364      	movs	r3, #100	; 0x64
 8000b28:	2201      	movs	r2, #1
 8000b2a:	4808      	ldr	r0, [pc, #32]	; (8000b4c <nrf24_WriteRegMulti+0x48>)
 8000b2c:	f003 fef7 	bl	800491e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_PROTO, Data, size, 100);
 8000b30:	79bb      	ldrb	r3, [r7, #6]
 8000b32:	b29a      	uxth	r2, r3
 8000b34:	2364      	movs	r3, #100	; 0x64
 8000b36:	6839      	ldr	r1, [r7, #0]
 8000b38:	4804      	ldr	r0, [pc, #16]	; (8000b4c <nrf24_WriteRegMulti+0x48>)
 8000b3a:	f003 fef0 	bl	800491e <HAL_SPI_Transmit>

	unselectCS();
 8000b3e:	f7ff ff9d 	bl	8000a7c <unselectCS>
}
 8000b42:	bf00      	nop
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	200001c8 	.word	0x200001c8

08000b50 <nrf24_ReadReg>:
 * @brief lit la valeur d'un registre du module
 *
 * @param Reg : Registre ou l'on veut lire la valeur
 * @return la valeur du registre
 */
uint8_t nrf24_ReadReg(uint8_t Reg){
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	73fb      	strb	r3, [r7, #15]
	selectCS();
 8000b5e:	f7ff ff81 	bl	8000a64 <selectCS>
	HAL_SPI_Transmit(SPI_PROTO, &Reg, 1, 100);
 8000b62:	1df9      	adds	r1, r7, #7
 8000b64:	2364      	movs	r3, #100	; 0x64
 8000b66:	2201      	movs	r2, #1
 8000b68:	4808      	ldr	r0, [pc, #32]	; (8000b8c <nrf24_ReadReg+0x3c>)
 8000b6a:	f003 fed8 	bl	800491e <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_PROTO, &data, 1, 100);
 8000b6e:	f107 010f 	add.w	r1, r7, #15
 8000b72:	2364      	movs	r3, #100	; 0x64
 8000b74:	2201      	movs	r2, #1
 8000b76:	4805      	ldr	r0, [pc, #20]	; (8000b8c <nrf24_ReadReg+0x3c>)
 8000b78:	f004 f80d 	bl	8004b96 <HAL_SPI_Receive>
	unselectCS();
 8000b7c:	f7ff ff7e 	bl	8000a7c <unselectCS>
	return data;
 8000b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200001c8 	.word	0x200001c8

08000b90 <nrfsendcmd>:
/**
 * @brief Envoie une commande au module
 *
 * @param cmd : Commande a envoyer (voir datasheet module pour liste des commandes)
 */
void nrfsendcmd(uint8_t cmd){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	71fb      	strb	r3, [r7, #7]
	selectCS();
 8000b9a:	f7ff ff63 	bl	8000a64 <selectCS>
	HAL_SPI_Transmit(SPI_PROTO, &cmd, 1, 100);
 8000b9e:	1df9      	adds	r1, r7, #7
 8000ba0:	2364      	movs	r3, #100	; 0x64
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	4804      	ldr	r0, [pc, #16]	; (8000bb8 <nrfsendcmd+0x28>)
 8000ba6:	f003 feba 	bl	800491e <HAL_SPI_Transmit>
	unselectCS();
 8000baa:	f7ff ff67 	bl	8000a7c <unselectCS>
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200001c8 	.word	0x200001c8

08000bbc <nrf24_Init>:

/**
 * @brief Initialise les diff�rents registre du module
 */
void nrf24_Init(void){
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
	disableCE();
 8000bc0:	f7ff ff74 	bl	8000aac <disableCE>
	nrf24_WriteReg(CONFIG, 0);
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	2000      	movs	r0, #0
 8000bc8:	f7ff ff7c 	bl	8000ac4 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0);
 8000bcc:	2100      	movs	r1, #0
 8000bce:	2001      	movs	r0, #1
 8000bd0:	f7ff ff78 	bl	8000ac4 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0);
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	2002      	movs	r0, #2
 8000bd8:	f7ff ff74 	bl	8000ac4 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 8000bdc:	2103      	movs	r1, #3
 8000bde:	2003      	movs	r0, #3
 8000be0:	f7ff ff70 	bl	8000ac4 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0);
 8000be4:	2100      	movs	r1, #0
 8000be6:	2004      	movs	r0, #4
 8000be8:	f7ff ff6c 	bl	8000ac4 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0);
 8000bec:	2100      	movs	r1, #0
 8000bee:	2005      	movs	r0, #5
 8000bf0:	f7ff ff68 	bl	8000ac4 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 8000bf4:	210e      	movs	r1, #14
 8000bf6:	2006      	movs	r0, #6
 8000bf8:	f7ff ff64 	bl	8000ac4 <nrf24_WriteReg>
	enableCE();
 8000bfc:	f7ff ff4a 	bl	8000a94 <enableCE>
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <nrf24_RxMode>:
 * @brief initialise le module en mode Rx (reception de donnees)
 *
 * @param Address : l'adresse du module
 * @param channel : chaine du module (mettre 10)
 */
void nrf24_RxMode(uint8_t *Address, uint8_t channel){
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	70fb      	strb	r3, [r7, #3]
	disableCE();
 8000c10:	f7ff ff4c 	bl	8000aac <disableCE>
	nrf24_WriteReg(RF_CH, channel);
 8000c14:	78fb      	ldrb	r3, [r7, #3]
 8000c16:	4619      	mov	r1, r3
 8000c18:	2005      	movs	r0, #5
 8000c1a:	f7ff ff53 	bl	8000ac4 <nrf24_WriteReg>

	uint8_t en_rxaddr=nrf24_ReadReg(EN_RXADDR);
 8000c1e:	2002      	movs	r0, #2
 8000c20:	f7ff ff96 	bl	8000b50 <nrf24_ReadReg>
 8000c24:	4603      	mov	r3, r0
 8000c26:	73fb      	strb	r3, [r7, #15]
	en_rxaddr=en_rxaddr | (1<<1);
 8000c28:	7bfb      	ldrb	r3, [r7, #15]
 8000c2a:	f043 0302 	orr.w	r3, r3, #2
 8000c2e:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg(EN_RXADDR, en_rxaddr);
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
 8000c32:	4619      	mov	r1, r3
 8000c34:	2002      	movs	r0, #2
 8000c36:	f7ff ff45 	bl	8000ac4 <nrf24_WriteReg>
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);
 8000c3a:	2205      	movs	r2, #5
 8000c3c:	6879      	ldr	r1, [r7, #4]
 8000c3e:	200b      	movs	r0, #11
 8000c40:	f7ff ff60 	bl	8000b04 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P1, 32); //Set up la taille maximale de la donnee a recuperer
 8000c44:	2120      	movs	r1, #32
 8000c46:	2012      	movs	r0, #18
 8000c48:	f7ff ff3c 	bl	8000ac4 <nrf24_WriteReg>

	//power up the device in RX mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f7ff ff7f 	bl	8000b50 <nrf24_ReadReg>
 8000c52:	4603      	mov	r3, r0
 8000c54:	73bb      	strb	r3, [r7, #14]
	config=config | (1<<1) | (1<<0);
 8000c56:	7bbb      	ldrb	r3, [r7, #14]
 8000c58:	f043 0303 	orr.w	r3, r3, #3
 8000c5c:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg(CONFIG, config);
 8000c5e:	7bbb      	ldrb	r3, [r7, #14]
 8000c60:	4619      	mov	r1, r3
 8000c62:	2000      	movs	r0, #0
 8000c64:	f7ff ff2e 	bl	8000ac4 <nrf24_WriteReg>
	enableCE();
 8000c68:	f7ff ff14 	bl	8000a94 <enableCE>
}
 8000c6c:	bf00      	nop
 8000c6e:	3710      	adds	r7, #16
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <isDataAvailable>:
 * @brief observe si une donnee est arrivee dans la pipe
 *
 * @param pipenum : pipe a scuter
 * @return true : donnee disponible; false : pas de donnee
 */
uint8_t isDataAvailable(uint8_t pipenum){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
	uint8_t status = nrf24_ReadReg(STATUS);
 8000c7e:	2007      	movs	r0, #7
 8000c80:	f7ff ff66 	bl	8000b50 <nrf24_ReadReg>
 8000c84:	4603      	mov	r3, r0
 8000c86:	73fb      	strb	r3, [r7, #15]

	//uint8_t check = nrf24_ReadReg(RF_SETUP);

	if((status&(1<<6)) && (status&(pipenum<<1))){
 8000c88:	7bfb      	ldrb	r3, [r7, #15]
 8000c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d00b      	beq.n	8000caa <isDataAvailable+0x36>
 8000c92:	7bfa      	ldrb	r2, [r7, #15]
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	4013      	ands	r3, r2
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d005      	beq.n	8000caa <isDataAvailable+0x36>
		nrf24_WriteReg(STATUS, (1<<6));
 8000c9e:	2140      	movs	r1, #64	; 0x40
 8000ca0:	2007      	movs	r0, #7
 8000ca2:	f7ff ff0f 	bl	8000ac4 <nrf24_WriteReg>
		return 1;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e000      	b.n	8000cac <isDataAvailable+0x38>
	}
	else
		return 0;
 8000caa:	2300      	movs	r3, #0
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3710      	adds	r7, #16
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <nrf24_Receive>:
/**
 * @brief recupere la donnee dans la pipe 1
 *
 * @param data pointeur vers la ou l'on veut stocker la donnee (32 bits)
 */
void nrf24_Receive(uint8_t *data){
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	73fb      	strb	r3, [r7, #15]
	selectCS();
 8000cc0:	f7ff fed0 	bl	8000a64 <selectCS>

	cmdtosend=R_RX_PAYLOAD;
 8000cc4:	2361      	movs	r3, #97	; 0x61
 8000cc6:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(SPI_PROTO, &cmdtosend, 1, 100);
 8000cc8:	f107 010f 	add.w	r1, r7, #15
 8000ccc:	2364      	movs	r3, #100	; 0x64
 8000cce:	2201      	movs	r2, #1
 8000cd0:	480b      	ldr	r0, [pc, #44]	; (8000d00 <nrf24_Receive+0x4c>)
 8000cd2:	f003 fe24 	bl	800491e <HAL_SPI_Transmit>

	HAL_SPI_Receive(SPI_PROTO, data, 32, 5);
 8000cd6:	2305      	movs	r3, #5
 8000cd8:	2220      	movs	r2, #32
 8000cda:	6879      	ldr	r1, [r7, #4]
 8000cdc:	4808      	ldr	r0, [pc, #32]	; (8000d00 <nrf24_Receive+0x4c>)
 8000cde:	f003 ff5a 	bl	8004b96 <HAL_SPI_Receive>

	unselectCS();
 8000ce2:	f7ff fecb 	bl	8000a7c <unselectCS>

	HAL_Delay(1);
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	f000 fafa 	bl	80012e0 <HAL_Delay>

	cmdtosend=FLUSH_RX;
 8000cec:	23e2      	movs	r3, #226	; 0xe2
 8000cee:	73fb      	strb	r3, [r7, #15]
	nrfsendcmd(cmdtosend);
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff ff4c 	bl	8000b90 <nrfsendcmd>
}
 8000cf8:	bf00      	nop
 8000cfa:	3710      	adds	r7, #16
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	200001c8 	.word	0x200001c8

08000d04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	607b      	str	r3, [r7, #4]
 8000d0e:	4b10      	ldr	r3, [pc, #64]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d12:	4a0f      	ldr	r2, [pc, #60]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d18:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1a:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	603b      	str	r3, [r7, #0]
 8000d2a:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2e:	4a08      	ldr	r2, [pc, #32]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d34:	6413      	str	r3, [r2, #64]	; 0x40
 8000d36:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3e:	603b      	str	r3, [r7, #0]
 8000d40:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d42:	2007      	movs	r0, #7
 8000d44:	f000 fbc0 	bl	80014c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40023800 	.word	0x40023800

08000d54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	; 0x28
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a19      	ldr	r2, [pc, #100]	; (8000dd8 <HAL_I2C_MspInit+0x84>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d12c      	bne.n	8000dd0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <HAL_I2C_MspInit+0x88>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	4a17      	ldr	r2, [pc, #92]	; (8000ddc <HAL_I2C_MspInit+0x88>)
 8000d80:	f043 0302 	orr.w	r3, r3, #2
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <HAL_I2C_MspInit+0x88>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d92:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d98:	2312      	movs	r3, #18
 8000d9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da0:	2300      	movs	r3, #0
 8000da2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000da4:	2304      	movs	r3, #4
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	4619      	mov	r1, r3
 8000dae:	480c      	ldr	r0, [pc, #48]	; (8000de0 <HAL_I2C_MspInit+0x8c>)
 8000db0:	f000 fbcc 	bl	800154c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000db4:	2300      	movs	r3, #0
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <HAL_I2C_MspInit+0x88>)
 8000dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbc:	4a07      	ldr	r2, [pc, #28]	; (8000ddc <HAL_I2C_MspInit+0x88>)
 8000dbe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dc2:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc4:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <HAL_I2C_MspInit+0x88>)
 8000dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000dd0:	bf00      	nop
 8000dd2:	3728      	adds	r7, #40	; 0x28
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40005400 	.word	0x40005400
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40020400 	.word	0x40020400

08000de4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08e      	sub	sp, #56	; 0x38
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a31      	ldr	r2, [pc, #196]	; (8000ed4 <HAL_I2S_MspInit+0xf0>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d15a      	bne.n	8000eca <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000e14:	2301      	movs	r3, #1
 8000e16:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000e18:	23c0      	movs	r3, #192	; 0xc0
 8000e1a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	4618      	mov	r0, r3
 8000e26:	f003 fbb1 	bl	800458c <HAL_RCCEx_PeriphCLKConfig>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000e30:	f7ff fe12 	bl	8000a58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e34:	2300      	movs	r3, #0
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	4b27      	ldr	r3, [pc, #156]	; (8000ed8 <HAL_I2S_MspInit+0xf4>)
 8000e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3c:	4a26      	ldr	r2, [pc, #152]	; (8000ed8 <HAL_I2S_MspInit+0xf4>)
 8000e3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e42:	6413      	str	r3, [r2, #64]	; 0x40
 8000e44:	4b24      	ldr	r3, [pc, #144]	; (8000ed8 <HAL_I2S_MspInit+0xf4>)
 8000e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e4c:	613b      	str	r3, [r7, #16]
 8000e4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e50:	2300      	movs	r3, #0
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	4b20      	ldr	r3, [pc, #128]	; (8000ed8 <HAL_I2S_MspInit+0xf4>)
 8000e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e58:	4a1f      	ldr	r2, [pc, #124]	; (8000ed8 <HAL_I2S_MspInit+0xf4>)
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e60:	4b1d      	ldr	r3, [pc, #116]	; (8000ed8 <HAL_I2S_MspInit+0xf4>)
 8000e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e64:	f003 0301 	and.w	r3, r3, #1
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <HAL_I2S_MspInit+0xf4>)
 8000e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e74:	4a18      	ldr	r2, [pc, #96]	; (8000ed8 <HAL_I2S_MspInit+0xf4>)
 8000e76:	f043 0304 	orr.w	r3, r3, #4
 8000e7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7c:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <HAL_I2S_MspInit+0xf4>)
 8000e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e80:	f003 0304 	and.w	r3, r3, #4
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000e88:	2310      	movs	r3, #16
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e94:	2300      	movs	r3, #0
 8000e96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e98:	2306      	movs	r3, #6
 8000e9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000e9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	480e      	ldr	r0, [pc, #56]	; (8000edc <HAL_I2S_MspInit+0xf8>)
 8000ea4:	f000 fb52 	bl	800154c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ea8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000eba:	2306      	movs	r3, #6
 8000ebc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ebe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4806      	ldr	r0, [pc, #24]	; (8000ee0 <HAL_I2S_MspInit+0xfc>)
 8000ec6:	f000 fb41 	bl	800154c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000eca:	bf00      	nop
 8000ecc:	3738      	adds	r7, #56	; 0x38
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40003c00 	.word	0x40003c00
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40020000 	.word	0x40020000
 8000ee0:	40020800 	.word	0x40020800

08000ee4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08c      	sub	sp, #48	; 0x30
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 031c 	add.w	r3, r7, #28
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a32      	ldr	r2, [pc, #200]	; (8000fcc <HAL_SPI_MspInit+0xe8>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d12c      	bne.n	8000f60 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	61bb      	str	r3, [r7, #24]
 8000f0a:	4b31      	ldr	r3, [pc, #196]	; (8000fd0 <HAL_SPI_MspInit+0xec>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0e:	4a30      	ldr	r2, [pc, #192]	; (8000fd0 <HAL_SPI_MspInit+0xec>)
 8000f10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f14:	6453      	str	r3, [r2, #68]	; 0x44
 8000f16:	4b2e      	ldr	r3, [pc, #184]	; (8000fd0 <HAL_SPI_MspInit+0xec>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f1e:	61bb      	str	r3, [r7, #24]
 8000f20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
 8000f26:	4b2a      	ldr	r3, [pc, #168]	; (8000fd0 <HAL_SPI_MspInit+0xec>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a29      	ldr	r2, [pc, #164]	; (8000fd0 <HAL_SPI_MspInit+0xec>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b27      	ldr	r3, [pc, #156]	; (8000fd0 <HAL_SPI_MspInit+0xec>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000f3e:	23e0      	movs	r3, #224	; 0xe0
 8000f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f4e:	2305      	movs	r3, #5
 8000f50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f52:	f107 031c 	add.w	r3, r7, #28
 8000f56:	4619      	mov	r1, r3
 8000f58:	481e      	ldr	r0, [pc, #120]	; (8000fd4 <HAL_SPI_MspInit+0xf0>)
 8000f5a:	f000 faf7 	bl	800154c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000f5e:	e031      	b.n	8000fc4 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a1c      	ldr	r2, [pc, #112]	; (8000fd8 <HAL_SPI_MspInit+0xf4>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d12c      	bne.n	8000fc4 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
 8000f6e:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <HAL_SPI_MspInit+0xec>)
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	4a17      	ldr	r2, [pc, #92]	; (8000fd0 <HAL_SPI_MspInit+0xec>)
 8000f74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f78:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7a:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <HAL_SPI_MspInit+0xec>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f82:	613b      	str	r3, [r7, #16]
 8000f84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <HAL_SPI_MspInit+0xec>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a10      	ldr	r2, [pc, #64]	; (8000fd0 <HAL_SPI_MspInit+0xec>)
 8000f90:	f043 0302 	orr.w	r3, r3, #2
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <HAL_SPI_MspInit+0xec>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000fa2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fb4:	2305      	movs	r3, #5
 8000fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb8:	f107 031c 	add.w	r3, r7, #28
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4807      	ldr	r0, [pc, #28]	; (8000fdc <HAL_SPI_MspInit+0xf8>)
 8000fc0:	f000 fac4 	bl	800154c <HAL_GPIO_Init>
}
 8000fc4:	bf00      	nop
 8000fc6:	3730      	adds	r7, #48	; 0x30
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40013000 	.word	0x40013000
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40020000 	.word	0x40020000
 8000fd8:	40003800 	.word	0x40003800
 8000fdc:	40020400 	.word	0x40020400

08000fe0 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08a      	sub	sp, #40	; 0x28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART2)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a28      	ldr	r2, [pc, #160]	; (80010a0 <HAL_USART_MspInit+0xc0>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d149      	bne.n	8001096 <HAL_USART_MspInit+0xb6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
 8001006:	4b27      	ldr	r3, [pc, #156]	; (80010a4 <HAL_USART_MspInit+0xc4>)
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	4a26      	ldr	r2, [pc, #152]	; (80010a4 <HAL_USART_MspInit+0xc4>)
 800100c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001010:	6413      	str	r3, [r2, #64]	; 0x40
 8001012:	4b24      	ldr	r3, [pc, #144]	; (80010a4 <HAL_USART_MspInit+0xc4>)
 8001014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	4b20      	ldr	r3, [pc, #128]	; (80010a4 <HAL_USART_MspInit+0xc4>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	4a1f      	ldr	r2, [pc, #124]	; (80010a4 <HAL_USART_MspInit+0xc4>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
 800102e:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <HAL_USART_MspInit+0xc4>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <HAL_USART_MspInit+0xc4>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a18      	ldr	r2, [pc, #96]	; (80010a4 <HAL_USART_MspInit+0xc4>)
 8001044:	f043 0308 	orr.w	r3, r3, #8
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <HAL_USART_MspInit+0xc4>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0308 	and.w	r3, r3, #8
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PD7     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001056:	230c      	movs	r3, #12
 8001058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001062:	2303      	movs	r3, #3
 8001064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001066:	2307      	movs	r3, #7
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106a:	f107 0314 	add.w	r3, r7, #20
 800106e:	4619      	mov	r1, r3
 8001070:	480d      	ldr	r0, [pc, #52]	; (80010a8 <HAL_USART_MspInit+0xc8>)
 8001072:	f000 fa6b 	bl	800154c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001076:	2380      	movs	r3, #128	; 0x80
 8001078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107a:	2302      	movs	r3, #2
 800107c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001082:	2303      	movs	r3, #3
 8001084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001086:	2307      	movs	r3, #7
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	4619      	mov	r1, r3
 8001090:	4806      	ldr	r0, [pc, #24]	; (80010ac <HAL_USART_MspInit+0xcc>)
 8001092:	f000 fa5b 	bl	800154c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001096:	bf00      	nop
 8001098:	3728      	adds	r7, #40	; 0x28
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40004400 	.word	0x40004400
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40020000 	.word	0x40020000
 80010ac:	40020c00 	.word	0x40020c00

080010b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <NMI_Handler+0x4>

080010b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ba:	e7fe      	b.n	80010ba <HardFault_Handler+0x4>

080010bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <MemManage_Handler+0x4>

080010c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010c6:	e7fe      	b.n	80010c6 <BusFault_Handler+0x4>

080010c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010cc:	e7fe      	b.n	80010cc <UsageFault_Handler+0x4>

080010ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010fc:	f000 f8d0 	bl	80012a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}

08001104 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001108:	4802      	ldr	r0, [pc, #8]	; (8001114 <OTG_FS_IRQHandler+0x10>)
 800110a:	f000 fe3f 	bl	8001d8c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	2000066c 	.word	0x2000066c

08001118 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001120:	4a14      	ldr	r2, [pc, #80]	; (8001174 <_sbrk+0x5c>)
 8001122:	4b15      	ldr	r3, [pc, #84]	; (8001178 <_sbrk+0x60>)
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800112c:	4b13      	ldr	r3, [pc, #76]	; (800117c <_sbrk+0x64>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d102      	bne.n	800113a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001134:	4b11      	ldr	r3, [pc, #68]	; (800117c <_sbrk+0x64>)
 8001136:	4a12      	ldr	r2, [pc, #72]	; (8001180 <_sbrk+0x68>)
 8001138:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800113a:	4b10      	ldr	r3, [pc, #64]	; (800117c <_sbrk+0x64>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4413      	add	r3, r2
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	429a      	cmp	r2, r3
 8001146:	d207      	bcs.n	8001158 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001148:	f006 ff92 	bl	8008070 <__errno>
 800114c:	4603      	mov	r3, r0
 800114e:	220c      	movs	r2, #12
 8001150:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001152:	f04f 33ff 	mov.w	r3, #4294967295
 8001156:	e009      	b.n	800116c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001158:	4b08      	ldr	r3, [pc, #32]	; (800117c <_sbrk+0x64>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800115e:	4b07      	ldr	r3, [pc, #28]	; (800117c <_sbrk+0x64>)
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4413      	add	r3, r2
 8001166:	4a05      	ldr	r2, [pc, #20]	; (800117c <_sbrk+0x64>)
 8001168:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800116a:	68fb      	ldr	r3, [r7, #12]
}
 800116c:	4618      	mov	r0, r3
 800116e:	3718      	adds	r7, #24
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20020000 	.word	0x20020000
 8001178:	00000400 	.word	0x00000400
 800117c:	20000288 	.word	0x20000288
 8001180:	20000980 	.word	0x20000980

08001184 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001188:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <SystemInit+0x20>)
 800118a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800118e:	4a05      	ldr	r2, [pc, #20]	; (80011a4 <SystemInit+0x20>)
 8001190:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001194:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011ac:	480d      	ldr	r0, [pc, #52]	; (80011e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011ae:	490e      	ldr	r1, [pc, #56]	; (80011e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011b0:	4a0e      	ldr	r2, [pc, #56]	; (80011ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b4:	e002      	b.n	80011bc <LoopCopyDataInit>

080011b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ba:	3304      	adds	r3, #4

080011bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c0:	d3f9      	bcc.n	80011b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011c2:	4a0b      	ldr	r2, [pc, #44]	; (80011f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011c4:	4c0b      	ldr	r4, [pc, #44]	; (80011f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c8:	e001      	b.n	80011ce <LoopFillZerobss>

080011ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011cc:	3204      	adds	r2, #4

080011ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d0:	d3fb      	bcc.n	80011ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011d2:	f7ff ffd7 	bl	8001184 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011d6:	f006 ff51 	bl	800807c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011da:	f7ff f977 	bl	80004cc <main>
  bx  lr    
 80011de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e8:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 80011ec:	08008334 	.word	0x08008334
  ldr r2, =_sbss
 80011f0:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 80011f4:	20000980 	.word	0x20000980

080011f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011f8:	e7fe      	b.n	80011f8 <ADC_IRQHandler>
	...

080011fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001200:	4b0e      	ldr	r3, [pc, #56]	; (800123c <HAL_Init+0x40>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a0d      	ldr	r2, [pc, #52]	; (800123c <HAL_Init+0x40>)
 8001206:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800120a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800120c:	4b0b      	ldr	r3, [pc, #44]	; (800123c <HAL_Init+0x40>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a0a      	ldr	r2, [pc, #40]	; (800123c <HAL_Init+0x40>)
 8001212:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001216:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001218:	4b08      	ldr	r3, [pc, #32]	; (800123c <HAL_Init+0x40>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a07      	ldr	r2, [pc, #28]	; (800123c <HAL_Init+0x40>)
 800121e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001222:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001224:	2003      	movs	r0, #3
 8001226:	f000 f94f 	bl	80014c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800122a:	2000      	movs	r0, #0
 800122c:	f000 f808 	bl	8001240 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001230:	f7ff fd68 	bl	8000d04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40023c00 	.word	0x40023c00

08001240 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <HAL_InitTick+0x54>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <HAL_InitTick+0x58>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	4619      	mov	r1, r3
 8001252:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001256:	fbb3 f3f1 	udiv	r3, r3, r1
 800125a:	fbb2 f3f3 	udiv	r3, r2, r3
 800125e:	4618      	mov	r0, r3
 8001260:	f000 f967 	bl	8001532 <HAL_SYSTICK_Config>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e00e      	b.n	800128c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2b0f      	cmp	r3, #15
 8001272:	d80a      	bhi.n	800128a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001274:	2200      	movs	r2, #0
 8001276:	6879      	ldr	r1, [r7, #4]
 8001278:	f04f 30ff 	mov.w	r0, #4294967295
 800127c:	f000 f92f 	bl	80014de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001280:	4a06      	ldr	r2, [pc, #24]	; (800129c <HAL_InitTick+0x5c>)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001286:	2300      	movs	r3, #0
 8001288:	e000      	b.n	800128c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
}
 800128c:	4618      	mov	r0, r3
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000028 	.word	0x20000028
 8001298:	20000030 	.word	0x20000030
 800129c:	2000002c 	.word	0x2000002c

080012a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012a4:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <HAL_IncTick+0x20>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	461a      	mov	r2, r3
 80012aa:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <HAL_IncTick+0x24>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4413      	add	r3, r2
 80012b0:	4a04      	ldr	r2, [pc, #16]	; (80012c4 <HAL_IncTick+0x24>)
 80012b2:	6013      	str	r3, [r2, #0]
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	20000030 	.word	0x20000030
 80012c4:	2000028c 	.word	0x2000028c

080012c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  return uwTick;
 80012cc:	4b03      	ldr	r3, [pc, #12]	; (80012dc <HAL_GetTick+0x14>)
 80012ce:	681b      	ldr	r3, [r3, #0]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	2000028c 	.word	0x2000028c

080012e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012e8:	f7ff ffee 	bl	80012c8 <HAL_GetTick>
 80012ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f8:	d005      	beq.n	8001306 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012fa:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <HAL_Delay+0x44>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	461a      	mov	r2, r3
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4413      	add	r3, r2
 8001304:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001306:	bf00      	nop
 8001308:	f7ff ffde 	bl	80012c8 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	429a      	cmp	r2, r3
 8001316:	d8f7      	bhi.n	8001308 <HAL_Delay+0x28>
  {
  }
}
 8001318:	bf00      	nop
 800131a:	bf00      	nop
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000030 	.word	0x20000030

08001328 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <__NVIC_SetPriorityGrouping+0x44>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800133e:	68ba      	ldr	r2, [r7, #8]
 8001340:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001344:	4013      	ands	r3, r2
 8001346:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001350:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001358:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800135a:	4a04      	ldr	r2, [pc, #16]	; (800136c <__NVIC_SetPriorityGrouping+0x44>)
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	60d3      	str	r3, [r2, #12]
}
 8001360:	bf00      	nop
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001374:	4b04      	ldr	r3, [pc, #16]	; (8001388 <__NVIC_GetPriorityGrouping+0x18>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	0a1b      	lsrs	r3, r3, #8
 800137a:	f003 0307 	and.w	r3, r3, #7
}
 800137e:	4618      	mov	r0, r3
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139a:	2b00      	cmp	r3, #0
 800139c:	db0b      	blt.n	80013b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	f003 021f 	and.w	r2, r3, #31
 80013a4:	4907      	ldr	r1, [pc, #28]	; (80013c4 <__NVIC_EnableIRQ+0x38>)
 80013a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013aa:	095b      	lsrs	r3, r3, #5
 80013ac:	2001      	movs	r0, #1
 80013ae:	fa00 f202 	lsl.w	r2, r0, r2
 80013b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	e000e100 	.word	0xe000e100

080013c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	6039      	str	r1, [r7, #0]
 80013d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	db0a      	blt.n	80013f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	490c      	ldr	r1, [pc, #48]	; (8001414 <__NVIC_SetPriority+0x4c>)
 80013e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e6:	0112      	lsls	r2, r2, #4
 80013e8:	b2d2      	uxtb	r2, r2
 80013ea:	440b      	add	r3, r1
 80013ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013f0:	e00a      	b.n	8001408 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	4908      	ldr	r1, [pc, #32]	; (8001418 <__NVIC_SetPriority+0x50>)
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	f003 030f 	and.w	r3, r3, #15
 80013fe:	3b04      	subs	r3, #4
 8001400:	0112      	lsls	r2, r2, #4
 8001402:	b2d2      	uxtb	r2, r2
 8001404:	440b      	add	r3, r1
 8001406:	761a      	strb	r2, [r3, #24]
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	e000e100 	.word	0xe000e100
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800141c:	b480      	push	{r7}
 800141e:	b089      	sub	sp, #36	; 0x24
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	f1c3 0307 	rsb	r3, r3, #7
 8001436:	2b04      	cmp	r3, #4
 8001438:	bf28      	it	cs
 800143a:	2304      	movcs	r3, #4
 800143c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	3304      	adds	r3, #4
 8001442:	2b06      	cmp	r3, #6
 8001444:	d902      	bls.n	800144c <NVIC_EncodePriority+0x30>
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	3b03      	subs	r3, #3
 800144a:	e000      	b.n	800144e <NVIC_EncodePriority+0x32>
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001450:	f04f 32ff 	mov.w	r2, #4294967295
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	43da      	mvns	r2, r3
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	401a      	ands	r2, r3
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001464:	f04f 31ff 	mov.w	r1, #4294967295
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	fa01 f303 	lsl.w	r3, r1, r3
 800146e:	43d9      	mvns	r1, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001474:	4313      	orrs	r3, r2
         );
}
 8001476:	4618      	mov	r0, r3
 8001478:	3724      	adds	r7, #36	; 0x24
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
	...

08001484 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3b01      	subs	r3, #1
 8001490:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001494:	d301      	bcc.n	800149a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001496:	2301      	movs	r3, #1
 8001498:	e00f      	b.n	80014ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800149a:	4a0a      	ldr	r2, [pc, #40]	; (80014c4 <SysTick_Config+0x40>)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3b01      	subs	r3, #1
 80014a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014a2:	210f      	movs	r1, #15
 80014a4:	f04f 30ff 	mov.w	r0, #4294967295
 80014a8:	f7ff ff8e 	bl	80013c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014ac:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <SysTick_Config+0x40>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014b2:	4b04      	ldr	r3, [pc, #16]	; (80014c4 <SysTick_Config+0x40>)
 80014b4:	2207      	movs	r2, #7
 80014b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	e000e010 	.word	0xe000e010

080014c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f7ff ff29 	bl	8001328 <__NVIC_SetPriorityGrouping>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014de:	b580      	push	{r7, lr}
 80014e0:	b086      	sub	sp, #24
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	4603      	mov	r3, r0
 80014e6:	60b9      	str	r1, [r7, #8]
 80014e8:	607a      	str	r2, [r7, #4]
 80014ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014f0:	f7ff ff3e 	bl	8001370 <__NVIC_GetPriorityGrouping>
 80014f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	68b9      	ldr	r1, [r7, #8]
 80014fa:	6978      	ldr	r0, [r7, #20]
 80014fc:	f7ff ff8e 	bl	800141c <NVIC_EncodePriority>
 8001500:	4602      	mov	r2, r0
 8001502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001506:	4611      	mov	r1, r2
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff ff5d 	bl	80013c8 <__NVIC_SetPriority>
}
 800150e:	bf00      	nop
 8001510:	3718      	adds	r7, #24
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
 800151c:	4603      	mov	r3, r0
 800151e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff ff31 	bl	800138c <__NVIC_EnableIRQ>
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b082      	sub	sp, #8
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7ff ffa2 	bl	8001484 <SysTick_Config>
 8001540:	4603      	mov	r3, r0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800154c:	b480      	push	{r7}
 800154e:	b089      	sub	sp, #36	; 0x24
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800155e:	2300      	movs	r3, #0
 8001560:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001562:	2300      	movs	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]
 8001566:	e16b      	b.n	8001840 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001568:	2201      	movs	r2, #1
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	697a      	ldr	r2, [r7, #20]
 8001578:	4013      	ands	r3, r2
 800157a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	429a      	cmp	r2, r3
 8001582:	f040 815a 	bne.w	800183a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f003 0303 	and.w	r3, r3, #3
 800158e:	2b01      	cmp	r3, #1
 8001590:	d005      	beq.n	800159e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800159a:	2b02      	cmp	r3, #2
 800159c:	d130      	bne.n	8001600 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	2203      	movs	r2, #3
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	43db      	mvns	r3, r3
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4013      	ands	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	68da      	ldr	r2, [r3, #12]
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015d4:	2201      	movs	r2, #1
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4013      	ands	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	091b      	lsrs	r3, r3, #4
 80015ea:	f003 0201 	and.w	r2, r3, #1
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 0303 	and.w	r3, r3, #3
 8001608:	2b03      	cmp	r3, #3
 800160a:	d017      	beq.n	800163c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	2203      	movs	r2, #3
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4013      	ands	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	689a      	ldr	r2, [r3, #8]
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	4313      	orrs	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f003 0303 	and.w	r3, r3, #3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d123      	bne.n	8001690 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	08da      	lsrs	r2, r3, #3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3208      	adds	r2, #8
 8001650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001654:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	f003 0307 	and.w	r3, r3, #7
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	220f      	movs	r2, #15
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	691a      	ldr	r2, [r3, #16]
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4313      	orrs	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	08da      	lsrs	r2, r3, #3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	3208      	adds	r2, #8
 800168a:	69b9      	ldr	r1, [r7, #24]
 800168c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	2203      	movs	r2, #3
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4013      	ands	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 0203 	and.w	r2, r3, #3
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f000 80b4 	beq.w	800183a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	4b60      	ldr	r3, [pc, #384]	; (8001858 <HAL_GPIO_Init+0x30c>)
 80016d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016da:	4a5f      	ldr	r2, [pc, #380]	; (8001858 <HAL_GPIO_Init+0x30c>)
 80016dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e0:	6453      	str	r3, [r2, #68]	; 0x44
 80016e2:	4b5d      	ldr	r3, [pc, #372]	; (8001858 <HAL_GPIO_Init+0x30c>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016ee:	4a5b      	ldr	r2, [pc, #364]	; (800185c <HAL_GPIO_Init+0x310>)
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	089b      	lsrs	r3, r3, #2
 80016f4:	3302      	adds	r3, #2
 80016f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	f003 0303 	and.w	r3, r3, #3
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	220f      	movs	r2, #15
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43db      	mvns	r3, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4013      	ands	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a52      	ldr	r2, [pc, #328]	; (8001860 <HAL_GPIO_Init+0x314>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d02b      	beq.n	8001772 <HAL_GPIO_Init+0x226>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a51      	ldr	r2, [pc, #324]	; (8001864 <HAL_GPIO_Init+0x318>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d025      	beq.n	800176e <HAL_GPIO_Init+0x222>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a50      	ldr	r2, [pc, #320]	; (8001868 <HAL_GPIO_Init+0x31c>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d01f      	beq.n	800176a <HAL_GPIO_Init+0x21e>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a4f      	ldr	r2, [pc, #316]	; (800186c <HAL_GPIO_Init+0x320>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d019      	beq.n	8001766 <HAL_GPIO_Init+0x21a>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a4e      	ldr	r2, [pc, #312]	; (8001870 <HAL_GPIO_Init+0x324>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d013      	beq.n	8001762 <HAL_GPIO_Init+0x216>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a4d      	ldr	r2, [pc, #308]	; (8001874 <HAL_GPIO_Init+0x328>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d00d      	beq.n	800175e <HAL_GPIO_Init+0x212>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a4c      	ldr	r2, [pc, #304]	; (8001878 <HAL_GPIO_Init+0x32c>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d007      	beq.n	800175a <HAL_GPIO_Init+0x20e>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a4b      	ldr	r2, [pc, #300]	; (800187c <HAL_GPIO_Init+0x330>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d101      	bne.n	8001756 <HAL_GPIO_Init+0x20a>
 8001752:	2307      	movs	r3, #7
 8001754:	e00e      	b.n	8001774 <HAL_GPIO_Init+0x228>
 8001756:	2308      	movs	r3, #8
 8001758:	e00c      	b.n	8001774 <HAL_GPIO_Init+0x228>
 800175a:	2306      	movs	r3, #6
 800175c:	e00a      	b.n	8001774 <HAL_GPIO_Init+0x228>
 800175e:	2305      	movs	r3, #5
 8001760:	e008      	b.n	8001774 <HAL_GPIO_Init+0x228>
 8001762:	2304      	movs	r3, #4
 8001764:	e006      	b.n	8001774 <HAL_GPIO_Init+0x228>
 8001766:	2303      	movs	r3, #3
 8001768:	e004      	b.n	8001774 <HAL_GPIO_Init+0x228>
 800176a:	2302      	movs	r3, #2
 800176c:	e002      	b.n	8001774 <HAL_GPIO_Init+0x228>
 800176e:	2301      	movs	r3, #1
 8001770:	e000      	b.n	8001774 <HAL_GPIO_Init+0x228>
 8001772:	2300      	movs	r3, #0
 8001774:	69fa      	ldr	r2, [r7, #28]
 8001776:	f002 0203 	and.w	r2, r2, #3
 800177a:	0092      	lsls	r2, r2, #2
 800177c:	4093      	lsls	r3, r2
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4313      	orrs	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001784:	4935      	ldr	r1, [pc, #212]	; (800185c <HAL_GPIO_Init+0x310>)
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	089b      	lsrs	r3, r3, #2
 800178a:	3302      	adds	r3, #2
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001792:	4b3b      	ldr	r3, [pc, #236]	; (8001880 <HAL_GPIO_Init+0x334>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	43db      	mvns	r3, r3
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	4013      	ands	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d003      	beq.n	80017b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017b6:	4a32      	ldr	r2, [pc, #200]	; (8001880 <HAL_GPIO_Init+0x334>)
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017bc:	4b30      	ldr	r3, [pc, #192]	; (8001880 <HAL_GPIO_Init+0x334>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	43db      	mvns	r3, r3
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	4013      	ands	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d003      	beq.n	80017e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	4313      	orrs	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017e0:	4a27      	ldr	r2, [pc, #156]	; (8001880 <HAL_GPIO_Init+0x334>)
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017e6:	4b26      	ldr	r3, [pc, #152]	; (8001880 <HAL_GPIO_Init+0x334>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	43db      	mvns	r3, r3
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4013      	ands	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d003      	beq.n	800180a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	4313      	orrs	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800180a:	4a1d      	ldr	r2, [pc, #116]	; (8001880 <HAL_GPIO_Init+0x334>)
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001810:	4b1b      	ldr	r3, [pc, #108]	; (8001880 <HAL_GPIO_Init+0x334>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	43db      	mvns	r3, r3
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4013      	ands	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d003      	beq.n	8001834 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	4313      	orrs	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001834:	4a12      	ldr	r2, [pc, #72]	; (8001880 <HAL_GPIO_Init+0x334>)
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	3301      	adds	r3, #1
 800183e:	61fb      	str	r3, [r7, #28]
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	2b0f      	cmp	r3, #15
 8001844:	f67f ae90 	bls.w	8001568 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001848:	bf00      	nop
 800184a:	bf00      	nop
 800184c:	3724      	adds	r7, #36	; 0x24
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	40023800 	.word	0x40023800
 800185c:	40013800 	.word	0x40013800
 8001860:	40020000 	.word	0x40020000
 8001864:	40020400 	.word	0x40020400
 8001868:	40020800 	.word	0x40020800
 800186c:	40020c00 	.word	0x40020c00
 8001870:	40021000 	.word	0x40021000
 8001874:	40021400 	.word	0x40021400
 8001878:	40021800 	.word	0x40021800
 800187c:	40021c00 	.word	0x40021c00
 8001880:	40013c00 	.word	0x40013c00

08001884 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	460b      	mov	r3, r1
 800188e:	807b      	strh	r3, [r7, #2]
 8001890:	4613      	mov	r3, r2
 8001892:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001894:	787b      	ldrb	r3, [r7, #1]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d003      	beq.n	80018a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800189a:	887a      	ldrh	r2, [r7, #2]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018a0:	e003      	b.n	80018aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018a2:	887b      	ldrh	r3, [r7, #2]
 80018a4:	041a      	lsls	r2, r3, #16
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	619a      	str	r2, [r3, #24]
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80018b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018b8:	b08f      	sub	sp, #60	; 0x3c
 80018ba:	af0a      	add	r7, sp, #40	; 0x28
 80018bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d101      	bne.n	80018c8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e054      	b.n	8001972 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d106      	bne.n	80018e8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f006 f968 	bl	8007bb8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2203      	movs	r2, #3
 80018ec:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d102      	bne.n	8001902 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f004 f95a 	bl	8005bc0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	603b      	str	r3, [r7, #0]
 8001912:	687e      	ldr	r6, [r7, #4]
 8001914:	466d      	mov	r5, sp
 8001916:	f106 0410 	add.w	r4, r6, #16
 800191a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800191c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800191e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001920:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001922:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001926:	e885 0003 	stmia.w	r5, {r0, r1}
 800192a:	1d33      	adds	r3, r6, #4
 800192c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800192e:	6838      	ldr	r0, [r7, #0]
 8001930:	f004 f8d4 	bl	8005adc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2101      	movs	r1, #1
 800193a:	4618      	mov	r0, r3
 800193c:	f004 f951 	bl	8005be2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	603b      	str	r3, [r7, #0]
 8001946:	687e      	ldr	r6, [r7, #4]
 8001948:	466d      	mov	r5, sp
 800194a:	f106 0410 	add.w	r4, r6, #16
 800194e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001950:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001952:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001954:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001956:	e894 0003 	ldmia.w	r4, {r0, r1}
 800195a:	e885 0003 	stmia.w	r5, {r0, r1}
 800195e:	1d33      	adds	r3, r6, #4
 8001960:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001962:	6838      	ldr	r0, [r7, #0]
 8001964:	f004 fada 	bl	8005f1c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800197a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800197a:	b590      	push	{r4, r7, lr}
 800197c:	b089      	sub	sp, #36	; 0x24
 800197e:	af04      	add	r7, sp, #16
 8001980:	6078      	str	r0, [r7, #4]
 8001982:	4608      	mov	r0, r1
 8001984:	4611      	mov	r1, r2
 8001986:	461a      	mov	r2, r3
 8001988:	4603      	mov	r3, r0
 800198a:	70fb      	strb	r3, [r7, #3]
 800198c:	460b      	mov	r3, r1
 800198e:	70bb      	strb	r3, [r7, #2]
 8001990:	4613      	mov	r3, r2
 8001992:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800199a:	2b01      	cmp	r3, #1
 800199c:	d101      	bne.n	80019a2 <HAL_HCD_HC_Init+0x28>
 800199e:	2302      	movs	r3, #2
 80019a0:	e076      	b.n	8001a90 <HAL_HCD_HC_Init+0x116>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2201      	movs	r2, #1
 80019a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80019aa:	78fb      	ldrb	r3, [r7, #3]
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	212c      	movs	r1, #44	; 0x2c
 80019b0:	fb01 f303 	mul.w	r3, r1, r3
 80019b4:	4413      	add	r3, r2
 80019b6:	333d      	adds	r3, #61	; 0x3d
 80019b8:	2200      	movs	r2, #0
 80019ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80019bc:	78fb      	ldrb	r3, [r7, #3]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	212c      	movs	r1, #44	; 0x2c
 80019c2:	fb01 f303 	mul.w	r3, r1, r3
 80019c6:	4413      	add	r3, r2
 80019c8:	3338      	adds	r3, #56	; 0x38
 80019ca:	787a      	ldrb	r2, [r7, #1]
 80019cc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80019ce:	78fb      	ldrb	r3, [r7, #3]
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	212c      	movs	r1, #44	; 0x2c
 80019d4:	fb01 f303 	mul.w	r3, r1, r3
 80019d8:	4413      	add	r3, r2
 80019da:	3340      	adds	r3, #64	; 0x40
 80019dc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80019de:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019e0:	78fb      	ldrb	r3, [r7, #3]
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	212c      	movs	r1, #44	; 0x2c
 80019e6:	fb01 f303 	mul.w	r3, r1, r3
 80019ea:	4413      	add	r3, r2
 80019ec:	3339      	adds	r3, #57	; 0x39
 80019ee:	78fa      	ldrb	r2, [r7, #3]
 80019f0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80019f2:	78fb      	ldrb	r3, [r7, #3]
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	212c      	movs	r1, #44	; 0x2c
 80019f8:	fb01 f303 	mul.w	r3, r1, r3
 80019fc:	4413      	add	r3, r2
 80019fe:	333f      	adds	r3, #63	; 0x3f
 8001a00:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001a04:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001a06:	78fb      	ldrb	r3, [r7, #3]
 8001a08:	78ba      	ldrb	r2, [r7, #2]
 8001a0a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a0e:	b2d0      	uxtb	r0, r2
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	212c      	movs	r1, #44	; 0x2c
 8001a14:	fb01 f303 	mul.w	r3, r1, r3
 8001a18:	4413      	add	r3, r2
 8001a1a:	333a      	adds	r3, #58	; 0x3a
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001a20:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	da09      	bge.n	8001a3c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001a28:	78fb      	ldrb	r3, [r7, #3]
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	212c      	movs	r1, #44	; 0x2c
 8001a2e:	fb01 f303 	mul.w	r3, r1, r3
 8001a32:	4413      	add	r3, r2
 8001a34:	333b      	adds	r3, #59	; 0x3b
 8001a36:	2201      	movs	r2, #1
 8001a38:	701a      	strb	r2, [r3, #0]
 8001a3a:	e008      	b.n	8001a4e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001a3c:	78fb      	ldrb	r3, [r7, #3]
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	212c      	movs	r1, #44	; 0x2c
 8001a42:	fb01 f303 	mul.w	r3, r1, r3
 8001a46:	4413      	add	r3, r2
 8001a48:	333b      	adds	r3, #59	; 0x3b
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001a4e:	78fb      	ldrb	r3, [r7, #3]
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	212c      	movs	r1, #44	; 0x2c
 8001a54:	fb01 f303 	mul.w	r3, r1, r3
 8001a58:	4413      	add	r3, r2
 8001a5a:	333c      	adds	r3, #60	; 0x3c
 8001a5c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a60:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6818      	ldr	r0, [r3, #0]
 8001a66:	787c      	ldrb	r4, [r7, #1]
 8001a68:	78ba      	ldrb	r2, [r7, #2]
 8001a6a:	78f9      	ldrb	r1, [r7, #3]
 8001a6c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a6e:	9302      	str	r3, [sp, #8]
 8001a70:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001a74:	9301      	str	r3, [sp, #4]
 8001a76:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	4623      	mov	r3, r4
 8001a7e:	f004 fba9 	bl	80061d4 <USB_HC_Init>
 8001a82:	4603      	mov	r3, r0
 8001a84:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3714      	adds	r7, #20
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd90      	pop	{r4, r7, pc}

08001a98 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d101      	bne.n	8001ab6 <HAL_HCD_HC_Halt+0x1e>
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	e00f      	b.n	8001ad6 <HAL_HCD_HC_Halt+0x3e>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	78fa      	ldrb	r2, [r7, #3]
 8001ac4:	4611      	mov	r1, r2
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f004 fdf9 	bl	80066be <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
	...

08001ae0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	4608      	mov	r0, r1
 8001aea:	4611      	mov	r1, r2
 8001aec:	461a      	mov	r2, r3
 8001aee:	4603      	mov	r3, r0
 8001af0:	70fb      	strb	r3, [r7, #3]
 8001af2:	460b      	mov	r3, r1
 8001af4:	70bb      	strb	r3, [r7, #2]
 8001af6:	4613      	mov	r3, r2
 8001af8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001afa:	78fb      	ldrb	r3, [r7, #3]
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	212c      	movs	r1, #44	; 0x2c
 8001b00:	fb01 f303 	mul.w	r3, r1, r3
 8001b04:	4413      	add	r3, r2
 8001b06:	333b      	adds	r3, #59	; 0x3b
 8001b08:	78ba      	ldrb	r2, [r7, #2]
 8001b0a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001b0c:	78fb      	ldrb	r3, [r7, #3]
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	212c      	movs	r1, #44	; 0x2c
 8001b12:	fb01 f303 	mul.w	r3, r1, r3
 8001b16:	4413      	add	r3, r2
 8001b18:	333f      	adds	r3, #63	; 0x3f
 8001b1a:	787a      	ldrb	r2, [r7, #1]
 8001b1c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001b1e:	7c3b      	ldrb	r3, [r7, #16]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d112      	bne.n	8001b4a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001b24:	78fb      	ldrb	r3, [r7, #3]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	212c      	movs	r1, #44	; 0x2c
 8001b2a:	fb01 f303 	mul.w	r3, r1, r3
 8001b2e:	4413      	add	r3, r2
 8001b30:	3342      	adds	r3, #66	; 0x42
 8001b32:	2203      	movs	r2, #3
 8001b34:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001b36:	78fb      	ldrb	r3, [r7, #3]
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	212c      	movs	r1, #44	; 0x2c
 8001b3c:	fb01 f303 	mul.w	r3, r1, r3
 8001b40:	4413      	add	r3, r2
 8001b42:	333d      	adds	r3, #61	; 0x3d
 8001b44:	7f3a      	ldrb	r2, [r7, #28]
 8001b46:	701a      	strb	r2, [r3, #0]
 8001b48:	e008      	b.n	8001b5c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b4a:	78fb      	ldrb	r3, [r7, #3]
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	212c      	movs	r1, #44	; 0x2c
 8001b50:	fb01 f303 	mul.w	r3, r1, r3
 8001b54:	4413      	add	r3, r2
 8001b56:	3342      	adds	r3, #66	; 0x42
 8001b58:	2202      	movs	r2, #2
 8001b5a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001b5c:	787b      	ldrb	r3, [r7, #1]
 8001b5e:	2b03      	cmp	r3, #3
 8001b60:	f200 80c6 	bhi.w	8001cf0 <HAL_HCD_HC_SubmitRequest+0x210>
 8001b64:	a201      	add	r2, pc, #4	; (adr r2, 8001b6c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b6a:	bf00      	nop
 8001b6c:	08001b7d 	.word	0x08001b7d
 8001b70:	08001cdd 	.word	0x08001cdd
 8001b74:	08001be1 	.word	0x08001be1
 8001b78:	08001c5f 	.word	0x08001c5f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001b7c:	7c3b      	ldrb	r3, [r7, #16]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	f040 80b8 	bne.w	8001cf4 <HAL_HCD_HC_SubmitRequest+0x214>
 8001b84:	78bb      	ldrb	r3, [r7, #2]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f040 80b4 	bne.w	8001cf4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001b8c:	8b3b      	ldrh	r3, [r7, #24]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d108      	bne.n	8001ba4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001b92:	78fb      	ldrb	r3, [r7, #3]
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	212c      	movs	r1, #44	; 0x2c
 8001b98:	fb01 f303 	mul.w	r3, r1, r3
 8001b9c:	4413      	add	r3, r2
 8001b9e:	3355      	adds	r3, #85	; 0x55
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ba4:	78fb      	ldrb	r3, [r7, #3]
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	212c      	movs	r1, #44	; 0x2c
 8001baa:	fb01 f303 	mul.w	r3, r1, r3
 8001bae:	4413      	add	r3, r2
 8001bb0:	3355      	adds	r3, #85	; 0x55
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d109      	bne.n	8001bcc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bb8:	78fb      	ldrb	r3, [r7, #3]
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	212c      	movs	r1, #44	; 0x2c
 8001bbe:	fb01 f303 	mul.w	r3, r1, r3
 8001bc2:	4413      	add	r3, r2
 8001bc4:	3342      	adds	r3, #66	; 0x42
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001bca:	e093      	b.n	8001cf4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bcc:	78fb      	ldrb	r3, [r7, #3]
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	212c      	movs	r1, #44	; 0x2c
 8001bd2:	fb01 f303 	mul.w	r3, r1, r3
 8001bd6:	4413      	add	r3, r2
 8001bd8:	3342      	adds	r3, #66	; 0x42
 8001bda:	2202      	movs	r2, #2
 8001bdc:	701a      	strb	r2, [r3, #0]
      break;
 8001bde:	e089      	b.n	8001cf4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001be0:	78bb      	ldrb	r3, [r7, #2]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d11d      	bne.n	8001c22 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001be6:	78fb      	ldrb	r3, [r7, #3]
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	212c      	movs	r1, #44	; 0x2c
 8001bec:	fb01 f303 	mul.w	r3, r1, r3
 8001bf0:	4413      	add	r3, r2
 8001bf2:	3355      	adds	r3, #85	; 0x55
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d109      	bne.n	8001c0e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bfa:	78fb      	ldrb	r3, [r7, #3]
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	212c      	movs	r1, #44	; 0x2c
 8001c00:	fb01 f303 	mul.w	r3, r1, r3
 8001c04:	4413      	add	r3, r2
 8001c06:	3342      	adds	r3, #66	; 0x42
 8001c08:	2200      	movs	r2, #0
 8001c0a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001c0c:	e073      	b.n	8001cf6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c0e:	78fb      	ldrb	r3, [r7, #3]
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	212c      	movs	r1, #44	; 0x2c
 8001c14:	fb01 f303 	mul.w	r3, r1, r3
 8001c18:	4413      	add	r3, r2
 8001c1a:	3342      	adds	r3, #66	; 0x42
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	701a      	strb	r2, [r3, #0]
      break;
 8001c20:	e069      	b.n	8001cf6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c22:	78fb      	ldrb	r3, [r7, #3]
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	212c      	movs	r1, #44	; 0x2c
 8001c28:	fb01 f303 	mul.w	r3, r1, r3
 8001c2c:	4413      	add	r3, r2
 8001c2e:	3354      	adds	r3, #84	; 0x54
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d109      	bne.n	8001c4a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c36:	78fb      	ldrb	r3, [r7, #3]
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	212c      	movs	r1, #44	; 0x2c
 8001c3c:	fb01 f303 	mul.w	r3, r1, r3
 8001c40:	4413      	add	r3, r2
 8001c42:	3342      	adds	r3, #66	; 0x42
 8001c44:	2200      	movs	r2, #0
 8001c46:	701a      	strb	r2, [r3, #0]
      break;
 8001c48:	e055      	b.n	8001cf6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c4a:	78fb      	ldrb	r3, [r7, #3]
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	212c      	movs	r1, #44	; 0x2c
 8001c50:	fb01 f303 	mul.w	r3, r1, r3
 8001c54:	4413      	add	r3, r2
 8001c56:	3342      	adds	r3, #66	; 0x42
 8001c58:	2202      	movs	r2, #2
 8001c5a:	701a      	strb	r2, [r3, #0]
      break;
 8001c5c:	e04b      	b.n	8001cf6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001c5e:	78bb      	ldrb	r3, [r7, #2]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d11d      	bne.n	8001ca0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c64:	78fb      	ldrb	r3, [r7, #3]
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	212c      	movs	r1, #44	; 0x2c
 8001c6a:	fb01 f303 	mul.w	r3, r1, r3
 8001c6e:	4413      	add	r3, r2
 8001c70:	3355      	adds	r3, #85	; 0x55
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d109      	bne.n	8001c8c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c78:	78fb      	ldrb	r3, [r7, #3]
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	212c      	movs	r1, #44	; 0x2c
 8001c7e:	fb01 f303 	mul.w	r3, r1, r3
 8001c82:	4413      	add	r3, r2
 8001c84:	3342      	adds	r3, #66	; 0x42
 8001c86:	2200      	movs	r2, #0
 8001c88:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001c8a:	e034      	b.n	8001cf6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c8c:	78fb      	ldrb	r3, [r7, #3]
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	212c      	movs	r1, #44	; 0x2c
 8001c92:	fb01 f303 	mul.w	r3, r1, r3
 8001c96:	4413      	add	r3, r2
 8001c98:	3342      	adds	r3, #66	; 0x42
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	701a      	strb	r2, [r3, #0]
      break;
 8001c9e:	e02a      	b.n	8001cf6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001ca0:	78fb      	ldrb	r3, [r7, #3]
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	212c      	movs	r1, #44	; 0x2c
 8001ca6:	fb01 f303 	mul.w	r3, r1, r3
 8001caa:	4413      	add	r3, r2
 8001cac:	3354      	adds	r3, #84	; 0x54
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d109      	bne.n	8001cc8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cb4:	78fb      	ldrb	r3, [r7, #3]
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	212c      	movs	r1, #44	; 0x2c
 8001cba:	fb01 f303 	mul.w	r3, r1, r3
 8001cbe:	4413      	add	r3, r2
 8001cc0:	3342      	adds	r3, #66	; 0x42
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	701a      	strb	r2, [r3, #0]
      break;
 8001cc6:	e016      	b.n	8001cf6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cc8:	78fb      	ldrb	r3, [r7, #3]
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	212c      	movs	r1, #44	; 0x2c
 8001cce:	fb01 f303 	mul.w	r3, r1, r3
 8001cd2:	4413      	add	r3, r2
 8001cd4:	3342      	adds	r3, #66	; 0x42
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	701a      	strb	r2, [r3, #0]
      break;
 8001cda:	e00c      	b.n	8001cf6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cdc:	78fb      	ldrb	r3, [r7, #3]
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	212c      	movs	r1, #44	; 0x2c
 8001ce2:	fb01 f303 	mul.w	r3, r1, r3
 8001ce6:	4413      	add	r3, r2
 8001ce8:	3342      	adds	r3, #66	; 0x42
 8001cea:	2200      	movs	r2, #0
 8001cec:	701a      	strb	r2, [r3, #0]
      break;
 8001cee:	e002      	b.n	8001cf6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001cf0:	bf00      	nop
 8001cf2:	e000      	b.n	8001cf6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001cf4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001cf6:	78fb      	ldrb	r3, [r7, #3]
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	212c      	movs	r1, #44	; 0x2c
 8001cfc:	fb01 f303 	mul.w	r3, r1, r3
 8001d00:	4413      	add	r3, r2
 8001d02:	3344      	adds	r3, #68	; 0x44
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001d08:	78fb      	ldrb	r3, [r7, #3]
 8001d0a:	8b3a      	ldrh	r2, [r7, #24]
 8001d0c:	6879      	ldr	r1, [r7, #4]
 8001d0e:	202c      	movs	r0, #44	; 0x2c
 8001d10:	fb00 f303 	mul.w	r3, r0, r3
 8001d14:	440b      	add	r3, r1
 8001d16:	334c      	adds	r3, #76	; 0x4c
 8001d18:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001d1a:	78fb      	ldrb	r3, [r7, #3]
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	212c      	movs	r1, #44	; 0x2c
 8001d20:	fb01 f303 	mul.w	r3, r1, r3
 8001d24:	4413      	add	r3, r2
 8001d26:	3360      	adds	r3, #96	; 0x60
 8001d28:	2200      	movs	r2, #0
 8001d2a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001d2c:	78fb      	ldrb	r3, [r7, #3]
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	212c      	movs	r1, #44	; 0x2c
 8001d32:	fb01 f303 	mul.w	r3, r1, r3
 8001d36:	4413      	add	r3, r2
 8001d38:	3350      	adds	r3, #80	; 0x50
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d3e:	78fb      	ldrb	r3, [r7, #3]
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	212c      	movs	r1, #44	; 0x2c
 8001d44:	fb01 f303 	mul.w	r3, r1, r3
 8001d48:	4413      	add	r3, r2
 8001d4a:	3339      	adds	r3, #57	; 0x39
 8001d4c:	78fa      	ldrb	r2, [r7, #3]
 8001d4e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001d50:	78fb      	ldrb	r3, [r7, #3]
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	212c      	movs	r1, #44	; 0x2c
 8001d56:	fb01 f303 	mul.w	r3, r1, r3
 8001d5a:	4413      	add	r3, r2
 8001d5c:	3361      	adds	r3, #97	; 0x61
 8001d5e:	2200      	movs	r2, #0
 8001d60:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6818      	ldr	r0, [r3, #0]
 8001d66:	78fb      	ldrb	r3, [r7, #3]
 8001d68:	222c      	movs	r2, #44	; 0x2c
 8001d6a:	fb02 f303 	mul.w	r3, r2, r3
 8001d6e:	3338      	adds	r3, #56	; 0x38
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	18d1      	adds	r1, r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	f004 fb4c 	bl	8006418 <USB_HC_StartXfer>
 8001d80:	4603      	mov	r3, r0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop

08001d8c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f004 f877 	bl	8005e96 <USB_GetMode>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	f040 80f6 	bne.w	8001f9c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f004 f85b 	bl	8005e70 <USB_ReadInterrupts>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f000 80ec 	beq.w	8001f9a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f004 f852 	bl	8005e70 <USB_ReadInterrupts>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001dd6:	d104      	bne.n	8001de2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001de0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f004 f842 	bl	8005e70 <USB_ReadInterrupts>
 8001dec:	4603      	mov	r3, r0
 8001dee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001df2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001df6:	d104      	bne.n	8001e02 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e00:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f004 f832 	bl	8005e70 <USB_ReadInterrupts>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e16:	d104      	bne.n	8001e22 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e20:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f004 f822 	bl	8005e70 <USB_ReadInterrupts>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d103      	bne.n	8001e3e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f004 f814 	bl	8005e70 <USB_ReadInterrupts>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e52:	d11c      	bne.n	8001e8e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001e5c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d10f      	bne.n	8001e8e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001e6e:	2110      	movs	r1, #16
 8001e70:	6938      	ldr	r0, [r7, #16]
 8001e72:	f003 ff03 	bl	8005c7c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001e76:	6938      	ldr	r0, [r7, #16]
 8001e78:	f003 ff34 	bl	8005ce4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2101      	movs	r1, #1
 8001e82:	4618      	mov	r0, r3
 8001e84:	f004 f90a 	bl	800609c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f005 ff13 	bl	8007cb4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f003 ffec 	bl	8005e70 <USB_ReadInterrupts>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e9e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ea2:	d102      	bne.n	8001eaa <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f001 f882 	bl	8002fae <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f003 ffde 	bl	8005e70 <USB_ReadInterrupts>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	f003 0308 	and.w	r3, r3, #8
 8001eba:	2b08      	cmp	r3, #8
 8001ebc:	d106      	bne.n	8001ecc <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f005 fedc 	bl	8007c7c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2208      	movs	r2, #8
 8001eca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f003 ffcd 	bl	8005e70 <USB_ReadInterrupts>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	f003 0310 	and.w	r3, r3, #16
 8001edc:	2b10      	cmp	r3, #16
 8001ede:	d101      	bne.n	8001ee4 <HAL_HCD_IRQHandler+0x158>
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e000      	b.n	8001ee6 <HAL_HCD_IRQHandler+0x15a>
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d012      	beq.n	8001f10 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	699a      	ldr	r2, [r3, #24]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 0210 	bic.w	r2, r2, #16
 8001ef8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 ff85 	bl	8002e0a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	699a      	ldr	r2, [r3, #24]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f042 0210 	orr.w	r2, r2, #16
 8001f0e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f003 ffab 	bl	8005e70 <USB_ReadInterrupts>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f24:	d13a      	bne.n	8001f9c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f004 fbb6 	bl	800669c <USB_HC_ReadInterrupt>
 8001f30:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f32:	2300      	movs	r3, #0
 8001f34:	617b      	str	r3, [r7, #20]
 8001f36:	e025      	b.n	8001f84 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	f003 030f 	and.w	r3, r3, #15
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	fa22 f303 	lsr.w	r3, r2, r3
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d018      	beq.n	8001f7e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	015a      	lsls	r2, r3, #5
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	4413      	add	r3, r2
 8001f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f62:	d106      	bne.n	8001f72 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	4619      	mov	r1, r3
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f88f 	bl	800208e <HCD_HC_IN_IRQHandler>
 8001f70:	e005      	b.n	8001f7e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	4619      	mov	r1, r3
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f000 fbdd 	bl	8002738 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	3301      	adds	r3, #1
 8001f82:	617b      	str	r3, [r7, #20]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	697a      	ldr	r2, [r7, #20]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d3d4      	bcc.n	8001f38 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f96:	615a      	str	r2, [r3, #20]
 8001f98:	e000      	b.n	8001f9c <HAL_HCD_IRQHandler+0x210>
      return;
 8001f9a:	bf00      	nop
    }
  }
}
 8001f9c:	3718      	adds	r7, #24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b082      	sub	sp, #8
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d101      	bne.n	8001fb8 <HAL_HCD_Start+0x16>
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	e013      	b.n	8001fe0 <HAL_HCD_Start+0x3e>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f004 f8a2 	bl	8006110 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f003 fde4 	bl	8005b9e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d101      	bne.n	8001ffe <HAL_HCD_Stop+0x16>
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	e00d      	b.n	800201a <HAL_HCD_Stop+0x32>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f004 fc90 	bl	8006930 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002022:	b480      	push	{r7}
 8002024:	b083      	sub	sp, #12
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
 800202a:	460b      	mov	r3, r1
 800202c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800202e:	78fb      	ldrb	r3, [r7, #3]
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	212c      	movs	r1, #44	; 0x2c
 8002034:	fb01 f303 	mul.w	r3, r1, r3
 8002038:	4413      	add	r3, r2
 800203a:	3360      	adds	r3, #96	; 0x60
 800203c:	781b      	ldrb	r3, [r3, #0]
}
 800203e:	4618      	mov	r0, r3
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800204a:	b480      	push	{r7}
 800204c:	b083      	sub	sp, #12
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
 8002052:	460b      	mov	r3, r1
 8002054:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002056:	78fb      	ldrb	r3, [r7, #3]
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	212c      	movs	r1, #44	; 0x2c
 800205c:	fb01 f303 	mul.w	r3, r1, r3
 8002060:	4413      	add	r3, r2
 8002062:	3350      	adds	r3, #80	; 0x50
 8002064:	681b      	ldr	r3, [r3, #0]
}
 8002066:	4618      	mov	r0, r3
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b082      	sub	sp, #8
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f004 f896 	bl	80061b0 <USB_GetCurrentFrame>
 8002084:	4603      	mov	r3, r0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b086      	sub	sp, #24
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
 8002096:	460b      	mov	r3, r1
 8002098:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80020a4:	78fb      	ldrb	r3, [r7, #3]
 80020a6:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	015a      	lsls	r2, r3, #5
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	4413      	add	r3, r2
 80020b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f003 0304 	and.w	r3, r3, #4
 80020ba:	2b04      	cmp	r3, #4
 80020bc:	d11a      	bne.n	80020f4 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	015a      	lsls	r2, r3, #5
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	4413      	add	r3, r2
 80020c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ca:	461a      	mov	r2, r3
 80020cc:	2304      	movs	r3, #4
 80020ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	212c      	movs	r1, #44	; 0x2c
 80020d6:	fb01 f303 	mul.w	r3, r1, r3
 80020da:	4413      	add	r3, r2
 80020dc:	3361      	adds	r3, #97	; 0x61
 80020de:	2206      	movs	r2, #6
 80020e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	4611      	mov	r1, r2
 80020ec:	4618      	mov	r0, r3
 80020ee:	f004 fae6 	bl	80066be <USB_HC_Halt>
 80020f2:	e0af      	b.n	8002254 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	015a      	lsls	r2, r3, #5
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	4413      	add	r3, r2
 80020fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002106:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800210a:	d11b      	bne.n	8002144 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	015a      	lsls	r2, r3, #5
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	4413      	add	r3, r2
 8002114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002118:	461a      	mov	r2, r3
 800211a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800211e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	212c      	movs	r1, #44	; 0x2c
 8002126:	fb01 f303 	mul.w	r3, r1, r3
 800212a:	4413      	add	r3, r2
 800212c:	3361      	adds	r3, #97	; 0x61
 800212e:	2207      	movs	r2, #7
 8002130:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	b2d2      	uxtb	r2, r2
 800213a:	4611      	mov	r1, r2
 800213c:	4618      	mov	r0, r3
 800213e:	f004 fabe 	bl	80066be <USB_HC_Halt>
 8002142:	e087      	b.n	8002254 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	015a      	lsls	r2, r3, #5
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	4413      	add	r3, r2
 800214c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 0320 	and.w	r3, r3, #32
 8002156:	2b20      	cmp	r3, #32
 8002158:	d109      	bne.n	800216e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	015a      	lsls	r2, r3, #5
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	4413      	add	r3, r2
 8002162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002166:	461a      	mov	r2, r3
 8002168:	2320      	movs	r3, #32
 800216a:	6093      	str	r3, [r2, #8]
 800216c:	e072      	b.n	8002254 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	015a      	lsls	r2, r3, #5
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	4413      	add	r3, r2
 8002176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f003 0308 	and.w	r3, r3, #8
 8002180:	2b08      	cmp	r3, #8
 8002182:	d11a      	bne.n	80021ba <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	015a      	lsls	r2, r3, #5
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	4413      	add	r3, r2
 800218c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002190:	461a      	mov	r2, r3
 8002192:	2308      	movs	r3, #8
 8002194:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	212c      	movs	r1, #44	; 0x2c
 800219c:	fb01 f303 	mul.w	r3, r1, r3
 80021a0:	4413      	add	r3, r2
 80021a2:	3361      	adds	r3, #97	; 0x61
 80021a4:	2205      	movs	r2, #5
 80021a6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	4611      	mov	r1, r2
 80021b2:	4618      	mov	r0, r3
 80021b4:	f004 fa83 	bl	80066be <USB_HC_Halt>
 80021b8:	e04c      	b.n	8002254 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	015a      	lsls	r2, r3, #5
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	4413      	add	r3, r2
 80021c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021d0:	d11b      	bne.n	800220a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	015a      	lsls	r2, r3, #5
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	4413      	add	r3, r2
 80021da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021de:	461a      	mov	r2, r3
 80021e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021e4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	212c      	movs	r1, #44	; 0x2c
 80021ec:	fb01 f303 	mul.w	r3, r1, r3
 80021f0:	4413      	add	r3, r2
 80021f2:	3361      	adds	r3, #97	; 0x61
 80021f4:	2208      	movs	r2, #8
 80021f6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	b2d2      	uxtb	r2, r2
 8002200:	4611      	mov	r1, r2
 8002202:	4618      	mov	r0, r3
 8002204:	f004 fa5b 	bl	80066be <USB_HC_Halt>
 8002208:	e024      	b.n	8002254 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	015a      	lsls	r2, r3, #5
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	4413      	add	r3, r2
 8002212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800221c:	2b80      	cmp	r3, #128	; 0x80
 800221e:	d119      	bne.n	8002254 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	015a      	lsls	r2, r3, #5
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	4413      	add	r3, r2
 8002228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800222c:	461a      	mov	r2, r3
 800222e:	2380      	movs	r3, #128	; 0x80
 8002230:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	212c      	movs	r1, #44	; 0x2c
 8002238:	fb01 f303 	mul.w	r3, r1, r3
 800223c:	4413      	add	r3, r2
 800223e:	3361      	adds	r3, #97	; 0x61
 8002240:	2206      	movs	r2, #6
 8002242:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	4611      	mov	r1, r2
 800224e:	4618      	mov	r0, r3
 8002250:	f004 fa35 	bl	80066be <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	015a      	lsls	r2, r3, #5
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	4413      	add	r3, r2
 800225c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002266:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800226a:	d112      	bne.n	8002292 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	4611      	mov	r1, r2
 8002276:	4618      	mov	r0, r3
 8002278:	f004 fa21 	bl	80066be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	015a      	lsls	r2, r3, #5
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	4413      	add	r3, r2
 8002284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002288:	461a      	mov	r2, r3
 800228a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800228e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002290:	e24e      	b.n	8002730 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	015a      	lsls	r2, r3, #5
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	4413      	add	r3, r2
 800229a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	f040 80df 	bne.w	8002468 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d019      	beq.n	80022e6 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	212c      	movs	r1, #44	; 0x2c
 80022b8:	fb01 f303 	mul.w	r3, r1, r3
 80022bc:	4413      	add	r3, r2
 80022be:	3348      	adds	r3, #72	; 0x48
 80022c0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	0159      	lsls	r1, r3, #5
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	440b      	add	r3, r1
 80022ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80022d4:	1ad2      	subs	r2, r2, r3
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	202c      	movs	r0, #44	; 0x2c
 80022dc:	fb00 f303 	mul.w	r3, r0, r3
 80022e0:	440b      	add	r3, r1
 80022e2:	3350      	adds	r3, #80	; 0x50
 80022e4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	212c      	movs	r1, #44	; 0x2c
 80022ec:	fb01 f303 	mul.w	r3, r1, r3
 80022f0:	4413      	add	r3, r2
 80022f2:	3361      	adds	r3, #97	; 0x61
 80022f4:	2201      	movs	r2, #1
 80022f6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	212c      	movs	r1, #44	; 0x2c
 80022fe:	fb01 f303 	mul.w	r3, r1, r3
 8002302:	4413      	add	r3, r2
 8002304:	335c      	adds	r3, #92	; 0x5c
 8002306:	2200      	movs	r2, #0
 8002308:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	015a      	lsls	r2, r3, #5
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	4413      	add	r3, r2
 8002312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002316:	461a      	mov	r2, r3
 8002318:	2301      	movs	r3, #1
 800231a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	212c      	movs	r1, #44	; 0x2c
 8002322:	fb01 f303 	mul.w	r3, r1, r3
 8002326:	4413      	add	r3, r2
 8002328:	333f      	adds	r3, #63	; 0x3f
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d009      	beq.n	8002344 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	212c      	movs	r1, #44	; 0x2c
 8002336:	fb01 f303 	mul.w	r3, r1, r3
 800233a:	4413      	add	r3, r2
 800233c:	333f      	adds	r3, #63	; 0x3f
 800233e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002340:	2b02      	cmp	r3, #2
 8002342:	d111      	bne.n	8002368 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	b2d2      	uxtb	r2, r2
 800234c:	4611      	mov	r1, r2
 800234e:	4618      	mov	r0, r3
 8002350:	f004 f9b5 	bl	80066be <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	015a      	lsls	r2, r3, #5
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	4413      	add	r3, r2
 800235c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002360:	461a      	mov	r2, r3
 8002362:	2310      	movs	r3, #16
 8002364:	6093      	str	r3, [r2, #8]
 8002366:	e03a      	b.n	80023de <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	212c      	movs	r1, #44	; 0x2c
 800236e:	fb01 f303 	mul.w	r3, r1, r3
 8002372:	4413      	add	r3, r2
 8002374:	333f      	adds	r3, #63	; 0x3f
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b03      	cmp	r3, #3
 800237a:	d009      	beq.n	8002390 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	212c      	movs	r1, #44	; 0x2c
 8002382:	fb01 f303 	mul.w	r3, r1, r3
 8002386:	4413      	add	r3, r2
 8002388:	333f      	adds	r3, #63	; 0x3f
 800238a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800238c:	2b01      	cmp	r3, #1
 800238e:	d126      	bne.n	80023de <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	015a      	lsls	r2, r3, #5
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	4413      	add	r3, r2
 8002398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	0151      	lsls	r1, r2, #5
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	440a      	add	r2, r1
 80023a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80023ae:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	212c      	movs	r1, #44	; 0x2c
 80023b6:	fb01 f303 	mul.w	r3, r1, r3
 80023ba:	4413      	add	r3, r2
 80023bc:	3360      	adds	r3, #96	; 0x60
 80023be:	2201      	movs	r2, #1
 80023c0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	b2d9      	uxtb	r1, r3
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	202c      	movs	r0, #44	; 0x2c
 80023cc:	fb00 f303 	mul.w	r3, r0, r3
 80023d0:	4413      	add	r3, r2
 80023d2:	3360      	adds	r3, #96	; 0x60
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	461a      	mov	r2, r3
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f005 fc79 	bl	8007cd0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d12b      	bne.n	800243e <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	212c      	movs	r1, #44	; 0x2c
 80023ec:	fb01 f303 	mul.w	r3, r1, r3
 80023f0:	4413      	add	r3, r2
 80023f2:	3348      	adds	r3, #72	; 0x48
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	202c      	movs	r0, #44	; 0x2c
 80023fc:	fb00 f202 	mul.w	r2, r0, r2
 8002400:	440a      	add	r2, r1
 8002402:	3240      	adds	r2, #64	; 0x40
 8002404:	8812      	ldrh	r2, [r2, #0]
 8002406:	fbb3 f3f2 	udiv	r3, r3, r2
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 818e 	beq.w	8002730 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	212c      	movs	r1, #44	; 0x2c
 800241a:	fb01 f303 	mul.w	r3, r1, r3
 800241e:	4413      	add	r3, r2
 8002420:	3354      	adds	r3, #84	; 0x54
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	f083 0301 	eor.w	r3, r3, #1
 8002428:	b2d8      	uxtb	r0, r3
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	212c      	movs	r1, #44	; 0x2c
 8002430:	fb01 f303 	mul.w	r3, r1, r3
 8002434:	4413      	add	r3, r2
 8002436:	3354      	adds	r3, #84	; 0x54
 8002438:	4602      	mov	r2, r0
 800243a:	701a      	strb	r2, [r3, #0]
}
 800243c:	e178      	b.n	8002730 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	212c      	movs	r1, #44	; 0x2c
 8002444:	fb01 f303 	mul.w	r3, r1, r3
 8002448:	4413      	add	r3, r2
 800244a:	3354      	adds	r3, #84	; 0x54
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	f083 0301 	eor.w	r3, r3, #1
 8002452:	b2d8      	uxtb	r0, r3
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	212c      	movs	r1, #44	; 0x2c
 800245a:	fb01 f303 	mul.w	r3, r1, r3
 800245e:	4413      	add	r3, r2
 8002460:	3354      	adds	r3, #84	; 0x54
 8002462:	4602      	mov	r2, r0
 8002464:	701a      	strb	r2, [r3, #0]
}
 8002466:	e163      	b.n	8002730 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	015a      	lsls	r2, r3, #5
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	4413      	add	r3, r2
 8002470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b02      	cmp	r3, #2
 800247c:	f040 80f6 	bne.w	800266c <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	212c      	movs	r1, #44	; 0x2c
 8002486:	fb01 f303 	mul.w	r3, r1, r3
 800248a:	4413      	add	r3, r2
 800248c:	3361      	adds	r3, #97	; 0x61
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d109      	bne.n	80024a8 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	212c      	movs	r1, #44	; 0x2c
 800249a:	fb01 f303 	mul.w	r3, r1, r3
 800249e:	4413      	add	r3, r2
 80024a0:	3360      	adds	r3, #96	; 0x60
 80024a2:	2201      	movs	r2, #1
 80024a4:	701a      	strb	r2, [r3, #0]
 80024a6:	e0c9      	b.n	800263c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	212c      	movs	r1, #44	; 0x2c
 80024ae:	fb01 f303 	mul.w	r3, r1, r3
 80024b2:	4413      	add	r3, r2
 80024b4:	3361      	adds	r3, #97	; 0x61
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b05      	cmp	r3, #5
 80024ba:	d109      	bne.n	80024d0 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	212c      	movs	r1, #44	; 0x2c
 80024c2:	fb01 f303 	mul.w	r3, r1, r3
 80024c6:	4413      	add	r3, r2
 80024c8:	3360      	adds	r3, #96	; 0x60
 80024ca:	2205      	movs	r2, #5
 80024cc:	701a      	strb	r2, [r3, #0]
 80024ce:	e0b5      	b.n	800263c <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	212c      	movs	r1, #44	; 0x2c
 80024d6:	fb01 f303 	mul.w	r3, r1, r3
 80024da:	4413      	add	r3, r2
 80024dc:	3361      	adds	r3, #97	; 0x61
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b06      	cmp	r3, #6
 80024e2:	d009      	beq.n	80024f8 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	212c      	movs	r1, #44	; 0x2c
 80024ea:	fb01 f303 	mul.w	r3, r1, r3
 80024ee:	4413      	add	r3, r2
 80024f0:	3361      	adds	r3, #97	; 0x61
 80024f2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80024f4:	2b08      	cmp	r3, #8
 80024f6:	d150      	bne.n	800259a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	212c      	movs	r1, #44	; 0x2c
 80024fe:	fb01 f303 	mul.w	r3, r1, r3
 8002502:	4413      	add	r3, r2
 8002504:	335c      	adds	r3, #92	; 0x5c
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	1c5a      	adds	r2, r3, #1
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	202c      	movs	r0, #44	; 0x2c
 8002510:	fb00 f303 	mul.w	r3, r0, r3
 8002514:	440b      	add	r3, r1
 8002516:	335c      	adds	r3, #92	; 0x5c
 8002518:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	212c      	movs	r1, #44	; 0x2c
 8002520:	fb01 f303 	mul.w	r3, r1, r3
 8002524:	4413      	add	r3, r2
 8002526:	335c      	adds	r3, #92	; 0x5c
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2b02      	cmp	r3, #2
 800252c:	d912      	bls.n	8002554 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	212c      	movs	r1, #44	; 0x2c
 8002534:	fb01 f303 	mul.w	r3, r1, r3
 8002538:	4413      	add	r3, r2
 800253a:	335c      	adds	r3, #92	; 0x5c
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	212c      	movs	r1, #44	; 0x2c
 8002546:	fb01 f303 	mul.w	r3, r1, r3
 800254a:	4413      	add	r3, r2
 800254c:	3360      	adds	r3, #96	; 0x60
 800254e:	2204      	movs	r2, #4
 8002550:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002552:	e073      	b.n	800263c <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	212c      	movs	r1, #44	; 0x2c
 800255a:	fb01 f303 	mul.w	r3, r1, r3
 800255e:	4413      	add	r3, r2
 8002560:	3360      	adds	r3, #96	; 0x60
 8002562:	2202      	movs	r2, #2
 8002564:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	015a      	lsls	r2, r3, #5
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	4413      	add	r3, r2
 800256e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800257c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002584:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	015a      	lsls	r2, r3, #5
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	4413      	add	r3, r2
 800258e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002592:	461a      	mov	r2, r3
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002598:	e050      	b.n	800263c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	212c      	movs	r1, #44	; 0x2c
 80025a0:	fb01 f303 	mul.w	r3, r1, r3
 80025a4:	4413      	add	r3, r2
 80025a6:	3361      	adds	r3, #97	; 0x61
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	2b03      	cmp	r3, #3
 80025ac:	d122      	bne.n	80025f4 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	212c      	movs	r1, #44	; 0x2c
 80025b4:	fb01 f303 	mul.w	r3, r1, r3
 80025b8:	4413      	add	r3, r2
 80025ba:	3360      	adds	r3, #96	; 0x60
 80025bc:	2202      	movs	r2, #2
 80025be:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	015a      	lsls	r2, r3, #5
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	4413      	add	r3, r2
 80025c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025d6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025de:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	015a      	lsls	r2, r3, #5
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	4413      	add	r3, r2
 80025e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ec:	461a      	mov	r2, r3
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	6013      	str	r3, [r2, #0]
 80025f2:	e023      	b.n	800263c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	212c      	movs	r1, #44	; 0x2c
 80025fa:	fb01 f303 	mul.w	r3, r1, r3
 80025fe:	4413      	add	r3, r2
 8002600:	3361      	adds	r3, #97	; 0x61
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b07      	cmp	r3, #7
 8002606:	d119      	bne.n	800263c <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	212c      	movs	r1, #44	; 0x2c
 800260e:	fb01 f303 	mul.w	r3, r1, r3
 8002612:	4413      	add	r3, r2
 8002614:	335c      	adds	r3, #92	; 0x5c
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	1c5a      	adds	r2, r3, #1
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	202c      	movs	r0, #44	; 0x2c
 8002620:	fb00 f303 	mul.w	r3, r0, r3
 8002624:	440b      	add	r3, r1
 8002626:	335c      	adds	r3, #92	; 0x5c
 8002628:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	212c      	movs	r1, #44	; 0x2c
 8002630:	fb01 f303 	mul.w	r3, r1, r3
 8002634:	4413      	add	r3, r2
 8002636:	3360      	adds	r3, #96	; 0x60
 8002638:	2204      	movs	r2, #4
 800263a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	015a      	lsls	r2, r3, #5
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	4413      	add	r3, r2
 8002644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002648:	461a      	mov	r2, r3
 800264a:	2302      	movs	r3, #2
 800264c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	b2d9      	uxtb	r1, r3
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	202c      	movs	r0, #44	; 0x2c
 8002658:	fb00 f303 	mul.w	r3, r0, r3
 800265c:	4413      	add	r3, r2
 800265e:	3360      	adds	r3, #96	; 0x60
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	461a      	mov	r2, r3
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f005 fb33 	bl	8007cd0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800266a:	e061      	b.n	8002730 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	015a      	lsls	r2, r3, #5
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	4413      	add	r3, r2
 8002674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 0310 	and.w	r3, r3, #16
 800267e:	2b10      	cmp	r3, #16
 8002680:	d156      	bne.n	8002730 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	212c      	movs	r1, #44	; 0x2c
 8002688:	fb01 f303 	mul.w	r3, r1, r3
 800268c:	4413      	add	r3, r2
 800268e:	333f      	adds	r3, #63	; 0x3f
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b03      	cmp	r3, #3
 8002694:	d111      	bne.n	80026ba <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	212c      	movs	r1, #44	; 0x2c
 800269c:	fb01 f303 	mul.w	r3, r1, r3
 80026a0:	4413      	add	r3, r2
 80026a2:	335c      	adds	r3, #92	; 0x5c
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	4611      	mov	r1, r2
 80026b2:	4618      	mov	r0, r3
 80026b4:	f004 f803 	bl	80066be <USB_HC_Halt>
 80026b8:	e031      	b.n	800271e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	212c      	movs	r1, #44	; 0x2c
 80026c0:	fb01 f303 	mul.w	r3, r1, r3
 80026c4:	4413      	add	r3, r2
 80026c6:	333f      	adds	r3, #63	; 0x3f
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d009      	beq.n	80026e2 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	212c      	movs	r1, #44	; 0x2c
 80026d4:	fb01 f303 	mul.w	r3, r1, r3
 80026d8:	4413      	add	r3, r2
 80026da:	333f      	adds	r3, #63	; 0x3f
 80026dc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d11d      	bne.n	800271e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	212c      	movs	r1, #44	; 0x2c
 80026e8:	fb01 f303 	mul.w	r3, r1, r3
 80026ec:	4413      	add	r3, r2
 80026ee:	335c      	adds	r3, #92	; 0x5c
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d110      	bne.n	800271e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	212c      	movs	r1, #44	; 0x2c
 8002702:	fb01 f303 	mul.w	r3, r1, r3
 8002706:	4413      	add	r3, r2
 8002708:	3361      	adds	r3, #97	; 0x61
 800270a:	2203      	movs	r2, #3
 800270c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	4611      	mov	r1, r2
 8002718:	4618      	mov	r0, r3
 800271a:	f003 ffd0 	bl	80066be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	015a      	lsls	r2, r3, #5
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	4413      	add	r3, r2
 8002726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800272a:	461a      	mov	r2, r3
 800272c:	2310      	movs	r3, #16
 800272e:	6093      	str	r3, [r2, #8]
}
 8002730:	bf00      	nop
 8002732:	3718      	adds	r7, #24
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b088      	sub	sp, #32
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	460b      	mov	r3, r1
 8002742:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800274e:	78fb      	ldrb	r3, [r7, #3]
 8002750:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	015a      	lsls	r2, r3, #5
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	4413      	add	r3, r2
 800275a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	2b04      	cmp	r3, #4
 8002766:	d11a      	bne.n	800279e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	015a      	lsls	r2, r3, #5
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	4413      	add	r3, r2
 8002770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002774:	461a      	mov	r2, r3
 8002776:	2304      	movs	r3, #4
 8002778:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	212c      	movs	r1, #44	; 0x2c
 8002780:	fb01 f303 	mul.w	r3, r1, r3
 8002784:	4413      	add	r3, r2
 8002786:	3361      	adds	r3, #97	; 0x61
 8002788:	2206      	movs	r2, #6
 800278a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	697a      	ldr	r2, [r7, #20]
 8002792:	b2d2      	uxtb	r2, r2
 8002794:	4611      	mov	r1, r2
 8002796:	4618      	mov	r0, r3
 8002798:	f003 ff91 	bl	80066be <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800279c:	e331      	b.n	8002e02 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	015a      	lsls	r2, r3, #5
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	4413      	add	r3, r2
 80027a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f003 0320 	and.w	r3, r3, #32
 80027b0:	2b20      	cmp	r3, #32
 80027b2:	d12e      	bne.n	8002812 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	015a      	lsls	r2, r3, #5
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	4413      	add	r3, r2
 80027bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c0:	461a      	mov	r2, r3
 80027c2:	2320      	movs	r3, #32
 80027c4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	212c      	movs	r1, #44	; 0x2c
 80027cc:	fb01 f303 	mul.w	r3, r1, r3
 80027d0:	4413      	add	r3, r2
 80027d2:	333d      	adds	r3, #61	; 0x3d
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	f040 8313 	bne.w	8002e02 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	212c      	movs	r1, #44	; 0x2c
 80027e2:	fb01 f303 	mul.w	r3, r1, r3
 80027e6:	4413      	add	r3, r2
 80027e8:	333d      	adds	r3, #61	; 0x3d
 80027ea:	2200      	movs	r2, #0
 80027ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	212c      	movs	r1, #44	; 0x2c
 80027f4:	fb01 f303 	mul.w	r3, r1, r3
 80027f8:	4413      	add	r3, r2
 80027fa:	3360      	adds	r3, #96	; 0x60
 80027fc:	2202      	movs	r2, #2
 80027fe:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	697a      	ldr	r2, [r7, #20]
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	4611      	mov	r1, r2
 800280a:	4618      	mov	r0, r3
 800280c:	f003 ff57 	bl	80066be <USB_HC_Halt>
}
 8002810:	e2f7      	b.n	8002e02 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	015a      	lsls	r2, r3, #5
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	4413      	add	r3, r2
 800281a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002828:	d112      	bne.n	8002850 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	015a      	lsls	r2, r3, #5
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	4413      	add	r3, r2
 8002832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002836:	461a      	mov	r2, r3
 8002838:	f44f 7300 	mov.w	r3, #512	; 0x200
 800283c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	b2d2      	uxtb	r2, r2
 8002846:	4611      	mov	r1, r2
 8002848:	4618      	mov	r0, r3
 800284a:	f003 ff38 	bl	80066be <USB_HC_Halt>
}
 800284e:	e2d8      	b.n	8002e02 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	015a      	lsls	r2, r3, #5
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	4413      	add	r3, r2
 8002858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b01      	cmp	r3, #1
 8002864:	d140      	bne.n	80028e8 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	212c      	movs	r1, #44	; 0x2c
 800286c:	fb01 f303 	mul.w	r3, r1, r3
 8002870:	4413      	add	r3, r2
 8002872:	335c      	adds	r3, #92	; 0x5c
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	015a      	lsls	r2, r3, #5
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	4413      	add	r3, r2
 8002880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800288a:	2b40      	cmp	r3, #64	; 0x40
 800288c:	d111      	bne.n	80028b2 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	212c      	movs	r1, #44	; 0x2c
 8002894:	fb01 f303 	mul.w	r3, r1, r3
 8002898:	4413      	add	r3, r2
 800289a:	333d      	adds	r3, #61	; 0x3d
 800289c:	2201      	movs	r2, #1
 800289e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	015a      	lsls	r2, r3, #5
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	4413      	add	r3, r2
 80028a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ac:	461a      	mov	r2, r3
 80028ae:	2340      	movs	r3, #64	; 0x40
 80028b0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	015a      	lsls	r2, r3, #5
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	4413      	add	r3, r2
 80028ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028be:	461a      	mov	r2, r3
 80028c0:	2301      	movs	r3, #1
 80028c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	212c      	movs	r1, #44	; 0x2c
 80028ca:	fb01 f303 	mul.w	r3, r1, r3
 80028ce:	4413      	add	r3, r2
 80028d0:	3361      	adds	r3, #97	; 0x61
 80028d2:	2201      	movs	r2, #1
 80028d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	b2d2      	uxtb	r2, r2
 80028de:	4611      	mov	r1, r2
 80028e0:	4618      	mov	r0, r3
 80028e2:	f003 feec 	bl	80066be <USB_HC_Halt>
}
 80028e6:	e28c      	b.n	8002e02 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	015a      	lsls	r2, r3, #5
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	4413      	add	r3, r2
 80028f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028fa:	2b40      	cmp	r3, #64	; 0x40
 80028fc:	d12c      	bne.n	8002958 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	212c      	movs	r1, #44	; 0x2c
 8002904:	fb01 f303 	mul.w	r3, r1, r3
 8002908:	4413      	add	r3, r2
 800290a:	3361      	adds	r3, #97	; 0x61
 800290c:	2204      	movs	r2, #4
 800290e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	212c      	movs	r1, #44	; 0x2c
 8002916:	fb01 f303 	mul.w	r3, r1, r3
 800291a:	4413      	add	r3, r2
 800291c:	333d      	adds	r3, #61	; 0x3d
 800291e:	2201      	movs	r2, #1
 8002920:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	212c      	movs	r1, #44	; 0x2c
 8002928:	fb01 f303 	mul.w	r3, r1, r3
 800292c:	4413      	add	r3, r2
 800292e:	335c      	adds	r3, #92	; 0x5c
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	4611      	mov	r1, r2
 800293e:	4618      	mov	r0, r3
 8002940:	f003 febd 	bl	80066be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	015a      	lsls	r2, r3, #5
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	4413      	add	r3, r2
 800294c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002950:	461a      	mov	r2, r3
 8002952:	2340      	movs	r3, #64	; 0x40
 8002954:	6093      	str	r3, [r2, #8]
}
 8002956:	e254      	b.n	8002e02 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	015a      	lsls	r2, r3, #5
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	4413      	add	r3, r2
 8002960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 0308 	and.w	r3, r3, #8
 800296a:	2b08      	cmp	r3, #8
 800296c:	d11a      	bne.n	80029a4 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	015a      	lsls	r2, r3, #5
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	4413      	add	r3, r2
 8002976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297a:	461a      	mov	r2, r3
 800297c:	2308      	movs	r3, #8
 800297e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	212c      	movs	r1, #44	; 0x2c
 8002986:	fb01 f303 	mul.w	r3, r1, r3
 800298a:	4413      	add	r3, r2
 800298c:	3361      	adds	r3, #97	; 0x61
 800298e:	2205      	movs	r2, #5
 8002990:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	4611      	mov	r1, r2
 800299c:	4618      	mov	r0, r3
 800299e:	f003 fe8e 	bl	80066be <USB_HC_Halt>
}
 80029a2:	e22e      	b.n	8002e02 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	015a      	lsls	r2, r3, #5
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	4413      	add	r3, r2
 80029ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 0310 	and.w	r3, r3, #16
 80029b6:	2b10      	cmp	r3, #16
 80029b8:	d140      	bne.n	8002a3c <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	212c      	movs	r1, #44	; 0x2c
 80029c0:	fb01 f303 	mul.w	r3, r1, r3
 80029c4:	4413      	add	r3, r2
 80029c6:	335c      	adds	r3, #92	; 0x5c
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	212c      	movs	r1, #44	; 0x2c
 80029d2:	fb01 f303 	mul.w	r3, r1, r3
 80029d6:	4413      	add	r3, r2
 80029d8:	3361      	adds	r3, #97	; 0x61
 80029da:	2203      	movs	r2, #3
 80029dc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	212c      	movs	r1, #44	; 0x2c
 80029e4:	fb01 f303 	mul.w	r3, r1, r3
 80029e8:	4413      	add	r3, r2
 80029ea:	333d      	adds	r3, #61	; 0x3d
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d112      	bne.n	8002a18 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	212c      	movs	r1, #44	; 0x2c
 80029f8:	fb01 f303 	mul.w	r3, r1, r3
 80029fc:	4413      	add	r3, r2
 80029fe:	333c      	adds	r3, #60	; 0x3c
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d108      	bne.n	8002a18 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	212c      	movs	r1, #44	; 0x2c
 8002a0c:	fb01 f303 	mul.w	r3, r1, r3
 8002a10:	4413      	add	r3, r2
 8002a12:	333d      	adds	r3, #61	; 0x3d
 8002a14:	2201      	movs	r2, #1
 8002a16:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	b2d2      	uxtb	r2, r2
 8002a20:	4611      	mov	r1, r2
 8002a22:	4618      	mov	r0, r3
 8002a24:	f003 fe4b 	bl	80066be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	015a      	lsls	r2, r3, #5
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	4413      	add	r3, r2
 8002a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a34:	461a      	mov	r2, r3
 8002a36:	2310      	movs	r3, #16
 8002a38:	6093      	str	r3, [r2, #8]
}
 8002a3a:	e1e2      	b.n	8002e02 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	015a      	lsls	r2, r3, #5
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	4413      	add	r3, r2
 8002a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a4e:	2b80      	cmp	r3, #128	; 0x80
 8002a50:	d164      	bne.n	8002b1c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d111      	bne.n	8002a7e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	212c      	movs	r1, #44	; 0x2c
 8002a60:	fb01 f303 	mul.w	r3, r1, r3
 8002a64:	4413      	add	r3, r2
 8002a66:	3361      	adds	r3, #97	; 0x61
 8002a68:	2206      	movs	r2, #6
 8002a6a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	b2d2      	uxtb	r2, r2
 8002a74:	4611      	mov	r1, r2
 8002a76:	4618      	mov	r0, r3
 8002a78:	f003 fe21 	bl	80066be <USB_HC_Halt>
 8002a7c:	e044      	b.n	8002b08 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	212c      	movs	r1, #44	; 0x2c
 8002a84:	fb01 f303 	mul.w	r3, r1, r3
 8002a88:	4413      	add	r3, r2
 8002a8a:	335c      	adds	r3, #92	; 0x5c
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	1c5a      	adds	r2, r3, #1
 8002a90:	6879      	ldr	r1, [r7, #4]
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	202c      	movs	r0, #44	; 0x2c
 8002a96:	fb00 f303 	mul.w	r3, r0, r3
 8002a9a:	440b      	add	r3, r1
 8002a9c:	335c      	adds	r3, #92	; 0x5c
 8002a9e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	212c      	movs	r1, #44	; 0x2c
 8002aa6:	fb01 f303 	mul.w	r3, r1, r3
 8002aaa:	4413      	add	r3, r2
 8002aac:	335c      	adds	r3, #92	; 0x5c
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d920      	bls.n	8002af6 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	212c      	movs	r1, #44	; 0x2c
 8002aba:	fb01 f303 	mul.w	r3, r1, r3
 8002abe:	4413      	add	r3, r2
 8002ac0:	335c      	adds	r3, #92	; 0x5c
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	212c      	movs	r1, #44	; 0x2c
 8002acc:	fb01 f303 	mul.w	r3, r1, r3
 8002ad0:	4413      	add	r3, r2
 8002ad2:	3360      	adds	r3, #96	; 0x60
 8002ad4:	2204      	movs	r2, #4
 8002ad6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	b2d9      	uxtb	r1, r3
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	202c      	movs	r0, #44	; 0x2c
 8002ae2:	fb00 f303 	mul.w	r3, r0, r3
 8002ae6:	4413      	add	r3, r2
 8002ae8:	3360      	adds	r3, #96	; 0x60
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	461a      	mov	r2, r3
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f005 f8ee 	bl	8007cd0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002af4:	e008      	b.n	8002b08 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	212c      	movs	r1, #44	; 0x2c
 8002afc:	fb01 f303 	mul.w	r3, r1, r3
 8002b00:	4413      	add	r3, r2
 8002b02:	3360      	adds	r3, #96	; 0x60
 8002b04:	2202      	movs	r2, #2
 8002b06:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	015a      	lsls	r2, r3, #5
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	4413      	add	r3, r2
 8002b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b14:	461a      	mov	r2, r3
 8002b16:	2380      	movs	r3, #128	; 0x80
 8002b18:	6093      	str	r3, [r2, #8]
}
 8002b1a:	e172      	b.n	8002e02 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	015a      	lsls	r2, r3, #5
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	4413      	add	r3, r2
 8002b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b32:	d11b      	bne.n	8002b6c <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	212c      	movs	r1, #44	; 0x2c
 8002b3a:	fb01 f303 	mul.w	r3, r1, r3
 8002b3e:	4413      	add	r3, r2
 8002b40:	3361      	adds	r3, #97	; 0x61
 8002b42:	2208      	movs	r2, #8
 8002b44:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	b2d2      	uxtb	r2, r2
 8002b4e:	4611      	mov	r1, r2
 8002b50:	4618      	mov	r0, r3
 8002b52:	f003 fdb4 	bl	80066be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	015a      	lsls	r2, r3, #5
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b62:	461a      	mov	r2, r3
 8002b64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b68:	6093      	str	r3, [r2, #8]
}
 8002b6a:	e14a      	b.n	8002e02 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	015a      	lsls	r2, r3, #5
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	4413      	add	r3, r2
 8002b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	f040 813f 	bne.w	8002e02 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	212c      	movs	r1, #44	; 0x2c
 8002b8a:	fb01 f303 	mul.w	r3, r1, r3
 8002b8e:	4413      	add	r3, r2
 8002b90:	3361      	adds	r3, #97	; 0x61
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d17d      	bne.n	8002c94 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	212c      	movs	r1, #44	; 0x2c
 8002b9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ba2:	4413      	add	r3, r2
 8002ba4:	3360      	adds	r3, #96	; 0x60
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	212c      	movs	r1, #44	; 0x2c
 8002bb0:	fb01 f303 	mul.w	r3, r1, r3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	333f      	adds	r3, #63	; 0x3f
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d00a      	beq.n	8002bd4 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	212c      	movs	r1, #44	; 0x2c
 8002bc4:	fb01 f303 	mul.w	r3, r1, r3
 8002bc8:	4413      	add	r3, r2
 8002bca:	333f      	adds	r3, #63	; 0x3f
 8002bcc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002bce:	2b03      	cmp	r3, #3
 8002bd0:	f040 8100 	bne.w	8002dd4 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d113      	bne.n	8002c04 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	212c      	movs	r1, #44	; 0x2c
 8002be2:	fb01 f303 	mul.w	r3, r1, r3
 8002be6:	4413      	add	r3, r2
 8002be8:	3355      	adds	r3, #85	; 0x55
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	f083 0301 	eor.w	r3, r3, #1
 8002bf0:	b2d8      	uxtb	r0, r3
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	212c      	movs	r1, #44	; 0x2c
 8002bf8:	fb01 f303 	mul.w	r3, r1, r3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	3355      	adds	r3, #85	; 0x55
 8002c00:	4602      	mov	r2, r0
 8002c02:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	f040 80e3 	bne.w	8002dd4 <HCD_HC_OUT_IRQHandler+0x69c>
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	212c      	movs	r1, #44	; 0x2c
 8002c14:	fb01 f303 	mul.w	r3, r1, r3
 8002c18:	4413      	add	r3, r2
 8002c1a:	334c      	adds	r3, #76	; 0x4c
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f000 80d8 	beq.w	8002dd4 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	212c      	movs	r1, #44	; 0x2c
 8002c2a:	fb01 f303 	mul.w	r3, r1, r3
 8002c2e:	4413      	add	r3, r2
 8002c30:	334c      	adds	r3, #76	; 0x4c
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6879      	ldr	r1, [r7, #4]
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	202c      	movs	r0, #44	; 0x2c
 8002c3a:	fb00 f202 	mul.w	r2, r0, r2
 8002c3e:	440a      	add	r2, r1
 8002c40:	3240      	adds	r2, #64	; 0x40
 8002c42:	8812      	ldrh	r2, [r2, #0]
 8002c44:	4413      	add	r3, r2
 8002c46:	3b01      	subs	r3, #1
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	202c      	movs	r0, #44	; 0x2c
 8002c4e:	fb00 f202 	mul.w	r2, r0, r2
 8002c52:	440a      	add	r2, r1
 8002c54:	3240      	adds	r2, #64	; 0x40
 8002c56:	8812      	ldrh	r2, [r2, #0]
 8002c58:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c5c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 80b5 	beq.w	8002dd4 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	212c      	movs	r1, #44	; 0x2c
 8002c70:	fb01 f303 	mul.w	r3, r1, r3
 8002c74:	4413      	add	r3, r2
 8002c76:	3355      	adds	r3, #85	; 0x55
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	f083 0301 	eor.w	r3, r3, #1
 8002c7e:	b2d8      	uxtb	r0, r3
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	212c      	movs	r1, #44	; 0x2c
 8002c86:	fb01 f303 	mul.w	r3, r1, r3
 8002c8a:	4413      	add	r3, r2
 8002c8c:	3355      	adds	r3, #85	; 0x55
 8002c8e:	4602      	mov	r2, r0
 8002c90:	701a      	strb	r2, [r3, #0]
 8002c92:	e09f      	b.n	8002dd4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	212c      	movs	r1, #44	; 0x2c
 8002c9a:	fb01 f303 	mul.w	r3, r1, r3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	3361      	adds	r3, #97	; 0x61
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	2b03      	cmp	r3, #3
 8002ca6:	d109      	bne.n	8002cbc <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	212c      	movs	r1, #44	; 0x2c
 8002cae:	fb01 f303 	mul.w	r3, r1, r3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	3360      	adds	r3, #96	; 0x60
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	701a      	strb	r2, [r3, #0]
 8002cba:	e08b      	b.n	8002dd4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	212c      	movs	r1, #44	; 0x2c
 8002cc2:	fb01 f303 	mul.w	r3, r1, r3
 8002cc6:	4413      	add	r3, r2
 8002cc8:	3361      	adds	r3, #97	; 0x61
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	d109      	bne.n	8002ce4 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	212c      	movs	r1, #44	; 0x2c
 8002cd6:	fb01 f303 	mul.w	r3, r1, r3
 8002cda:	4413      	add	r3, r2
 8002cdc:	3360      	adds	r3, #96	; 0x60
 8002cde:	2202      	movs	r2, #2
 8002ce0:	701a      	strb	r2, [r3, #0]
 8002ce2:	e077      	b.n	8002dd4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	212c      	movs	r1, #44	; 0x2c
 8002cea:	fb01 f303 	mul.w	r3, r1, r3
 8002cee:	4413      	add	r3, r2
 8002cf0:	3361      	adds	r3, #97	; 0x61
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	2b05      	cmp	r3, #5
 8002cf6:	d109      	bne.n	8002d0c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	212c      	movs	r1, #44	; 0x2c
 8002cfe:	fb01 f303 	mul.w	r3, r1, r3
 8002d02:	4413      	add	r3, r2
 8002d04:	3360      	adds	r3, #96	; 0x60
 8002d06:	2205      	movs	r2, #5
 8002d08:	701a      	strb	r2, [r3, #0]
 8002d0a:	e063      	b.n	8002dd4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	212c      	movs	r1, #44	; 0x2c
 8002d12:	fb01 f303 	mul.w	r3, r1, r3
 8002d16:	4413      	add	r3, r2
 8002d18:	3361      	adds	r3, #97	; 0x61
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	2b06      	cmp	r3, #6
 8002d1e:	d009      	beq.n	8002d34 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	212c      	movs	r1, #44	; 0x2c
 8002d26:	fb01 f303 	mul.w	r3, r1, r3
 8002d2a:	4413      	add	r3, r2
 8002d2c:	3361      	adds	r3, #97	; 0x61
 8002d2e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d30:	2b08      	cmp	r3, #8
 8002d32:	d14f      	bne.n	8002dd4 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	212c      	movs	r1, #44	; 0x2c
 8002d3a:	fb01 f303 	mul.w	r3, r1, r3
 8002d3e:	4413      	add	r3, r2
 8002d40:	335c      	adds	r3, #92	; 0x5c
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	1c5a      	adds	r2, r3, #1
 8002d46:	6879      	ldr	r1, [r7, #4]
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	202c      	movs	r0, #44	; 0x2c
 8002d4c:	fb00 f303 	mul.w	r3, r0, r3
 8002d50:	440b      	add	r3, r1
 8002d52:	335c      	adds	r3, #92	; 0x5c
 8002d54:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	212c      	movs	r1, #44	; 0x2c
 8002d5c:	fb01 f303 	mul.w	r3, r1, r3
 8002d60:	4413      	add	r3, r2
 8002d62:	335c      	adds	r3, #92	; 0x5c
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d912      	bls.n	8002d90 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	212c      	movs	r1, #44	; 0x2c
 8002d70:	fb01 f303 	mul.w	r3, r1, r3
 8002d74:	4413      	add	r3, r2
 8002d76:	335c      	adds	r3, #92	; 0x5c
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	212c      	movs	r1, #44	; 0x2c
 8002d82:	fb01 f303 	mul.w	r3, r1, r3
 8002d86:	4413      	add	r3, r2
 8002d88:	3360      	adds	r3, #96	; 0x60
 8002d8a:	2204      	movs	r2, #4
 8002d8c:	701a      	strb	r2, [r3, #0]
 8002d8e:	e021      	b.n	8002dd4 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	212c      	movs	r1, #44	; 0x2c
 8002d96:	fb01 f303 	mul.w	r3, r1, r3
 8002d9a:	4413      	add	r3, r2
 8002d9c:	3360      	adds	r3, #96	; 0x60
 8002d9e:	2202      	movs	r2, #2
 8002da0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	015a      	lsls	r2, r3, #5
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	4413      	add	r3, r2
 8002daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002db8:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002dc0:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	015a      	lsls	r2, r3, #5
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	4413      	add	r3, r2
 8002dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dce:	461a      	mov	r2, r3
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	015a      	lsls	r2, r3, #5
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	4413      	add	r3, r2
 8002ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de0:	461a      	mov	r2, r3
 8002de2:	2302      	movs	r3, #2
 8002de4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	b2d9      	uxtb	r1, r3
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	202c      	movs	r0, #44	; 0x2c
 8002df0:	fb00 f303 	mul.w	r3, r0, r3
 8002df4:	4413      	add	r3, r2
 8002df6:	3360      	adds	r3, #96	; 0x60
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f004 ff67 	bl	8007cd0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002e02:	bf00      	nop
 8002e04:	3720      	adds	r7, #32
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b08a      	sub	sp, #40	; 0x28
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	f003 030f 	and.w	r3, r3, #15
 8002e2a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	0c5b      	lsrs	r3, r3, #17
 8002e30:	f003 030f 	and.w	r3, r3, #15
 8002e34:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	091b      	lsrs	r3, r3, #4
 8002e3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e3e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d004      	beq.n	8002e50 <HCD_RXQLVL_IRQHandler+0x46>
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	2b05      	cmp	r3, #5
 8002e4a:	f000 80a9 	beq.w	8002fa0 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002e4e:	e0aa      	b.n	8002fa6 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 80a6 	beq.w	8002fa4 <HCD_RXQLVL_IRQHandler+0x19a>
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	212c      	movs	r1, #44	; 0x2c
 8002e5e:	fb01 f303 	mul.w	r3, r1, r3
 8002e62:	4413      	add	r3, r2
 8002e64:	3344      	adds	r3, #68	; 0x44
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 809b 	beq.w	8002fa4 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	212c      	movs	r1, #44	; 0x2c
 8002e74:	fb01 f303 	mul.w	r3, r1, r3
 8002e78:	4413      	add	r3, r2
 8002e7a:	3350      	adds	r3, #80	; 0x50
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	441a      	add	r2, r3
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	202c      	movs	r0, #44	; 0x2c
 8002e88:	fb00 f303 	mul.w	r3, r0, r3
 8002e8c:	440b      	add	r3, r1
 8002e8e:	334c      	adds	r3, #76	; 0x4c
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d87a      	bhi.n	8002f8c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6818      	ldr	r0, [r3, #0]
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	212c      	movs	r1, #44	; 0x2c
 8002ea0:	fb01 f303 	mul.w	r3, r1, r3
 8002ea4:	4413      	add	r3, r2
 8002ea6:	3344      	adds	r3, #68	; 0x44
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	b292      	uxth	r2, r2
 8002eae:	4619      	mov	r1, r3
 8002eb0:	f002 ff86 	bl	8005dc0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	212c      	movs	r1, #44	; 0x2c
 8002eba:	fb01 f303 	mul.w	r3, r1, r3
 8002ebe:	4413      	add	r3, r2
 8002ec0:	3344      	adds	r3, #68	; 0x44
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	441a      	add	r2, r3
 8002ec8:	6879      	ldr	r1, [r7, #4]
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	202c      	movs	r0, #44	; 0x2c
 8002ece:	fb00 f303 	mul.w	r3, r0, r3
 8002ed2:	440b      	add	r3, r1
 8002ed4:	3344      	adds	r3, #68	; 0x44
 8002ed6:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	212c      	movs	r1, #44	; 0x2c
 8002ede:	fb01 f303 	mul.w	r3, r1, r3
 8002ee2:	4413      	add	r3, r2
 8002ee4:	3350      	adds	r3, #80	; 0x50
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	441a      	add	r2, r3
 8002eec:	6879      	ldr	r1, [r7, #4]
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	202c      	movs	r0, #44	; 0x2c
 8002ef2:	fb00 f303 	mul.w	r3, r0, r3
 8002ef6:	440b      	add	r3, r1
 8002ef8:	3350      	adds	r3, #80	; 0x50
 8002efa:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	015a      	lsls	r2, r3, #5
 8002f00:	6a3b      	ldr	r3, [r7, #32]
 8002f02:	4413      	add	r3, r2
 8002f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	0cdb      	lsrs	r3, r3, #19
 8002f0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f10:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	212c      	movs	r1, #44	; 0x2c
 8002f18:	fb01 f303 	mul.w	r3, r1, r3
 8002f1c:	4413      	add	r3, r2
 8002f1e:	3340      	adds	r3, #64	; 0x40
 8002f20:	881b      	ldrh	r3, [r3, #0]
 8002f22:	461a      	mov	r2, r3
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d13c      	bne.n	8002fa4 <HCD_RXQLVL_IRQHandler+0x19a>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d039      	beq.n	8002fa4 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	015a      	lsls	r2, r3, #5
 8002f34:	6a3b      	ldr	r3, [r7, #32]
 8002f36:	4413      	add	r3, r2
 8002f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f46:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f4e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	015a      	lsls	r2, r3, #5
 8002f54:	6a3b      	ldr	r3, [r7, #32]
 8002f56:	4413      	add	r3, r2
 8002f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	212c      	movs	r1, #44	; 0x2c
 8002f68:	fb01 f303 	mul.w	r3, r1, r3
 8002f6c:	4413      	add	r3, r2
 8002f6e:	3354      	adds	r3, #84	; 0x54
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	f083 0301 	eor.w	r3, r3, #1
 8002f76:	b2d8      	uxtb	r0, r3
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	212c      	movs	r1, #44	; 0x2c
 8002f7e:	fb01 f303 	mul.w	r3, r1, r3
 8002f82:	4413      	add	r3, r2
 8002f84:	3354      	adds	r3, #84	; 0x54
 8002f86:	4602      	mov	r2, r0
 8002f88:	701a      	strb	r2, [r3, #0]
      break;
 8002f8a:	e00b      	b.n	8002fa4 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	212c      	movs	r1, #44	; 0x2c
 8002f92:	fb01 f303 	mul.w	r3, r1, r3
 8002f96:	4413      	add	r3, r2
 8002f98:	3360      	adds	r3, #96	; 0x60
 8002f9a:	2204      	movs	r2, #4
 8002f9c:	701a      	strb	r2, [r3, #0]
      break;
 8002f9e:	e001      	b.n	8002fa4 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002fa0:	bf00      	nop
 8002fa2:	e000      	b.n	8002fa6 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002fa4:	bf00      	nop
  }
}
 8002fa6:	bf00      	nop
 8002fa8:	3728      	adds	r7, #40	; 0x28
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b086      	sub	sp, #24
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002fda:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d10b      	bne.n	8002ffe <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d102      	bne.n	8002ff6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f004 fe51 	bl	8007c98 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	f043 0302 	orr.w	r3, r3, #2
 8002ffc:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f003 0308 	and.w	r3, r3, #8
 8003004:	2b08      	cmp	r3, #8
 8003006:	d132      	bne.n	800306e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	f043 0308 	orr.w	r3, r3, #8
 800300e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f003 0304 	and.w	r3, r3, #4
 8003016:	2b04      	cmp	r3, #4
 8003018:	d126      	bne.n	8003068 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	2b02      	cmp	r3, #2
 8003020:	d113      	bne.n	800304a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003028:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800302c:	d106      	bne.n	800303c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2102      	movs	r1, #2
 8003034:	4618      	mov	r0, r3
 8003036:	f003 f831 	bl	800609c <USB_InitFSLSPClkSel>
 800303a:	e011      	b.n	8003060 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2101      	movs	r1, #1
 8003042:	4618      	mov	r0, r3
 8003044:	f003 f82a 	bl	800609c <USB_InitFSLSPClkSel>
 8003048:	e00a      	b.n	8003060 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d106      	bne.n	8003060 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003058:	461a      	mov	r2, r3
 800305a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800305e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f004 fe43 	bl	8007cec <HAL_HCD_PortEnabled_Callback>
 8003066:	e002      	b.n	800306e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f004 fe4d 	bl	8007d08 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f003 0320 	and.w	r3, r3, #32
 8003074:	2b20      	cmp	r3, #32
 8003076:	d103      	bne.n	8003080 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	f043 0320 	orr.w	r3, r3, #32
 800307e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003086:	461a      	mov	r2, r3
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	6013      	str	r3, [r2, #0]
}
 800308c:	bf00      	nop
 800308e:	3718      	adds	r7, #24
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e12b      	b.n	80032fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d106      	bne.n	80030c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7fd fe4a 	bl	8000d54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2224      	movs	r2, #36	; 0x24
 80030c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 0201 	bic.w	r2, r2, #1
 80030d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030f8:	f001 fa20 	bl	800453c <HAL_RCC_GetPCLK1Freq>
 80030fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	4a81      	ldr	r2, [pc, #516]	; (8003308 <HAL_I2C_Init+0x274>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d807      	bhi.n	8003118 <HAL_I2C_Init+0x84>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	4a80      	ldr	r2, [pc, #512]	; (800330c <HAL_I2C_Init+0x278>)
 800310c:	4293      	cmp	r3, r2
 800310e:	bf94      	ite	ls
 8003110:	2301      	movls	r3, #1
 8003112:	2300      	movhi	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	e006      	b.n	8003126 <HAL_I2C_Init+0x92>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	4a7d      	ldr	r2, [pc, #500]	; (8003310 <HAL_I2C_Init+0x27c>)
 800311c:	4293      	cmp	r3, r2
 800311e:	bf94      	ite	ls
 8003120:	2301      	movls	r3, #1
 8003122:	2300      	movhi	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e0e7      	b.n	80032fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	4a78      	ldr	r2, [pc, #480]	; (8003314 <HAL_I2C_Init+0x280>)
 8003132:	fba2 2303 	umull	r2, r3, r2, r3
 8003136:	0c9b      	lsrs	r3, r3, #18
 8003138:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68ba      	ldr	r2, [r7, #8]
 800314a:	430a      	orrs	r2, r1
 800314c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	4a6a      	ldr	r2, [pc, #424]	; (8003308 <HAL_I2C_Init+0x274>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d802      	bhi.n	8003168 <HAL_I2C_Init+0xd4>
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	3301      	adds	r3, #1
 8003166:	e009      	b.n	800317c <HAL_I2C_Init+0xe8>
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800316e:	fb02 f303 	mul.w	r3, r2, r3
 8003172:	4a69      	ldr	r2, [pc, #420]	; (8003318 <HAL_I2C_Init+0x284>)
 8003174:	fba2 2303 	umull	r2, r3, r2, r3
 8003178:	099b      	lsrs	r3, r3, #6
 800317a:	3301      	adds	r3, #1
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	6812      	ldr	r2, [r2, #0]
 8003180:	430b      	orrs	r3, r1
 8003182:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800318e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	495c      	ldr	r1, [pc, #368]	; (8003308 <HAL_I2C_Init+0x274>)
 8003198:	428b      	cmp	r3, r1
 800319a:	d819      	bhi.n	80031d0 <HAL_I2C_Init+0x13c>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	1e59      	subs	r1, r3, #1
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80031aa:	1c59      	adds	r1, r3, #1
 80031ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031b0:	400b      	ands	r3, r1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00a      	beq.n	80031cc <HAL_I2C_Init+0x138>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	1e59      	subs	r1, r3, #1
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80031c4:	3301      	adds	r3, #1
 80031c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ca:	e051      	b.n	8003270 <HAL_I2C_Init+0x1dc>
 80031cc:	2304      	movs	r3, #4
 80031ce:	e04f      	b.n	8003270 <HAL_I2C_Init+0x1dc>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d111      	bne.n	80031fc <HAL_I2C_Init+0x168>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	1e58      	subs	r0, r3, #1
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6859      	ldr	r1, [r3, #4]
 80031e0:	460b      	mov	r3, r1
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	440b      	add	r3, r1
 80031e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ea:	3301      	adds	r3, #1
 80031ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	bf0c      	ite	eq
 80031f4:	2301      	moveq	r3, #1
 80031f6:	2300      	movne	r3, #0
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	e012      	b.n	8003222 <HAL_I2C_Init+0x18e>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	1e58      	subs	r0, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6859      	ldr	r1, [r3, #4]
 8003204:	460b      	mov	r3, r1
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	0099      	lsls	r1, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003212:	3301      	adds	r3, #1
 8003214:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003218:	2b00      	cmp	r3, #0
 800321a:	bf0c      	ite	eq
 800321c:	2301      	moveq	r3, #1
 800321e:	2300      	movne	r3, #0
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <HAL_I2C_Init+0x196>
 8003226:	2301      	movs	r3, #1
 8003228:	e022      	b.n	8003270 <HAL_I2C_Init+0x1dc>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10e      	bne.n	8003250 <HAL_I2C_Init+0x1bc>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	1e58      	subs	r0, r3, #1
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6859      	ldr	r1, [r3, #4]
 800323a:	460b      	mov	r3, r1
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	440b      	add	r3, r1
 8003240:	fbb0 f3f3 	udiv	r3, r0, r3
 8003244:	3301      	adds	r3, #1
 8003246:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800324a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800324e:	e00f      	b.n	8003270 <HAL_I2C_Init+0x1dc>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	1e58      	subs	r0, r3, #1
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6859      	ldr	r1, [r3, #4]
 8003258:	460b      	mov	r3, r1
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	440b      	add	r3, r1
 800325e:	0099      	lsls	r1, r3, #2
 8003260:	440b      	add	r3, r1
 8003262:	fbb0 f3f3 	udiv	r3, r0, r3
 8003266:	3301      	adds	r3, #1
 8003268:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800326c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	6809      	ldr	r1, [r1, #0]
 8003274:	4313      	orrs	r3, r2
 8003276:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	69da      	ldr	r2, [r3, #28]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	431a      	orrs	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	430a      	orrs	r2, r1
 8003292:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800329e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	6911      	ldr	r1, [r2, #16]
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	68d2      	ldr	r2, [r2, #12]
 80032aa:	4311      	orrs	r1, r2
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	6812      	ldr	r2, [r2, #0]
 80032b0:	430b      	orrs	r3, r1
 80032b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	695a      	ldr	r2, [r3, #20]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	431a      	orrs	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f042 0201 	orr.w	r2, r2, #1
 80032de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2220      	movs	r2, #32
 80032ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	000186a0 	.word	0x000186a0
 800330c:	001e847f 	.word	0x001e847f
 8003310:	003d08ff 	.word	0x003d08ff
 8003314:	431bde83 	.word	0x431bde83
 8003318:	10624dd3 	.word	0x10624dd3

0800331c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b088      	sub	sp, #32
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e128      	b.n	8003580 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d109      	bne.n	800334e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a90      	ldr	r2, [pc, #576]	; (8003588 <HAL_I2S_Init+0x26c>)
 8003346:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f7fd fd4b 	bl	8000de4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2202      	movs	r2, #2
 8003352:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	69db      	ldr	r3, [r3, #28]
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	6812      	ldr	r2, [r2, #0]
 8003360:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003364:	f023 030f 	bic.w	r3, r3, #15
 8003368:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2202      	movs	r2, #2
 8003370:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	2b02      	cmp	r3, #2
 8003378:	d060      	beq.n	800343c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d102      	bne.n	8003388 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003382:	2310      	movs	r3, #16
 8003384:	617b      	str	r3, [r7, #20]
 8003386:	e001      	b.n	800338c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003388:	2320      	movs	r3, #32
 800338a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	2b20      	cmp	r3, #32
 8003392:	d802      	bhi.n	800339a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800339a:	2001      	movs	r0, #1
 800339c:	f001 f9d8 	bl	8004750 <HAL_RCCEx_GetPeriphCLKFreq>
 80033a0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033aa:	d125      	bne.n	80033f8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d010      	beq.n	80033d6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80033be:	4613      	mov	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4413      	add	r3, r2
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	461a      	mov	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d0:	3305      	adds	r3, #5
 80033d2:	613b      	str	r3, [r7, #16]
 80033d4:	e01f      	b.n	8003416 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80033e0:	4613      	mov	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	461a      	mov	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f2:	3305      	adds	r3, #5
 80033f4:	613b      	str	r3, [r7, #16]
 80033f6:	e00e      	b.n	8003416 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003400:	4613      	mov	r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4413      	add	r3, r2
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	461a      	mov	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003412:	3305      	adds	r3, #5
 8003414:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	4a5c      	ldr	r2, [pc, #368]	; (800358c <HAL_I2S_Init+0x270>)
 800341a:	fba2 2303 	umull	r2, r3, r2, r3
 800341e:	08db      	lsrs	r3, r3, #3
 8003420:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	085b      	lsrs	r3, r3, #1
 8003432:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	021b      	lsls	r3, r3, #8
 8003438:	61bb      	str	r3, [r7, #24]
 800343a:	e003      	b.n	8003444 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800343c:	2302      	movs	r3, #2
 800343e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003440:	2300      	movs	r3, #0
 8003442:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d902      	bls.n	8003450 <HAL_I2S_Init+0x134>
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	2bff      	cmp	r3, #255	; 0xff
 800344e:	d907      	bls.n	8003460 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003454:	f043 0210 	orr.w	r2, r3, #16
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e08f      	b.n	8003580 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	691a      	ldr	r2, [r3, #16]
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	ea42 0103 	orr.w	r1, r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	69fa      	ldr	r2, [r7, #28]
 8003470:	430a      	orrs	r2, r1
 8003472:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800347e:	f023 030f 	bic.w	r3, r3, #15
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	6851      	ldr	r1, [r2, #4]
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	6892      	ldr	r2, [r2, #8]
 800348a:	4311      	orrs	r1, r2
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	68d2      	ldr	r2, [r2, #12]
 8003490:	4311      	orrs	r1, r2
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6992      	ldr	r2, [r2, #24]
 8003496:	430a      	orrs	r2, r1
 8003498:	431a      	orrs	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034a2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d161      	bne.n	8003570 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a38      	ldr	r2, [pc, #224]	; (8003590 <HAL_I2S_Init+0x274>)
 80034b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a37      	ldr	r2, [pc, #220]	; (8003594 <HAL_I2S_Init+0x278>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d101      	bne.n	80034c0 <HAL_I2S_Init+0x1a4>
 80034bc:	4b36      	ldr	r3, [pc, #216]	; (8003598 <HAL_I2S_Init+0x27c>)
 80034be:	e001      	b.n	80034c4 <HAL_I2S_Init+0x1a8>
 80034c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	6812      	ldr	r2, [r2, #0]
 80034ca:	4932      	ldr	r1, [pc, #200]	; (8003594 <HAL_I2S_Init+0x278>)
 80034cc:	428a      	cmp	r2, r1
 80034ce:	d101      	bne.n	80034d4 <HAL_I2S_Init+0x1b8>
 80034d0:	4a31      	ldr	r2, [pc, #196]	; (8003598 <HAL_I2S_Init+0x27c>)
 80034d2:	e001      	b.n	80034d8 <HAL_I2S_Init+0x1bc>
 80034d4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80034d8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80034dc:	f023 030f 	bic.w	r3, r3, #15
 80034e0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a2b      	ldr	r2, [pc, #172]	; (8003594 <HAL_I2S_Init+0x278>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d101      	bne.n	80034f0 <HAL_I2S_Init+0x1d4>
 80034ec:	4b2a      	ldr	r3, [pc, #168]	; (8003598 <HAL_I2S_Init+0x27c>)
 80034ee:	e001      	b.n	80034f4 <HAL_I2S_Init+0x1d8>
 80034f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034f4:	2202      	movs	r2, #2
 80034f6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a25      	ldr	r2, [pc, #148]	; (8003594 <HAL_I2S_Init+0x278>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d101      	bne.n	8003506 <HAL_I2S_Init+0x1ea>
 8003502:	4b25      	ldr	r3, [pc, #148]	; (8003598 <HAL_I2S_Init+0x27c>)
 8003504:	e001      	b.n	800350a <HAL_I2S_Init+0x1ee>
 8003506:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800350a:	69db      	ldr	r3, [r3, #28]
 800350c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003516:	d003      	beq.n	8003520 <HAL_I2S_Init+0x204>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d103      	bne.n	8003528 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003520:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003524:	613b      	str	r3, [r7, #16]
 8003526:	e001      	b.n	800352c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003528:	2300      	movs	r3, #0
 800352a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003536:	4313      	orrs	r3, r2
 8003538:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003540:	4313      	orrs	r3, r2
 8003542:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800354a:	4313      	orrs	r3, r2
 800354c:	b29a      	uxth	r2, r3
 800354e:	897b      	ldrh	r3, [r7, #10]
 8003550:	4313      	orrs	r3, r2
 8003552:	b29b      	uxth	r3, r3
 8003554:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003558:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a0d      	ldr	r2, [pc, #52]	; (8003594 <HAL_I2S_Init+0x278>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d101      	bne.n	8003568 <HAL_I2S_Init+0x24c>
 8003564:	4b0c      	ldr	r3, [pc, #48]	; (8003598 <HAL_I2S_Init+0x27c>)
 8003566:	e001      	b.n	800356c <HAL_I2S_Init+0x250>
 8003568:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800356c:	897a      	ldrh	r2, [r7, #10]
 800356e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3720      	adds	r7, #32
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	08003693 	.word	0x08003693
 800358c:	cccccccd 	.word	0xcccccccd
 8003590:	080037a9 	.word	0x080037a9
 8003594:	40003800 	.word	0x40003800
 8003598:	40003400 	.word	0x40003400

0800359c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e4:	881a      	ldrh	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f0:	1c9a      	adds	r2, r3, #2
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	3b01      	subs	r3, #1
 80035fe:	b29a      	uxth	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003608:	b29b      	uxth	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10e      	bne.n	800362c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800361c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7ff ffb8 	bl	800359c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800362c:	bf00      	nop
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68da      	ldr	r2, [r3, #12]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003646:	b292      	uxth	r2, r2
 8003648:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364e:	1c9a      	adds	r2, r3, #2
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003658:	b29b      	uxth	r3, r3
 800365a:	3b01      	subs	r3, #1
 800365c:	b29a      	uxth	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003666:	b29b      	uxth	r3, r3
 8003668:	2b00      	cmp	r3, #0
 800366a:	d10e      	bne.n	800368a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	685a      	ldr	r2, [r3, #4]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800367a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f7ff ff93 	bl	80035b0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800368a:	bf00      	nop
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b086      	sub	sp, #24
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b04      	cmp	r3, #4
 80036ac:	d13a      	bne.n	8003724 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d109      	bne.n	80036cc <I2S_IRQHandler+0x3a>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c2:	2b40      	cmp	r3, #64	; 0x40
 80036c4:	d102      	bne.n	80036cc <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7ff ffb4 	bl	8003634 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d2:	2b40      	cmp	r3, #64	; 0x40
 80036d4:	d126      	bne.n	8003724 <I2S_IRQHandler+0x92>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f003 0320 	and.w	r3, r3, #32
 80036e0:	2b20      	cmp	r3, #32
 80036e2:	d11f      	bne.n	8003724 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036f2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80036f4:	2300      	movs	r3, #0
 80036f6:	613b      	str	r3, [r7, #16]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	613b      	str	r3, [r7, #16]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	613b      	str	r3, [r7, #16]
 8003708:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003716:	f043 0202 	orr.w	r2, r3, #2
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7ff ff50 	bl	80035c4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2b03      	cmp	r3, #3
 800372e:	d136      	bne.n	800379e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b02      	cmp	r3, #2
 8003738:	d109      	bne.n	800374e <I2S_IRQHandler+0xbc>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003744:	2b80      	cmp	r3, #128	; 0x80
 8003746:	d102      	bne.n	800374e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f7ff ff45 	bl	80035d8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f003 0308 	and.w	r3, r3, #8
 8003754:	2b08      	cmp	r3, #8
 8003756:	d122      	bne.n	800379e <I2S_IRQHandler+0x10c>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f003 0320 	and.w	r3, r3, #32
 8003762:	2b20      	cmp	r3, #32
 8003764:	d11b      	bne.n	800379e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003774:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003776:	2300      	movs	r3, #0
 8003778:	60fb      	str	r3, [r7, #12]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	60fb      	str	r3, [r7, #12]
 8003782:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003790:	f043 0204 	orr.w	r2, r3, #4
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f7ff ff13 	bl	80035c4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800379e:	bf00      	nop
 80037a0:	3718      	adds	r7, #24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
	...

080037a8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b088      	sub	sp, #32
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a92      	ldr	r2, [pc, #584]	; (8003a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d101      	bne.n	80037c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80037c2:	4b92      	ldr	r3, [pc, #584]	; (8003a0c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037c4:	e001      	b.n	80037ca <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80037c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a8b      	ldr	r2, [pc, #556]	; (8003a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d101      	bne.n	80037e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80037e0:	4b8a      	ldr	r3, [pc, #552]	; (8003a0c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037e2:	e001      	b.n	80037e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80037e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037f4:	d004      	beq.n	8003800 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f040 8099 	bne.w	8003932 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b02      	cmp	r3, #2
 8003808:	d107      	bne.n	800381a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003810:	2b00      	cmp	r3, #0
 8003812:	d002      	beq.n	800381a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 f925 	bl	8003a64 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	2b01      	cmp	r3, #1
 8003822:	d107      	bne.n	8003834 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800382a:	2b00      	cmp	r3, #0
 800382c:	d002      	beq.n	8003834 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f9c8 	bl	8003bc4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383a:	2b40      	cmp	r3, #64	; 0x40
 800383c:	d13a      	bne.n	80038b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	f003 0320 	and.w	r3, r3, #32
 8003844:	2b00      	cmp	r3, #0
 8003846:	d035      	beq.n	80038b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a6e      	ldr	r2, [pc, #440]	; (8003a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d101      	bne.n	8003856 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003852:	4b6e      	ldr	r3, [pc, #440]	; (8003a0c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003854:	e001      	b.n	800385a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003856:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800385a:	685a      	ldr	r2, [r3, #4]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4969      	ldr	r1, [pc, #420]	; (8003a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003862:	428b      	cmp	r3, r1
 8003864:	d101      	bne.n	800386a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003866:	4b69      	ldr	r3, [pc, #420]	; (8003a0c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003868:	e001      	b.n	800386e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800386a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800386e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003872:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003882:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003884:	2300      	movs	r3, #0
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	60fb      	str	r3, [r7, #12]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	60fb      	str	r3, [r7, #12]
 8003898:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a6:	f043 0202 	orr.w	r2, r3, #2
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f7ff fe88 	bl	80035c4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	f003 0308 	and.w	r3, r3, #8
 80038ba:	2b08      	cmp	r3, #8
 80038bc:	f040 80c3 	bne.w	8003a46 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	f003 0320 	and.w	r3, r3, #32
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f000 80bd 	beq.w	8003a46 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038da:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a49      	ldr	r2, [pc, #292]	; (8003a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d101      	bne.n	80038ea <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80038e6:	4b49      	ldr	r3, [pc, #292]	; (8003a0c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038e8:	e001      	b.n	80038ee <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80038ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4944      	ldr	r1, [pc, #272]	; (8003a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038f6:	428b      	cmp	r3, r1
 80038f8:	d101      	bne.n	80038fe <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80038fa:	4b44      	ldr	r3, [pc, #272]	; (8003a0c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038fc:	e001      	b.n	8003902 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80038fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003902:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003906:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003908:	2300      	movs	r3, #0
 800390a:	60bb      	str	r3, [r7, #8]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	60bb      	str	r3, [r7, #8]
 8003914:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003922:	f043 0204 	orr.w	r2, r3, #4
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7ff fe4a 	bl	80035c4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003930:	e089      	b.n	8003a46 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b02      	cmp	r3, #2
 800393a:	d107      	bne.n	800394c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003942:	2b00      	cmp	r3, #0
 8003944:	d002      	beq.n	800394c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f8be 	bl	8003ac8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b01      	cmp	r3, #1
 8003954:	d107      	bne.n	8003966 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395c:	2b00      	cmp	r3, #0
 800395e:	d002      	beq.n	8003966 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 f8fd 	bl	8003b60 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800396c:	2b40      	cmp	r3, #64	; 0x40
 800396e:	d12f      	bne.n	80039d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	f003 0320 	and.w	r3, r3, #32
 8003976:	2b00      	cmp	r3, #0
 8003978:	d02a      	beq.n	80039d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003988:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a1e      	ldr	r2, [pc, #120]	; (8003a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d101      	bne.n	8003998 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003994:	4b1d      	ldr	r3, [pc, #116]	; (8003a0c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003996:	e001      	b.n	800399c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003998:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4919      	ldr	r1, [pc, #100]	; (8003a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039a4:	428b      	cmp	r3, r1
 80039a6:	d101      	bne.n	80039ac <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80039a8:	4b18      	ldr	r3, [pc, #96]	; (8003a0c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039aa:	e001      	b.n	80039b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80039ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039b4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c2:	f043 0202 	orr.w	r2, r3, #2
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7ff fdfa 	bl	80035c4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	f003 0308 	and.w	r3, r3, #8
 80039d6:	2b08      	cmp	r3, #8
 80039d8:	d136      	bne.n	8003a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	f003 0320 	and.w	r3, r3, #32
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d031      	beq.n	8003a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a07      	ldr	r2, [pc, #28]	; (8003a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d101      	bne.n	80039f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80039ee:	4b07      	ldr	r3, [pc, #28]	; (8003a0c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039f0:	e001      	b.n	80039f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80039f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4902      	ldr	r1, [pc, #8]	; (8003a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039fe:	428b      	cmp	r3, r1
 8003a00:	d106      	bne.n	8003a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003a02:	4b02      	ldr	r3, [pc, #8]	; (8003a0c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a04:	e006      	b.n	8003a14 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003a06:	bf00      	nop
 8003a08:	40003800 	.word	0x40003800
 8003a0c:	40003400 	.word	0x40003400
 8003a10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a14:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a18:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a28:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a36:	f043 0204 	orr.w	r2, r3, #4
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f7ff fdc0 	bl	80035c4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a44:	e000      	b.n	8003a48 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a46:	bf00      	nop
}
 8003a48:	bf00      	nop
 8003a4a:	3720      	adds	r7, #32
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a70:	1c99      	adds	r1, r3, #2
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	6251      	str	r1, [r2, #36]	; 0x24
 8003a76:	881a      	ldrh	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	3b01      	subs	r3, #1
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d113      	bne.n	8003abe <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	685a      	ldr	r2, [r3, #4]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003aa4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d106      	bne.n	8003abe <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7ff ffc9 	bl	8003a50 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003abe:	bf00      	nop
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
	...

08003ac8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad4:	1c99      	adds	r1, r3, #2
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	6251      	str	r1, [r2, #36]	; 0x24
 8003ada:	8819      	ldrh	r1, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a1d      	ldr	r2, [pc, #116]	; (8003b58 <I2SEx_TxISR_I2SExt+0x90>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d101      	bne.n	8003aea <I2SEx_TxISR_I2SExt+0x22>
 8003ae6:	4b1d      	ldr	r3, [pc, #116]	; (8003b5c <I2SEx_TxISR_I2SExt+0x94>)
 8003ae8:	e001      	b.n	8003aee <I2SEx_TxISR_I2SExt+0x26>
 8003aea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003aee:	460a      	mov	r2, r1
 8003af0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	3b01      	subs	r3, #1
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d121      	bne.n	8003b4e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a12      	ldr	r2, [pc, #72]	; (8003b58 <I2SEx_TxISR_I2SExt+0x90>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d101      	bne.n	8003b18 <I2SEx_TxISR_I2SExt+0x50>
 8003b14:	4b11      	ldr	r3, [pc, #68]	; (8003b5c <I2SEx_TxISR_I2SExt+0x94>)
 8003b16:	e001      	b.n	8003b1c <I2SEx_TxISR_I2SExt+0x54>
 8003b18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	490d      	ldr	r1, [pc, #52]	; (8003b58 <I2SEx_TxISR_I2SExt+0x90>)
 8003b24:	428b      	cmp	r3, r1
 8003b26:	d101      	bne.n	8003b2c <I2SEx_TxISR_I2SExt+0x64>
 8003b28:	4b0c      	ldr	r3, [pc, #48]	; (8003b5c <I2SEx_TxISR_I2SExt+0x94>)
 8003b2a:	e001      	b.n	8003b30 <I2SEx_TxISR_I2SExt+0x68>
 8003b2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b30:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b34:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d106      	bne.n	8003b4e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7ff ff81 	bl	8003a50 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b4e:	bf00      	nop
 8003b50:	3708      	adds	r7, #8
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	40003800 	.word	0x40003800
 8003b5c:	40003400 	.word	0x40003400

08003b60 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68d8      	ldr	r0, [r3, #12]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b72:	1c99      	adds	r1, r3, #2
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003b78:	b282      	uxth	r2, r0
 8003b7a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	3b01      	subs	r3, #1
 8003b84:	b29a      	uxth	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d113      	bne.n	8003bbc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	685a      	ldr	r2, [r3, #4]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ba2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d106      	bne.n	8003bbc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f7ff ff4a 	bl	8003a50 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bbc:	bf00      	nop
 8003bbe:	3708      	adds	r7, #8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a20      	ldr	r2, [pc, #128]	; (8003c54 <I2SEx_RxISR_I2SExt+0x90>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d101      	bne.n	8003bda <I2SEx_RxISR_I2SExt+0x16>
 8003bd6:	4b20      	ldr	r3, [pc, #128]	; (8003c58 <I2SEx_RxISR_I2SExt+0x94>)
 8003bd8:	e001      	b.n	8003bde <I2SEx_RxISR_I2SExt+0x1a>
 8003bda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bde:	68d8      	ldr	r0, [r3, #12]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be4:	1c99      	adds	r1, r3, #2
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003bea:	b282      	uxth	r2, r0
 8003bec:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d121      	bne.n	8003c4a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a12      	ldr	r2, [pc, #72]	; (8003c54 <I2SEx_RxISR_I2SExt+0x90>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d101      	bne.n	8003c14 <I2SEx_RxISR_I2SExt+0x50>
 8003c10:	4b11      	ldr	r3, [pc, #68]	; (8003c58 <I2SEx_RxISR_I2SExt+0x94>)
 8003c12:	e001      	b.n	8003c18 <I2SEx_RxISR_I2SExt+0x54>
 8003c14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c18:	685a      	ldr	r2, [r3, #4]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	490d      	ldr	r1, [pc, #52]	; (8003c54 <I2SEx_RxISR_I2SExt+0x90>)
 8003c20:	428b      	cmp	r3, r1
 8003c22:	d101      	bne.n	8003c28 <I2SEx_RxISR_I2SExt+0x64>
 8003c24:	4b0c      	ldr	r3, [pc, #48]	; (8003c58 <I2SEx_RxISR_I2SExt+0x94>)
 8003c26:	e001      	b.n	8003c2c <I2SEx_RxISR_I2SExt+0x68>
 8003c28:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c2c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c30:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d106      	bne.n	8003c4a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f7ff ff03 	bl	8003a50 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c4a:	bf00      	nop
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	40003800 	.word	0x40003800
 8003c58:	40003400 	.word	0x40003400

08003c5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e267      	b.n	800413e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d075      	beq.n	8003d66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c7a:	4b88      	ldr	r3, [pc, #544]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f003 030c 	and.w	r3, r3, #12
 8003c82:	2b04      	cmp	r3, #4
 8003c84:	d00c      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c86:	4b85      	ldr	r3, [pc, #532]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c8e:	2b08      	cmp	r3, #8
 8003c90:	d112      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c92:	4b82      	ldr	r3, [pc, #520]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c9e:	d10b      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca0:	4b7e      	ldr	r3, [pc, #504]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d05b      	beq.n	8003d64 <HAL_RCC_OscConfig+0x108>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d157      	bne.n	8003d64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e242      	b.n	800413e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cc0:	d106      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x74>
 8003cc2:	4b76      	ldr	r3, [pc, #472]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a75      	ldr	r2, [pc, #468]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ccc:	6013      	str	r3, [r2, #0]
 8003cce:	e01d      	b.n	8003d0c <HAL_RCC_OscConfig+0xb0>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cd8:	d10c      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x98>
 8003cda:	4b70      	ldr	r3, [pc, #448]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a6f      	ldr	r2, [pc, #444]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003ce0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ce4:	6013      	str	r3, [r2, #0]
 8003ce6:	4b6d      	ldr	r3, [pc, #436]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a6c      	ldr	r2, [pc, #432]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cf0:	6013      	str	r3, [r2, #0]
 8003cf2:	e00b      	b.n	8003d0c <HAL_RCC_OscConfig+0xb0>
 8003cf4:	4b69      	ldr	r3, [pc, #420]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a68      	ldr	r2, [pc, #416]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cfe:	6013      	str	r3, [r2, #0]
 8003d00:	4b66      	ldr	r3, [pc, #408]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a65      	ldr	r2, [pc, #404]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003d06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d013      	beq.n	8003d3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d14:	f7fd fad8 	bl	80012c8 <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d1c:	f7fd fad4 	bl	80012c8 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b64      	cmp	r3, #100	; 0x64
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e207      	b.n	800413e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d2e:	4b5b      	ldr	r3, [pc, #364]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0f0      	beq.n	8003d1c <HAL_RCC_OscConfig+0xc0>
 8003d3a:	e014      	b.n	8003d66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d3c:	f7fd fac4 	bl	80012c8 <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d42:	e008      	b.n	8003d56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d44:	f7fd fac0 	bl	80012c8 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b64      	cmp	r3, #100	; 0x64
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e1f3      	b.n	800413e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d56:	4b51      	ldr	r3, [pc, #324]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1f0      	bne.n	8003d44 <HAL_RCC_OscConfig+0xe8>
 8003d62:	e000      	b.n	8003d66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d063      	beq.n	8003e3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d72:	4b4a      	ldr	r3, [pc, #296]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f003 030c 	and.w	r3, r3, #12
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00b      	beq.n	8003d96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d7e:	4b47      	ldr	r3, [pc, #284]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d86:	2b08      	cmp	r3, #8
 8003d88:	d11c      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d8a:	4b44      	ldr	r3, [pc, #272]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d116      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d96:	4b41      	ldr	r3, [pc, #260]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d005      	beq.n	8003dae <HAL_RCC_OscConfig+0x152>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d001      	beq.n	8003dae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e1c7      	b.n	800413e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dae:	4b3b      	ldr	r3, [pc, #236]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	4937      	ldr	r1, [pc, #220]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dc2:	e03a      	b.n	8003e3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d020      	beq.n	8003e0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dcc:	4b34      	ldr	r3, [pc, #208]	; (8003ea0 <HAL_RCC_OscConfig+0x244>)
 8003dce:	2201      	movs	r2, #1
 8003dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd2:	f7fd fa79 	bl	80012c8 <HAL_GetTick>
 8003dd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dd8:	e008      	b.n	8003dec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dda:	f7fd fa75 	bl	80012c8 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d901      	bls.n	8003dec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e1a8      	b.n	800413e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dec:	4b2b      	ldr	r3, [pc, #172]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d0f0      	beq.n	8003dda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003df8:	4b28      	ldr	r3, [pc, #160]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	4925      	ldr	r1, [pc, #148]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	600b      	str	r3, [r1, #0]
 8003e0c:	e015      	b.n	8003e3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e0e:	4b24      	ldr	r3, [pc, #144]	; (8003ea0 <HAL_RCC_OscConfig+0x244>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e14:	f7fd fa58 	bl	80012c8 <HAL_GetTick>
 8003e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e1a:	e008      	b.n	8003e2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e1c:	f7fd fa54 	bl	80012c8 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e187      	b.n	800413e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e2e:	4b1b      	ldr	r3, [pc, #108]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1f0      	bne.n	8003e1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0308 	and.w	r3, r3, #8
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d036      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d016      	beq.n	8003e7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e4e:	4b15      	ldr	r3, [pc, #84]	; (8003ea4 <HAL_RCC_OscConfig+0x248>)
 8003e50:	2201      	movs	r2, #1
 8003e52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e54:	f7fd fa38 	bl	80012c8 <HAL_GetTick>
 8003e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e5a:	e008      	b.n	8003e6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e5c:	f7fd fa34 	bl	80012c8 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e167      	b.n	800413e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e6e:	4b0b      	ldr	r3, [pc, #44]	; (8003e9c <HAL_RCC_OscConfig+0x240>)
 8003e70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0f0      	beq.n	8003e5c <HAL_RCC_OscConfig+0x200>
 8003e7a:	e01b      	b.n	8003eb4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e7c:	4b09      	ldr	r3, [pc, #36]	; (8003ea4 <HAL_RCC_OscConfig+0x248>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e82:	f7fd fa21 	bl	80012c8 <HAL_GetTick>
 8003e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e88:	e00e      	b.n	8003ea8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e8a:	f7fd fa1d 	bl	80012c8 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d907      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e150      	b.n	800413e <HAL_RCC_OscConfig+0x4e2>
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	42470000 	.word	0x42470000
 8003ea4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ea8:	4b88      	ldr	r3, [pc, #544]	; (80040cc <HAL_RCC_OscConfig+0x470>)
 8003eaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1ea      	bne.n	8003e8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0304 	and.w	r3, r3, #4
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 8097 	beq.w	8003ff0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ec6:	4b81      	ldr	r3, [pc, #516]	; (80040cc <HAL_RCC_OscConfig+0x470>)
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10f      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	60bb      	str	r3, [r7, #8]
 8003ed6:	4b7d      	ldr	r3, [pc, #500]	; (80040cc <HAL_RCC_OscConfig+0x470>)
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	4a7c      	ldr	r2, [pc, #496]	; (80040cc <HAL_RCC_OscConfig+0x470>)
 8003edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ee2:	4b7a      	ldr	r3, [pc, #488]	; (80040cc <HAL_RCC_OscConfig+0x470>)
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eea:	60bb      	str	r3, [r7, #8]
 8003eec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ef2:	4b77      	ldr	r3, [pc, #476]	; (80040d0 <HAL_RCC_OscConfig+0x474>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d118      	bne.n	8003f30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003efe:	4b74      	ldr	r3, [pc, #464]	; (80040d0 <HAL_RCC_OscConfig+0x474>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a73      	ldr	r2, [pc, #460]	; (80040d0 <HAL_RCC_OscConfig+0x474>)
 8003f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f0a:	f7fd f9dd 	bl	80012c8 <HAL_GetTick>
 8003f0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f10:	e008      	b.n	8003f24 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f12:	f7fd f9d9 	bl	80012c8 <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e10c      	b.n	800413e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f24:	4b6a      	ldr	r3, [pc, #424]	; (80040d0 <HAL_RCC_OscConfig+0x474>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d0f0      	beq.n	8003f12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d106      	bne.n	8003f46 <HAL_RCC_OscConfig+0x2ea>
 8003f38:	4b64      	ldr	r3, [pc, #400]	; (80040cc <HAL_RCC_OscConfig+0x470>)
 8003f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3c:	4a63      	ldr	r2, [pc, #396]	; (80040cc <HAL_RCC_OscConfig+0x470>)
 8003f3e:	f043 0301 	orr.w	r3, r3, #1
 8003f42:	6713      	str	r3, [r2, #112]	; 0x70
 8003f44:	e01c      	b.n	8003f80 <HAL_RCC_OscConfig+0x324>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	2b05      	cmp	r3, #5
 8003f4c:	d10c      	bne.n	8003f68 <HAL_RCC_OscConfig+0x30c>
 8003f4e:	4b5f      	ldr	r3, [pc, #380]	; (80040cc <HAL_RCC_OscConfig+0x470>)
 8003f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f52:	4a5e      	ldr	r2, [pc, #376]	; (80040cc <HAL_RCC_OscConfig+0x470>)
 8003f54:	f043 0304 	orr.w	r3, r3, #4
 8003f58:	6713      	str	r3, [r2, #112]	; 0x70
 8003f5a:	4b5c      	ldr	r3, [pc, #368]	; (80040cc <HAL_RCC_OscConfig+0x470>)
 8003f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5e:	4a5b      	ldr	r2, [pc, #364]	; (80040cc <HAL_RCC_OscConfig+0x470>)
 8003f60:	f043 0301 	orr.w	r3, r3, #1
 8003f64:	6713      	str	r3, [r2, #112]	; 0x70
 8003f66:	e00b      	b.n	8003f80 <HAL_RCC_OscConfig+0x324>
 8003f68:	4b58      	ldr	r3, [pc, #352]	; (80040cc <HAL_RCC_OscConfig+0x470>)
 8003f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6c:	4a57      	ldr	r2, [pc, #348]	; (80040cc <HAL_RCC_OscConfig+0x470>)
 8003f6e:	f023 0301 	bic.w	r3, r3, #1
 8003f72:	6713      	str	r3, [r2, #112]	; 0x70
 8003f74:	4b55      	ldr	r3, [pc, #340]	; (80040cc <HAL_RCC_OscConfig+0x470>)
 8003f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f78:	4a54      	ldr	r2, [pc, #336]	; (80040cc <HAL_RCC_OscConfig+0x470>)
 8003f7a:	f023 0304 	bic.w	r3, r3, #4
 8003f7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d015      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f88:	f7fd f99e 	bl	80012c8 <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f8e:	e00a      	b.n	8003fa6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f90:	f7fd f99a 	bl	80012c8 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e0cb      	b.n	800413e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fa6:	4b49      	ldr	r3, [pc, #292]	; (80040cc <HAL_RCC_OscConfig+0x470>)
 8003fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d0ee      	beq.n	8003f90 <HAL_RCC_OscConfig+0x334>
 8003fb2:	e014      	b.n	8003fde <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fb4:	f7fd f988 	bl	80012c8 <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fba:	e00a      	b.n	8003fd2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fbc:	f7fd f984 	bl	80012c8 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e0b5      	b.n	800413e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fd2:	4b3e      	ldr	r3, [pc, #248]	; (80040cc <HAL_RCC_OscConfig+0x470>)
 8003fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1ee      	bne.n	8003fbc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fde:	7dfb      	ldrb	r3, [r7, #23]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d105      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fe4:	4b39      	ldr	r3, [pc, #228]	; (80040cc <HAL_RCC_OscConfig+0x470>)
 8003fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe8:	4a38      	ldr	r2, [pc, #224]	; (80040cc <HAL_RCC_OscConfig+0x470>)
 8003fea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 80a1 	beq.w	800413c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ffa:	4b34      	ldr	r3, [pc, #208]	; (80040cc <HAL_RCC_OscConfig+0x470>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f003 030c 	and.w	r3, r3, #12
 8004002:	2b08      	cmp	r3, #8
 8004004:	d05c      	beq.n	80040c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	2b02      	cmp	r3, #2
 800400c:	d141      	bne.n	8004092 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800400e:	4b31      	ldr	r3, [pc, #196]	; (80040d4 <HAL_RCC_OscConfig+0x478>)
 8004010:	2200      	movs	r2, #0
 8004012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004014:	f7fd f958 	bl	80012c8 <HAL_GetTick>
 8004018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800401a:	e008      	b.n	800402e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800401c:	f7fd f954 	bl	80012c8 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b02      	cmp	r3, #2
 8004028:	d901      	bls.n	800402e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e087      	b.n	800413e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800402e:	4b27      	ldr	r3, [pc, #156]	; (80040cc <HAL_RCC_OscConfig+0x470>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1f0      	bne.n	800401c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	69da      	ldr	r2, [r3, #28]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	431a      	orrs	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004048:	019b      	lsls	r3, r3, #6
 800404a:	431a      	orrs	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004050:	085b      	lsrs	r3, r3, #1
 8004052:	3b01      	subs	r3, #1
 8004054:	041b      	lsls	r3, r3, #16
 8004056:	431a      	orrs	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405c:	061b      	lsls	r3, r3, #24
 800405e:	491b      	ldr	r1, [pc, #108]	; (80040cc <HAL_RCC_OscConfig+0x470>)
 8004060:	4313      	orrs	r3, r2
 8004062:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004064:	4b1b      	ldr	r3, [pc, #108]	; (80040d4 <HAL_RCC_OscConfig+0x478>)
 8004066:	2201      	movs	r2, #1
 8004068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800406a:	f7fd f92d 	bl	80012c8 <HAL_GetTick>
 800406e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004070:	e008      	b.n	8004084 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004072:	f7fd f929 	bl	80012c8 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b02      	cmp	r3, #2
 800407e:	d901      	bls.n	8004084 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e05c      	b.n	800413e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004084:	4b11      	ldr	r3, [pc, #68]	; (80040cc <HAL_RCC_OscConfig+0x470>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d0f0      	beq.n	8004072 <HAL_RCC_OscConfig+0x416>
 8004090:	e054      	b.n	800413c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004092:	4b10      	ldr	r3, [pc, #64]	; (80040d4 <HAL_RCC_OscConfig+0x478>)
 8004094:	2200      	movs	r2, #0
 8004096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004098:	f7fd f916 	bl	80012c8 <HAL_GetTick>
 800409c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800409e:	e008      	b.n	80040b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040a0:	f7fd f912 	bl	80012c8 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e045      	b.n	800413e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040b2:	4b06      	ldr	r3, [pc, #24]	; (80040cc <HAL_RCC_OscConfig+0x470>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1f0      	bne.n	80040a0 <HAL_RCC_OscConfig+0x444>
 80040be:	e03d      	b.n	800413c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d107      	bne.n	80040d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e038      	b.n	800413e <HAL_RCC_OscConfig+0x4e2>
 80040cc:	40023800 	.word	0x40023800
 80040d0:	40007000 	.word	0x40007000
 80040d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040d8:	4b1b      	ldr	r3, [pc, #108]	; (8004148 <HAL_RCC_OscConfig+0x4ec>)
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d028      	beq.n	8004138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d121      	bne.n	8004138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040fe:	429a      	cmp	r2, r3
 8004100:	d11a      	bne.n	8004138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004108:	4013      	ands	r3, r2
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800410e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004110:	4293      	cmp	r3, r2
 8004112:	d111      	bne.n	8004138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411e:	085b      	lsrs	r3, r3, #1
 8004120:	3b01      	subs	r3, #1
 8004122:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004124:	429a      	cmp	r2, r3
 8004126:	d107      	bne.n	8004138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004132:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004134:	429a      	cmp	r2, r3
 8004136:	d001      	beq.n	800413c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e000      	b.n	800413e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3718      	adds	r7, #24
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	40023800 	.word	0x40023800

0800414c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d101      	bne.n	8004160 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e0cc      	b.n	80042fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004160:	4b68      	ldr	r3, [pc, #416]	; (8004304 <HAL_RCC_ClockConfig+0x1b8>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0307 	and.w	r3, r3, #7
 8004168:	683a      	ldr	r2, [r7, #0]
 800416a:	429a      	cmp	r2, r3
 800416c:	d90c      	bls.n	8004188 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800416e:	4b65      	ldr	r3, [pc, #404]	; (8004304 <HAL_RCC_ClockConfig+0x1b8>)
 8004170:	683a      	ldr	r2, [r7, #0]
 8004172:	b2d2      	uxtb	r2, r2
 8004174:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004176:	4b63      	ldr	r3, [pc, #396]	; (8004304 <HAL_RCC_ClockConfig+0x1b8>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0307 	and.w	r3, r3, #7
 800417e:	683a      	ldr	r2, [r7, #0]
 8004180:	429a      	cmp	r2, r3
 8004182:	d001      	beq.n	8004188 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e0b8      	b.n	80042fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0302 	and.w	r3, r3, #2
 8004190:	2b00      	cmp	r3, #0
 8004192:	d020      	beq.n	80041d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0304 	and.w	r3, r3, #4
 800419c:	2b00      	cmp	r3, #0
 800419e:	d005      	beq.n	80041ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041a0:	4b59      	ldr	r3, [pc, #356]	; (8004308 <HAL_RCC_ClockConfig+0x1bc>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	4a58      	ldr	r2, [pc, #352]	; (8004308 <HAL_RCC_ClockConfig+0x1bc>)
 80041a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0308 	and.w	r3, r3, #8
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d005      	beq.n	80041c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041b8:	4b53      	ldr	r3, [pc, #332]	; (8004308 <HAL_RCC_ClockConfig+0x1bc>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	4a52      	ldr	r2, [pc, #328]	; (8004308 <HAL_RCC_ClockConfig+0x1bc>)
 80041be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041c4:	4b50      	ldr	r3, [pc, #320]	; (8004308 <HAL_RCC_ClockConfig+0x1bc>)
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	494d      	ldr	r1, [pc, #308]	; (8004308 <HAL_RCC_ClockConfig+0x1bc>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d044      	beq.n	800426c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d107      	bne.n	80041fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ea:	4b47      	ldr	r3, [pc, #284]	; (8004308 <HAL_RCC_ClockConfig+0x1bc>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d119      	bne.n	800422a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e07f      	b.n	80042fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d003      	beq.n	800420a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004206:	2b03      	cmp	r3, #3
 8004208:	d107      	bne.n	800421a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800420a:	4b3f      	ldr	r3, [pc, #252]	; (8004308 <HAL_RCC_ClockConfig+0x1bc>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d109      	bne.n	800422a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e06f      	b.n	80042fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800421a:	4b3b      	ldr	r3, [pc, #236]	; (8004308 <HAL_RCC_ClockConfig+0x1bc>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d101      	bne.n	800422a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e067      	b.n	80042fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800422a:	4b37      	ldr	r3, [pc, #220]	; (8004308 <HAL_RCC_ClockConfig+0x1bc>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f023 0203 	bic.w	r2, r3, #3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	4934      	ldr	r1, [pc, #208]	; (8004308 <HAL_RCC_ClockConfig+0x1bc>)
 8004238:	4313      	orrs	r3, r2
 800423a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800423c:	f7fd f844 	bl	80012c8 <HAL_GetTick>
 8004240:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004242:	e00a      	b.n	800425a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004244:	f7fd f840 	bl	80012c8 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004252:	4293      	cmp	r3, r2
 8004254:	d901      	bls.n	800425a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e04f      	b.n	80042fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800425a:	4b2b      	ldr	r3, [pc, #172]	; (8004308 <HAL_RCC_ClockConfig+0x1bc>)
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f003 020c 	and.w	r2, r3, #12
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	429a      	cmp	r2, r3
 800426a:	d1eb      	bne.n	8004244 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800426c:	4b25      	ldr	r3, [pc, #148]	; (8004304 <HAL_RCC_ClockConfig+0x1b8>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0307 	and.w	r3, r3, #7
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	429a      	cmp	r2, r3
 8004278:	d20c      	bcs.n	8004294 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800427a:	4b22      	ldr	r3, [pc, #136]	; (8004304 <HAL_RCC_ClockConfig+0x1b8>)
 800427c:	683a      	ldr	r2, [r7, #0]
 800427e:	b2d2      	uxtb	r2, r2
 8004280:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004282:	4b20      	ldr	r3, [pc, #128]	; (8004304 <HAL_RCC_ClockConfig+0x1b8>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0307 	and.w	r3, r3, #7
 800428a:	683a      	ldr	r2, [r7, #0]
 800428c:	429a      	cmp	r2, r3
 800428e:	d001      	beq.n	8004294 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e032      	b.n	80042fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0304 	and.w	r3, r3, #4
 800429c:	2b00      	cmp	r3, #0
 800429e:	d008      	beq.n	80042b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042a0:	4b19      	ldr	r3, [pc, #100]	; (8004308 <HAL_RCC_ClockConfig+0x1bc>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	4916      	ldr	r1, [pc, #88]	; (8004308 <HAL_RCC_ClockConfig+0x1bc>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0308 	and.w	r3, r3, #8
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d009      	beq.n	80042d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042be:	4b12      	ldr	r3, [pc, #72]	; (8004308 <HAL_RCC_ClockConfig+0x1bc>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	490e      	ldr	r1, [pc, #56]	; (8004308 <HAL_RCC_ClockConfig+0x1bc>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042d2:	f000 f821 	bl	8004318 <HAL_RCC_GetSysClockFreq>
 80042d6:	4602      	mov	r2, r0
 80042d8:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <HAL_RCC_ClockConfig+0x1bc>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	091b      	lsrs	r3, r3, #4
 80042de:	f003 030f 	and.w	r3, r3, #15
 80042e2:	490a      	ldr	r1, [pc, #40]	; (800430c <HAL_RCC_ClockConfig+0x1c0>)
 80042e4:	5ccb      	ldrb	r3, [r1, r3]
 80042e6:	fa22 f303 	lsr.w	r3, r2, r3
 80042ea:	4a09      	ldr	r2, [pc, #36]	; (8004310 <HAL_RCC_ClockConfig+0x1c4>)
 80042ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042ee:	4b09      	ldr	r3, [pc, #36]	; (8004314 <HAL_RCC_ClockConfig+0x1c8>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7fc ffa4 	bl	8001240 <HAL_InitTick>

  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	40023c00 	.word	0x40023c00
 8004308:	40023800 	.word	0x40023800
 800430c:	0800830c 	.word	0x0800830c
 8004310:	20000028 	.word	0x20000028
 8004314:	2000002c 	.word	0x2000002c

08004318 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004318:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800431c:	b094      	sub	sp, #80	; 0x50
 800431e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004320:	2300      	movs	r3, #0
 8004322:	647b      	str	r3, [r7, #68]	; 0x44
 8004324:	2300      	movs	r3, #0
 8004326:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004328:	2300      	movs	r3, #0
 800432a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800432c:	2300      	movs	r3, #0
 800432e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004330:	4b79      	ldr	r3, [pc, #484]	; (8004518 <HAL_RCC_GetSysClockFreq+0x200>)
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f003 030c 	and.w	r3, r3, #12
 8004338:	2b08      	cmp	r3, #8
 800433a:	d00d      	beq.n	8004358 <HAL_RCC_GetSysClockFreq+0x40>
 800433c:	2b08      	cmp	r3, #8
 800433e:	f200 80e1 	bhi.w	8004504 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004342:	2b00      	cmp	r3, #0
 8004344:	d002      	beq.n	800434c <HAL_RCC_GetSysClockFreq+0x34>
 8004346:	2b04      	cmp	r3, #4
 8004348:	d003      	beq.n	8004352 <HAL_RCC_GetSysClockFreq+0x3a>
 800434a:	e0db      	b.n	8004504 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800434c:	4b73      	ldr	r3, [pc, #460]	; (800451c <HAL_RCC_GetSysClockFreq+0x204>)
 800434e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004350:	e0db      	b.n	800450a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004352:	4b73      	ldr	r3, [pc, #460]	; (8004520 <HAL_RCC_GetSysClockFreq+0x208>)
 8004354:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004356:	e0d8      	b.n	800450a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004358:	4b6f      	ldr	r3, [pc, #444]	; (8004518 <HAL_RCC_GetSysClockFreq+0x200>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004360:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004362:	4b6d      	ldr	r3, [pc, #436]	; (8004518 <HAL_RCC_GetSysClockFreq+0x200>)
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d063      	beq.n	8004436 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800436e:	4b6a      	ldr	r3, [pc, #424]	; (8004518 <HAL_RCC_GetSysClockFreq+0x200>)
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	099b      	lsrs	r3, r3, #6
 8004374:	2200      	movs	r2, #0
 8004376:	63bb      	str	r3, [r7, #56]	; 0x38
 8004378:	63fa      	str	r2, [r7, #60]	; 0x3c
 800437a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800437c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004380:	633b      	str	r3, [r7, #48]	; 0x30
 8004382:	2300      	movs	r3, #0
 8004384:	637b      	str	r3, [r7, #52]	; 0x34
 8004386:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800438a:	4622      	mov	r2, r4
 800438c:	462b      	mov	r3, r5
 800438e:	f04f 0000 	mov.w	r0, #0
 8004392:	f04f 0100 	mov.w	r1, #0
 8004396:	0159      	lsls	r1, r3, #5
 8004398:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800439c:	0150      	lsls	r0, r2, #5
 800439e:	4602      	mov	r2, r0
 80043a0:	460b      	mov	r3, r1
 80043a2:	4621      	mov	r1, r4
 80043a4:	1a51      	subs	r1, r2, r1
 80043a6:	6139      	str	r1, [r7, #16]
 80043a8:	4629      	mov	r1, r5
 80043aa:	eb63 0301 	sbc.w	r3, r3, r1
 80043ae:	617b      	str	r3, [r7, #20]
 80043b0:	f04f 0200 	mov.w	r2, #0
 80043b4:	f04f 0300 	mov.w	r3, #0
 80043b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043bc:	4659      	mov	r1, fp
 80043be:	018b      	lsls	r3, r1, #6
 80043c0:	4651      	mov	r1, sl
 80043c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043c6:	4651      	mov	r1, sl
 80043c8:	018a      	lsls	r2, r1, #6
 80043ca:	4651      	mov	r1, sl
 80043cc:	ebb2 0801 	subs.w	r8, r2, r1
 80043d0:	4659      	mov	r1, fp
 80043d2:	eb63 0901 	sbc.w	r9, r3, r1
 80043d6:	f04f 0200 	mov.w	r2, #0
 80043da:	f04f 0300 	mov.w	r3, #0
 80043de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043ea:	4690      	mov	r8, r2
 80043ec:	4699      	mov	r9, r3
 80043ee:	4623      	mov	r3, r4
 80043f0:	eb18 0303 	adds.w	r3, r8, r3
 80043f4:	60bb      	str	r3, [r7, #8]
 80043f6:	462b      	mov	r3, r5
 80043f8:	eb49 0303 	adc.w	r3, r9, r3
 80043fc:	60fb      	str	r3, [r7, #12]
 80043fe:	f04f 0200 	mov.w	r2, #0
 8004402:	f04f 0300 	mov.w	r3, #0
 8004406:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800440a:	4629      	mov	r1, r5
 800440c:	024b      	lsls	r3, r1, #9
 800440e:	4621      	mov	r1, r4
 8004410:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004414:	4621      	mov	r1, r4
 8004416:	024a      	lsls	r2, r1, #9
 8004418:	4610      	mov	r0, r2
 800441a:	4619      	mov	r1, r3
 800441c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800441e:	2200      	movs	r2, #0
 8004420:	62bb      	str	r3, [r7, #40]	; 0x28
 8004422:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004424:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004428:	f7fb fece 	bl	80001c8 <__aeabi_uldivmod>
 800442c:	4602      	mov	r2, r0
 800442e:	460b      	mov	r3, r1
 8004430:	4613      	mov	r3, r2
 8004432:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004434:	e058      	b.n	80044e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004436:	4b38      	ldr	r3, [pc, #224]	; (8004518 <HAL_RCC_GetSysClockFreq+0x200>)
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	099b      	lsrs	r3, r3, #6
 800443c:	2200      	movs	r2, #0
 800443e:	4618      	mov	r0, r3
 8004440:	4611      	mov	r1, r2
 8004442:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004446:	623b      	str	r3, [r7, #32]
 8004448:	2300      	movs	r3, #0
 800444a:	627b      	str	r3, [r7, #36]	; 0x24
 800444c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004450:	4642      	mov	r2, r8
 8004452:	464b      	mov	r3, r9
 8004454:	f04f 0000 	mov.w	r0, #0
 8004458:	f04f 0100 	mov.w	r1, #0
 800445c:	0159      	lsls	r1, r3, #5
 800445e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004462:	0150      	lsls	r0, r2, #5
 8004464:	4602      	mov	r2, r0
 8004466:	460b      	mov	r3, r1
 8004468:	4641      	mov	r1, r8
 800446a:	ebb2 0a01 	subs.w	sl, r2, r1
 800446e:	4649      	mov	r1, r9
 8004470:	eb63 0b01 	sbc.w	fp, r3, r1
 8004474:	f04f 0200 	mov.w	r2, #0
 8004478:	f04f 0300 	mov.w	r3, #0
 800447c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004480:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004484:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004488:	ebb2 040a 	subs.w	r4, r2, sl
 800448c:	eb63 050b 	sbc.w	r5, r3, fp
 8004490:	f04f 0200 	mov.w	r2, #0
 8004494:	f04f 0300 	mov.w	r3, #0
 8004498:	00eb      	lsls	r3, r5, #3
 800449a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800449e:	00e2      	lsls	r2, r4, #3
 80044a0:	4614      	mov	r4, r2
 80044a2:	461d      	mov	r5, r3
 80044a4:	4643      	mov	r3, r8
 80044a6:	18e3      	adds	r3, r4, r3
 80044a8:	603b      	str	r3, [r7, #0]
 80044aa:	464b      	mov	r3, r9
 80044ac:	eb45 0303 	adc.w	r3, r5, r3
 80044b0:	607b      	str	r3, [r7, #4]
 80044b2:	f04f 0200 	mov.w	r2, #0
 80044b6:	f04f 0300 	mov.w	r3, #0
 80044ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044be:	4629      	mov	r1, r5
 80044c0:	028b      	lsls	r3, r1, #10
 80044c2:	4621      	mov	r1, r4
 80044c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044c8:	4621      	mov	r1, r4
 80044ca:	028a      	lsls	r2, r1, #10
 80044cc:	4610      	mov	r0, r2
 80044ce:	4619      	mov	r1, r3
 80044d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044d2:	2200      	movs	r2, #0
 80044d4:	61bb      	str	r3, [r7, #24]
 80044d6:	61fa      	str	r2, [r7, #28]
 80044d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044dc:	f7fb fe74 	bl	80001c8 <__aeabi_uldivmod>
 80044e0:	4602      	mov	r2, r0
 80044e2:	460b      	mov	r3, r1
 80044e4:	4613      	mov	r3, r2
 80044e6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044e8:	4b0b      	ldr	r3, [pc, #44]	; (8004518 <HAL_RCC_GetSysClockFreq+0x200>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	0c1b      	lsrs	r3, r3, #16
 80044ee:	f003 0303 	and.w	r3, r3, #3
 80044f2:	3301      	adds	r3, #1
 80044f4:	005b      	lsls	r3, r3, #1
 80044f6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80044f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004500:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004502:	e002      	b.n	800450a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004504:	4b05      	ldr	r3, [pc, #20]	; (800451c <HAL_RCC_GetSysClockFreq+0x204>)
 8004506:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004508:	bf00      	nop
    }
  }
  return sysclockfreq;
 800450a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800450c:	4618      	mov	r0, r3
 800450e:	3750      	adds	r7, #80	; 0x50
 8004510:	46bd      	mov	sp, r7
 8004512:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004516:	bf00      	nop
 8004518:	40023800 	.word	0x40023800
 800451c:	00f42400 	.word	0x00f42400
 8004520:	007a1200 	.word	0x007a1200

08004524 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004524:	b480      	push	{r7}
 8004526:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004528:	4b03      	ldr	r3, [pc, #12]	; (8004538 <HAL_RCC_GetHCLKFreq+0x14>)
 800452a:	681b      	ldr	r3, [r3, #0]
}
 800452c:	4618      	mov	r0, r3
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	20000028 	.word	0x20000028

0800453c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004540:	f7ff fff0 	bl	8004524 <HAL_RCC_GetHCLKFreq>
 8004544:	4602      	mov	r2, r0
 8004546:	4b05      	ldr	r3, [pc, #20]	; (800455c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	0a9b      	lsrs	r3, r3, #10
 800454c:	f003 0307 	and.w	r3, r3, #7
 8004550:	4903      	ldr	r1, [pc, #12]	; (8004560 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004552:	5ccb      	ldrb	r3, [r1, r3]
 8004554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004558:	4618      	mov	r0, r3
 800455a:	bd80      	pop	{r7, pc}
 800455c:	40023800 	.word	0x40023800
 8004560:	0800831c 	.word	0x0800831c

08004564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004568:	f7ff ffdc 	bl	8004524 <HAL_RCC_GetHCLKFreq>
 800456c:	4602      	mov	r2, r0
 800456e:	4b05      	ldr	r3, [pc, #20]	; (8004584 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	0b5b      	lsrs	r3, r3, #13
 8004574:	f003 0307 	and.w	r3, r3, #7
 8004578:	4903      	ldr	r1, [pc, #12]	; (8004588 <HAL_RCC_GetPCLK2Freq+0x24>)
 800457a:	5ccb      	ldrb	r3, [r1, r3]
 800457c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004580:	4618      	mov	r0, r3
 8004582:	bd80      	pop	{r7, pc}
 8004584:	40023800 	.word	0x40023800
 8004588:	0800831c 	.word	0x0800831c

0800458c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004594:	2300      	movs	r3, #0
 8004596:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004598:	2300      	movs	r3, #0
 800459a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d105      	bne.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d035      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80045b4:	4b62      	ldr	r3, [pc, #392]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80045ba:	f7fc fe85 	bl	80012c8 <HAL_GetTick>
 80045be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045c0:	e008      	b.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80045c2:	f7fc fe81 	bl	80012c8 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d901      	bls.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e0b0      	b.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045d4:	4b5b      	ldr	r3, [pc, #364]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1f0      	bne.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	019a      	lsls	r2, r3, #6
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	071b      	lsls	r3, r3, #28
 80045ec:	4955      	ldr	r1, [pc, #340]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80045f4:	4b52      	ldr	r3, [pc, #328]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80045f6:	2201      	movs	r2, #1
 80045f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80045fa:	f7fc fe65 	bl	80012c8 <HAL_GetTick>
 80045fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004600:	e008      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004602:	f7fc fe61 	bl	80012c8 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	2b02      	cmp	r3, #2
 800460e:	d901      	bls.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e090      	b.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004614:	4b4b      	ldr	r3, [pc, #300]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d0f0      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0302 	and.w	r3, r3, #2
 8004628:	2b00      	cmp	r3, #0
 800462a:	f000 8083 	beq.w	8004734 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800462e:	2300      	movs	r3, #0
 8004630:	60fb      	str	r3, [r7, #12]
 8004632:	4b44      	ldr	r3, [pc, #272]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004636:	4a43      	ldr	r2, [pc, #268]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800463c:	6413      	str	r3, [r2, #64]	; 0x40
 800463e:	4b41      	ldr	r3, [pc, #260]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004646:	60fb      	str	r3, [r7, #12]
 8004648:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800464a:	4b3f      	ldr	r3, [pc, #252]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a3e      	ldr	r2, [pc, #248]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004654:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004656:	f7fc fe37 	bl	80012c8 <HAL_GetTick>
 800465a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800465c:	e008      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800465e:	f7fc fe33 	bl	80012c8 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b02      	cmp	r3, #2
 800466a:	d901      	bls.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e062      	b.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004670:	4b35      	ldr	r3, [pc, #212]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004678:	2b00      	cmp	r3, #0
 800467a:	d0f0      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800467c:	4b31      	ldr	r3, [pc, #196]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800467e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004680:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004684:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d02f      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x160>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	429a      	cmp	r2, r3
 8004698:	d028      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800469a:	4b2a      	ldr	r3, [pc, #168]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800469c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046a2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046a4:	4b29      	ldr	r3, [pc, #164]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80046a6:	2201      	movs	r2, #1
 80046a8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046aa:	4b28      	ldr	r3, [pc, #160]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80046b0:	4a24      	ldr	r2, [pc, #144]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80046b6:	4b23      	ldr	r3, [pc, #140]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d114      	bne.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80046c2:	f7fc fe01 	bl	80012c8 <HAL_GetTick>
 80046c6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046c8:	e00a      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046ca:	f7fc fdfd 	bl	80012c8 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046d8:	4293      	cmp	r3, r2
 80046da:	d901      	bls.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e02a      	b.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046e0:	4b18      	ldr	r3, [pc, #96]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d0ee      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046f8:	d10d      	bne.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80046fa:	4b12      	ldr	r3, [pc, #72]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800470a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800470e:	490d      	ldr	r1, [pc, #52]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004710:	4313      	orrs	r3, r2
 8004712:	608b      	str	r3, [r1, #8]
 8004714:	e005      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004716:	4b0b      	ldr	r3, [pc, #44]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	4a0a      	ldr	r2, [pc, #40]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800471c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004720:	6093      	str	r3, [r2, #8]
 8004722:	4b08      	ldr	r3, [pc, #32]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004724:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800472e:	4905      	ldr	r1, [pc, #20]	; (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004730:	4313      	orrs	r3, r2
 8004732:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3718      	adds	r7, #24
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	42470068 	.word	0x42470068
 8004744:	40023800 	.word	0x40023800
 8004748:	40007000 	.word	0x40007000
 800474c:	42470e40 	.word	0x42470e40

08004750 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004750:	b480      	push	{r7}
 8004752:	b087      	sub	sp, #28
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004758:	2300      	movs	r3, #0
 800475a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800475c:	2300      	movs	r3, #0
 800475e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004760:	2300      	movs	r3, #0
 8004762:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004764:	2300      	movs	r3, #0
 8004766:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d13e      	bne.n	80047ec <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800476e:	4b23      	ldr	r3, [pc, #140]	; (80047fc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004776:	60fb      	str	r3, [r7, #12]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d005      	beq.n	800478a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d12f      	bne.n	80047e4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004784:	4b1e      	ldr	r3, [pc, #120]	; (8004800 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004786:	617b      	str	r3, [r7, #20]
          break;
 8004788:	e02f      	b.n	80047ea <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800478a:	4b1c      	ldr	r3, [pc, #112]	; (80047fc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004792:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004796:	d108      	bne.n	80047aa <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004798:	4b18      	ldr	r3, [pc, #96]	; (80047fc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047a0:	4a18      	ldr	r2, [pc, #96]	; (8004804 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80047a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a6:	613b      	str	r3, [r7, #16]
 80047a8:	e007      	b.n	80047ba <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80047aa:	4b14      	ldr	r3, [pc, #80]	; (80047fc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047b2:	4a15      	ldr	r2, [pc, #84]	; (8004808 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80047b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b8:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80047ba:	4b10      	ldr	r3, [pc, #64]	; (80047fc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047c0:	099b      	lsrs	r3, r3, #6
 80047c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	fb02 f303 	mul.w	r3, r2, r3
 80047cc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80047ce:	4b0b      	ldr	r3, [pc, #44]	; (80047fc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047d4:	0f1b      	lsrs	r3, r3, #28
 80047d6:	f003 0307 	and.w	r3, r3, #7
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e0:	617b      	str	r3, [r7, #20]
          break;
 80047e2:	e002      	b.n	80047ea <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80047e4:	2300      	movs	r3, #0
 80047e6:	617b      	str	r3, [r7, #20]
          break;
 80047e8:	bf00      	nop
        }
      }
      break;
 80047ea:	bf00      	nop
    }
  }
  return frequency;
 80047ec:	697b      	ldr	r3, [r7, #20]
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	371c      	adds	r7, #28
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	40023800 	.word	0x40023800
 8004800:	00bb8000 	.word	0x00bb8000
 8004804:	007a1200 	.word	0x007a1200
 8004808:	00f42400 	.word	0x00f42400

0800480c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e07b      	b.n	8004916 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004822:	2b00      	cmp	r3, #0
 8004824:	d108      	bne.n	8004838 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800482e:	d009      	beq.n	8004844 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	61da      	str	r2, [r3, #28]
 8004836:	e005      	b.n	8004844 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d106      	bne.n	8004864 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f7fc fb40 	bl	8000ee4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2202      	movs	r2, #2
 8004868:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800487a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800488c:	431a      	orrs	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004896:	431a      	orrs	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	f003 0302 	and.w	r3, r3, #2
 80048a0:	431a      	orrs	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	431a      	orrs	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048b4:	431a      	orrs	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048be:	431a      	orrs	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a1b      	ldr	r3, [r3, #32]
 80048c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c8:	ea42 0103 	orr.w	r1, r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	430a      	orrs	r2, r1
 80048da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	0c1b      	lsrs	r3, r3, #16
 80048e2:	f003 0104 	and.w	r1, r3, #4
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ea:	f003 0210 	and.w	r2, r3, #16
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	430a      	orrs	r2, r1
 80048f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	69da      	ldr	r2, [r3, #28]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004904:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3708      	adds	r7, #8
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800491e:	b580      	push	{r7, lr}
 8004920:	b088      	sub	sp, #32
 8004922:	af00      	add	r7, sp, #0
 8004924:	60f8      	str	r0, [r7, #12]
 8004926:	60b9      	str	r1, [r7, #8]
 8004928:	603b      	str	r3, [r7, #0]
 800492a:	4613      	mov	r3, r2
 800492c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800492e:	2300      	movs	r3, #0
 8004930:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004938:	2b01      	cmp	r3, #1
 800493a:	d101      	bne.n	8004940 <HAL_SPI_Transmit+0x22>
 800493c:	2302      	movs	r3, #2
 800493e:	e126      	b.n	8004b8e <HAL_SPI_Transmit+0x270>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004948:	f7fc fcbe 	bl	80012c8 <HAL_GetTick>
 800494c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800494e:	88fb      	ldrh	r3, [r7, #6]
 8004950:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b01      	cmp	r3, #1
 800495c:	d002      	beq.n	8004964 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800495e:	2302      	movs	r3, #2
 8004960:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004962:	e10b      	b.n	8004b7c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d002      	beq.n	8004970 <HAL_SPI_Transmit+0x52>
 800496a:	88fb      	ldrh	r3, [r7, #6]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d102      	bne.n	8004976 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004974:	e102      	b.n	8004b7c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2203      	movs	r2, #3
 800497a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	68ba      	ldr	r2, [r7, #8]
 8004988:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	88fa      	ldrh	r2, [r7, #6]
 800498e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	88fa      	ldrh	r2, [r7, #6]
 8004994:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2200      	movs	r2, #0
 80049a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049bc:	d10f      	bne.n	80049de <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e8:	2b40      	cmp	r3, #64	; 0x40
 80049ea:	d007      	beq.n	80049fc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a04:	d14b      	bne.n	8004a9e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d002      	beq.n	8004a14 <HAL_SPI_Transmit+0xf6>
 8004a0e:	8afb      	ldrh	r3, [r7, #22]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d13e      	bne.n	8004a92 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a18:	881a      	ldrh	r2, [r3, #0]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a24:	1c9a      	adds	r2, r3, #2
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	3b01      	subs	r3, #1
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a38:	e02b      	b.n	8004a92 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d112      	bne.n	8004a6e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4c:	881a      	ldrh	r2, [r3, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a58:	1c9a      	adds	r2, r3, #2
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	3b01      	subs	r3, #1
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a6c:	e011      	b.n	8004a92 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a6e:	f7fc fc2b 	bl	80012c8 <HAL_GetTick>
 8004a72:	4602      	mov	r2, r0
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	683a      	ldr	r2, [r7, #0]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d803      	bhi.n	8004a86 <HAL_SPI_Transmit+0x168>
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a84:	d102      	bne.n	8004a8c <HAL_SPI_Transmit+0x16e>
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d102      	bne.n	8004a92 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a90:	e074      	b.n	8004b7c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1ce      	bne.n	8004a3a <HAL_SPI_Transmit+0x11c>
 8004a9c:	e04c      	b.n	8004b38 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d002      	beq.n	8004aac <HAL_SPI_Transmit+0x18e>
 8004aa6:	8afb      	ldrh	r3, [r7, #22]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d140      	bne.n	8004b2e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	330c      	adds	r3, #12
 8004ab6:	7812      	ldrb	r2, [r2, #0]
 8004ab8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004abe:	1c5a      	adds	r2, r3, #1
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	3b01      	subs	r3, #1
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004ad2:	e02c      	b.n	8004b2e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d113      	bne.n	8004b0a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	330c      	adds	r3, #12
 8004aec:	7812      	ldrb	r2, [r2, #0]
 8004aee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af4:	1c5a      	adds	r2, r3, #1
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	3b01      	subs	r3, #1
 8004b02:	b29a      	uxth	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b08:	e011      	b.n	8004b2e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b0a:	f7fc fbdd 	bl	80012c8 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	683a      	ldr	r2, [r7, #0]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d803      	bhi.n	8004b22 <HAL_SPI_Transmit+0x204>
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b20:	d102      	bne.n	8004b28 <HAL_SPI_Transmit+0x20a>
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d102      	bne.n	8004b2e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b2c:	e026      	b.n	8004b7c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1cd      	bne.n	8004ad4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b38:	69ba      	ldr	r2, [r7, #24]
 8004b3a:	6839      	ldr	r1, [r7, #0]
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f000 fbcb 	bl	80052d8 <SPI_EndRxTxTransaction>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d002      	beq.n	8004b4e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10a      	bne.n	8004b6c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b56:	2300      	movs	r3, #0
 8004b58:	613b      	str	r3, [r7, #16]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	613b      	str	r3, [r7, #16]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	613b      	str	r3, [r7, #16]
 8004b6a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d002      	beq.n	8004b7a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	77fb      	strb	r3, [r7, #31]
 8004b78:	e000      	b.n	8004b7c <HAL_SPI_Transmit+0x25e>
  }

error:
 8004b7a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3720      	adds	r7, #32
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b088      	sub	sp, #32
 8004b9a:	af02      	add	r7, sp, #8
 8004b9c:	60f8      	str	r0, [r7, #12]
 8004b9e:	60b9      	str	r1, [r7, #8]
 8004ba0:	603b      	str	r3, [r7, #0]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bb2:	d112      	bne.n	8004bda <HAL_SPI_Receive+0x44>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d10e      	bne.n	8004bda <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2204      	movs	r2, #4
 8004bc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004bc4:	88fa      	ldrh	r2, [r7, #6]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	9300      	str	r3, [sp, #0]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	68b9      	ldr	r1, [r7, #8]
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f000 f8f1 	bl	8004db8 <HAL_SPI_TransmitReceive>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	e0ea      	b.n	8004db0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d101      	bne.n	8004be8 <HAL_SPI_Receive+0x52>
 8004be4:	2302      	movs	r3, #2
 8004be6:	e0e3      	b.n	8004db0 <HAL_SPI_Receive+0x21a>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bf0:	f7fc fb6a 	bl	80012c8 <HAL_GetTick>
 8004bf4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d002      	beq.n	8004c08 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004c02:	2302      	movs	r3, #2
 8004c04:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004c06:	e0ca      	b.n	8004d9e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d002      	beq.n	8004c14 <HAL_SPI_Receive+0x7e>
 8004c0e:	88fb      	ldrh	r3, [r7, #6]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d102      	bne.n	8004c1a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004c18:	e0c1      	b.n	8004d9e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2204      	movs	r2, #4
 8004c1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	68ba      	ldr	r2, [r7, #8]
 8004c2c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	88fa      	ldrh	r2, [r7, #6]
 8004c32:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	88fa      	ldrh	r2, [r7, #6]
 8004c38:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c60:	d10f      	bne.n	8004c82 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c70:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c80:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c8c:	2b40      	cmp	r3, #64	; 0x40
 8004c8e:	d007      	beq.n	8004ca0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c9e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d162      	bne.n	8004d6e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004ca8:	e02e      	b.n	8004d08 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f003 0301 	and.w	r3, r3, #1
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d115      	bne.n	8004ce4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f103 020c 	add.w	r2, r3, #12
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc4:	7812      	ldrb	r2, [r2, #0]
 8004cc6:	b2d2      	uxtb	r2, r2
 8004cc8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cce:	1c5a      	adds	r2, r3, #1
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ce2:	e011      	b.n	8004d08 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ce4:	f7fc faf0 	bl	80012c8 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	683a      	ldr	r2, [r7, #0]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d803      	bhi.n	8004cfc <HAL_SPI_Receive+0x166>
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cfa:	d102      	bne.n	8004d02 <HAL_SPI_Receive+0x16c>
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d102      	bne.n	8004d08 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004d06:	e04a      	b.n	8004d9e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1cb      	bne.n	8004caa <HAL_SPI_Receive+0x114>
 8004d12:	e031      	b.n	8004d78 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f003 0301 	and.w	r3, r3, #1
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d113      	bne.n	8004d4a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68da      	ldr	r2, [r3, #12]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2c:	b292      	uxth	r2, r2
 8004d2e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d34:	1c9a      	adds	r2, r3, #2
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	3b01      	subs	r3, #1
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d48:	e011      	b.n	8004d6e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d4a:	f7fc fabd 	bl	80012c8 <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	683a      	ldr	r2, [r7, #0]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d803      	bhi.n	8004d62 <HAL_SPI_Receive+0x1cc>
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d60:	d102      	bne.n	8004d68 <HAL_SPI_Receive+0x1d2>
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d102      	bne.n	8004d6e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004d6c:	e017      	b.n	8004d9e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1cd      	bne.n	8004d14 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	6839      	ldr	r1, [r7, #0]
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f000 fa45 	bl	800520c <SPI_EndRxTransaction>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d002      	beq.n	8004d8e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2220      	movs	r2, #32
 8004d8c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d002      	beq.n	8004d9c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	75fb      	strb	r3, [r7, #23]
 8004d9a:	e000      	b.n	8004d9e <HAL_SPI_Receive+0x208>
  }

error :
 8004d9c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2201      	movs	r2, #1
 8004da2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004dae:	7dfb      	ldrb	r3, [r7, #23]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3718      	adds	r7, #24
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b08c      	sub	sp, #48	; 0x30
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	607a      	str	r2, [r7, #4]
 8004dc4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d101      	bne.n	8004dde <HAL_SPI_TransmitReceive+0x26>
 8004dda:	2302      	movs	r3, #2
 8004ddc:	e18a      	b.n	80050f4 <HAL_SPI_TransmitReceive+0x33c>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2201      	movs	r2, #1
 8004de2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004de6:	f7fc fa6f 	bl	80012c8 <HAL_GetTick>
 8004dea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004df2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004dfc:	887b      	ldrh	r3, [r7, #2]
 8004dfe:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004e00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d00f      	beq.n	8004e28 <HAL_SPI_TransmitReceive+0x70>
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e0e:	d107      	bne.n	8004e20 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d103      	bne.n	8004e20 <HAL_SPI_TransmitReceive+0x68>
 8004e18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e1c:	2b04      	cmp	r3, #4
 8004e1e:	d003      	beq.n	8004e28 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004e20:	2302      	movs	r3, #2
 8004e22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004e26:	e15b      	b.n	80050e0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d005      	beq.n	8004e3a <HAL_SPI_TransmitReceive+0x82>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d002      	beq.n	8004e3a <HAL_SPI_TransmitReceive+0x82>
 8004e34:	887b      	ldrh	r3, [r7, #2]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d103      	bne.n	8004e42 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004e40:	e14e      	b.n	80050e0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b04      	cmp	r3, #4
 8004e4c:	d003      	beq.n	8004e56 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2205      	movs	r2, #5
 8004e52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	887a      	ldrh	r2, [r7, #2]
 8004e66:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	887a      	ldrh	r2, [r7, #2]
 8004e6c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	68ba      	ldr	r2, [r7, #8]
 8004e72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	887a      	ldrh	r2, [r7, #2]
 8004e78:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	887a      	ldrh	r2, [r7, #2]
 8004e7e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e96:	2b40      	cmp	r3, #64	; 0x40
 8004e98:	d007      	beq.n	8004eaa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ea8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eb2:	d178      	bne.n	8004fa6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d002      	beq.n	8004ec2 <HAL_SPI_TransmitReceive+0x10a>
 8004ebc:	8b7b      	ldrh	r3, [r7, #26]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d166      	bne.n	8004f90 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec6:	881a      	ldrh	r2, [r3, #0]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed2:	1c9a      	adds	r2, r3, #2
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ee6:	e053      	b.n	8004f90 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d11b      	bne.n	8004f2e <HAL_SPI_TransmitReceive+0x176>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d016      	beq.n	8004f2e <HAL_SPI_TransmitReceive+0x176>
 8004f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d113      	bne.n	8004f2e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0a:	881a      	ldrh	r2, [r3, #0]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f16:	1c9a      	adds	r2, r3, #2
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	3b01      	subs	r3, #1
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d119      	bne.n	8004f70 <HAL_SPI_TransmitReceive+0x1b8>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d014      	beq.n	8004f70 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68da      	ldr	r2, [r3, #12]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f50:	b292      	uxth	r2, r2
 8004f52:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f58:	1c9a      	adds	r2, r3, #2
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	3b01      	subs	r3, #1
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004f70:	f7fc f9aa 	bl	80012c8 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d807      	bhi.n	8004f90 <HAL_SPI_TransmitReceive+0x1d8>
 8004f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f86:	d003      	beq.n	8004f90 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004f8e:	e0a7      	b.n	80050e0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1a6      	bne.n	8004ee8 <HAL_SPI_TransmitReceive+0x130>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d1a1      	bne.n	8004ee8 <HAL_SPI_TransmitReceive+0x130>
 8004fa4:	e07c      	b.n	80050a0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d002      	beq.n	8004fb4 <HAL_SPI_TransmitReceive+0x1fc>
 8004fae:	8b7b      	ldrh	r3, [r7, #26]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d16b      	bne.n	800508c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	330c      	adds	r3, #12
 8004fbe:	7812      	ldrb	r2, [r2, #0]
 8004fc0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc6:	1c5a      	adds	r2, r3, #1
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fda:	e057      	b.n	800508c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f003 0302 	and.w	r3, r3, #2
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d11c      	bne.n	8005024 <HAL_SPI_TransmitReceive+0x26c>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d017      	beq.n	8005024 <HAL_SPI_TransmitReceive+0x26c>
 8004ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d114      	bne.n	8005024 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	330c      	adds	r3, #12
 8005004:	7812      	ldrb	r2, [r2, #0]
 8005006:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500c:	1c5a      	adds	r2, r3, #1
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005016:	b29b      	uxth	r3, r3
 8005018:	3b01      	subs	r3, #1
 800501a:	b29a      	uxth	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005020:	2300      	movs	r3, #0
 8005022:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	2b01      	cmp	r3, #1
 8005030:	d119      	bne.n	8005066 <HAL_SPI_TransmitReceive+0x2ae>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005036:	b29b      	uxth	r3, r3
 8005038:	2b00      	cmp	r3, #0
 800503a:	d014      	beq.n	8005066 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68da      	ldr	r2, [r3, #12]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005046:	b2d2      	uxtb	r2, r2
 8005048:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504e:	1c5a      	adds	r2, r3, #1
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005058:	b29b      	uxth	r3, r3
 800505a:	3b01      	subs	r3, #1
 800505c:	b29a      	uxth	r2, r3
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005062:	2301      	movs	r3, #1
 8005064:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005066:	f7fc f92f 	bl	80012c8 <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005072:	429a      	cmp	r2, r3
 8005074:	d803      	bhi.n	800507e <HAL_SPI_TransmitReceive+0x2c6>
 8005076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800507c:	d102      	bne.n	8005084 <HAL_SPI_TransmitReceive+0x2cc>
 800507e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005080:	2b00      	cmp	r3, #0
 8005082:	d103      	bne.n	800508c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800508a:	e029      	b.n	80050e0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005090:	b29b      	uxth	r3, r3
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1a2      	bne.n	8004fdc <HAL_SPI_TransmitReceive+0x224>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800509a:	b29b      	uxth	r3, r3
 800509c:	2b00      	cmp	r3, #0
 800509e:	d19d      	bne.n	8004fdc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80050a4:	68f8      	ldr	r0, [r7, #12]
 80050a6:	f000 f917 	bl	80052d8 <SPI_EndRxTxTransaction>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d006      	beq.n	80050be <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2220      	movs	r2, #32
 80050ba:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80050bc:	e010      	b.n	80050e0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d10b      	bne.n	80050de <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050c6:	2300      	movs	r3, #0
 80050c8:	617b      	str	r3, [r7, #20]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	617b      	str	r3, [r7, #20]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	617b      	str	r3, [r7, #20]
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	e000      	b.n	80050e0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80050de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80050f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3730      	adds	r7, #48	; 0x30
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b088      	sub	sp, #32
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	603b      	str	r3, [r7, #0]
 8005108:	4613      	mov	r3, r2
 800510a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800510c:	f7fc f8dc 	bl	80012c8 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005114:	1a9b      	subs	r3, r3, r2
 8005116:	683a      	ldr	r2, [r7, #0]
 8005118:	4413      	add	r3, r2
 800511a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800511c:	f7fc f8d4 	bl	80012c8 <HAL_GetTick>
 8005120:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005122:	4b39      	ldr	r3, [pc, #228]	; (8005208 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	015b      	lsls	r3, r3, #5
 8005128:	0d1b      	lsrs	r3, r3, #20
 800512a:	69fa      	ldr	r2, [r7, #28]
 800512c:	fb02 f303 	mul.w	r3, r2, r3
 8005130:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005132:	e054      	b.n	80051de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800513a:	d050      	beq.n	80051de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800513c:	f7fc f8c4 	bl	80012c8 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	69fa      	ldr	r2, [r7, #28]
 8005148:	429a      	cmp	r2, r3
 800514a:	d902      	bls.n	8005152 <SPI_WaitFlagStateUntilTimeout+0x56>
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d13d      	bne.n	80051ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	685a      	ldr	r2, [r3, #4]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005160:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800516a:	d111      	bne.n	8005190 <SPI_WaitFlagStateUntilTimeout+0x94>
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005174:	d004      	beq.n	8005180 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800517e:	d107      	bne.n	8005190 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800518e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005194:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005198:	d10f      	bne.n	80051ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051a8:	601a      	str	r2, [r3, #0]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2201      	movs	r2, #1
 80051be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e017      	b.n	80051fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d101      	bne.n	80051d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80051d4:	2300      	movs	r3, #0
 80051d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	3b01      	subs	r3, #1
 80051dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	689a      	ldr	r2, [r3, #8]
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	4013      	ands	r3, r2
 80051e8:	68ba      	ldr	r2, [r7, #8]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	bf0c      	ite	eq
 80051ee:	2301      	moveq	r3, #1
 80051f0:	2300      	movne	r3, #0
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	461a      	mov	r2, r3
 80051f6:	79fb      	ldrb	r3, [r7, #7]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d19b      	bne.n	8005134 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3720      	adds	r7, #32
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	20000028 	.word	0x20000028

0800520c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af02      	add	r7, sp, #8
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005220:	d111      	bne.n	8005246 <SPI_EndRxTransaction+0x3a>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800522a:	d004      	beq.n	8005236 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005234:	d107      	bne.n	8005246 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005244:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800524e:	d12a      	bne.n	80052a6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005258:	d012      	beq.n	8005280 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	9300      	str	r3, [sp, #0]
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	2200      	movs	r2, #0
 8005262:	2180      	movs	r1, #128	; 0x80
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	f7ff ff49 	bl	80050fc <SPI_WaitFlagStateUntilTimeout>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d02d      	beq.n	80052cc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005274:	f043 0220 	orr.w	r2, r3, #32
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e026      	b.n	80052ce <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	9300      	str	r3, [sp, #0]
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	2200      	movs	r2, #0
 8005288:	2101      	movs	r1, #1
 800528a:	68f8      	ldr	r0, [r7, #12]
 800528c:	f7ff ff36 	bl	80050fc <SPI_WaitFlagStateUntilTimeout>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d01a      	beq.n	80052cc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800529a:	f043 0220 	orr.w	r2, r3, #32
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e013      	b.n	80052ce <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	2200      	movs	r2, #0
 80052ae:	2101      	movs	r1, #1
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f7ff ff23 	bl	80050fc <SPI_WaitFlagStateUntilTimeout>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d007      	beq.n	80052cc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c0:	f043 0220 	orr.w	r2, r3, #32
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e000      	b.n	80052ce <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
	...

080052d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b088      	sub	sp, #32
 80052dc:	af02      	add	r7, sp, #8
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80052e4:	4b1b      	ldr	r3, [pc, #108]	; (8005354 <SPI_EndRxTxTransaction+0x7c>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a1b      	ldr	r2, [pc, #108]	; (8005358 <SPI_EndRxTxTransaction+0x80>)
 80052ea:	fba2 2303 	umull	r2, r3, r2, r3
 80052ee:	0d5b      	lsrs	r3, r3, #21
 80052f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80052f4:	fb02 f303 	mul.w	r3, r2, r3
 80052f8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005302:	d112      	bne.n	800532a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	9300      	str	r3, [sp, #0]
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	2200      	movs	r2, #0
 800530c:	2180      	movs	r1, #128	; 0x80
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f7ff fef4 	bl	80050fc <SPI_WaitFlagStateUntilTimeout>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d016      	beq.n	8005348 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800531e:	f043 0220 	orr.w	r2, r3, #32
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	e00f      	b.n	800534a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00a      	beq.n	8005346 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	3b01      	subs	r3, #1
 8005334:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005340:	2b80      	cmp	r3, #128	; 0x80
 8005342:	d0f2      	beq.n	800532a <SPI_EndRxTxTransaction+0x52>
 8005344:	e000      	b.n	8005348 <SPI_EndRxTxTransaction+0x70>
        break;
 8005346:	bf00      	nop
  }

  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3718      	adds	r7, #24
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	20000028 	.word	0x20000028
 8005358:	165e9f81 	.word	0x165e9f81

0800535c <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d101      	bne.n	800536e <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e033      	b.n	80053d6 <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	d106      	bne.n	8005388 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f7fb fe2c 	bl	8000fe0 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2202      	movs	r2, #2
 800538c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 f90b 	bl	80055ac <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	691a      	ldr	r2, [r3, #16]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80053a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	695a      	ldr	r2, [r3, #20]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053b4:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68da      	ldr	r2, [r3, #12]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053c4:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3708      	adds	r7, #8
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <HAL_USART_Transmit>:
  * @param  Size    Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 80053de:	b580      	push	{r7, lr}
 80053e0:	b08a      	sub	sp, #40	; 0x28
 80053e2:	af02      	add	r7, sp, #8
 80053e4:	60f8      	str	r0, [r7, #12]
 80053e6:	60b9      	str	r1, [r7, #8]
 80053e8:	603b      	str	r3, [r7, #0]
 80053ea:	4613      	mov	r3, r2
 80053ec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d17c      	bne.n	80054f4 <HAL_USART_Transmit+0x116>
  {
    if ((pTxData == NULL) || (Size == 0))
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d002      	beq.n	8005406 <HAL_USART_Transmit+0x28>
 8005400:	88fb      	ldrh	r3, [r7, #6]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d101      	bne.n	800540a <HAL_USART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e075      	b.n	80054f6 <HAL_USART_Transmit+0x118>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005410:	2b01      	cmp	r3, #1
 8005412:	d101      	bne.n	8005418 <HAL_USART_Transmit+0x3a>
 8005414:	2302      	movs	r3, #2
 8005416:	e06e      	b.n	80054f6 <HAL_USART_Transmit+0x118>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	641a      	str	r2, [r3, #64]	; 0x40
    husart->State = HAL_USART_STATE_BUSY_TX;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2212      	movs	r2, #18
 800542a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800542e:	f7fb ff4b 	bl	80012c8 <HAL_GetTick>
 8005432:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	88fa      	ldrh	r2, [r7, #6]
 8005438:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	88fa      	ldrh	r2, [r7, #6]
 800543e:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005448:	d108      	bne.n	800545c <HAL_USART_Transmit+0x7e>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d104      	bne.n	800545c <HAL_USART_Transmit+0x7e>
    {
      ptxdata8bits  = NULL;
 8005452:	2300      	movs	r3, #0
 8005454:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	61bb      	str	r3, [r7, #24]
 800545a:	e003      	b.n	8005464 <HAL_USART_Transmit+0x86>
    }
    else
    {
      ptxdata8bits  = pTxData;
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8005460:	2300      	movs	r3, #0
 8005462:	61bb      	str	r3, [r7, #24]
    }

    while (husart->TxXferCount > 0U)
 8005464:	e02a      	b.n	80054bc <HAL_USART_Transmit+0xde>
    {
      /* Wait for TXE flag in order to write data in DR */
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	9300      	str	r3, [sp, #0]
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	2200      	movs	r2, #0
 800546e:	2180      	movs	r1, #128	; 0x80
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f000 f844 	bl	80054fe <USART_WaitOnFlagUntilTimeout>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d001      	beq.n	8005480 <HAL_USART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e03a      	b.n	80054f6 <HAL_USART_Transmit+0x118>
      }
      if (ptxdata8bits == NULL)
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d10b      	bne.n	800549e <HAL_USART_Transmit+0xc0>
      {
        husart->Instance->DR = (uint16_t)(*ptxdata16bits & (uint16_t)0x01FF);
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	881b      	ldrh	r3, [r3, #0]
 800548a:	461a      	mov	r2, r3
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005494:	605a      	str	r2, [r3, #4]
        ptxdata16bits++;
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	3302      	adds	r3, #2
 800549a:	61bb      	str	r3, [r7, #24]
 800549c:	e007      	b.n	80054ae <HAL_USART_Transmit+0xd0>
      }
      else
      {
        husart->Instance->DR = (uint8_t)(*ptxdata8bits & (uint8_t)0xFF);
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	781a      	ldrb	r2, [r3, #0]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	605a      	str	r2, [r3, #4]
        ptxdata8bits++;
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	3301      	adds	r3, #1
 80054ac:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	3b01      	subs	r3, #1
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1cf      	bne.n	8005466 <HAL_USART_Transmit+0x88>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	2200      	movs	r2, #0
 80054ce:	2140      	movs	r1, #64	; 0x40
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f000 f814 	bl	80054fe <USART_WaitOnFlagUntilTimeout>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d001      	beq.n	80054e0 <HAL_USART_Transmit+0x102>
    {
      return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e00a      	b.n	80054f6 <HAL_USART_Transmit+0x118>
    }

    husart->State = HAL_USART_STATE_READY;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80054f0:	2300      	movs	r3, #0
 80054f2:	e000      	b.n	80054f6 <HAL_USART_Transmit+0x118>
  }
  else
  {
    return HAL_BUSY;
 80054f4:	2302      	movs	r3, #2
  }
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3720      	adds	r7, #32
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b084      	sub	sp, #16
 8005502:	af00      	add	r7, sp, #0
 8005504:	60f8      	str	r0, [r7, #12]
 8005506:	60b9      	str	r1, [r7, #8]
 8005508:	603b      	str	r3, [r7, #0]
 800550a:	4613      	mov	r3, r2
 800550c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800550e:	e038      	b.n	8005582 <USART_WaitOnFlagUntilTimeout+0x84>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005516:	d034      	beq.n	8005582 <USART_WaitOnFlagUntilTimeout+0x84>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d007      	beq.n	800552e <USART_WaitOnFlagUntilTimeout+0x30>
 800551e:	f7fb fed3 	bl	80012c8 <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	69ba      	ldr	r2, [r7, #24]
 800552a:	429a      	cmp	r2, r3
 800552c:	d229      	bcs.n	8005582 <USART_WaitOnFlagUntilTimeout+0x84>
      {
        /* Disable the USART Transmit Complete Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68da      	ldr	r2, [r3, #12]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800553c:	60da      	str	r2, [r3, #12]

        /* Disable the USART RXNE Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68da      	ldr	r2, [r3, #12]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f022 0220 	bic.w	r2, r2, #32
 800554c:	60da      	str	r2, [r3, #12]

        /* Disable the USART Parity Error Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68da      	ldr	r2, [r3, #12]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800555c:	60da      	str	r2, [r3, #12]

        /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	695a      	ldr	r2, [r3, #20]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f022 0201 	bic.w	r2, r2, #1
 800556c:	615a      	str	r2, [r3, #20]

        husart->State = HAL_USART_STATE_READY;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e00f      	b.n	80055a2 <USART_WaitOnFlagUntilTimeout+0xa4>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	4013      	ands	r3, r2
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	429a      	cmp	r2, r3
 8005590:	bf0c      	ite	eq
 8005592:	2301      	moveq	r3, #1
 8005594:	2300      	movne	r3, #0
 8005596:	b2db      	uxtb	r3, r3
 8005598:	461a      	mov	r2, r3
 800559a:	79fb      	ldrb	r3, [r7, #7]
 800559c:	429a      	cmp	r2, r3
 800559e:	d0b7      	beq.n	8005510 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3710      	adds	r7, #16
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
	...

080055ac <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 80055ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055b0:	b0c6      	sub	sp, #280	; 0x118
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg = 0x00U;
 80055b8:	2300      	movs	r3, #0
 80055ba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80055be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68d9      	ldr	r1, [r3, #12]
 80055c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	f021 030c 	bic.w	r3, r1, #12
 80055d0:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 80055d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 80055de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055e2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80055e6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 80055ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055ee:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 80055f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055f4:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 80055f6:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 80055f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	431a      	orrs	r2, r3
 8005600:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005604:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8005606:	431a      	orrs	r2, r3
 8005608:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800560c:	4313      	orrs	r3, r2
 800560e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005612:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8005616:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005620:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8005622:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800562e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005632:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005636:	f023 030c 	bic.w	r3, r3, #12
 800563a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800563e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005642:	689a      	ldr	r2, [r3, #8]
 8005644:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	431a      	orrs	r2, r3
 800564c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	431a      	orrs	r2, r3
 8005654:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005658:	4313      	orrs	r3, r2
 800565a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800565e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8005662:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800566c:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 800566e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6959      	ldr	r1, [r3, #20]
 8005676:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	f421 7340 	bic.w	r3, r1, #768	; 0x300
 8005680:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 8005682:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	4b8b      	ldr	r3, [pc, #556]	; (80058b8 <USART_SetConfig+0x30c>)
 800568a:	429a      	cmp	r2, r3
 800568c:	d006      	beq.n	800569c <USART_SetConfig+0xf0>
 800568e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	4b89      	ldr	r3, [pc, #548]	; (80058bc <USART_SetConfig+0x310>)
 8005696:	429a      	cmp	r2, r3
 8005698:	f040 8114 	bne.w	80058c4 <USART_SetConfig+0x318>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800569c:	f7fe ff62 	bl	8004564 <HAL_RCC_GetPCLK2Freq>
 80056a0:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 80056a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80056a8:	2200      	movs	r2, #0
 80056aa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80056ae:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80056b2:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80056b6:	4622      	mov	r2, r4
 80056b8:	462b      	mov	r3, r5
 80056ba:	1891      	adds	r1, r2, r2
 80056bc:	6739      	str	r1, [r7, #112]	; 0x70
 80056be:	415b      	adcs	r3, r3
 80056c0:	677b      	str	r3, [r7, #116]	; 0x74
 80056c2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80056c6:	4621      	mov	r1, r4
 80056c8:	eb12 0801 	adds.w	r8, r2, r1
 80056cc:	4629      	mov	r1, r5
 80056ce:	eb43 0901 	adc.w	r9, r3, r1
 80056d2:	f04f 0200 	mov.w	r2, #0
 80056d6:	f04f 0300 	mov.w	r3, #0
 80056da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056e6:	4690      	mov	r8, r2
 80056e8:	4699      	mov	r9, r3
 80056ea:	4623      	mov	r3, r4
 80056ec:	eb18 0303 	adds.w	r3, r8, r3
 80056f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80056f4:	462b      	mov	r3, r5
 80056f6:	eb49 0303 	adc.w	r3, r9, r3
 80056fa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80056fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800570a:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800570e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005712:	460b      	mov	r3, r1
 8005714:	18db      	adds	r3, r3, r3
 8005716:	66bb      	str	r3, [r7, #104]	; 0x68
 8005718:	4613      	mov	r3, r2
 800571a:	eb42 0303 	adc.w	r3, r2, r3
 800571e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005720:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8005724:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8005728:	f7fa fd4e 	bl	80001c8 <__aeabi_uldivmod>
 800572c:	4602      	mov	r2, r0
 800572e:	460b      	mov	r3, r1
 8005730:	4b63      	ldr	r3, [pc, #396]	; (80058c0 <USART_SetConfig+0x314>)
 8005732:	fba3 2302 	umull	r2, r3, r3, r2
 8005736:	095b      	lsrs	r3, r3, #5
 8005738:	011c      	lsls	r4, r3, #4
 800573a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800573e:	2200      	movs	r2, #0
 8005740:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005744:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005748:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800574c:	4642      	mov	r2, r8
 800574e:	464b      	mov	r3, r9
 8005750:	1891      	adds	r1, r2, r2
 8005752:	6639      	str	r1, [r7, #96]	; 0x60
 8005754:	415b      	adcs	r3, r3
 8005756:	667b      	str	r3, [r7, #100]	; 0x64
 8005758:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800575c:	4641      	mov	r1, r8
 800575e:	1851      	adds	r1, r2, r1
 8005760:	65b9      	str	r1, [r7, #88]	; 0x58
 8005762:	4649      	mov	r1, r9
 8005764:	414b      	adcs	r3, r1
 8005766:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005768:	f04f 0200 	mov.w	r2, #0
 800576c:	f04f 0300 	mov.w	r3, #0
 8005770:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8005774:	4659      	mov	r1, fp
 8005776:	00cb      	lsls	r3, r1, #3
 8005778:	4651      	mov	r1, sl
 800577a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800577e:	4651      	mov	r1, sl
 8005780:	00ca      	lsls	r2, r1, #3
 8005782:	4610      	mov	r0, r2
 8005784:	4619      	mov	r1, r3
 8005786:	4603      	mov	r3, r0
 8005788:	4642      	mov	r2, r8
 800578a:	189b      	adds	r3, r3, r2
 800578c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005790:	464b      	mov	r3, r9
 8005792:	460a      	mov	r2, r1
 8005794:	eb42 0303 	adc.w	r3, r2, r3
 8005798:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800579c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80057a8:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80057ac:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80057b0:	460b      	mov	r3, r1
 80057b2:	18db      	adds	r3, r3, r3
 80057b4:	653b      	str	r3, [r7, #80]	; 0x50
 80057b6:	4613      	mov	r3, r2
 80057b8:	eb42 0303 	adc.w	r3, r2, r3
 80057bc:	657b      	str	r3, [r7, #84]	; 0x54
 80057be:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80057c2:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80057c6:	f7fa fcff 	bl	80001c8 <__aeabi_uldivmod>
 80057ca:	4602      	mov	r2, r0
 80057cc:	460b      	mov	r3, r1
 80057ce:	4611      	mov	r1, r2
 80057d0:	4b3b      	ldr	r3, [pc, #236]	; (80058c0 <USART_SetConfig+0x314>)
 80057d2:	fba3 2301 	umull	r2, r3, r3, r1
 80057d6:	095b      	lsrs	r3, r3, #5
 80057d8:	2264      	movs	r2, #100	; 0x64
 80057da:	fb02 f303 	mul.w	r3, r2, r3
 80057de:	1acb      	subs	r3, r1, r3
 80057e0:	00db      	lsls	r3, r3, #3
 80057e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80057e6:	4b36      	ldr	r3, [pc, #216]	; (80058c0 <USART_SetConfig+0x314>)
 80057e8:	fba3 2302 	umull	r2, r3, r3, r2
 80057ec:	095b      	lsrs	r3, r3, #5
 80057ee:	005b      	lsls	r3, r3, #1
 80057f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80057f4:	441c      	add	r4, r3
 80057f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80057fa:	2200      	movs	r2, #0
 80057fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005800:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005804:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005808:	4642      	mov	r2, r8
 800580a:	464b      	mov	r3, r9
 800580c:	1891      	adds	r1, r2, r2
 800580e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005810:	415b      	adcs	r3, r3
 8005812:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005814:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005818:	4641      	mov	r1, r8
 800581a:	1851      	adds	r1, r2, r1
 800581c:	6439      	str	r1, [r7, #64]	; 0x40
 800581e:	4649      	mov	r1, r9
 8005820:	414b      	adcs	r3, r1
 8005822:	647b      	str	r3, [r7, #68]	; 0x44
 8005824:	f04f 0200 	mov.w	r2, #0
 8005828:	f04f 0300 	mov.w	r3, #0
 800582c:	e9d7 ab10 	ldrd	sl, fp, [r7, #64]	; 0x40
 8005830:	4659      	mov	r1, fp
 8005832:	00cb      	lsls	r3, r1, #3
 8005834:	4651      	mov	r1, sl
 8005836:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800583a:	4651      	mov	r1, sl
 800583c:	00ca      	lsls	r2, r1, #3
 800583e:	4610      	mov	r0, r2
 8005840:	4619      	mov	r1, r3
 8005842:	4603      	mov	r3, r0
 8005844:	4642      	mov	r2, r8
 8005846:	189b      	adds	r3, r3, r2
 8005848:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800584c:	464b      	mov	r3, r9
 800584e:	460a      	mov	r2, r1
 8005850:	eb42 0303 	adc.w	r3, r2, r3
 8005854:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005858:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005864:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005868:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800586c:	460b      	mov	r3, r1
 800586e:	18db      	adds	r3, r3, r3
 8005870:	63bb      	str	r3, [r7, #56]	; 0x38
 8005872:	4613      	mov	r3, r2
 8005874:	eb42 0303 	adc.w	r3, r2, r3
 8005878:	63fb      	str	r3, [r7, #60]	; 0x3c
 800587a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800587e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005882:	f7fa fca1 	bl	80001c8 <__aeabi_uldivmod>
 8005886:	4602      	mov	r2, r0
 8005888:	460b      	mov	r3, r1
 800588a:	4b0d      	ldr	r3, [pc, #52]	; (80058c0 <USART_SetConfig+0x314>)
 800588c:	fba3 1302 	umull	r1, r3, r3, r2
 8005890:	095b      	lsrs	r3, r3, #5
 8005892:	2164      	movs	r1, #100	; 0x64
 8005894:	fb01 f303 	mul.w	r3, r1, r3
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	00db      	lsls	r3, r3, #3
 800589c:	3332      	adds	r3, #50	; 0x32
 800589e:	4a08      	ldr	r2, [pc, #32]	; (80058c0 <USART_SetConfig+0x314>)
 80058a0:	fba2 2303 	umull	r2, r3, r2, r3
 80058a4:	095b      	lsrs	r3, r3, #5
 80058a6:	f003 0207 	and.w	r2, r3, #7
 80058aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4422      	add	r2, r4
 80058b2:	609a      	str	r2, [r3, #8]
 80058b4:	e109      	b.n	8005aca <USART_SetConfig+0x51e>
 80058b6:	bf00      	nop
 80058b8:	40011000 	.word	0x40011000
 80058bc:	40011400 	.word	0x40011400
 80058c0:	51eb851f 	.word	0x51eb851f
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80058c4:	f7fe fe3a 	bl	800453c <HAL_RCC_GetPCLK1Freq>
 80058c8:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 80058cc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80058d0:	2200      	movs	r2, #0
 80058d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058d6:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80058da:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80058de:	4642      	mov	r2, r8
 80058e0:	464b      	mov	r3, r9
 80058e2:	1891      	adds	r1, r2, r2
 80058e4:	6339      	str	r1, [r7, #48]	; 0x30
 80058e6:	415b      	adcs	r3, r3
 80058e8:	637b      	str	r3, [r7, #52]	; 0x34
 80058ea:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80058ee:	4641      	mov	r1, r8
 80058f0:	1854      	adds	r4, r2, r1
 80058f2:	4649      	mov	r1, r9
 80058f4:	eb43 0501 	adc.w	r5, r3, r1
 80058f8:	f04f 0200 	mov.w	r2, #0
 80058fc:	f04f 0300 	mov.w	r3, #0
 8005900:	00eb      	lsls	r3, r5, #3
 8005902:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005906:	00e2      	lsls	r2, r4, #3
 8005908:	4614      	mov	r4, r2
 800590a:	461d      	mov	r5, r3
 800590c:	4643      	mov	r3, r8
 800590e:	18e3      	adds	r3, r4, r3
 8005910:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005914:	464b      	mov	r3, r9
 8005916:	eb45 0303 	adc.w	r3, r5, r3
 800591a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800591e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800592a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800592e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005932:	460b      	mov	r3, r1
 8005934:	18db      	adds	r3, r3, r3
 8005936:	62bb      	str	r3, [r7, #40]	; 0x28
 8005938:	4613      	mov	r3, r2
 800593a:	eb42 0303 	adc.w	r3, r2, r3
 800593e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005940:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005944:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005948:	f7fa fc3e 	bl	80001c8 <__aeabi_uldivmod>
 800594c:	4602      	mov	r2, r0
 800594e:	460b      	mov	r3, r1
 8005950:	4b61      	ldr	r3, [pc, #388]	; (8005ad8 <USART_SetConfig+0x52c>)
 8005952:	fba3 2302 	umull	r2, r3, r3, r2
 8005956:	095b      	lsrs	r3, r3, #5
 8005958:	011c      	lsls	r4, r3, #4
 800595a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800595e:	2200      	movs	r2, #0
 8005960:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005964:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005968:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800596c:	4642      	mov	r2, r8
 800596e:	464b      	mov	r3, r9
 8005970:	1891      	adds	r1, r2, r2
 8005972:	6239      	str	r1, [r7, #32]
 8005974:	415b      	adcs	r3, r3
 8005976:	627b      	str	r3, [r7, #36]	; 0x24
 8005978:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800597c:	4641      	mov	r1, r8
 800597e:	eb12 0a01 	adds.w	sl, r2, r1
 8005982:	4649      	mov	r1, r9
 8005984:	eb43 0b01 	adc.w	fp, r3, r1
 8005988:	f04f 0200 	mov.w	r2, #0
 800598c:	f04f 0300 	mov.w	r3, #0
 8005990:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005994:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005998:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800599c:	4692      	mov	sl, r2
 800599e:	469b      	mov	fp, r3
 80059a0:	4643      	mov	r3, r8
 80059a2:	eb1a 0303 	adds.w	r3, sl, r3
 80059a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80059aa:	464b      	mov	r3, r9
 80059ac:	eb4b 0303 	adc.w	r3, fp, r3
 80059b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80059b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80059c0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80059c4:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80059c8:	460b      	mov	r3, r1
 80059ca:	18db      	adds	r3, r3, r3
 80059cc:	61bb      	str	r3, [r7, #24]
 80059ce:	4613      	mov	r3, r2
 80059d0:	eb42 0303 	adc.w	r3, r2, r3
 80059d4:	61fb      	str	r3, [r7, #28]
 80059d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059da:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80059de:	f7fa fbf3 	bl	80001c8 <__aeabi_uldivmod>
 80059e2:	4602      	mov	r2, r0
 80059e4:	460b      	mov	r3, r1
 80059e6:	4611      	mov	r1, r2
 80059e8:	4b3b      	ldr	r3, [pc, #236]	; (8005ad8 <USART_SetConfig+0x52c>)
 80059ea:	fba3 2301 	umull	r2, r3, r3, r1
 80059ee:	095b      	lsrs	r3, r3, #5
 80059f0:	2264      	movs	r2, #100	; 0x64
 80059f2:	fb02 f303 	mul.w	r3, r2, r3
 80059f6:	1acb      	subs	r3, r1, r3
 80059f8:	00db      	lsls	r3, r3, #3
 80059fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80059fe:	4b36      	ldr	r3, [pc, #216]	; (8005ad8 <USART_SetConfig+0x52c>)
 8005a00:	fba3 2302 	umull	r2, r3, r3, r2
 8005a04:	095b      	lsrs	r3, r3, #5
 8005a06:	005b      	lsls	r3, r3, #1
 8005a08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a0c:	441c      	add	r4, r3
 8005a0e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005a12:	2200      	movs	r2, #0
 8005a14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005a18:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005a1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005a20:	4642      	mov	r2, r8
 8005a22:	464b      	mov	r3, r9
 8005a24:	1891      	adds	r1, r2, r2
 8005a26:	6139      	str	r1, [r7, #16]
 8005a28:	415b      	adcs	r3, r3
 8005a2a:	617b      	str	r3, [r7, #20]
 8005a2c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005a30:	4641      	mov	r1, r8
 8005a32:	1851      	adds	r1, r2, r1
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	4649      	mov	r1, r9
 8005a38:	414b      	adcs	r3, r1
 8005a3a:	60fb      	str	r3, [r7, #12]
 8005a3c:	f04f 0200 	mov.w	r2, #0
 8005a40:	f04f 0300 	mov.w	r3, #0
 8005a44:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005a48:	4659      	mov	r1, fp
 8005a4a:	00cb      	lsls	r3, r1, #3
 8005a4c:	4651      	mov	r1, sl
 8005a4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a52:	4651      	mov	r1, sl
 8005a54:	00ca      	lsls	r2, r1, #3
 8005a56:	4610      	mov	r0, r2
 8005a58:	4619      	mov	r1, r3
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	4642      	mov	r2, r8
 8005a5e:	189b      	adds	r3, r3, r2
 8005a60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a64:	464b      	mov	r3, r9
 8005a66:	460a      	mov	r2, r1
 8005a68:	eb42 0303 	adc.w	r3, r2, r3
 8005a6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a7a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005a7c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005a80:	460b      	mov	r3, r1
 8005a82:	18db      	adds	r3, r3, r3
 8005a84:	603b      	str	r3, [r7, #0]
 8005a86:	4613      	mov	r3, r2
 8005a88:	eb42 0303 	adc.w	r3, r2, r3
 8005a8c:	607b      	str	r3, [r7, #4]
 8005a8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005a96:	f7fa fb97 	bl	80001c8 <__aeabi_uldivmod>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	4b0e      	ldr	r3, [pc, #56]	; (8005ad8 <USART_SetConfig+0x52c>)
 8005aa0:	fba3 1302 	umull	r1, r3, r3, r2
 8005aa4:	095b      	lsrs	r3, r3, #5
 8005aa6:	2164      	movs	r1, #100	; 0x64
 8005aa8:	fb01 f303 	mul.w	r3, r1, r3
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	00db      	lsls	r3, r3, #3
 8005ab0:	3332      	adds	r3, #50	; 0x32
 8005ab2:	4a09      	ldr	r2, [pc, #36]	; (8005ad8 <USART_SetConfig+0x52c>)
 8005ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab8:	095b      	lsrs	r3, r3, #5
 8005aba:	f003 0207 	and.w	r2, r3, #7
 8005abe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4422      	add	r2, r4
 8005ac6:	609a      	str	r2, [r3, #8]
  }
}
 8005ac8:	bf00      	nop
 8005aca:	bf00      	nop
 8005acc:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ad6:	bf00      	nop
 8005ad8:	51eb851f 	.word	0x51eb851f

08005adc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005adc:	b084      	sub	sp, #16
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b084      	sub	sp, #16
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
 8005ae6:	f107 001c 	add.w	r0, r7, #28
 8005aea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d122      	bne.n	8005b3a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005b08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d105      	bne.n	8005b2e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 f9c0 	bl	8005eb4 <USB_CoreReset>
 8005b34:	4603      	mov	r3, r0
 8005b36:	73fb      	strb	r3, [r7, #15]
 8005b38:	e01a      	b.n	8005b70 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 f9b4 	bl	8005eb4 <USB_CoreReset>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005b50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d106      	bne.n	8005b64 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	639a      	str	r2, [r3, #56]	; 0x38
 8005b62:	e005      	b.n	8005b70 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d10b      	bne.n	8005b8e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f043 0206 	orr.w	r2, r3, #6
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	f043 0220 	orr.w	r2, r3, #32
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b9a:	b004      	add	sp, #16
 8005b9c:	4770      	bx	lr

08005b9e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b083      	sub	sp, #12
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	f043 0201 	orr.w	r2, r3, #1
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	f023 0201 	bic.w	r2, r3, #1
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	370c      	adds	r7, #12
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr

08005be2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005be2:	b580      	push	{r7, lr}
 8005be4:	b084      	sub	sp, #16
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
 8005bea:	460b      	mov	r3, r1
 8005bec:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005bfe:	78fb      	ldrb	r3, [r7, #3]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d115      	bne.n	8005c30 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c10:	2001      	movs	r0, #1
 8005c12:	f7fb fb65 	bl	80012e0 <HAL_Delay>
      ms++;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	3301      	adds	r3, #1
 8005c1a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 f93a 	bl	8005e96 <USB_GetMode>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d01e      	beq.n	8005c66 <USB_SetCurrentMode+0x84>
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2b31      	cmp	r3, #49	; 0x31
 8005c2c:	d9f0      	bls.n	8005c10 <USB_SetCurrentMode+0x2e>
 8005c2e:	e01a      	b.n	8005c66 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005c30:	78fb      	ldrb	r3, [r7, #3]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d115      	bne.n	8005c62 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c42:	2001      	movs	r0, #1
 8005c44:	f7fb fb4c 	bl	80012e0 <HAL_Delay>
      ms++;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 f921 	bl	8005e96 <USB_GetMode>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d005      	beq.n	8005c66 <USB_SetCurrentMode+0x84>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2b31      	cmp	r3, #49	; 0x31
 8005c5e:	d9f0      	bls.n	8005c42 <USB_SetCurrentMode+0x60>
 8005c60:	e001      	b.n	8005c66 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e005      	b.n	8005c72 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2b32      	cmp	r3, #50	; 0x32
 8005c6a:	d101      	bne.n	8005c70 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e000      	b.n	8005c72 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
	...

08005c7c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b085      	sub	sp, #20
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c86:	2300      	movs	r3, #0
 8005c88:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	4a13      	ldr	r2, [pc, #76]	; (8005ce0 <USB_FlushTxFifo+0x64>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d901      	bls.n	8005c9c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e01b      	b.n	8005cd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	daf2      	bge.n	8005c8a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	019b      	lsls	r3, r3, #6
 8005cac:	f043 0220 	orr.w	r2, r3, #32
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	4a08      	ldr	r2, [pc, #32]	; (8005ce0 <USB_FlushTxFifo+0x64>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d901      	bls.n	8005cc6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	e006      	b.n	8005cd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	f003 0320 	and.w	r3, r3, #32
 8005cce:	2b20      	cmp	r3, #32
 8005cd0:	d0f0      	beq.n	8005cb4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3714      	adds	r7, #20
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr
 8005ce0:	00030d40 	.word	0x00030d40

08005ce4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005cec:	2300      	movs	r3, #0
 8005cee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	4a11      	ldr	r2, [pc, #68]	; (8005d40 <USB_FlushRxFifo+0x5c>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d901      	bls.n	8005d02 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e018      	b.n	8005d34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	daf2      	bge.n	8005cf0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2210      	movs	r2, #16
 8005d12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	3301      	adds	r3, #1
 8005d18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	4a08      	ldr	r2, [pc, #32]	; (8005d40 <USB_FlushRxFifo+0x5c>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d901      	bls.n	8005d26 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e006      	b.n	8005d34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	f003 0310 	and.w	r3, r3, #16
 8005d2e:	2b10      	cmp	r3, #16
 8005d30:	d0f0      	beq.n	8005d14 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3714      	adds	r7, #20
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr
 8005d40:	00030d40 	.word	0x00030d40

08005d44 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b089      	sub	sp, #36	; 0x24
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	4611      	mov	r1, r2
 8005d50:	461a      	mov	r2, r3
 8005d52:	460b      	mov	r3, r1
 8005d54:	71fb      	strb	r3, [r7, #7]
 8005d56:	4613      	mov	r3, r2
 8005d58:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005d62:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d123      	bne.n	8005db2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005d6a:	88bb      	ldrh	r3, [r7, #4]
 8005d6c:	3303      	adds	r3, #3
 8005d6e:	089b      	lsrs	r3, r3, #2
 8005d70:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005d72:	2300      	movs	r3, #0
 8005d74:	61bb      	str	r3, [r7, #24]
 8005d76:	e018      	b.n	8005daa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005d78:	79fb      	ldrb	r3, [r7, #7]
 8005d7a:	031a      	lsls	r2, r3, #12
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	4413      	add	r3, r2
 8005d80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d84:	461a      	mov	r2, r3
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	3301      	adds	r3, #1
 8005d90:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	3301      	adds	r3, #1
 8005d96:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	3301      	adds	r3, #1
 8005da2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	3301      	adds	r3, #1
 8005da8:	61bb      	str	r3, [r7, #24]
 8005daa:	69ba      	ldr	r2, [r7, #24]
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d3e2      	bcc.n	8005d78 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3724      	adds	r7, #36	; 0x24
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b08b      	sub	sp, #44	; 0x2c
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005dd6:	88fb      	ldrh	r3, [r7, #6]
 8005dd8:	089b      	lsrs	r3, r3, #2
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005dde:	88fb      	ldrh	r3, [r7, #6]
 8005de0:	f003 0303 	and.w	r3, r3, #3
 8005de4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005de6:	2300      	movs	r3, #0
 8005de8:	623b      	str	r3, [r7, #32]
 8005dea:	e014      	b.n	8005e16 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df6:	601a      	str	r2, [r3, #0]
    pDest++;
 8005df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e00:	3301      	adds	r3, #1
 8005e02:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e06:	3301      	adds	r3, #1
 8005e08:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005e10:	6a3b      	ldr	r3, [r7, #32]
 8005e12:	3301      	adds	r3, #1
 8005e14:	623b      	str	r3, [r7, #32]
 8005e16:	6a3a      	ldr	r2, [r7, #32]
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d3e6      	bcc.n	8005dec <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005e1e:	8bfb      	ldrh	r3, [r7, #30]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d01e      	beq.n	8005e62 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005e24:	2300      	movs	r3, #0
 8005e26:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e2e:	461a      	mov	r2, r3
 8005e30:	f107 0310 	add.w	r3, r7, #16
 8005e34:	6812      	ldr	r2, [r2, #0]
 8005e36:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	6a3b      	ldr	r3, [r7, #32]
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	00db      	lsls	r3, r3, #3
 8005e40:	fa22 f303 	lsr.w	r3, r2, r3
 8005e44:	b2da      	uxtb	r2, r3
 8005e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e48:	701a      	strb	r2, [r3, #0]
      i++;
 8005e4a:	6a3b      	ldr	r3, [r7, #32]
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e52:	3301      	adds	r3, #1
 8005e54:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005e56:	8bfb      	ldrh	r3, [r7, #30]
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005e5c:	8bfb      	ldrh	r3, [r7, #30]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1ea      	bne.n	8005e38 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	372c      	adds	r7, #44	; 0x2c
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	695b      	ldr	r3, [r3, #20]
 8005e7c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	4013      	ands	r3, r2
 8005e86:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005e88:	68fb      	ldr	r3, [r7, #12]
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3714      	adds	r7, #20
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr

08005e96 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005e96:	b480      	push	{r7}
 8005e98:	b083      	sub	sp, #12
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	f003 0301 	and.w	r3, r3, #1
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	370c      	adds	r7, #12
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
	...

08005eb4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	4a13      	ldr	r2, [pc, #76]	; (8005f18 <USB_CoreReset+0x64>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d901      	bls.n	8005ed2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e01b      	b.n	8005f0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	daf2      	bge.n	8005ec0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005eda:	2300      	movs	r3, #0
 8005edc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	f043 0201 	orr.w	r2, r3, #1
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	3301      	adds	r3, #1
 8005eee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	4a09      	ldr	r2, [pc, #36]	; (8005f18 <USB_CoreReset+0x64>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d901      	bls.n	8005efc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005ef8:	2303      	movs	r3, #3
 8005efa:	e006      	b.n	8005f0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	f003 0301 	and.w	r3, r3, #1
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d0f0      	beq.n	8005eea <USB_CoreReset+0x36>

  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3714      	adds	r7, #20
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	00030d40 	.word	0x00030d40

08005f1c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f1c:	b084      	sub	sp, #16
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b086      	sub	sp, #24
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
 8005f26:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005f2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	2300      	movs	r3, #0
 8005f40:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f46:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f52:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d018      	beq.n	8005fa4 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d10a      	bne.n	8005f8e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f86:	f043 0304 	orr.w	r3, r3, #4
 8005f8a:	6013      	str	r3, [r2, #0]
 8005f8c:	e014      	b.n	8005fb8 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f9c:	f023 0304 	bic.w	r3, r3, #4
 8005fa0:	6013      	str	r3, [r2, #0]
 8005fa2:	e009      	b.n	8005fb8 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005fb2:	f023 0304 	bic.w	r3, r3, #4
 8005fb6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005fb8:	2110      	movs	r1, #16
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f7ff fe5e 	bl	8005c7c <USB_FlushTxFifo>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d001      	beq.n	8005fca <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f7ff fe8a 	bl	8005ce4 <USB_FlushRxFifo>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d001      	beq.n	8005fda <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005fda:	2300      	movs	r3, #0
 8005fdc:	613b      	str	r3, [r7, #16]
 8005fde:	e015      	b.n	800600c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	015a      	lsls	r2, r3, #5
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fec:	461a      	mov	r2, r3
 8005fee:	f04f 33ff 	mov.w	r3, #4294967295
 8005ff2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	015a      	lsls	r2, r3, #5
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006000:	461a      	mov	r2, r3
 8006002:	2300      	movs	r3, #0
 8006004:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	3301      	adds	r3, #1
 800600a:	613b      	str	r3, [r7, #16]
 800600c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	429a      	cmp	r2, r3
 8006012:	d3e5      	bcc.n	8005fe0 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f04f 32ff 	mov.w	r2, #4294967295
 8006020:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00b      	beq.n	8006046 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006034:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a13      	ldr	r2, [pc, #76]	; (8006088 <USB_HostInit+0x16c>)
 800603a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a13      	ldr	r2, [pc, #76]	; (800608c <USB_HostInit+0x170>)
 8006040:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006044:	e009      	b.n	800605a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2280      	movs	r2, #128	; 0x80
 800604a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a10      	ldr	r2, [pc, #64]	; (8006090 <USB_HostInit+0x174>)
 8006050:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a0f      	ldr	r2, [pc, #60]	; (8006094 <USB_HostInit+0x178>)
 8006056:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800605a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605c:	2b00      	cmp	r3, #0
 800605e:	d105      	bne.n	800606c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	f043 0210 	orr.w	r2, r3, #16
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	699a      	ldr	r2, [r3, #24]
 8006070:	4b09      	ldr	r3, [pc, #36]	; (8006098 <USB_HostInit+0x17c>)
 8006072:	4313      	orrs	r3, r2
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006078:	7dfb      	ldrb	r3, [r7, #23]
}
 800607a:	4618      	mov	r0, r3
 800607c:	3718      	adds	r7, #24
 800607e:	46bd      	mov	sp, r7
 8006080:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006084:	b004      	add	sp, #16
 8006086:	4770      	bx	lr
 8006088:	01000200 	.word	0x01000200
 800608c:	00e00300 	.word	0x00e00300
 8006090:	00600080 	.word	0x00600080
 8006094:	004000e0 	.word	0x004000e0
 8006098:	a3200008 	.word	0xa3200008

0800609c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800609c:	b480      	push	{r7}
 800609e:	b085      	sub	sp, #20
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	460b      	mov	r3, r1
 80060a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80060ba:	f023 0303 	bic.w	r3, r3, #3
 80060be:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	78fb      	ldrb	r3, [r7, #3]
 80060ca:	f003 0303 	and.w	r3, r3, #3
 80060ce:	68f9      	ldr	r1, [r7, #12]
 80060d0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80060d4:	4313      	orrs	r3, r2
 80060d6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80060d8:	78fb      	ldrb	r3, [r7, #3]
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d107      	bne.n	80060ee <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060e4:	461a      	mov	r2, r3
 80060e6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80060ea:	6053      	str	r3, [r2, #4]
 80060ec:	e009      	b.n	8006102 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80060ee:	78fb      	ldrb	r3, [r7, #3]
 80060f0:	2b02      	cmp	r3, #2
 80060f2:	d106      	bne.n	8006102 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060fa:	461a      	mov	r2, r3
 80060fc:	f241 7370 	movw	r3, #6000	; 0x1770
 8006100:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	3714      	adds	r7, #20
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	460b      	mov	r3, r1
 800611a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006120:	2300      	movs	r3, #0
 8006122:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006134:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800613c:	2b00      	cmp	r3, #0
 800613e:	d109      	bne.n	8006154 <USB_DriveVbus+0x44>
 8006140:	78fb      	ldrb	r3, [r7, #3]
 8006142:	2b01      	cmp	r3, #1
 8006144:	d106      	bne.n	8006154 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800614e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006152:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800615a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800615e:	d109      	bne.n	8006174 <USB_DriveVbus+0x64>
 8006160:	78fb      	ldrb	r3, [r7, #3]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d106      	bne.n	8006174 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800616e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006172:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3714      	adds	r7, #20
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr

08006182 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006182:	b480      	push	{r7}
 8006184:	b085      	sub	sp, #20
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800618e:	2300      	movs	r3, #0
 8006190:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	0c5b      	lsrs	r3, r3, #17
 80061a0:	f003 0303 	and.w	r3, r3, #3
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3714      	adds	r7, #20
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	b29b      	uxth	r3, r3
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3714      	adds	r7, #20
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
	...

080061d4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b088      	sub	sp, #32
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	4608      	mov	r0, r1
 80061de:	4611      	mov	r1, r2
 80061e0:	461a      	mov	r2, r3
 80061e2:	4603      	mov	r3, r0
 80061e4:	70fb      	strb	r3, [r7, #3]
 80061e6:	460b      	mov	r3, r1
 80061e8:	70bb      	strb	r3, [r7, #2]
 80061ea:	4613      	mov	r3, r2
 80061ec:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80061ee:	2300      	movs	r3, #0
 80061f0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80061f6:	78fb      	ldrb	r3, [r7, #3]
 80061f8:	015a      	lsls	r2, r3, #5
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	4413      	add	r3, r2
 80061fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006202:	461a      	mov	r2, r3
 8006204:	f04f 33ff 	mov.w	r3, #4294967295
 8006208:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800620a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800620e:	2b03      	cmp	r3, #3
 8006210:	d87e      	bhi.n	8006310 <USB_HC_Init+0x13c>
 8006212:	a201      	add	r2, pc, #4	; (adr r2, 8006218 <USB_HC_Init+0x44>)
 8006214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006218:	08006229 	.word	0x08006229
 800621c:	080062d3 	.word	0x080062d3
 8006220:	08006229 	.word	0x08006229
 8006224:	08006295 	.word	0x08006295
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006228:	78fb      	ldrb	r3, [r7, #3]
 800622a:	015a      	lsls	r2, r3, #5
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	4413      	add	r3, r2
 8006230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006234:	461a      	mov	r2, r3
 8006236:	f240 439d 	movw	r3, #1181	; 0x49d
 800623a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800623c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006240:	2b00      	cmp	r3, #0
 8006242:	da10      	bge.n	8006266 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006244:	78fb      	ldrb	r3, [r7, #3]
 8006246:	015a      	lsls	r2, r3, #5
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	4413      	add	r3, r2
 800624c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	78fa      	ldrb	r2, [r7, #3]
 8006254:	0151      	lsls	r1, r2, #5
 8006256:	693a      	ldr	r2, [r7, #16]
 8006258:	440a      	add	r2, r1
 800625a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800625e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006262:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006264:	e057      	b.n	8006316 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800626a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800626e:	2b00      	cmp	r3, #0
 8006270:	d051      	beq.n	8006316 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006272:	78fb      	ldrb	r3, [r7, #3]
 8006274:	015a      	lsls	r2, r3, #5
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	4413      	add	r3, r2
 800627a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	78fa      	ldrb	r2, [r7, #3]
 8006282:	0151      	lsls	r1, r2, #5
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	440a      	add	r2, r1
 8006288:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800628c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006290:	60d3      	str	r3, [r2, #12]
      break;
 8006292:	e040      	b.n	8006316 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006294:	78fb      	ldrb	r3, [r7, #3]
 8006296:	015a      	lsls	r2, r3, #5
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	4413      	add	r3, r2
 800629c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062a0:	461a      	mov	r2, r3
 80062a2:	f240 639d 	movw	r3, #1693	; 0x69d
 80062a6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80062a8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	da34      	bge.n	800631a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80062b0:	78fb      	ldrb	r3, [r7, #3]
 80062b2:	015a      	lsls	r2, r3, #5
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	4413      	add	r3, r2
 80062b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	78fa      	ldrb	r2, [r7, #3]
 80062c0:	0151      	lsls	r1, r2, #5
 80062c2:	693a      	ldr	r2, [r7, #16]
 80062c4:	440a      	add	r2, r1
 80062c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062ce:	60d3      	str	r3, [r2, #12]
      }

      break;
 80062d0:	e023      	b.n	800631a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80062d2:	78fb      	ldrb	r3, [r7, #3]
 80062d4:	015a      	lsls	r2, r3, #5
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	4413      	add	r3, r2
 80062da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062de:	461a      	mov	r2, r3
 80062e0:	f240 2325 	movw	r3, #549	; 0x225
 80062e4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80062e6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	da17      	bge.n	800631e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80062ee:	78fb      	ldrb	r3, [r7, #3]
 80062f0:	015a      	lsls	r2, r3, #5
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	4413      	add	r3, r2
 80062f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	78fa      	ldrb	r2, [r7, #3]
 80062fe:	0151      	lsls	r1, r2, #5
 8006300:	693a      	ldr	r2, [r7, #16]
 8006302:	440a      	add	r2, r1
 8006304:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006308:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800630c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800630e:	e006      	b.n	800631e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	77fb      	strb	r3, [r7, #31]
      break;
 8006314:	e004      	b.n	8006320 <USB_HC_Init+0x14c>
      break;
 8006316:	bf00      	nop
 8006318:	e002      	b.n	8006320 <USB_HC_Init+0x14c>
      break;
 800631a:	bf00      	nop
 800631c:	e000      	b.n	8006320 <USB_HC_Init+0x14c>
      break;
 800631e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006320:	78fb      	ldrb	r3, [r7, #3]
 8006322:	015a      	lsls	r2, r3, #5
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	4413      	add	r3, r2
 8006328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	78fa      	ldrb	r2, [r7, #3]
 8006330:	0151      	lsls	r1, r2, #5
 8006332:	693a      	ldr	r2, [r7, #16]
 8006334:	440a      	add	r2, r1
 8006336:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800633a:	f043 0302 	orr.w	r3, r3, #2
 800633e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006346:	699a      	ldr	r2, [r3, #24]
 8006348:	78fb      	ldrb	r3, [r7, #3]
 800634a:	f003 030f 	and.w	r3, r3, #15
 800634e:	2101      	movs	r1, #1
 8006350:	fa01 f303 	lsl.w	r3, r1, r3
 8006354:	6939      	ldr	r1, [r7, #16]
 8006356:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800635a:	4313      	orrs	r3, r2
 800635c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800636a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800636e:	2b00      	cmp	r3, #0
 8006370:	da03      	bge.n	800637a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006372:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006376:	61bb      	str	r3, [r7, #24]
 8006378:	e001      	b.n	800637e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800637a:	2300      	movs	r3, #0
 800637c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f7ff feff 	bl	8006182 <USB_GetHostSpeed>
 8006384:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006386:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800638a:	2b02      	cmp	r3, #2
 800638c:	d106      	bne.n	800639c <USB_HC_Init+0x1c8>
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2b02      	cmp	r3, #2
 8006392:	d003      	beq.n	800639c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006394:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006398:	617b      	str	r3, [r7, #20]
 800639a:	e001      	b.n	80063a0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800639c:	2300      	movs	r3, #0
 800639e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80063a0:	787b      	ldrb	r3, [r7, #1]
 80063a2:	059b      	lsls	r3, r3, #22
 80063a4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80063a8:	78bb      	ldrb	r3, [r7, #2]
 80063aa:	02db      	lsls	r3, r3, #11
 80063ac:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80063b0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80063b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80063b6:	049b      	lsls	r3, r3, #18
 80063b8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80063bc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80063be:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80063c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80063c4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80063ca:	78fb      	ldrb	r3, [r7, #3]
 80063cc:	0159      	lsls	r1, r3, #5
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	440b      	add	r3, r1
 80063d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063d6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80063dc:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80063de:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80063e2:	2b03      	cmp	r3, #3
 80063e4:	d003      	beq.n	80063ee <USB_HC_Init+0x21a>
 80063e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d10f      	bne.n	800640e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80063ee:	78fb      	ldrb	r3, [r7, #3]
 80063f0:	015a      	lsls	r2, r3, #5
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	4413      	add	r3, r2
 80063f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	78fa      	ldrb	r2, [r7, #3]
 80063fe:	0151      	lsls	r1, r2, #5
 8006400:	693a      	ldr	r2, [r7, #16]
 8006402:	440a      	add	r2, r1
 8006404:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006408:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800640c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800640e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006410:	4618      	mov	r0, r3
 8006412:	3720      	adds	r7, #32
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b08c      	sub	sp, #48	; 0x30
 800641c:	af02      	add	r7, sp, #8
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	4613      	mov	r3, r2
 8006424:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	785b      	ldrb	r3, [r3, #1]
 800642e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006430:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006434:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800643a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800643e:	2b00      	cmp	r3, #0
 8006440:	d02d      	beq.n	800649e <USB_HC_StartXfer+0x86>
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	791b      	ldrb	r3, [r3, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d129      	bne.n	800649e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800644a:	79fb      	ldrb	r3, [r7, #7]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d117      	bne.n	8006480 <USB_HC_StartXfer+0x68>
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	79db      	ldrb	r3, [r3, #7]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d003      	beq.n	8006460 <USB_HC_StartXfer+0x48>
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	79db      	ldrb	r3, [r3, #7]
 800645c:	2b02      	cmp	r3, #2
 800645e:	d10f      	bne.n	8006480 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	015a      	lsls	r2, r3, #5
 8006464:	6a3b      	ldr	r3, [r7, #32]
 8006466:	4413      	add	r3, r2
 8006468:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	69fa      	ldr	r2, [r7, #28]
 8006470:	0151      	lsls	r1, r2, #5
 8006472:	6a3a      	ldr	r2, [r7, #32]
 8006474:	440a      	add	r2, r1
 8006476:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800647a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800647e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006480:	79fb      	ldrb	r3, [r7, #7]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d10b      	bne.n	800649e <USB_HC_StartXfer+0x86>
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	795b      	ldrb	r3, [r3, #5]
 800648a:	2b01      	cmp	r3, #1
 800648c:	d107      	bne.n	800649e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	785b      	ldrb	r3, [r3, #1]
 8006492:	4619      	mov	r1, r3
 8006494:	68f8      	ldr	r0, [r7, #12]
 8006496:	f000 fa0f 	bl	80068b8 <USB_DoPing>
      return HAL_OK;
 800649a:	2300      	movs	r3, #0
 800649c:	e0f8      	b.n	8006690 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	695b      	ldr	r3, [r3, #20]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d018      	beq.n	80064d8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	695b      	ldr	r3, [r3, #20]
 80064aa:	68ba      	ldr	r2, [r7, #8]
 80064ac:	8912      	ldrh	r2, [r2, #8]
 80064ae:	4413      	add	r3, r2
 80064b0:	3b01      	subs	r3, #1
 80064b2:	68ba      	ldr	r2, [r7, #8]
 80064b4:	8912      	ldrh	r2, [r2, #8]
 80064b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80064ba:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80064bc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80064be:	8b7b      	ldrh	r3, [r7, #26]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d90b      	bls.n	80064dc <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80064c4:	8b7b      	ldrh	r3, [r7, #26]
 80064c6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80064c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80064ca:	68ba      	ldr	r2, [r7, #8]
 80064cc:	8912      	ldrh	r2, [r2, #8]
 80064ce:	fb03 f202 	mul.w	r2, r3, r2
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	611a      	str	r2, [r3, #16]
 80064d6:	e001      	b.n	80064dc <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80064d8:	2301      	movs	r3, #1
 80064da:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	78db      	ldrb	r3, [r3, #3]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d007      	beq.n	80064f4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80064e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80064e6:	68ba      	ldr	r2, [r7, #8]
 80064e8:	8912      	ldrh	r2, [r2, #8]
 80064ea:	fb03 f202 	mul.w	r2, r3, r2
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	611a      	str	r2, [r3, #16]
 80064f2:	e003      	b.n	80064fc <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	695a      	ldr	r2, [r3, #20]
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006504:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006506:	04d9      	lsls	r1, r3, #19
 8006508:	4b63      	ldr	r3, [pc, #396]	; (8006698 <USB_HC_StartXfer+0x280>)
 800650a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800650c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	7a9b      	ldrb	r3, [r3, #10]
 8006512:	075b      	lsls	r3, r3, #29
 8006514:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006518:	69f9      	ldr	r1, [r7, #28]
 800651a:	0148      	lsls	r0, r1, #5
 800651c:	6a39      	ldr	r1, [r7, #32]
 800651e:	4401      	add	r1, r0
 8006520:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006524:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006526:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006528:	79fb      	ldrb	r3, [r7, #7]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d009      	beq.n	8006542 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	68d9      	ldr	r1, [r3, #12]
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	015a      	lsls	r2, r3, #5
 8006536:	6a3b      	ldr	r3, [r7, #32]
 8006538:	4413      	add	r3, r2
 800653a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800653e:	460a      	mov	r2, r1
 8006540:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006542:	6a3b      	ldr	r3, [r7, #32]
 8006544:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f003 0301 	and.w	r3, r3, #1
 800654e:	2b00      	cmp	r3, #0
 8006550:	bf0c      	ite	eq
 8006552:	2301      	moveq	r3, #1
 8006554:	2300      	movne	r3, #0
 8006556:	b2db      	uxtb	r3, r3
 8006558:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	015a      	lsls	r2, r3, #5
 800655e:	6a3b      	ldr	r3, [r7, #32]
 8006560:	4413      	add	r3, r2
 8006562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	69fa      	ldr	r2, [r7, #28]
 800656a:	0151      	lsls	r1, r2, #5
 800656c:	6a3a      	ldr	r2, [r7, #32]
 800656e:	440a      	add	r2, r1
 8006570:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006574:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006578:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	015a      	lsls	r2, r3, #5
 800657e:	6a3b      	ldr	r3, [r7, #32]
 8006580:	4413      	add	r3, r2
 8006582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	7e7b      	ldrb	r3, [r7, #25]
 800658a:	075b      	lsls	r3, r3, #29
 800658c:	69f9      	ldr	r1, [r7, #28]
 800658e:	0148      	lsls	r0, r1, #5
 8006590:	6a39      	ldr	r1, [r7, #32]
 8006592:	4401      	add	r1, r0
 8006594:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006598:	4313      	orrs	r3, r2
 800659a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	015a      	lsls	r2, r3, #5
 80065a0:	6a3b      	ldr	r3, [r7, #32]
 80065a2:	4413      	add	r3, r2
 80065a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80065b2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	78db      	ldrb	r3, [r3, #3]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d004      	beq.n	80065c6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065c2:	613b      	str	r3, [r7, #16]
 80065c4:	e003      	b.n	80065ce <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80065cc:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065d4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	015a      	lsls	r2, r3, #5
 80065da:	6a3b      	ldr	r3, [r7, #32]
 80065dc:	4413      	add	r3, r2
 80065de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065e2:	461a      	mov	r2, r3
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80065e8:	79fb      	ldrb	r3, [r7, #7]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d001      	beq.n	80065f2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80065ee:	2300      	movs	r3, #0
 80065f0:	e04e      	b.n	8006690 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	78db      	ldrb	r3, [r3, #3]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d149      	bne.n	800668e <USB_HC_StartXfer+0x276>
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	695b      	ldr	r3, [r3, #20]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d045      	beq.n	800668e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	79db      	ldrb	r3, [r3, #7]
 8006606:	2b03      	cmp	r3, #3
 8006608:	d830      	bhi.n	800666c <USB_HC_StartXfer+0x254>
 800660a:	a201      	add	r2, pc, #4	; (adr r2, 8006610 <USB_HC_StartXfer+0x1f8>)
 800660c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006610:	08006621 	.word	0x08006621
 8006614:	08006645 	.word	0x08006645
 8006618:	08006621 	.word	0x08006621
 800661c:	08006645 	.word	0x08006645
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	695b      	ldr	r3, [r3, #20]
 8006624:	3303      	adds	r3, #3
 8006626:	089b      	lsrs	r3, r3, #2
 8006628:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800662a:	8afa      	ldrh	r2, [r7, #22]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006630:	b29b      	uxth	r3, r3
 8006632:	429a      	cmp	r2, r3
 8006634:	d91c      	bls.n	8006670 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	f043 0220 	orr.w	r2, r3, #32
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	619a      	str	r2, [r3, #24]
        }
        break;
 8006642:	e015      	b.n	8006670 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	695b      	ldr	r3, [r3, #20]
 8006648:	3303      	adds	r3, #3
 800664a:	089b      	lsrs	r3, r3, #2
 800664c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800664e:	8afa      	ldrh	r2, [r7, #22]
 8006650:	6a3b      	ldr	r3, [r7, #32]
 8006652:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	b29b      	uxth	r3, r3
 800665a:	429a      	cmp	r2, r3
 800665c:	d90a      	bls.n	8006674 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	699b      	ldr	r3, [r3, #24]
 8006662:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	619a      	str	r2, [r3, #24]
        }
        break;
 800666a:	e003      	b.n	8006674 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800666c:	bf00      	nop
 800666e:	e002      	b.n	8006676 <USB_HC_StartXfer+0x25e>
        break;
 8006670:	bf00      	nop
 8006672:	e000      	b.n	8006676 <USB_HC_StartXfer+0x25e>
        break;
 8006674:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	68d9      	ldr	r1, [r3, #12]
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	785a      	ldrb	r2, [r3, #1]
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	b29b      	uxth	r3, r3
 8006684:	2000      	movs	r0, #0
 8006686:	9000      	str	r0, [sp, #0]
 8006688:	68f8      	ldr	r0, [r7, #12]
 800668a:	f7ff fb5b 	bl	8005d44 <USB_WritePacket>
  }

  return HAL_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	3728      	adds	r7, #40	; 0x28
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	1ff80000 	.word	0x1ff80000

0800669c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800669c:	b480      	push	{r7}
 800669e:	b085      	sub	sp, #20
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066ae:	695b      	ldr	r3, [r3, #20]
 80066b0:	b29b      	uxth	r3, r3
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3714      	adds	r7, #20
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr

080066be <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80066be:	b480      	push	{r7}
 80066c0:	b089      	sub	sp, #36	; 0x24
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
 80066c6:	460b      	mov	r3, r1
 80066c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80066ce:	78fb      	ldrb	r3, [r7, #3]
 80066d0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80066d2:	2300      	movs	r3, #0
 80066d4:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	015a      	lsls	r2, r3, #5
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	4413      	add	r3, r2
 80066de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	0c9b      	lsrs	r3, r3, #18
 80066e6:	f003 0303 	and.w	r3, r3, #3
 80066ea:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	015a      	lsls	r2, r3, #5
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	4413      	add	r3, r2
 80066f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	0fdb      	lsrs	r3, r3, #31
 80066fc:	f003 0301 	and.w	r3, r3, #1
 8006700:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	f003 0320 	and.w	r3, r3, #32
 800670a:	2b20      	cmp	r3, #32
 800670c:	d104      	bne.n	8006718 <USB_HC_Halt+0x5a>
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d101      	bne.n	8006718 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006714:	2300      	movs	r3, #0
 8006716:	e0c8      	b.n	80068aa <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d002      	beq.n	8006724 <USB_HC_Halt+0x66>
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	2b02      	cmp	r3, #2
 8006722:	d163      	bne.n	80067ec <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	015a      	lsls	r2, r3, #5
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	4413      	add	r3, r2
 800672c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	69ba      	ldr	r2, [r7, #24]
 8006734:	0151      	lsls	r1, r2, #5
 8006736:	69fa      	ldr	r2, [r7, #28]
 8006738:	440a      	add	r2, r1
 800673a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800673e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006742:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	f003 0320 	and.w	r3, r3, #32
 800674c:	2b00      	cmp	r3, #0
 800674e:	f040 80ab 	bne.w	80068a8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006756:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800675a:	2b00      	cmp	r3, #0
 800675c:	d133      	bne.n	80067c6 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	015a      	lsls	r2, r3, #5
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	4413      	add	r3, r2
 8006766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	69ba      	ldr	r2, [r7, #24]
 800676e:	0151      	lsls	r1, r2, #5
 8006770:	69fa      	ldr	r2, [r7, #28]
 8006772:	440a      	add	r2, r1
 8006774:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006778:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800677c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	015a      	lsls	r2, r3, #5
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	4413      	add	r3, r2
 8006786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	69ba      	ldr	r2, [r7, #24]
 800678e:	0151      	lsls	r1, r2, #5
 8006790:	69fa      	ldr	r2, [r7, #28]
 8006792:	440a      	add	r2, r1
 8006794:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006798:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800679c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	3301      	adds	r3, #1
 80067a2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067aa:	d81d      	bhi.n	80067e8 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	015a      	lsls	r2, r3, #5
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	4413      	add	r3, r2
 80067b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067c2:	d0ec      	beq.n	800679e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80067c4:	e070      	b.n	80068a8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	015a      	lsls	r2, r3, #5
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	4413      	add	r3, r2
 80067ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	69ba      	ldr	r2, [r7, #24]
 80067d6:	0151      	lsls	r1, r2, #5
 80067d8:	69fa      	ldr	r2, [r7, #28]
 80067da:	440a      	add	r2, r1
 80067dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067e4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80067e6:	e05f      	b.n	80068a8 <USB_HC_Halt+0x1ea>
            break;
 80067e8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80067ea:	e05d      	b.n	80068a8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	015a      	lsls	r2, r3, #5
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	4413      	add	r3, r2
 80067f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	69ba      	ldr	r2, [r7, #24]
 80067fc:	0151      	lsls	r1, r2, #5
 80067fe:	69fa      	ldr	r2, [r7, #28]
 8006800:	440a      	add	r2, r1
 8006802:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006806:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800680a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006818:	2b00      	cmp	r3, #0
 800681a:	d133      	bne.n	8006884 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	015a      	lsls	r2, r3, #5
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	4413      	add	r3, r2
 8006824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	69ba      	ldr	r2, [r7, #24]
 800682c:	0151      	lsls	r1, r2, #5
 800682e:	69fa      	ldr	r2, [r7, #28]
 8006830:	440a      	add	r2, r1
 8006832:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006836:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800683a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	015a      	lsls	r2, r3, #5
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	4413      	add	r3, r2
 8006844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	69ba      	ldr	r2, [r7, #24]
 800684c:	0151      	lsls	r1, r2, #5
 800684e:	69fa      	ldr	r2, [r7, #28]
 8006850:	440a      	add	r2, r1
 8006852:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006856:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800685a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	3301      	adds	r3, #1
 8006860:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006868:	d81d      	bhi.n	80068a6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	015a      	lsls	r2, r3, #5
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	4413      	add	r3, r2
 8006872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800687c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006880:	d0ec      	beq.n	800685c <USB_HC_Halt+0x19e>
 8006882:	e011      	b.n	80068a8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	015a      	lsls	r2, r3, #5
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	4413      	add	r3, r2
 800688c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	69ba      	ldr	r2, [r7, #24]
 8006894:	0151      	lsls	r1, r2, #5
 8006896:	69fa      	ldr	r2, [r7, #28]
 8006898:	440a      	add	r2, r1
 800689a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800689e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068a2:	6013      	str	r3, [r2, #0]
 80068a4:	e000      	b.n	80068a8 <USB_HC_Halt+0x1ea>
          break;
 80068a6:	bf00      	nop
    }
  }

  return HAL_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3724      	adds	r7, #36	; 0x24
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr
	...

080068b8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b087      	sub	sp, #28
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	460b      	mov	r3, r1
 80068c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80068c8:	78fb      	ldrb	r3, [r7, #3]
 80068ca:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80068cc:	2301      	movs	r3, #1
 80068ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	04da      	lsls	r2, r3, #19
 80068d4:	4b15      	ldr	r3, [pc, #84]	; (800692c <USB_DoPing+0x74>)
 80068d6:	4013      	ands	r3, r2
 80068d8:	693a      	ldr	r2, [r7, #16]
 80068da:	0151      	lsls	r1, r2, #5
 80068dc:	697a      	ldr	r2, [r7, #20]
 80068de:	440a      	add	r2, r1
 80068e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068e8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	015a      	lsls	r2, r3, #5
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	4413      	add	r3, r2
 80068f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006900:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006908:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	015a      	lsls	r2, r3, #5
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	4413      	add	r3, r2
 8006912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006916:	461a      	mov	r2, r3
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	371c      	adds	r7, #28
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	1ff80000 	.word	0x1ff80000

08006930 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b088      	sub	sp, #32
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006938:	2300      	movs	r3, #0
 800693a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006940:	2300      	movs	r3, #0
 8006942:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f7ff f93b 	bl	8005bc0 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800694a:	2110      	movs	r1, #16
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f7ff f995 	bl	8005c7c <USB_FlushTxFifo>
 8006952:	4603      	mov	r3, r0
 8006954:	2b00      	cmp	r3, #0
 8006956:	d001      	beq.n	800695c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f7ff f9c1 	bl	8005ce4 <USB_FlushRxFifo>
 8006962:	4603      	mov	r3, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d001      	beq.n	800696c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800696c:	2300      	movs	r3, #0
 800696e:	61bb      	str	r3, [r7, #24]
 8006970:	e01f      	b.n	80069b2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	015a      	lsls	r2, r3, #5
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	4413      	add	r3, r2
 800697a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006988:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006990:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006998:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	015a      	lsls	r2, r3, #5
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	4413      	add	r3, r2
 80069a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069a6:	461a      	mov	r2, r3
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	3301      	adds	r3, #1
 80069b0:	61bb      	str	r3, [r7, #24]
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	2b0f      	cmp	r3, #15
 80069b6:	d9dc      	bls.n	8006972 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80069b8:	2300      	movs	r3, #0
 80069ba:	61bb      	str	r3, [r7, #24]
 80069bc:	e034      	b.n	8006a28 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	015a      	lsls	r2, r3, #5
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	4413      	add	r3, r2
 80069c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069d4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069dc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069e4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	015a      	lsls	r2, r3, #5
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	4413      	add	r3, r2
 80069ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069f2:	461a      	mov	r2, r3
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	3301      	adds	r3, #1
 80069fc:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a04:	d80c      	bhi.n	8006a20 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	015a      	lsls	r2, r3, #5
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a1c:	d0ec      	beq.n	80069f8 <USB_StopHost+0xc8>
 8006a1e:	e000      	b.n	8006a22 <USB_StopHost+0xf2>
        break;
 8006a20:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006a22:	69bb      	ldr	r3, [r7, #24]
 8006a24:	3301      	adds	r3, #1
 8006a26:	61bb      	str	r3, [r7, #24]
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	2b0f      	cmp	r3, #15
 8006a2c:	d9c7      	bls.n	80069be <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a34:	461a      	mov	r2, r3
 8006a36:	f04f 33ff 	mov.w	r3, #4294967295
 8006a3a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8006a42:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f7ff f8aa 	bl	8005b9e <USB_EnableGlobalInt>

  return ret;
 8006a4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3720      	adds	r7, #32
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006a54:	b590      	push	{r4, r7, lr}
 8006a56:	b089      	sub	sp, #36	; 0x24
 8006a58:	af04      	add	r7, sp, #16
 8006a5a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	2202      	movs	r2, #2
 8006a60:	2102      	movs	r1, #2
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 fc66 	bl	8007334 <USBH_FindInterface>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006a6c:	7bfb      	ldrb	r3, [r7, #15]
 8006a6e:	2bff      	cmp	r3, #255	; 0xff
 8006a70:	d002      	beq.n	8006a78 <USBH_CDC_InterfaceInit+0x24>
 8006a72:	7bfb      	ldrb	r3, [r7, #15]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d901      	bls.n	8006a7c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006a78:	2302      	movs	r3, #2
 8006a7a:	e13d      	b.n	8006cf8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006a7c:	7bfb      	ldrb	r3, [r7, #15]
 8006a7e:	4619      	mov	r1, r3
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 fc3b 	bl	80072fc <USBH_SelectInterface>
 8006a86:	4603      	mov	r3, r0
 8006a88:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006a8a:	7bbb      	ldrb	r3, [r7, #14]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d001      	beq.n	8006a94 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006a90:	2302      	movs	r3, #2
 8006a92:	e131      	b.n	8006cf8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006a9a:	2050      	movs	r0, #80	; 0x50
 8006a9c:	f001 fb12 	bl	80080c4 <malloc>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006aaa:	69db      	ldr	r3, [r3, #28]
 8006aac:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d101      	bne.n	8006ab8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006ab4:	2302      	movs	r3, #2
 8006ab6:	e11f      	b.n	8006cf8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006ab8:	2250      	movs	r2, #80	; 0x50
 8006aba:	2100      	movs	r1, #0
 8006abc:	68b8      	ldr	r0, [r7, #8]
 8006abe:	f001 fb11 	bl	80080e4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006ac2:	7bfb      	ldrb	r3, [r7, #15]
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	211a      	movs	r1, #26
 8006ac8:	fb01 f303 	mul.w	r3, r1, r3
 8006acc:	4413      	add	r3, r2
 8006ace:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	b25b      	sxtb	r3, r3
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	da15      	bge.n	8006b06 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006ada:	7bfb      	ldrb	r3, [r7, #15]
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	211a      	movs	r1, #26
 8006ae0:	fb01 f303 	mul.w	r3, r1, r3
 8006ae4:	4413      	add	r3, r2
 8006ae6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006aea:	781a      	ldrb	r2, [r3, #0]
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006af0:	7bfb      	ldrb	r3, [r7, #15]
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	211a      	movs	r1, #26
 8006af6:	fb01 f303 	mul.w	r3, r1, r3
 8006afa:	4413      	add	r3, r2
 8006afc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006b00:	881a      	ldrh	r2, [r3, #0]
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	785b      	ldrb	r3, [r3, #1]
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 ff9c 	bl	8007a4a <USBH_AllocPipe>
 8006b12:	4603      	mov	r3, r0
 8006b14:	461a      	mov	r2, r3
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	7819      	ldrb	r1, [r3, #0]
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	7858      	ldrb	r0, [r3, #1]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006b2e:	68ba      	ldr	r2, [r7, #8]
 8006b30:	8952      	ldrh	r2, [r2, #10]
 8006b32:	9202      	str	r2, [sp, #8]
 8006b34:	2203      	movs	r2, #3
 8006b36:	9201      	str	r2, [sp, #4]
 8006b38:	9300      	str	r3, [sp, #0]
 8006b3a:	4623      	mov	r3, r4
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 ff54 	bl	80079ec <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f001 fa17 	bl	8007f80 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006b52:	2300      	movs	r3, #0
 8006b54:	2200      	movs	r2, #0
 8006b56:	210a      	movs	r1, #10
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 fbeb 	bl	8007334 <USBH_FindInterface>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006b62:	7bfb      	ldrb	r3, [r7, #15]
 8006b64:	2bff      	cmp	r3, #255	; 0xff
 8006b66:	d002      	beq.n	8006b6e <USBH_CDC_InterfaceInit+0x11a>
 8006b68:	7bfb      	ldrb	r3, [r7, #15]
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d901      	bls.n	8006b72 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006b6e:	2302      	movs	r3, #2
 8006b70:	e0c2      	b.n	8006cf8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006b72:	7bfb      	ldrb	r3, [r7, #15]
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	211a      	movs	r1, #26
 8006b78:	fb01 f303 	mul.w	r3, r1, r3
 8006b7c:	4413      	add	r3, r2
 8006b7e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	b25b      	sxtb	r3, r3
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	da16      	bge.n	8006bb8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006b8a:	7bfb      	ldrb	r3, [r7, #15]
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	211a      	movs	r1, #26
 8006b90:	fb01 f303 	mul.w	r3, r1, r3
 8006b94:	4413      	add	r3, r2
 8006b96:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006b9a:	781a      	ldrb	r2, [r3, #0]
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006ba0:	7bfb      	ldrb	r3, [r7, #15]
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	211a      	movs	r1, #26
 8006ba6:	fb01 f303 	mul.w	r3, r1, r3
 8006baa:	4413      	add	r3, r2
 8006bac:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006bb0:	881a      	ldrh	r2, [r3, #0]
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	835a      	strh	r2, [r3, #26]
 8006bb6:	e015      	b.n	8006be4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006bb8:	7bfb      	ldrb	r3, [r7, #15]
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	211a      	movs	r1, #26
 8006bbe:	fb01 f303 	mul.w	r3, r1, r3
 8006bc2:	4413      	add	r3, r2
 8006bc4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006bc8:	781a      	ldrb	r2, [r3, #0]
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006bce:	7bfb      	ldrb	r3, [r7, #15]
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	211a      	movs	r1, #26
 8006bd4:	fb01 f303 	mul.w	r3, r1, r3
 8006bd8:	4413      	add	r3, r2
 8006bda:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006bde:	881a      	ldrh	r2, [r3, #0]
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006be4:	7bfb      	ldrb	r3, [r7, #15]
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	211a      	movs	r1, #26
 8006bea:	fb01 f303 	mul.w	r3, r1, r3
 8006bee:	4413      	add	r3, r2
 8006bf0:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	b25b      	sxtb	r3, r3
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	da16      	bge.n	8006c2a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006bfc:	7bfb      	ldrb	r3, [r7, #15]
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	211a      	movs	r1, #26
 8006c02:	fb01 f303 	mul.w	r3, r1, r3
 8006c06:	4413      	add	r3, r2
 8006c08:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006c0c:	781a      	ldrb	r2, [r3, #0]
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006c12:	7bfb      	ldrb	r3, [r7, #15]
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	211a      	movs	r1, #26
 8006c18:	fb01 f303 	mul.w	r3, r1, r3
 8006c1c:	4413      	add	r3, r2
 8006c1e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006c22:	881a      	ldrh	r2, [r3, #0]
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	835a      	strh	r2, [r3, #26]
 8006c28:	e015      	b.n	8006c56 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006c2a:	7bfb      	ldrb	r3, [r7, #15]
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	211a      	movs	r1, #26
 8006c30:	fb01 f303 	mul.w	r3, r1, r3
 8006c34:	4413      	add	r3, r2
 8006c36:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006c3a:	781a      	ldrb	r2, [r3, #0]
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006c40:	7bfb      	ldrb	r3, [r7, #15]
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	211a      	movs	r1, #26
 8006c46:	fb01 f303 	mul.w	r3, r1, r3
 8006c4a:	4413      	add	r3, r2
 8006c4c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006c50:	881a      	ldrh	r2, [r3, #0]
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	7b9b      	ldrb	r3, [r3, #14]
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 fef4 	bl	8007a4a <USBH_AllocPipe>
 8006c62:	4603      	mov	r3, r0
 8006c64:	461a      	mov	r2, r3
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	7bdb      	ldrb	r3, [r3, #15]
 8006c6e:	4619      	mov	r1, r3
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f000 feea 	bl	8007a4a <USBH_AllocPipe>
 8006c76:	4603      	mov	r3, r0
 8006c78:	461a      	mov	r2, r3
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	7b59      	ldrb	r1, [r3, #13]
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	7b98      	ldrb	r0, [r3, #14]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006c92:	68ba      	ldr	r2, [r7, #8]
 8006c94:	8b12      	ldrh	r2, [r2, #24]
 8006c96:	9202      	str	r2, [sp, #8]
 8006c98:	2202      	movs	r2, #2
 8006c9a:	9201      	str	r2, [sp, #4]
 8006c9c:	9300      	str	r3, [sp, #0]
 8006c9e:	4623      	mov	r3, r4
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 fea2 	bl	80079ec <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	7b19      	ldrb	r1, [r3, #12]
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	7bd8      	ldrb	r0, [r3, #15]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006cbc:	68ba      	ldr	r2, [r7, #8]
 8006cbe:	8b52      	ldrh	r2, [r2, #26]
 8006cc0:	9202      	str	r2, [sp, #8]
 8006cc2:	2202      	movs	r2, #2
 8006cc4:	9201      	str	r2, [sp, #4]
 8006cc6:	9300      	str	r3, [sp, #0]
 8006cc8:	4623      	mov	r3, r4
 8006cca:	4602      	mov	r2, r0
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 fe8d 	bl	80079ec <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	7b5b      	ldrb	r3, [r3, #13]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f001 f94c 	bl	8007f80 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	7b1b      	ldrb	r3, [r3, #12]
 8006cec:	2200      	movs	r2, #0
 8006cee:	4619      	mov	r1, r3
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f001 f945 	bl	8007f80 <USBH_LL_SetToggle>

  return USBH_OK;
 8006cf6:	2300      	movs	r3, #0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3714      	adds	r7, #20
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd90      	pop	{r4, r7, pc}

08006d00 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d0e:	69db      	ldr	r3, [r3, #28]
 8006d10:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d00e      	beq.n	8006d38 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	4619      	mov	r1, r3
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 fe82 	bl	8007a2a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 fead 	bl	8007a8c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2200      	movs	r2, #0
 8006d36:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	7b1b      	ldrb	r3, [r3, #12]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00e      	beq.n	8006d5e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	7b1b      	ldrb	r3, [r3, #12]
 8006d44:	4619      	mov	r1, r3
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 fe6f 	bl	8007a2a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	7b1b      	ldrb	r3, [r3, #12]
 8006d50:	4619      	mov	r1, r3
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 fe9a 	bl	8007a8c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	7b5b      	ldrb	r3, [r3, #13]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00e      	beq.n	8006d84 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	7b5b      	ldrb	r3, [r3, #13]
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 fe5c 	bl	8007a2a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	7b5b      	ldrb	r3, [r3, #13]
 8006d76:	4619      	mov	r1, r3
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 fe87 	bl	8007a8c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2200      	movs	r2, #0
 8006d82:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d8a:	69db      	ldr	r3, [r3, #28]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d00b      	beq.n	8006da8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d96:	69db      	ldr	r3, [r3, #28]
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f001 f99b 	bl	80080d4 <free>
    phost->pActiveClass->pData = 0U;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006da4:	2200      	movs	r2, #0
 8006da6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006db2:	b580      	push	{r7, lr}
 8006db4:	b084      	sub	sp, #16
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006dc0:	69db      	ldr	r3, [r3, #28]
 8006dc2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	3340      	adds	r3, #64	; 0x40
 8006dc8:	4619      	mov	r1, r3
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 f8b1 	bl	8006f32 <GetLineCoding>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006dd4:	7afb      	ldrb	r3, [r7, #11]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d105      	bne.n	8006de6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006de0:	2102      	movs	r1, #2
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006de6:	7afb      	ldrb	r3, [r7, #11]
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3710      	adds	r7, #16
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b084      	sub	sp, #16
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e06:	69db      	ldr	r3, [r3, #28]
 8006e08:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006e10:	2b04      	cmp	r3, #4
 8006e12:	d877      	bhi.n	8006f04 <USBH_CDC_Process+0x114>
 8006e14:	a201      	add	r2, pc, #4	; (adr r2, 8006e1c <USBH_CDC_Process+0x2c>)
 8006e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e1a:	bf00      	nop
 8006e1c:	08006e31 	.word	0x08006e31
 8006e20:	08006e37 	.word	0x08006e37
 8006e24:	08006e67 	.word	0x08006e67
 8006e28:	08006edb 	.word	0x08006edb
 8006e2c:	08006ee9 	.word	0x08006ee9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006e30:	2300      	movs	r3, #0
 8006e32:	73fb      	strb	r3, [r7, #15]
      break;
 8006e34:	e06d      	b.n	8006f12 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 f897 	bl	8006f70 <SetLineCoding>
 8006e42:	4603      	mov	r3, r0
 8006e44:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006e46:	7bbb      	ldrb	r3, [r7, #14]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d104      	bne.n	8006e56 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	2202      	movs	r2, #2
 8006e50:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006e54:	e058      	b.n	8006f08 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006e56:	7bbb      	ldrb	r3, [r7, #14]
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d055      	beq.n	8006f08 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	2204      	movs	r2, #4
 8006e60:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006e64:	e050      	b.n	8006f08 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	3340      	adds	r3, #64	; 0x40
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f000 f860 	bl	8006f32 <GetLineCoding>
 8006e72:	4603      	mov	r3, r0
 8006e74:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006e76:	7bbb      	ldrb	r3, [r7, #14]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d126      	bne.n	8006eca <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e8e:	791b      	ldrb	r3, [r3, #4]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d13b      	bne.n	8006f0c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e9e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d133      	bne.n	8006f0c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eae:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d12b      	bne.n	8006f0c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ebc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d124      	bne.n	8006f0c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 f958 	bl	8007178 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006ec8:	e020      	b.n	8006f0c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006eca:	7bbb      	ldrb	r3, [r7, #14]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d01d      	beq.n	8006f0c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	2204      	movs	r2, #4
 8006ed4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006ed8:	e018      	b.n	8006f0c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 f867 	bl	8006fae <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 f8da 	bl	800709a <CDC_ProcessReception>
      break;
 8006ee6:	e014      	b.n	8006f12 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006ee8:	2100      	movs	r1, #0
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 fb08 	bl	8007500 <USBH_ClrFeature>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006ef4:	7bbb      	ldrb	r3, [r7, #14]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d10a      	bne.n	8006f10 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006f02:	e005      	b.n	8006f10 <USBH_CDC_Process+0x120>

    default:
      break;
 8006f04:	bf00      	nop
 8006f06:	e004      	b.n	8006f12 <USBH_CDC_Process+0x122>
      break;
 8006f08:	bf00      	nop
 8006f0a:	e002      	b.n	8006f12 <USBH_CDC_Process+0x122>
      break;
 8006f0c:	bf00      	nop
 8006f0e:	e000      	b.n	8006f12 <USBH_CDC_Process+0x122>
      break;
 8006f10:	bf00      	nop

  }

  return status;
 8006f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	370c      	adds	r7, #12
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr

08006f32 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b082      	sub	sp, #8
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
 8006f3a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	22a1      	movs	r2, #161	; 0xa1
 8006f40:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2221      	movs	r2, #33	; 0x21
 8006f46:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2207      	movs	r2, #7
 8006f58:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	2207      	movs	r2, #7
 8006f5e:	4619      	mov	r1, r3
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 faf1 	bl	8007548 <USBH_CtlReq>
 8006f66:	4603      	mov	r3, r0
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3708      	adds	r7, #8
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2221      	movs	r2, #33	; 0x21
 8006f7e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2220      	movs	r2, #32
 8006f84:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2207      	movs	r2, #7
 8006f96:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	2207      	movs	r2, #7
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 fad2 	bl	8007548 <USBH_CtlReq>
 8006fa4:	4603      	mov	r3, r0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3708      	adds	r7, #8
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}

08006fae <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b086      	sub	sp, #24
 8006fb2:	af02      	add	r7, sp, #8
 8006fb4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fbc:	69db      	ldr	r3, [r3, #28]
 8006fbe:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d002      	beq.n	8006fd4 <CDC_ProcessTransmission+0x26>
 8006fce:	2b02      	cmp	r3, #2
 8006fd0:	d023      	beq.n	800701a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006fd2:	e05e      	b.n	8007092 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	8b12      	ldrh	r2, [r2, #24]
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d90b      	bls.n	8006ff8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	69d9      	ldr	r1, [r3, #28]
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	8b1a      	ldrh	r2, [r3, #24]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	7b5b      	ldrb	r3, [r3, #13]
 8006fec:	2001      	movs	r0, #1
 8006fee:	9000      	str	r0, [sp, #0]
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 fcb8 	bl	8007966 <USBH_BulkSendData>
 8006ff6:	e00b      	b.n	8007010 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8007000:	b29a      	uxth	r2, r3
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	7b5b      	ldrb	r3, [r3, #13]
 8007006:	2001      	movs	r0, #1
 8007008:	9000      	str	r0, [sp, #0]
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 fcab 	bl	8007966 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2202      	movs	r2, #2
 8007014:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007018:	e03b      	b.n	8007092 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	7b5b      	ldrb	r3, [r3, #13]
 800701e:	4619      	mov	r1, r3
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 ff83 	bl	8007f2c <USBH_LL_GetURBState>
 8007026:	4603      	mov	r3, r0
 8007028:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800702a:	7afb      	ldrb	r3, [r7, #11]
 800702c:	2b01      	cmp	r3, #1
 800702e:	d128      	bne.n	8007082 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	8b12      	ldrh	r2, [r2, #24]
 8007038:	4293      	cmp	r3, r2
 800703a:	d90e      	bls.n	800705a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007040:	68fa      	ldr	r2, [r7, #12]
 8007042:	8b12      	ldrh	r2, [r2, #24]
 8007044:	1a9a      	subs	r2, r3, r2
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	69db      	ldr	r3, [r3, #28]
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	8b12      	ldrh	r2, [r2, #24]
 8007052:	441a      	add	r2, r3
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	61da      	str	r2, [r3, #28]
 8007058:	e002      	b.n	8007060 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2200      	movs	r2, #0
 800705e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007064:	2b00      	cmp	r3, #0
 8007066:	d004      	beq.n	8007072 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007070:	e00e      	b.n	8007090 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 f868 	bl	8007150 <USBH_CDC_TransmitCallback>
      break;
 8007080:	e006      	b.n	8007090 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007082:	7afb      	ldrb	r3, [r7, #11]
 8007084:	2b02      	cmp	r3, #2
 8007086:	d103      	bne.n	8007090 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007090:	bf00      	nop
  }
}
 8007092:	bf00      	nop
 8007094:	3710      	adds	r7, #16
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}

0800709a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800709a:	b580      	push	{r7, lr}
 800709c:	b086      	sub	sp, #24
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070a8:	69db      	ldr	r3, [r3, #28]
 80070aa:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80070ac:	2300      	movs	r3, #0
 80070ae:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80070b6:	2b03      	cmp	r3, #3
 80070b8:	d002      	beq.n	80070c0 <CDC_ProcessReception+0x26>
 80070ba:	2b04      	cmp	r3, #4
 80070bc:	d00e      	beq.n	80070dc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80070be:	e043      	b.n	8007148 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	6a19      	ldr	r1, [r3, #32]
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	8b5a      	ldrh	r2, [r3, #26]
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	7b1b      	ldrb	r3, [r3, #12]
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 fc6f 	bl	80079b0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	2204      	movs	r2, #4
 80070d6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80070da:	e035      	b.n	8007148 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	7b1b      	ldrb	r3, [r3, #12]
 80070e0:	4619      	mov	r1, r3
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 ff22 	bl	8007f2c <USBH_LL_GetURBState>
 80070e8:	4603      	mov	r3, r0
 80070ea:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80070ec:	7cfb      	ldrb	r3, [r7, #19]
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d129      	bne.n	8007146 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	7b1b      	ldrb	r3, [r3, #12]
 80070f6:	4619      	mov	r1, r3
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 fe85 	bl	8007e08 <USBH_LL_GetLastXferSize>
 80070fe:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	429a      	cmp	r2, r3
 8007108:	d016      	beq.n	8007138 <CDC_ProcessReception+0x9e>
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	8b5b      	ldrh	r3, [r3, #26]
 800710e:	461a      	mov	r2, r3
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	4293      	cmp	r3, r2
 8007114:	d910      	bls.n	8007138 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	1ad2      	subs	r2, r2, r3
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	6a1a      	ldr	r2, [r3, #32]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	441a      	add	r2, r3
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	2203      	movs	r2, #3
 8007132:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007136:	e006      	b.n	8007146 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	2200      	movs	r2, #0
 800713c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 f80f 	bl	8007164 <USBH_CDC_ReceiveCallback>
      break;
 8007146:	bf00      	nop
  }
}
 8007148:	bf00      	nop
 800714a:	3718      	adds	r7, #24
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007158:	bf00      	nop
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800716c:	bf00      	nop
 800716e:	370c      	adds	r7, #12
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007180:	bf00      	nop
 8007182:	370c      	adds	r7, #12
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b084      	sub	sp, #16
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	4613      	mov	r3, r2
 8007198:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d101      	bne.n	80071a4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80071a0:	2302      	movs	r3, #2
 80071a2:	e029      	b.n	80071f8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	79fa      	ldrb	r2, [r7, #7]
 80071a8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80071bc:	68f8      	ldr	r0, [r7, #12]
 80071be:	f000 f81f 	bl	8007200 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2200      	movs	r2, #0
 80071ce:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d003      	beq.n	80071f0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	68ba      	ldr	r2, [r7, #8]
 80071ec:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80071f0:	68f8      	ldr	r0, [r7, #12]
 80071f2:	f000 fd97 	bl	8007d24 <USBH_LL_Init>

  return USBH_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3710      	adds	r7, #16
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007200:	b480      	push	{r7}
 8007202:	b085      	sub	sp, #20
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007208:	2300      	movs	r3, #0
 800720a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800720c:	2300      	movs	r3, #0
 800720e:	60fb      	str	r3, [r7, #12]
 8007210:	e009      	b.n	8007226 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	33e0      	adds	r3, #224	; 0xe0
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	4413      	add	r3, r2
 800721c:	2200      	movs	r2, #0
 800721e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	3301      	adds	r3, #1
 8007224:	60fb      	str	r3, [r7, #12]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2b0f      	cmp	r3, #15
 800722a:	d9f2      	bls.n	8007212 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800722c:	2300      	movs	r3, #0
 800722e:	60fb      	str	r3, [r7, #12]
 8007230:	e009      	b.n	8007246 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	4413      	add	r3, r2
 8007238:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800723c:	2200      	movs	r2, #0
 800723e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	3301      	adds	r3, #1
 8007244:	60fb      	str	r3, [r7, #12]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800724c:	d3f1      	bcc.n	8007232 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2201      	movs	r2, #1
 800725e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2240      	movs	r2, #64	; 0x40
 8007272:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2201      	movs	r2, #1
 8007286:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800729a:	2300      	movs	r3, #0
}
 800729c:	4618      	mov	r0, r3
 800729e:	3714      	adds	r7, #20
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b085      	sub	sp, #20
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80072b2:	2300      	movs	r3, #0
 80072b4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d016      	beq.n	80072ea <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d10e      	bne.n	80072e4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80072cc:	1c59      	adds	r1, r3, #1
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	33de      	adds	r3, #222	; 0xde
 80072d8:	6839      	ldr	r1, [r7, #0]
 80072da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80072de:	2300      	movs	r3, #0
 80072e0:	73fb      	strb	r3, [r7, #15]
 80072e2:	e004      	b.n	80072ee <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80072e4:	2302      	movs	r3, #2
 80072e6:	73fb      	strb	r3, [r7, #15]
 80072e8:	e001      	b.n	80072ee <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80072ea:	2302      	movs	r3, #2
 80072ec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80072ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3714      	adds	r7, #20
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b085      	sub	sp, #20
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	460b      	mov	r3, r1
 8007306:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007308:	2300      	movs	r3, #0
 800730a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007312:	78fa      	ldrb	r2, [r7, #3]
 8007314:	429a      	cmp	r2, r3
 8007316:	d204      	bcs.n	8007322 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	78fa      	ldrb	r2, [r7, #3]
 800731c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007320:	e001      	b.n	8007326 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007322:	2302      	movs	r3, #2
 8007324:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007326:	7bfb      	ldrb	r3, [r7, #15]
}
 8007328:	4618      	mov	r0, r3
 800732a:	3714      	adds	r7, #20
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr

08007334 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007334:	b480      	push	{r7}
 8007336:	b087      	sub	sp, #28
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	4608      	mov	r0, r1
 800733e:	4611      	mov	r1, r2
 8007340:	461a      	mov	r2, r3
 8007342:	4603      	mov	r3, r0
 8007344:	70fb      	strb	r3, [r7, #3]
 8007346:	460b      	mov	r3, r1
 8007348:	70bb      	strb	r3, [r7, #2]
 800734a:	4613      	mov	r3, r2
 800734c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800734e:	2300      	movs	r3, #0
 8007350:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007352:	2300      	movs	r3, #0
 8007354:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800735c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800735e:	e025      	b.n	80073ac <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007360:	7dfb      	ldrb	r3, [r7, #23]
 8007362:	221a      	movs	r2, #26
 8007364:	fb02 f303 	mul.w	r3, r2, r3
 8007368:	3308      	adds	r3, #8
 800736a:	68fa      	ldr	r2, [r7, #12]
 800736c:	4413      	add	r3, r2
 800736e:	3302      	adds	r3, #2
 8007370:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	795b      	ldrb	r3, [r3, #5]
 8007376:	78fa      	ldrb	r2, [r7, #3]
 8007378:	429a      	cmp	r2, r3
 800737a:	d002      	beq.n	8007382 <USBH_FindInterface+0x4e>
 800737c:	78fb      	ldrb	r3, [r7, #3]
 800737e:	2bff      	cmp	r3, #255	; 0xff
 8007380:	d111      	bne.n	80073a6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007386:	78ba      	ldrb	r2, [r7, #2]
 8007388:	429a      	cmp	r2, r3
 800738a:	d002      	beq.n	8007392 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800738c:	78bb      	ldrb	r3, [r7, #2]
 800738e:	2bff      	cmp	r3, #255	; 0xff
 8007390:	d109      	bne.n	80073a6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007396:	787a      	ldrb	r2, [r7, #1]
 8007398:	429a      	cmp	r2, r3
 800739a:	d002      	beq.n	80073a2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800739c:	787b      	ldrb	r3, [r7, #1]
 800739e:	2bff      	cmp	r3, #255	; 0xff
 80073a0:	d101      	bne.n	80073a6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80073a2:	7dfb      	ldrb	r3, [r7, #23]
 80073a4:	e006      	b.n	80073b4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80073a6:	7dfb      	ldrb	r3, [r7, #23]
 80073a8:	3301      	adds	r3, #1
 80073aa:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80073ac:	7dfb      	ldrb	r3, [r7, #23]
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d9d6      	bls.n	8007360 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80073b2:	23ff      	movs	r3, #255	; 0xff
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	371c      	adds	r7, #28
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 fce7 	bl	8007d9c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80073ce:	2101      	movs	r1, #1
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 fdbe 	bl	8007f52 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3708      	adds	r7, #8
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	683a      	ldr	r2, [r7, #0]
 80073ee:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80073f2:	bf00      	nop
 80073f4:	370c      	adds	r7, #12
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80073fe:	b580      	push	{r7, lr}
 8007400:	b082      	sub	sp, #8
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800740c:	1c5a      	adds	r2, r3, #1
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 f804 	bl	8007422 <USBH_HandleSof>
}
 800741a:	bf00      	nop
 800741c:	3708      	adds	r7, #8
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}

08007422 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007422:	b580      	push	{r7, lr}
 8007424:	b082      	sub	sp, #8
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	b2db      	uxtb	r3, r3
 8007430:	2b0b      	cmp	r3, #11
 8007432:	d10a      	bne.n	800744a <USBH_HandleSof+0x28>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800743a:	2b00      	cmp	r3, #0
 800743c:	d005      	beq.n	800744a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	4798      	blx	r3
  }
}
 800744a:	bf00      	nop
 800744c:	3708      	adds	r7, #8
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007452:	b480      	push	{r7}
 8007454:	b083      	sub	sp, #12
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2201      	movs	r2, #1
 800745e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007462:	bf00      	nop
}
 8007464:	370c      	adds	r7, #12
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr

0800746e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800746e:	b480      	push	{r7}
 8007470:	b083      	sub	sp, #12
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800747e:	bf00      	nop
}
 8007480:	370c      	adds	r7, #12
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr

0800748a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800748a:	b480      	push	{r7}
 800748c:	b083      	sub	sp, #12
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2201      	movs	r2, #1
 8007496:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	370c      	adds	r7, #12
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 fc7a 	bl	8007dd2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	791b      	ldrb	r3, [r3, #4]
 80074e2:	4619      	mov	r1, r3
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 fad1 	bl	8007a8c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	795b      	ldrb	r3, [r3, #5]
 80074ee:	4619      	mov	r1, r3
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 facb 	bl	8007a8c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80074f6:	2300      	movs	r3, #0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3708      	adds	r7, #8
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	460b      	mov	r3, r1
 800750a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	789b      	ldrb	r3, [r3, #2]
 8007510:	2b01      	cmp	r3, #1
 8007512:	d10f      	bne.n	8007534 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2202      	movs	r2, #2
 8007518:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2201      	movs	r2, #1
 800751e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2200      	movs	r2, #0
 8007524:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007526:	78fb      	ldrb	r3, [r7, #3]
 8007528:	b29a      	uxth	r2, r3
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007534:	2200      	movs	r2, #0
 8007536:	2100      	movs	r1, #0
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 f805 	bl	8007548 <USBH_CtlReq>
 800753e:	4603      	mov	r3, r0
}
 8007540:	4618      	mov	r0, r3
 8007542:	3708      	adds	r7, #8
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b086      	sub	sp, #24
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	4613      	mov	r3, r2
 8007554:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007556:	2301      	movs	r3, #1
 8007558:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	789b      	ldrb	r3, [r3, #2]
 800755e:	2b01      	cmp	r3, #1
 8007560:	d002      	beq.n	8007568 <USBH_CtlReq+0x20>
 8007562:	2b02      	cmp	r3, #2
 8007564:	d00f      	beq.n	8007586 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007566:	e027      	b.n	80075b8 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	68ba      	ldr	r2, [r7, #8]
 800756c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	88fa      	ldrh	r2, [r7, #6]
 8007572:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2201      	movs	r2, #1
 8007578:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2202      	movs	r2, #2
 800757e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007580:	2301      	movs	r3, #1
 8007582:	75fb      	strb	r3, [r7, #23]
      break;
 8007584:	e018      	b.n	80075b8 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007586:	68f8      	ldr	r0, [r7, #12]
 8007588:	f000 f81c 	bl	80075c4 <USBH_HandleControl>
 800758c:	4603      	mov	r3, r0
 800758e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007590:	7dfb      	ldrb	r3, [r7, #23]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d002      	beq.n	800759c <USBH_CtlReq+0x54>
 8007596:	7dfb      	ldrb	r3, [r7, #23]
 8007598:	2b03      	cmp	r3, #3
 800759a:	d106      	bne.n	80075aa <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2201      	movs	r2, #1
 80075a0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2200      	movs	r2, #0
 80075a6:	761a      	strb	r2, [r3, #24]
      break;
 80075a8:	e005      	b.n	80075b6 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80075aa:	7dfb      	ldrb	r3, [r7, #23]
 80075ac:	2b02      	cmp	r3, #2
 80075ae:	d102      	bne.n	80075b6 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2201      	movs	r2, #1
 80075b4:	709a      	strb	r2, [r3, #2]
      break;
 80075b6:	bf00      	nop
  }
  return status;
 80075b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3718      	adds	r7, #24
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
	...

080075c4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b086      	sub	sp, #24
 80075c8:	af02      	add	r7, sp, #8
 80075ca:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80075cc:	2301      	movs	r3, #1
 80075ce:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80075d0:	2300      	movs	r3, #0
 80075d2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	7e1b      	ldrb	r3, [r3, #24]
 80075d8:	3b01      	subs	r3, #1
 80075da:	2b0a      	cmp	r3, #10
 80075dc:	f200 8156 	bhi.w	800788c <USBH_HandleControl+0x2c8>
 80075e0:	a201      	add	r2, pc, #4	; (adr r2, 80075e8 <USBH_HandleControl+0x24>)
 80075e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e6:	bf00      	nop
 80075e8:	08007615 	.word	0x08007615
 80075ec:	0800762f 	.word	0x0800762f
 80075f0:	08007699 	.word	0x08007699
 80075f4:	080076bf 	.word	0x080076bf
 80075f8:	080076f7 	.word	0x080076f7
 80075fc:	08007721 	.word	0x08007721
 8007600:	08007773 	.word	0x08007773
 8007604:	08007795 	.word	0x08007795
 8007608:	080077d1 	.word	0x080077d1
 800760c:	080077f7 	.word	0x080077f7
 8007610:	08007835 	.word	0x08007835
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f103 0110 	add.w	r1, r3, #16
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	795b      	ldrb	r3, [r3, #5]
 800761e:	461a      	mov	r2, r3
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 f943 	bl	80078ac <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2202      	movs	r2, #2
 800762a:	761a      	strb	r2, [r3, #24]
      break;
 800762c:	e139      	b.n	80078a2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	795b      	ldrb	r3, [r3, #5]
 8007632:	4619      	mov	r1, r3
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 fc79 	bl	8007f2c <USBH_LL_GetURBState>
 800763a:	4603      	mov	r3, r0
 800763c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800763e:	7bbb      	ldrb	r3, [r7, #14]
 8007640:	2b01      	cmp	r3, #1
 8007642:	d11e      	bne.n	8007682 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	7c1b      	ldrb	r3, [r3, #16]
 8007648:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800764c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	8adb      	ldrh	r3, [r3, #22]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d00a      	beq.n	800766c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007656:	7b7b      	ldrb	r3, [r7, #13]
 8007658:	2b80      	cmp	r3, #128	; 0x80
 800765a:	d103      	bne.n	8007664 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2203      	movs	r2, #3
 8007660:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007662:	e115      	b.n	8007890 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2205      	movs	r2, #5
 8007668:	761a      	strb	r2, [r3, #24]
      break;
 800766a:	e111      	b.n	8007890 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800766c:	7b7b      	ldrb	r3, [r7, #13]
 800766e:	2b80      	cmp	r3, #128	; 0x80
 8007670:	d103      	bne.n	800767a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2209      	movs	r2, #9
 8007676:	761a      	strb	r2, [r3, #24]
      break;
 8007678:	e10a      	b.n	8007890 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2207      	movs	r2, #7
 800767e:	761a      	strb	r2, [r3, #24]
      break;
 8007680:	e106      	b.n	8007890 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007682:	7bbb      	ldrb	r3, [r7, #14]
 8007684:	2b04      	cmp	r3, #4
 8007686:	d003      	beq.n	8007690 <USBH_HandleControl+0xcc>
 8007688:	7bbb      	ldrb	r3, [r7, #14]
 800768a:	2b02      	cmp	r3, #2
 800768c:	f040 8100 	bne.w	8007890 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	220b      	movs	r2, #11
 8007694:	761a      	strb	r2, [r3, #24]
      break;
 8007696:	e0fb      	b.n	8007890 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800769e:	b29a      	uxth	r2, r3
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6899      	ldr	r1, [r3, #8]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	899a      	ldrh	r2, [r3, #12]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	791b      	ldrb	r3, [r3, #4]
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 f93a 	bl	800792a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2204      	movs	r2, #4
 80076ba:	761a      	strb	r2, [r3, #24]
      break;
 80076bc:	e0f1      	b.n	80078a2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	791b      	ldrb	r3, [r3, #4]
 80076c2:	4619      	mov	r1, r3
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 fc31 	bl	8007f2c <USBH_LL_GetURBState>
 80076ca:	4603      	mov	r3, r0
 80076cc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80076ce:	7bbb      	ldrb	r3, [r7, #14]
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d102      	bne.n	80076da <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2209      	movs	r2, #9
 80076d8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80076da:	7bbb      	ldrb	r3, [r7, #14]
 80076dc:	2b05      	cmp	r3, #5
 80076de:	d102      	bne.n	80076e6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80076e0:	2303      	movs	r3, #3
 80076e2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80076e4:	e0d6      	b.n	8007894 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80076e6:	7bbb      	ldrb	r3, [r7, #14]
 80076e8:	2b04      	cmp	r3, #4
 80076ea:	f040 80d3 	bne.w	8007894 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	220b      	movs	r2, #11
 80076f2:	761a      	strb	r2, [r3, #24]
      break;
 80076f4:	e0ce      	b.n	8007894 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6899      	ldr	r1, [r3, #8]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	899a      	ldrh	r2, [r3, #12]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	795b      	ldrb	r3, [r3, #5]
 8007702:	2001      	movs	r0, #1
 8007704:	9000      	str	r0, [sp, #0]
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 f8ea 	bl	80078e0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007712:	b29a      	uxth	r2, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2206      	movs	r2, #6
 800771c:	761a      	strb	r2, [r3, #24]
      break;
 800771e:	e0c0      	b.n	80078a2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	795b      	ldrb	r3, [r3, #5]
 8007724:	4619      	mov	r1, r3
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 fc00 	bl	8007f2c <USBH_LL_GetURBState>
 800772c:	4603      	mov	r3, r0
 800772e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007730:	7bbb      	ldrb	r3, [r7, #14]
 8007732:	2b01      	cmp	r3, #1
 8007734:	d103      	bne.n	800773e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2207      	movs	r2, #7
 800773a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800773c:	e0ac      	b.n	8007898 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800773e:	7bbb      	ldrb	r3, [r7, #14]
 8007740:	2b05      	cmp	r3, #5
 8007742:	d105      	bne.n	8007750 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	220c      	movs	r2, #12
 8007748:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800774a:	2303      	movs	r3, #3
 800774c:	73fb      	strb	r3, [r7, #15]
      break;
 800774e:	e0a3      	b.n	8007898 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007750:	7bbb      	ldrb	r3, [r7, #14]
 8007752:	2b02      	cmp	r3, #2
 8007754:	d103      	bne.n	800775e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2205      	movs	r2, #5
 800775a:	761a      	strb	r2, [r3, #24]
      break;
 800775c:	e09c      	b.n	8007898 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800775e:	7bbb      	ldrb	r3, [r7, #14]
 8007760:	2b04      	cmp	r3, #4
 8007762:	f040 8099 	bne.w	8007898 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	220b      	movs	r2, #11
 800776a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800776c:	2302      	movs	r3, #2
 800776e:	73fb      	strb	r3, [r7, #15]
      break;
 8007770:	e092      	b.n	8007898 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	791b      	ldrb	r3, [r3, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	2100      	movs	r1, #0
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 f8d5 	bl	800792a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007786:	b29a      	uxth	r2, r3
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2208      	movs	r2, #8
 8007790:	761a      	strb	r2, [r3, #24]

      break;
 8007792:	e086      	b.n	80078a2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	791b      	ldrb	r3, [r3, #4]
 8007798:	4619      	mov	r1, r3
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 fbc6 	bl	8007f2c <USBH_LL_GetURBState>
 80077a0:	4603      	mov	r3, r0
 80077a2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80077a4:	7bbb      	ldrb	r3, [r7, #14]
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d105      	bne.n	80077b6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	220d      	movs	r2, #13
 80077ae:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80077b0:	2300      	movs	r3, #0
 80077b2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80077b4:	e072      	b.n	800789c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80077b6:	7bbb      	ldrb	r3, [r7, #14]
 80077b8:	2b04      	cmp	r3, #4
 80077ba:	d103      	bne.n	80077c4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	220b      	movs	r2, #11
 80077c0:	761a      	strb	r2, [r3, #24]
      break;
 80077c2:	e06b      	b.n	800789c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80077c4:	7bbb      	ldrb	r3, [r7, #14]
 80077c6:	2b05      	cmp	r3, #5
 80077c8:	d168      	bne.n	800789c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80077ca:	2303      	movs	r3, #3
 80077cc:	73fb      	strb	r3, [r7, #15]
      break;
 80077ce:	e065      	b.n	800789c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	795b      	ldrb	r3, [r3, #5]
 80077d4:	2201      	movs	r2, #1
 80077d6:	9200      	str	r2, [sp, #0]
 80077d8:	2200      	movs	r2, #0
 80077da:	2100      	movs	r1, #0
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 f87f 	bl	80078e0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	220a      	movs	r2, #10
 80077f2:	761a      	strb	r2, [r3, #24]
      break;
 80077f4:	e055      	b.n	80078a2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	795b      	ldrb	r3, [r3, #5]
 80077fa:	4619      	mov	r1, r3
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 fb95 	bl	8007f2c <USBH_LL_GetURBState>
 8007802:	4603      	mov	r3, r0
 8007804:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007806:	7bbb      	ldrb	r3, [r7, #14]
 8007808:	2b01      	cmp	r3, #1
 800780a:	d105      	bne.n	8007818 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800780c:	2300      	movs	r3, #0
 800780e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	220d      	movs	r2, #13
 8007814:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007816:	e043      	b.n	80078a0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007818:	7bbb      	ldrb	r3, [r7, #14]
 800781a:	2b02      	cmp	r3, #2
 800781c:	d103      	bne.n	8007826 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2209      	movs	r2, #9
 8007822:	761a      	strb	r2, [r3, #24]
      break;
 8007824:	e03c      	b.n	80078a0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007826:	7bbb      	ldrb	r3, [r7, #14]
 8007828:	2b04      	cmp	r3, #4
 800782a:	d139      	bne.n	80078a0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	220b      	movs	r2, #11
 8007830:	761a      	strb	r2, [r3, #24]
      break;
 8007832:	e035      	b.n	80078a0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	7e5b      	ldrb	r3, [r3, #25]
 8007838:	3301      	adds	r3, #1
 800783a:	b2da      	uxtb	r2, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	765a      	strb	r2, [r3, #25]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	7e5b      	ldrb	r3, [r3, #25]
 8007844:	2b02      	cmp	r3, #2
 8007846:	d806      	bhi.n	8007856 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2201      	movs	r2, #1
 8007852:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007854:	e025      	b.n	80078a2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800785c:	2106      	movs	r1, #6
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	795b      	ldrb	r3, [r3, #5]
 800786c:	4619      	mov	r1, r3
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 f90c 	bl	8007a8c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	791b      	ldrb	r3, [r3, #4]
 8007878:	4619      	mov	r1, r3
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 f906 	bl	8007a8c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2200      	movs	r2, #0
 8007884:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007886:	2302      	movs	r3, #2
 8007888:	73fb      	strb	r3, [r7, #15]
      break;
 800788a:	e00a      	b.n	80078a2 <USBH_HandleControl+0x2de>

    default:
      break;
 800788c:	bf00      	nop
 800788e:	e008      	b.n	80078a2 <USBH_HandleControl+0x2de>
      break;
 8007890:	bf00      	nop
 8007892:	e006      	b.n	80078a2 <USBH_HandleControl+0x2de>
      break;
 8007894:	bf00      	nop
 8007896:	e004      	b.n	80078a2 <USBH_HandleControl+0x2de>
      break;
 8007898:	bf00      	nop
 800789a:	e002      	b.n	80078a2 <USBH_HandleControl+0x2de>
      break;
 800789c:	bf00      	nop
 800789e:	e000      	b.n	80078a2 <USBH_HandleControl+0x2de>
      break;
 80078a0:	bf00      	nop
  }

  return status;
 80078a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3710      	adds	r7, #16
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b088      	sub	sp, #32
 80078b0:	af04      	add	r7, sp, #16
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	60b9      	str	r1, [r7, #8]
 80078b6:	4613      	mov	r3, r2
 80078b8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80078ba:	79f9      	ldrb	r1, [r7, #7]
 80078bc:	2300      	movs	r3, #0
 80078be:	9303      	str	r3, [sp, #12]
 80078c0:	2308      	movs	r3, #8
 80078c2:	9302      	str	r3, [sp, #8]
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	9301      	str	r3, [sp, #4]
 80078c8:	2300      	movs	r3, #0
 80078ca:	9300      	str	r3, [sp, #0]
 80078cc:	2300      	movs	r3, #0
 80078ce:	2200      	movs	r2, #0
 80078d0:	68f8      	ldr	r0, [r7, #12]
 80078d2:	f000 fafa 	bl	8007eca <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80078d6:	2300      	movs	r3, #0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3710      	adds	r7, #16
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b088      	sub	sp, #32
 80078e4:	af04      	add	r7, sp, #16
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	4611      	mov	r1, r2
 80078ec:	461a      	mov	r2, r3
 80078ee:	460b      	mov	r3, r1
 80078f0:	80fb      	strh	r3, [r7, #6]
 80078f2:	4613      	mov	r3, r2
 80078f4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d001      	beq.n	8007904 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007900:	2300      	movs	r3, #0
 8007902:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007904:	7979      	ldrb	r1, [r7, #5]
 8007906:	7e3b      	ldrb	r3, [r7, #24]
 8007908:	9303      	str	r3, [sp, #12]
 800790a:	88fb      	ldrh	r3, [r7, #6]
 800790c:	9302      	str	r3, [sp, #8]
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	9301      	str	r3, [sp, #4]
 8007912:	2301      	movs	r3, #1
 8007914:	9300      	str	r3, [sp, #0]
 8007916:	2300      	movs	r3, #0
 8007918:	2200      	movs	r2, #0
 800791a:	68f8      	ldr	r0, [r7, #12]
 800791c:	f000 fad5 	bl	8007eca <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007920:	2300      	movs	r3, #0
}
 8007922:	4618      	mov	r0, r3
 8007924:	3710      	adds	r7, #16
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}

0800792a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800792a:	b580      	push	{r7, lr}
 800792c:	b088      	sub	sp, #32
 800792e:	af04      	add	r7, sp, #16
 8007930:	60f8      	str	r0, [r7, #12]
 8007932:	60b9      	str	r1, [r7, #8]
 8007934:	4611      	mov	r1, r2
 8007936:	461a      	mov	r2, r3
 8007938:	460b      	mov	r3, r1
 800793a:	80fb      	strh	r3, [r7, #6]
 800793c:	4613      	mov	r3, r2
 800793e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007940:	7979      	ldrb	r1, [r7, #5]
 8007942:	2300      	movs	r3, #0
 8007944:	9303      	str	r3, [sp, #12]
 8007946:	88fb      	ldrh	r3, [r7, #6]
 8007948:	9302      	str	r3, [sp, #8]
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	9301      	str	r3, [sp, #4]
 800794e:	2301      	movs	r3, #1
 8007950:	9300      	str	r3, [sp, #0]
 8007952:	2300      	movs	r3, #0
 8007954:	2201      	movs	r2, #1
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f000 fab7 	bl	8007eca <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800795c:	2300      	movs	r3, #0

}
 800795e:	4618      	mov	r0, r3
 8007960:	3710      	adds	r7, #16
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}

08007966 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007966:	b580      	push	{r7, lr}
 8007968:	b088      	sub	sp, #32
 800796a:	af04      	add	r7, sp, #16
 800796c:	60f8      	str	r0, [r7, #12]
 800796e:	60b9      	str	r1, [r7, #8]
 8007970:	4611      	mov	r1, r2
 8007972:	461a      	mov	r2, r3
 8007974:	460b      	mov	r3, r1
 8007976:	80fb      	strh	r3, [r7, #6]
 8007978:	4613      	mov	r3, r2
 800797a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007982:	2b00      	cmp	r3, #0
 8007984:	d001      	beq.n	800798a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007986:	2300      	movs	r3, #0
 8007988:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800798a:	7979      	ldrb	r1, [r7, #5]
 800798c:	7e3b      	ldrb	r3, [r7, #24]
 800798e:	9303      	str	r3, [sp, #12]
 8007990:	88fb      	ldrh	r3, [r7, #6]
 8007992:	9302      	str	r3, [sp, #8]
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	9301      	str	r3, [sp, #4]
 8007998:	2301      	movs	r3, #1
 800799a:	9300      	str	r3, [sp, #0]
 800799c:	2302      	movs	r3, #2
 800799e:	2200      	movs	r2, #0
 80079a0:	68f8      	ldr	r0, [r7, #12]
 80079a2:	f000 fa92 	bl	8007eca <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80079a6:	2300      	movs	r3, #0
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3710      	adds	r7, #16
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b088      	sub	sp, #32
 80079b4:	af04      	add	r7, sp, #16
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	4611      	mov	r1, r2
 80079bc:	461a      	mov	r2, r3
 80079be:	460b      	mov	r3, r1
 80079c0:	80fb      	strh	r3, [r7, #6]
 80079c2:	4613      	mov	r3, r2
 80079c4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80079c6:	7979      	ldrb	r1, [r7, #5]
 80079c8:	2300      	movs	r3, #0
 80079ca:	9303      	str	r3, [sp, #12]
 80079cc:	88fb      	ldrh	r3, [r7, #6]
 80079ce:	9302      	str	r3, [sp, #8]
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	9301      	str	r3, [sp, #4]
 80079d4:	2301      	movs	r3, #1
 80079d6:	9300      	str	r3, [sp, #0]
 80079d8:	2302      	movs	r3, #2
 80079da:	2201      	movs	r2, #1
 80079dc:	68f8      	ldr	r0, [r7, #12]
 80079de:	f000 fa74 	bl	8007eca <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3710      	adds	r7, #16
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b086      	sub	sp, #24
 80079f0:	af04      	add	r7, sp, #16
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	4608      	mov	r0, r1
 80079f6:	4611      	mov	r1, r2
 80079f8:	461a      	mov	r2, r3
 80079fa:	4603      	mov	r3, r0
 80079fc:	70fb      	strb	r3, [r7, #3]
 80079fe:	460b      	mov	r3, r1
 8007a00:	70bb      	strb	r3, [r7, #2]
 8007a02:	4613      	mov	r3, r2
 8007a04:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007a06:	7878      	ldrb	r0, [r7, #1]
 8007a08:	78ba      	ldrb	r2, [r7, #2]
 8007a0a:	78f9      	ldrb	r1, [r7, #3]
 8007a0c:	8b3b      	ldrh	r3, [r7, #24]
 8007a0e:	9302      	str	r3, [sp, #8]
 8007a10:	7d3b      	ldrb	r3, [r7, #20]
 8007a12:	9301      	str	r3, [sp, #4]
 8007a14:	7c3b      	ldrb	r3, [r7, #16]
 8007a16:	9300      	str	r3, [sp, #0]
 8007a18:	4603      	mov	r3, r0
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 fa07 	bl	8007e2e <USBH_LL_OpenPipe>

  return USBH_OK;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3708      	adds	r7, #8
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}

08007a2a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007a2a:	b580      	push	{r7, lr}
 8007a2c:	b082      	sub	sp, #8
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
 8007a32:	460b      	mov	r3, r1
 8007a34:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007a36:	78fb      	ldrb	r3, [r7, #3]
 8007a38:	4619      	mov	r1, r3
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 fa26 	bl	8007e8c <USBH_LL_ClosePipe>

  return USBH_OK;
 8007a40:	2300      	movs	r3, #0
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3708      	adds	r7, #8
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}

08007a4a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007a4a:	b580      	push	{r7, lr}
 8007a4c:	b084      	sub	sp, #16
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
 8007a52:	460b      	mov	r3, r1
 8007a54:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 f836 	bl	8007ac8 <USBH_GetFreePipe>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007a60:	89fb      	ldrh	r3, [r7, #14]
 8007a62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d00a      	beq.n	8007a80 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007a6a:	78fa      	ldrb	r2, [r7, #3]
 8007a6c:	89fb      	ldrh	r3, [r7, #14]
 8007a6e:	f003 030f 	and.w	r3, r3, #15
 8007a72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007a76:	6879      	ldr	r1, [r7, #4]
 8007a78:	33e0      	adds	r3, #224	; 0xe0
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	440b      	add	r3, r1
 8007a7e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007a80:	89fb      	ldrh	r3, [r7, #14]
 8007a82:	b2db      	uxtb	r3, r3
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3710      	adds	r7, #16
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	460b      	mov	r3, r1
 8007a96:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007a98:	78fb      	ldrb	r3, [r7, #3]
 8007a9a:	2b0f      	cmp	r3, #15
 8007a9c:	d80d      	bhi.n	8007aba <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007a9e:	78fb      	ldrb	r3, [r7, #3]
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	33e0      	adds	r3, #224	; 0xe0
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	4413      	add	r3, r2
 8007aa8:	685a      	ldr	r2, [r3, #4]
 8007aaa:	78fb      	ldrb	r3, [r7, #3]
 8007aac:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007ab0:	6879      	ldr	r1, [r7, #4]
 8007ab2:	33e0      	adds	r3, #224	; 0xe0
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	440b      	add	r3, r1
 8007ab8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	370c      	adds	r7, #12
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b085      	sub	sp, #20
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	73fb      	strb	r3, [r7, #15]
 8007ad8:	e00f      	b.n	8007afa <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007ada:	7bfb      	ldrb	r3, [r7, #15]
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	33e0      	adds	r3, #224	; 0xe0
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	4413      	add	r3, r2
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d102      	bne.n	8007af4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007aee:	7bfb      	ldrb	r3, [r7, #15]
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	e007      	b.n	8007b04 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007af4:	7bfb      	ldrb	r3, [r7, #15]
 8007af6:	3301      	adds	r3, #1
 8007af8:	73fb      	strb	r3, [r7, #15]
 8007afa:	7bfb      	ldrb	r3, [r7, #15]
 8007afc:	2b0f      	cmp	r3, #15
 8007afe:	d9ec      	bls.n	8007ada <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007b00:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3714      	adds	r7, #20
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007b14:	2201      	movs	r2, #1
 8007b16:	490e      	ldr	r1, [pc, #56]	; (8007b50 <MX_USB_HOST_Init+0x40>)
 8007b18:	480e      	ldr	r0, [pc, #56]	; (8007b54 <MX_USB_HOST_Init+0x44>)
 8007b1a:	f7ff fb37 	bl	800718c <USBH_Init>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d001      	beq.n	8007b28 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007b24:	f7f8 ff98 	bl	8000a58 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007b28:	490b      	ldr	r1, [pc, #44]	; (8007b58 <MX_USB_HOST_Init+0x48>)
 8007b2a:	480a      	ldr	r0, [pc, #40]	; (8007b54 <MX_USB_HOST_Init+0x44>)
 8007b2c:	f7ff fbbc 	bl	80072a8 <USBH_RegisterClass>
 8007b30:	4603      	mov	r3, r0
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d001      	beq.n	8007b3a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007b36:	f7f8 ff8f 	bl	8000a58 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007b3a:	4806      	ldr	r0, [pc, #24]	; (8007b54 <MX_USB_HOST_Init+0x44>)
 8007b3c:	f7ff fc40 	bl	80073c0 <USBH_Start>
 8007b40:	4603      	mov	r3, r0
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d001      	beq.n	8007b4a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007b46:	f7f8 ff87 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007b4a:	bf00      	nop
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	08007b5d 	.word	0x08007b5d
 8007b54:	20000290 	.word	0x20000290
 8007b58:	20000034 	.word	0x20000034

08007b5c <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	460b      	mov	r3, r1
 8007b66:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007b68:	78fb      	ldrb	r3, [r7, #3]
 8007b6a:	3b01      	subs	r3, #1
 8007b6c:	2b04      	cmp	r3, #4
 8007b6e:	d819      	bhi.n	8007ba4 <USBH_UserProcess+0x48>
 8007b70:	a201      	add	r2, pc, #4	; (adr r2, 8007b78 <USBH_UserProcess+0x1c>)
 8007b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b76:	bf00      	nop
 8007b78:	08007ba5 	.word	0x08007ba5
 8007b7c:	08007b95 	.word	0x08007b95
 8007b80:	08007ba5 	.word	0x08007ba5
 8007b84:	08007b9d 	.word	0x08007b9d
 8007b88:	08007b8d 	.word	0x08007b8d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007b8c:	4b09      	ldr	r3, [pc, #36]	; (8007bb4 <USBH_UserProcess+0x58>)
 8007b8e:	2203      	movs	r2, #3
 8007b90:	701a      	strb	r2, [r3, #0]
  break;
 8007b92:	e008      	b.n	8007ba6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007b94:	4b07      	ldr	r3, [pc, #28]	; (8007bb4 <USBH_UserProcess+0x58>)
 8007b96:	2202      	movs	r2, #2
 8007b98:	701a      	strb	r2, [r3, #0]
  break;
 8007b9a:	e004      	b.n	8007ba6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007b9c:	4b05      	ldr	r3, [pc, #20]	; (8007bb4 <USBH_UserProcess+0x58>)
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	701a      	strb	r2, [r3, #0]
  break;
 8007ba2:	e000      	b.n	8007ba6 <USBH_UserProcess+0x4a>

  default:
  break;
 8007ba4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007ba6:	bf00      	nop
 8007ba8:	370c      	adds	r7, #12
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr
 8007bb2:	bf00      	nop
 8007bb4:	20000668 	.word	0x20000668

08007bb8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b08a      	sub	sp, #40	; 0x28
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007bc0:	f107 0314 	add.w	r3, r7, #20
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	601a      	str	r2, [r3, #0]
 8007bc8:	605a      	str	r2, [r3, #4]
 8007bca:	609a      	str	r2, [r3, #8]
 8007bcc:	60da      	str	r2, [r3, #12]
 8007bce:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007bd8:	d147      	bne.n	8007c6a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007bda:	2300      	movs	r3, #0
 8007bdc:	613b      	str	r3, [r7, #16]
 8007bde:	4b25      	ldr	r3, [pc, #148]	; (8007c74 <HAL_HCD_MspInit+0xbc>)
 8007be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007be2:	4a24      	ldr	r2, [pc, #144]	; (8007c74 <HAL_HCD_MspInit+0xbc>)
 8007be4:	f043 0301 	orr.w	r3, r3, #1
 8007be8:	6313      	str	r3, [r2, #48]	; 0x30
 8007bea:	4b22      	ldr	r3, [pc, #136]	; (8007c74 <HAL_HCD_MspInit+0xbc>)
 8007bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bee:	f003 0301 	and.w	r3, r3, #1
 8007bf2:	613b      	str	r3, [r7, #16]
 8007bf4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007bf6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c00:	2300      	movs	r3, #0
 8007c02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007c04:	f107 0314 	add.w	r3, r7, #20
 8007c08:	4619      	mov	r1, r3
 8007c0a:	481b      	ldr	r0, [pc, #108]	; (8007c78 <HAL_HCD_MspInit+0xc0>)
 8007c0c:	f7f9 fc9e 	bl	800154c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007c10:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c16:	2302      	movs	r3, #2
 8007c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007c22:	230a      	movs	r3, #10
 8007c24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c26:	f107 0314 	add.w	r3, r7, #20
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	4812      	ldr	r0, [pc, #72]	; (8007c78 <HAL_HCD_MspInit+0xc0>)
 8007c2e:	f7f9 fc8d 	bl	800154c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007c32:	4b10      	ldr	r3, [pc, #64]	; (8007c74 <HAL_HCD_MspInit+0xbc>)
 8007c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c36:	4a0f      	ldr	r2, [pc, #60]	; (8007c74 <HAL_HCD_MspInit+0xbc>)
 8007c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c3c:	6353      	str	r3, [r2, #52]	; 0x34
 8007c3e:	2300      	movs	r3, #0
 8007c40:	60fb      	str	r3, [r7, #12]
 8007c42:	4b0c      	ldr	r3, [pc, #48]	; (8007c74 <HAL_HCD_MspInit+0xbc>)
 8007c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c46:	4a0b      	ldr	r2, [pc, #44]	; (8007c74 <HAL_HCD_MspInit+0xbc>)
 8007c48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8007c4e:	4b09      	ldr	r3, [pc, #36]	; (8007c74 <HAL_HCD_MspInit+0xbc>)
 8007c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c56:	60fb      	str	r3, [r7, #12]
 8007c58:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	2100      	movs	r1, #0
 8007c5e:	2043      	movs	r0, #67	; 0x43
 8007c60:	f7f9 fc3d 	bl	80014de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007c64:	2043      	movs	r0, #67	; 0x43
 8007c66:	f7f9 fc56 	bl	8001516 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007c6a:	bf00      	nop
 8007c6c:	3728      	adds	r7, #40	; 0x28
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	bf00      	nop
 8007c74:	40023800 	.word	0x40023800
 8007c78:	40020000 	.word	0x40020000

08007c7c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b082      	sub	sp, #8
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7ff fbb7 	bl	80073fe <USBH_LL_IncTimer>
}
 8007c90:	bf00      	nop
 8007c92:	3708      	adds	r7, #8
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7ff fbef 	bl	800748a <USBH_LL_Connect>
}
 8007cac:	bf00      	nop
 8007cae:	3708      	adds	r7, #8
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f7ff fbf8 	bl	80074b8 <USBH_LL_Disconnect>
}
 8007cc8:	bf00      	nop
 8007cca:	3708      	adds	r7, #8
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	460b      	mov	r3, r1
 8007cda:	70fb      	strb	r3, [r7, #3]
 8007cdc:	4613      	mov	r3, r2
 8007cde:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007ce0:	bf00      	nop
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b082      	sub	sp, #8
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7ff fba9 	bl	8007452 <USBH_LL_PortEnabled>
}
 8007d00:	bf00      	nop
 8007d02:	3708      	adds	r7, #8
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007d16:	4618      	mov	r0, r3
 8007d18:	f7ff fba9 	bl	800746e <USBH_LL_PortDisabled>
}
 8007d1c:	bf00      	nop
 8007d1e:	3708      	adds	r7, #8
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d12a      	bne.n	8007d8c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007d36:	4a18      	ldr	r2, [pc, #96]	; (8007d98 <USBH_LL_Init+0x74>)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	4a15      	ldr	r2, [pc, #84]	; (8007d98 <USBH_LL_Init+0x74>)
 8007d42:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007d46:	4b14      	ldr	r3, [pc, #80]	; (8007d98 <USBH_LL_Init+0x74>)
 8007d48:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007d4c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007d4e:	4b12      	ldr	r3, [pc, #72]	; (8007d98 <USBH_LL_Init+0x74>)
 8007d50:	2208      	movs	r2, #8
 8007d52:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007d54:	4b10      	ldr	r3, [pc, #64]	; (8007d98 <USBH_LL_Init+0x74>)
 8007d56:	2201      	movs	r2, #1
 8007d58:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007d5a:	4b0f      	ldr	r3, [pc, #60]	; (8007d98 <USBH_LL_Init+0x74>)
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007d60:	4b0d      	ldr	r3, [pc, #52]	; (8007d98 <USBH_LL_Init+0x74>)
 8007d62:	2202      	movs	r2, #2
 8007d64:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007d66:	4b0c      	ldr	r3, [pc, #48]	; (8007d98 <USBH_LL_Init+0x74>)
 8007d68:	2200      	movs	r2, #0
 8007d6a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007d6c:	480a      	ldr	r0, [pc, #40]	; (8007d98 <USBH_LL_Init+0x74>)
 8007d6e:	f7f9 fda2 	bl	80018b6 <HAL_HCD_Init>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d001      	beq.n	8007d7c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007d78:	f7f8 fe6e 	bl	8000a58 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007d7c:	4806      	ldr	r0, [pc, #24]	; (8007d98 <USBH_LL_Init+0x74>)
 8007d7e:	f7fa f978 	bl	8002072 <HAL_HCD_GetCurrentFrame>
 8007d82:	4603      	mov	r3, r0
 8007d84:	4619      	mov	r1, r3
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f7ff fb2a 	bl	80073e0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007d8c:	2300      	movs	r3, #0
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3708      	adds	r7, #8
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
 8007d96:	bf00      	nop
 8007d98:	2000066c 	.word	0x2000066c

08007d9c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007da4:	2300      	movs	r3, #0
 8007da6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007da8:	2300      	movs	r3, #0
 8007daa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007db2:	4618      	mov	r0, r3
 8007db4:	f7fa f8f5 	bl	8001fa2 <HAL_HCD_Start>
 8007db8:	4603      	mov	r3, r0
 8007dba:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007dbc:	7bfb      	ldrb	r3, [r7, #15]
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f000 f90e 	bl	8007fe0 <USBH_Get_USB_Status>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3710      	adds	r7, #16
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b084      	sub	sp, #16
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007dde:	2300      	movs	r3, #0
 8007de0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7fa f8fd 	bl	8001fe8 <HAL_HCD_Stop>
 8007dee:	4603      	mov	r3, r0
 8007df0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007df2:	7bfb      	ldrb	r3, [r7, #15]
 8007df4:	4618      	mov	r0, r3
 8007df6:	f000 f8f3 	bl	8007fe0 <USBH_Get_USB_Status>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dfe:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3710      	adds	r7, #16
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	460b      	mov	r3, r1
 8007e12:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007e1a:	78fa      	ldrb	r2, [r7, #3]
 8007e1c:	4611      	mov	r1, r2
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7fa f913 	bl	800204a <HAL_HCD_HC_GetXferCount>
 8007e24:	4603      	mov	r3, r0
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3708      	adds	r7, #8
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}

08007e2e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007e2e:	b590      	push	{r4, r7, lr}
 8007e30:	b089      	sub	sp, #36	; 0x24
 8007e32:	af04      	add	r7, sp, #16
 8007e34:	6078      	str	r0, [r7, #4]
 8007e36:	4608      	mov	r0, r1
 8007e38:	4611      	mov	r1, r2
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	70fb      	strb	r3, [r7, #3]
 8007e40:	460b      	mov	r3, r1
 8007e42:	70bb      	strb	r3, [r7, #2]
 8007e44:	4613      	mov	r3, r2
 8007e46:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007e56:	787c      	ldrb	r4, [r7, #1]
 8007e58:	78ba      	ldrb	r2, [r7, #2]
 8007e5a:	78f9      	ldrb	r1, [r7, #3]
 8007e5c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007e5e:	9302      	str	r3, [sp, #8]
 8007e60:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007e64:	9301      	str	r3, [sp, #4]
 8007e66:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007e6a:	9300      	str	r3, [sp, #0]
 8007e6c:	4623      	mov	r3, r4
 8007e6e:	f7f9 fd84 	bl	800197a <HAL_HCD_HC_Init>
 8007e72:	4603      	mov	r3, r0
 8007e74:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007e76:	7bfb      	ldrb	r3, [r7, #15]
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f000 f8b1 	bl	8007fe0 <USBH_Get_USB_Status>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e82:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3714      	adds	r7, #20
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd90      	pop	{r4, r7, pc}

08007e8c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	460b      	mov	r3, r1
 8007e96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007ea6:	78fa      	ldrb	r2, [r7, #3]
 8007ea8:	4611      	mov	r1, r2
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7f9 fdf4 	bl	8001a98 <HAL_HCD_HC_Halt>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007eb4:	7bfb      	ldrb	r3, [r7, #15]
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f000 f892 	bl	8007fe0 <USBH_Get_USB_Status>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ec0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3710      	adds	r7, #16
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007eca:	b590      	push	{r4, r7, lr}
 8007ecc:	b089      	sub	sp, #36	; 0x24
 8007ece:	af04      	add	r7, sp, #16
 8007ed0:	6078      	str	r0, [r7, #4]
 8007ed2:	4608      	mov	r0, r1
 8007ed4:	4611      	mov	r1, r2
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	4603      	mov	r3, r0
 8007eda:	70fb      	strb	r3, [r7, #3]
 8007edc:	460b      	mov	r3, r1
 8007ede:	70bb      	strb	r3, [r7, #2]
 8007ee0:	4613      	mov	r3, r2
 8007ee2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007ef2:	787c      	ldrb	r4, [r7, #1]
 8007ef4:	78ba      	ldrb	r2, [r7, #2]
 8007ef6:	78f9      	ldrb	r1, [r7, #3]
 8007ef8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007efc:	9303      	str	r3, [sp, #12]
 8007efe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007f00:	9302      	str	r3, [sp, #8]
 8007f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f04:	9301      	str	r3, [sp, #4]
 8007f06:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007f0a:	9300      	str	r3, [sp, #0]
 8007f0c:	4623      	mov	r3, r4
 8007f0e:	f7f9 fde7 	bl	8001ae0 <HAL_HCD_HC_SubmitRequest>
 8007f12:	4603      	mov	r3, r0
 8007f14:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007f16:	7bfb      	ldrb	r3, [r7, #15]
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f000 f861 	bl	8007fe0 <USBH_Get_USB_Status>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f22:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3714      	adds	r7, #20
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd90      	pop	{r4, r7, pc}

08007f2c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	460b      	mov	r3, r1
 8007f36:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007f3e:	78fa      	ldrb	r2, [r7, #3]
 8007f40:	4611      	mov	r1, r2
 8007f42:	4618      	mov	r0, r3
 8007f44:	f7fa f86d 	bl	8002022 <HAL_HCD_HC_GetURBState>
 8007f48:	4603      	mov	r3, r0
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3708      	adds	r7, #8
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}

08007f52 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007f52:	b580      	push	{r7, lr}
 8007f54:	b082      	sub	sp, #8
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
 8007f5a:	460b      	mov	r3, r1
 8007f5c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d103      	bne.n	8007f70 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007f68:	78fb      	ldrb	r3, [r7, #3]
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f000 f864 	bl	8008038 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007f70:	20c8      	movs	r0, #200	; 0xc8
 8007f72:	f7f9 f9b5 	bl	80012e0 <HAL_Delay>
  return USBH_OK;
 8007f76:	2300      	movs	r3, #0
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3708      	adds	r7, #8
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b085      	sub	sp, #20
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	460b      	mov	r3, r1
 8007f8a:	70fb      	strb	r3, [r7, #3]
 8007f8c:	4613      	mov	r3, r2
 8007f8e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007f96:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007f98:	78fb      	ldrb	r3, [r7, #3]
 8007f9a:	68fa      	ldr	r2, [r7, #12]
 8007f9c:	212c      	movs	r1, #44	; 0x2c
 8007f9e:	fb01 f303 	mul.w	r3, r1, r3
 8007fa2:	4413      	add	r3, r2
 8007fa4:	333b      	adds	r3, #59	; 0x3b
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d009      	beq.n	8007fc0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007fac:	78fb      	ldrb	r3, [r7, #3]
 8007fae:	68fa      	ldr	r2, [r7, #12]
 8007fb0:	212c      	movs	r1, #44	; 0x2c
 8007fb2:	fb01 f303 	mul.w	r3, r1, r3
 8007fb6:	4413      	add	r3, r2
 8007fb8:	3354      	adds	r3, #84	; 0x54
 8007fba:	78ba      	ldrb	r2, [r7, #2]
 8007fbc:	701a      	strb	r2, [r3, #0]
 8007fbe:	e008      	b.n	8007fd2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007fc0:	78fb      	ldrb	r3, [r7, #3]
 8007fc2:	68fa      	ldr	r2, [r7, #12]
 8007fc4:	212c      	movs	r1, #44	; 0x2c
 8007fc6:	fb01 f303 	mul.w	r3, r1, r3
 8007fca:	4413      	add	r3, r2
 8007fcc:	3355      	adds	r3, #85	; 0x55
 8007fce:	78ba      	ldrb	r2, [r7, #2]
 8007fd0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007fd2:	2300      	movs	r3, #0
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3714      	adds	r7, #20
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b085      	sub	sp, #20
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007fea:	2300      	movs	r3, #0
 8007fec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007fee:	79fb      	ldrb	r3, [r7, #7]
 8007ff0:	2b03      	cmp	r3, #3
 8007ff2:	d817      	bhi.n	8008024 <USBH_Get_USB_Status+0x44>
 8007ff4:	a201      	add	r2, pc, #4	; (adr r2, 8007ffc <USBH_Get_USB_Status+0x1c>)
 8007ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ffa:	bf00      	nop
 8007ffc:	0800800d 	.word	0x0800800d
 8008000:	08008013 	.word	0x08008013
 8008004:	08008019 	.word	0x08008019
 8008008:	0800801f 	.word	0x0800801f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800800c:	2300      	movs	r3, #0
 800800e:	73fb      	strb	r3, [r7, #15]
    break;
 8008010:	e00b      	b.n	800802a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008012:	2302      	movs	r3, #2
 8008014:	73fb      	strb	r3, [r7, #15]
    break;
 8008016:	e008      	b.n	800802a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008018:	2301      	movs	r3, #1
 800801a:	73fb      	strb	r3, [r7, #15]
    break;
 800801c:	e005      	b.n	800802a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800801e:	2302      	movs	r3, #2
 8008020:	73fb      	strb	r3, [r7, #15]
    break;
 8008022:	e002      	b.n	800802a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008024:	2302      	movs	r3, #2
 8008026:	73fb      	strb	r3, [r7, #15]
    break;
 8008028:	bf00      	nop
  }
  return usb_status;
 800802a:	7bfb      	ldrb	r3, [r7, #15]
}
 800802c:	4618      	mov	r0, r3
 800802e:	3714      	adds	r7, #20
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	4603      	mov	r3, r0
 8008040:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008042:	79fb      	ldrb	r3, [r7, #7]
 8008044:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008046:	79fb      	ldrb	r3, [r7, #7]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d102      	bne.n	8008052 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800804c:	2300      	movs	r3, #0
 800804e:	73fb      	strb	r3, [r7, #15]
 8008050:	e001      	b.n	8008056 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008052:	2301      	movs	r3, #1
 8008054:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008056:	7bfb      	ldrb	r3, [r7, #15]
 8008058:	461a      	mov	r2, r3
 800805a:	2101      	movs	r1, #1
 800805c:	4803      	ldr	r0, [pc, #12]	; (800806c <MX_DriverVbusFS+0x34>)
 800805e:	f7f9 fc11 	bl	8001884 <HAL_GPIO_WritePin>
}
 8008062:	bf00      	nop
 8008064:	3710      	adds	r7, #16
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	40020800 	.word	0x40020800

08008070 <__errno>:
 8008070:	4b01      	ldr	r3, [pc, #4]	; (8008078 <__errno+0x8>)
 8008072:	6818      	ldr	r0, [r3, #0]
 8008074:	4770      	bx	lr
 8008076:	bf00      	nop
 8008078:	20000054 	.word	0x20000054

0800807c <__libc_init_array>:
 800807c:	b570      	push	{r4, r5, r6, lr}
 800807e:	4d0d      	ldr	r5, [pc, #52]	; (80080b4 <__libc_init_array+0x38>)
 8008080:	4c0d      	ldr	r4, [pc, #52]	; (80080b8 <__libc_init_array+0x3c>)
 8008082:	1b64      	subs	r4, r4, r5
 8008084:	10a4      	asrs	r4, r4, #2
 8008086:	2600      	movs	r6, #0
 8008088:	42a6      	cmp	r6, r4
 800808a:	d109      	bne.n	80080a0 <__libc_init_array+0x24>
 800808c:	4d0b      	ldr	r5, [pc, #44]	; (80080bc <__libc_init_array+0x40>)
 800808e:	4c0c      	ldr	r4, [pc, #48]	; (80080c0 <__libc_init_array+0x44>)
 8008090:	f000 f92e 	bl	80082f0 <_init>
 8008094:	1b64      	subs	r4, r4, r5
 8008096:	10a4      	asrs	r4, r4, #2
 8008098:	2600      	movs	r6, #0
 800809a:	42a6      	cmp	r6, r4
 800809c:	d105      	bne.n	80080aa <__libc_init_array+0x2e>
 800809e:	bd70      	pop	{r4, r5, r6, pc}
 80080a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80080a4:	4798      	blx	r3
 80080a6:	3601      	adds	r6, #1
 80080a8:	e7ee      	b.n	8008088 <__libc_init_array+0xc>
 80080aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80080ae:	4798      	blx	r3
 80080b0:	3601      	adds	r6, #1
 80080b2:	e7f2      	b.n	800809a <__libc_init_array+0x1e>
 80080b4:	0800832c 	.word	0x0800832c
 80080b8:	0800832c 	.word	0x0800832c
 80080bc:	0800832c 	.word	0x0800832c
 80080c0:	08008330 	.word	0x08008330

080080c4 <malloc>:
 80080c4:	4b02      	ldr	r3, [pc, #8]	; (80080d0 <malloc+0xc>)
 80080c6:	4601      	mov	r1, r0
 80080c8:	6818      	ldr	r0, [r3, #0]
 80080ca:	f000 b87f 	b.w	80081cc <_malloc_r>
 80080ce:	bf00      	nop
 80080d0:	20000054 	.word	0x20000054

080080d4 <free>:
 80080d4:	4b02      	ldr	r3, [pc, #8]	; (80080e0 <free+0xc>)
 80080d6:	4601      	mov	r1, r0
 80080d8:	6818      	ldr	r0, [r3, #0]
 80080da:	f000 b80b 	b.w	80080f4 <_free_r>
 80080de:	bf00      	nop
 80080e0:	20000054 	.word	0x20000054

080080e4 <memset>:
 80080e4:	4402      	add	r2, r0
 80080e6:	4603      	mov	r3, r0
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d100      	bne.n	80080ee <memset+0xa>
 80080ec:	4770      	bx	lr
 80080ee:	f803 1b01 	strb.w	r1, [r3], #1
 80080f2:	e7f9      	b.n	80080e8 <memset+0x4>

080080f4 <_free_r>:
 80080f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080f6:	2900      	cmp	r1, #0
 80080f8:	d044      	beq.n	8008184 <_free_r+0x90>
 80080fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080fe:	9001      	str	r0, [sp, #4]
 8008100:	2b00      	cmp	r3, #0
 8008102:	f1a1 0404 	sub.w	r4, r1, #4
 8008106:	bfb8      	it	lt
 8008108:	18e4      	addlt	r4, r4, r3
 800810a:	f000 f8e3 	bl	80082d4 <__malloc_lock>
 800810e:	4a1e      	ldr	r2, [pc, #120]	; (8008188 <_free_r+0x94>)
 8008110:	9801      	ldr	r0, [sp, #4]
 8008112:	6813      	ldr	r3, [r2, #0]
 8008114:	b933      	cbnz	r3, 8008124 <_free_r+0x30>
 8008116:	6063      	str	r3, [r4, #4]
 8008118:	6014      	str	r4, [r2, #0]
 800811a:	b003      	add	sp, #12
 800811c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008120:	f000 b8de 	b.w	80082e0 <__malloc_unlock>
 8008124:	42a3      	cmp	r3, r4
 8008126:	d908      	bls.n	800813a <_free_r+0x46>
 8008128:	6825      	ldr	r5, [r4, #0]
 800812a:	1961      	adds	r1, r4, r5
 800812c:	428b      	cmp	r3, r1
 800812e:	bf01      	itttt	eq
 8008130:	6819      	ldreq	r1, [r3, #0]
 8008132:	685b      	ldreq	r3, [r3, #4]
 8008134:	1949      	addeq	r1, r1, r5
 8008136:	6021      	streq	r1, [r4, #0]
 8008138:	e7ed      	b.n	8008116 <_free_r+0x22>
 800813a:	461a      	mov	r2, r3
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	b10b      	cbz	r3, 8008144 <_free_r+0x50>
 8008140:	42a3      	cmp	r3, r4
 8008142:	d9fa      	bls.n	800813a <_free_r+0x46>
 8008144:	6811      	ldr	r1, [r2, #0]
 8008146:	1855      	adds	r5, r2, r1
 8008148:	42a5      	cmp	r5, r4
 800814a:	d10b      	bne.n	8008164 <_free_r+0x70>
 800814c:	6824      	ldr	r4, [r4, #0]
 800814e:	4421      	add	r1, r4
 8008150:	1854      	adds	r4, r2, r1
 8008152:	42a3      	cmp	r3, r4
 8008154:	6011      	str	r1, [r2, #0]
 8008156:	d1e0      	bne.n	800811a <_free_r+0x26>
 8008158:	681c      	ldr	r4, [r3, #0]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	6053      	str	r3, [r2, #4]
 800815e:	4421      	add	r1, r4
 8008160:	6011      	str	r1, [r2, #0]
 8008162:	e7da      	b.n	800811a <_free_r+0x26>
 8008164:	d902      	bls.n	800816c <_free_r+0x78>
 8008166:	230c      	movs	r3, #12
 8008168:	6003      	str	r3, [r0, #0]
 800816a:	e7d6      	b.n	800811a <_free_r+0x26>
 800816c:	6825      	ldr	r5, [r4, #0]
 800816e:	1961      	adds	r1, r4, r5
 8008170:	428b      	cmp	r3, r1
 8008172:	bf04      	itt	eq
 8008174:	6819      	ldreq	r1, [r3, #0]
 8008176:	685b      	ldreq	r3, [r3, #4]
 8008178:	6063      	str	r3, [r4, #4]
 800817a:	bf04      	itt	eq
 800817c:	1949      	addeq	r1, r1, r5
 800817e:	6021      	streq	r1, [r4, #0]
 8008180:	6054      	str	r4, [r2, #4]
 8008182:	e7ca      	b.n	800811a <_free_r+0x26>
 8008184:	b003      	add	sp, #12
 8008186:	bd30      	pop	{r4, r5, pc}
 8008188:	20000970 	.word	0x20000970

0800818c <sbrk_aligned>:
 800818c:	b570      	push	{r4, r5, r6, lr}
 800818e:	4e0e      	ldr	r6, [pc, #56]	; (80081c8 <sbrk_aligned+0x3c>)
 8008190:	460c      	mov	r4, r1
 8008192:	6831      	ldr	r1, [r6, #0]
 8008194:	4605      	mov	r5, r0
 8008196:	b911      	cbnz	r1, 800819e <sbrk_aligned+0x12>
 8008198:	f000 f88c 	bl	80082b4 <_sbrk_r>
 800819c:	6030      	str	r0, [r6, #0]
 800819e:	4621      	mov	r1, r4
 80081a0:	4628      	mov	r0, r5
 80081a2:	f000 f887 	bl	80082b4 <_sbrk_r>
 80081a6:	1c43      	adds	r3, r0, #1
 80081a8:	d00a      	beq.n	80081c0 <sbrk_aligned+0x34>
 80081aa:	1cc4      	adds	r4, r0, #3
 80081ac:	f024 0403 	bic.w	r4, r4, #3
 80081b0:	42a0      	cmp	r0, r4
 80081b2:	d007      	beq.n	80081c4 <sbrk_aligned+0x38>
 80081b4:	1a21      	subs	r1, r4, r0
 80081b6:	4628      	mov	r0, r5
 80081b8:	f000 f87c 	bl	80082b4 <_sbrk_r>
 80081bc:	3001      	adds	r0, #1
 80081be:	d101      	bne.n	80081c4 <sbrk_aligned+0x38>
 80081c0:	f04f 34ff 	mov.w	r4, #4294967295
 80081c4:	4620      	mov	r0, r4
 80081c6:	bd70      	pop	{r4, r5, r6, pc}
 80081c8:	20000974 	.word	0x20000974

080081cc <_malloc_r>:
 80081cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081d0:	1ccd      	adds	r5, r1, #3
 80081d2:	f025 0503 	bic.w	r5, r5, #3
 80081d6:	3508      	adds	r5, #8
 80081d8:	2d0c      	cmp	r5, #12
 80081da:	bf38      	it	cc
 80081dc:	250c      	movcc	r5, #12
 80081de:	2d00      	cmp	r5, #0
 80081e0:	4607      	mov	r7, r0
 80081e2:	db01      	blt.n	80081e8 <_malloc_r+0x1c>
 80081e4:	42a9      	cmp	r1, r5
 80081e6:	d905      	bls.n	80081f4 <_malloc_r+0x28>
 80081e8:	230c      	movs	r3, #12
 80081ea:	603b      	str	r3, [r7, #0]
 80081ec:	2600      	movs	r6, #0
 80081ee:	4630      	mov	r0, r6
 80081f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081f4:	4e2e      	ldr	r6, [pc, #184]	; (80082b0 <_malloc_r+0xe4>)
 80081f6:	f000 f86d 	bl	80082d4 <__malloc_lock>
 80081fa:	6833      	ldr	r3, [r6, #0]
 80081fc:	461c      	mov	r4, r3
 80081fe:	bb34      	cbnz	r4, 800824e <_malloc_r+0x82>
 8008200:	4629      	mov	r1, r5
 8008202:	4638      	mov	r0, r7
 8008204:	f7ff ffc2 	bl	800818c <sbrk_aligned>
 8008208:	1c43      	adds	r3, r0, #1
 800820a:	4604      	mov	r4, r0
 800820c:	d14d      	bne.n	80082aa <_malloc_r+0xde>
 800820e:	6834      	ldr	r4, [r6, #0]
 8008210:	4626      	mov	r6, r4
 8008212:	2e00      	cmp	r6, #0
 8008214:	d140      	bne.n	8008298 <_malloc_r+0xcc>
 8008216:	6823      	ldr	r3, [r4, #0]
 8008218:	4631      	mov	r1, r6
 800821a:	4638      	mov	r0, r7
 800821c:	eb04 0803 	add.w	r8, r4, r3
 8008220:	f000 f848 	bl	80082b4 <_sbrk_r>
 8008224:	4580      	cmp	r8, r0
 8008226:	d13a      	bne.n	800829e <_malloc_r+0xd2>
 8008228:	6821      	ldr	r1, [r4, #0]
 800822a:	3503      	adds	r5, #3
 800822c:	1a6d      	subs	r5, r5, r1
 800822e:	f025 0503 	bic.w	r5, r5, #3
 8008232:	3508      	adds	r5, #8
 8008234:	2d0c      	cmp	r5, #12
 8008236:	bf38      	it	cc
 8008238:	250c      	movcc	r5, #12
 800823a:	4629      	mov	r1, r5
 800823c:	4638      	mov	r0, r7
 800823e:	f7ff ffa5 	bl	800818c <sbrk_aligned>
 8008242:	3001      	adds	r0, #1
 8008244:	d02b      	beq.n	800829e <_malloc_r+0xd2>
 8008246:	6823      	ldr	r3, [r4, #0]
 8008248:	442b      	add	r3, r5
 800824a:	6023      	str	r3, [r4, #0]
 800824c:	e00e      	b.n	800826c <_malloc_r+0xa0>
 800824e:	6822      	ldr	r2, [r4, #0]
 8008250:	1b52      	subs	r2, r2, r5
 8008252:	d41e      	bmi.n	8008292 <_malloc_r+0xc6>
 8008254:	2a0b      	cmp	r2, #11
 8008256:	d916      	bls.n	8008286 <_malloc_r+0xba>
 8008258:	1961      	adds	r1, r4, r5
 800825a:	42a3      	cmp	r3, r4
 800825c:	6025      	str	r5, [r4, #0]
 800825e:	bf18      	it	ne
 8008260:	6059      	strne	r1, [r3, #4]
 8008262:	6863      	ldr	r3, [r4, #4]
 8008264:	bf08      	it	eq
 8008266:	6031      	streq	r1, [r6, #0]
 8008268:	5162      	str	r2, [r4, r5]
 800826a:	604b      	str	r3, [r1, #4]
 800826c:	4638      	mov	r0, r7
 800826e:	f104 060b 	add.w	r6, r4, #11
 8008272:	f000 f835 	bl	80082e0 <__malloc_unlock>
 8008276:	f026 0607 	bic.w	r6, r6, #7
 800827a:	1d23      	adds	r3, r4, #4
 800827c:	1af2      	subs	r2, r6, r3
 800827e:	d0b6      	beq.n	80081ee <_malloc_r+0x22>
 8008280:	1b9b      	subs	r3, r3, r6
 8008282:	50a3      	str	r3, [r4, r2]
 8008284:	e7b3      	b.n	80081ee <_malloc_r+0x22>
 8008286:	6862      	ldr	r2, [r4, #4]
 8008288:	42a3      	cmp	r3, r4
 800828a:	bf0c      	ite	eq
 800828c:	6032      	streq	r2, [r6, #0]
 800828e:	605a      	strne	r2, [r3, #4]
 8008290:	e7ec      	b.n	800826c <_malloc_r+0xa0>
 8008292:	4623      	mov	r3, r4
 8008294:	6864      	ldr	r4, [r4, #4]
 8008296:	e7b2      	b.n	80081fe <_malloc_r+0x32>
 8008298:	4634      	mov	r4, r6
 800829a:	6876      	ldr	r6, [r6, #4]
 800829c:	e7b9      	b.n	8008212 <_malloc_r+0x46>
 800829e:	230c      	movs	r3, #12
 80082a0:	603b      	str	r3, [r7, #0]
 80082a2:	4638      	mov	r0, r7
 80082a4:	f000 f81c 	bl	80082e0 <__malloc_unlock>
 80082a8:	e7a1      	b.n	80081ee <_malloc_r+0x22>
 80082aa:	6025      	str	r5, [r4, #0]
 80082ac:	e7de      	b.n	800826c <_malloc_r+0xa0>
 80082ae:	bf00      	nop
 80082b0:	20000970 	.word	0x20000970

080082b4 <_sbrk_r>:
 80082b4:	b538      	push	{r3, r4, r5, lr}
 80082b6:	4d06      	ldr	r5, [pc, #24]	; (80082d0 <_sbrk_r+0x1c>)
 80082b8:	2300      	movs	r3, #0
 80082ba:	4604      	mov	r4, r0
 80082bc:	4608      	mov	r0, r1
 80082be:	602b      	str	r3, [r5, #0]
 80082c0:	f7f8 ff2a 	bl	8001118 <_sbrk>
 80082c4:	1c43      	adds	r3, r0, #1
 80082c6:	d102      	bne.n	80082ce <_sbrk_r+0x1a>
 80082c8:	682b      	ldr	r3, [r5, #0]
 80082ca:	b103      	cbz	r3, 80082ce <_sbrk_r+0x1a>
 80082cc:	6023      	str	r3, [r4, #0]
 80082ce:	bd38      	pop	{r3, r4, r5, pc}
 80082d0:	20000978 	.word	0x20000978

080082d4 <__malloc_lock>:
 80082d4:	4801      	ldr	r0, [pc, #4]	; (80082dc <__malloc_lock+0x8>)
 80082d6:	f000 b809 	b.w	80082ec <__retarget_lock_acquire_recursive>
 80082da:	bf00      	nop
 80082dc:	2000097c 	.word	0x2000097c

080082e0 <__malloc_unlock>:
 80082e0:	4801      	ldr	r0, [pc, #4]	; (80082e8 <__malloc_unlock+0x8>)
 80082e2:	f000 b804 	b.w	80082ee <__retarget_lock_release_recursive>
 80082e6:	bf00      	nop
 80082e8:	2000097c 	.word	0x2000097c

080082ec <__retarget_lock_acquire_recursive>:
 80082ec:	4770      	bx	lr

080082ee <__retarget_lock_release_recursive>:
 80082ee:	4770      	bx	lr

080082f0 <_init>:
 80082f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082f2:	bf00      	nop
 80082f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082f6:	bc08      	pop	{r3}
 80082f8:	469e      	mov	lr, r3
 80082fa:	4770      	bx	lr

080082fc <_fini>:
 80082fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082fe:	bf00      	nop
 8008300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008302:	bc08      	pop	{r3}
 8008304:	469e      	mov	lr, r3
 8008306:	4770      	bx	lr
