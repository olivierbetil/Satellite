
Turbo_Sat_CSB_Fonctionnel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ae4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008c6c  08008c6c  00018c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c88  08008c88  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08008c88  08008c88  00018c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c90  08008c90  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c90  08008c90  00018c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c94  08008c94  00018c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08008c98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020098  2**0
                  CONTENTS
 10 .bss          000008c4  20000098  20000098  00020098  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000095c  2000095c  00020098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ab83  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ea2  00000000  00000000  0003ac4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001458  00000000  00000000  0003eaf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012e8  00000000  00000000  0003ff48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024175  00000000  00000000  00041230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b808  00000000  00000000  000653a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce161  00000000  00000000  00080bad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014ed0e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000056e0  00000000  00000000  0014ed60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000098 	.word	0x20000098
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008c54 	.word	0x08008c54

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000009c 	.word	0x2000009c
 80001c4:	08008c54 	.word	0x08008c54

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fe60 	bl	8001194 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f82a 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f986 	bl	80007e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004dc:	f000 f890 	bl	8000600 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004e0:	f000 f8bc 	bl	800065c <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e4:	f000 f8ea 	bl	80006bc <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e8:	f007 ffc4 	bl	8008474 <MX_USB_HOST_Init>
  MX_SPI2_Init();
 80004ec:	f000 f91c 	bl	8000728 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80004f0:	f000 f950 	bl	8000794 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
   nrf24_Init();
 80004f4:	f000 fb3c 	bl	8000b70 <nrf24_Init>
   nrf24_RxMode(Address, 10);
 80004f8:	210a      	movs	r1, #10
 80004fa:	4809      	ldr	r0, [pc, #36]	; (8000520 <main+0x54>)
 80004fc:	f000 fb5c 	bl	8000bb8 <nrf24_RxMode>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(isDataAvailable(1))
 8000500:	2001      	movs	r0, #1
 8000502:	f000 fb91 	bl	8000c28 <isDataAvailable>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d0f9      	beq.n	8000500 <main+0x34>
	  {
	  	nrf24_Receive(buffer);
 800050c:	4805      	ldr	r0, [pc, #20]	; (8000524 <main+0x58>)
 800050e:	f000 fbab 	bl	8000c68 <nrf24_Receive>
	  	HAL_UART_Transmit(&huart2, buffer, 32, 100);
 8000512:	2364      	movs	r3, #100	; 0x64
 8000514:	2220      	movs	r2, #32
 8000516:	4903      	ldr	r1, [pc, #12]	; (8000524 <main+0x58>)
 8000518:	4803      	ldr	r0, [pc, #12]	; (8000528 <main+0x5c>)
 800051a:	f004 ffca 	bl	80054b2 <HAL_UART_Transmit>
	  if(isDataAvailable(1))
 800051e:	e7ef      	b.n	8000500 <main+0x34>
 8000520:	20000000 	.word	0x20000000
 8000524:	20000244 	.word	0x20000244
 8000528:	20000200 	.word	0x20000200

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b094      	sub	sp, #80	; 0x50
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0320 	add.w	r3, r7, #32
 8000536:	2230      	movs	r2, #48	; 0x30
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f008 fa84 	bl	8008a48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	f107 030c 	add.w	r3, r7, #12
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000550:	2300      	movs	r3, #0
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	4b28      	ldr	r3, [pc, #160]	; (80005f8 <SystemClock_Config+0xcc>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	4a27      	ldr	r2, [pc, #156]	; (80005f8 <SystemClock_Config+0xcc>)
 800055a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055e:	6413      	str	r3, [r2, #64]	; 0x40
 8000560:	4b25      	ldr	r3, [pc, #148]	; (80005f8 <SystemClock_Config+0xcc>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056c:	2300      	movs	r3, #0
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	4b22      	ldr	r3, [pc, #136]	; (80005fc <SystemClock_Config+0xd0>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a21      	ldr	r2, [pc, #132]	; (80005fc <SystemClock_Config+0xd0>)
 8000576:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800057a:	6013      	str	r3, [r2, #0]
 800057c:	4b1f      	ldr	r3, [pc, #124]	; (80005fc <SystemClock_Config+0xd0>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000588:	2301      	movs	r3, #1
 800058a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800058c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000590:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000592:	2302      	movs	r3, #2
 8000594:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000596:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800059a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800059c:	2308      	movs	r3, #8
 800059e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005a0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a6:	2302      	movs	r3, #2
 80005a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005aa:	2307      	movs	r3, #7
 80005ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ae:	f107 0320 	add.w	r3, r7, #32
 80005b2:	4618      	mov	r0, r3
 80005b4:	f003 fbb0 	bl	8003d18 <HAL_RCC_OscConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005be:	f000 fa25 	bl	8000a0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c2:	230f      	movs	r3, #15
 80005c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c6:	2302      	movs	r3, #2
 80005c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005da:	f107 030c 	add.w	r3, r7, #12
 80005de:	2105      	movs	r1, #5
 80005e0:	4618      	mov	r0, r3
 80005e2:	f003 fe11 	bl	8004208 <HAL_RCC_ClockConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005ec:	f000 fa0e 	bl	8000a0c <Error_Handler>
  }
}
 80005f0:	bf00      	nop
 80005f2:	3750      	adds	r7, #80	; 0x50
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40007000 	.word	0x40007000

08000600 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000604:	4b12      	ldr	r3, [pc, #72]	; (8000650 <MX_I2C1_Init+0x50>)
 8000606:	4a13      	ldr	r2, [pc, #76]	; (8000654 <MX_I2C1_Init+0x54>)
 8000608:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800060a:	4b11      	ldr	r3, [pc, #68]	; (8000650 <MX_I2C1_Init+0x50>)
 800060c:	4a12      	ldr	r2, [pc, #72]	; (8000658 <MX_I2C1_Init+0x58>)
 800060e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000610:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <MX_I2C1_Init+0x50>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <MX_I2C1_Init+0x50>)
 8000618:	2200      	movs	r2, #0
 800061a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <MX_I2C1_Init+0x50>)
 800061e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000622:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000624:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <MX_I2C1_Init+0x50>)
 8000626:	2200      	movs	r2, #0
 8000628:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800062a:	4b09      	ldr	r3, [pc, #36]	; (8000650 <MX_I2C1_Init+0x50>)
 800062c:	2200      	movs	r2, #0
 800062e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000630:	4b07      	ldr	r3, [pc, #28]	; (8000650 <MX_I2C1_Init+0x50>)
 8000632:	2200      	movs	r2, #0
 8000634:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000636:	4b06      	ldr	r3, [pc, #24]	; (8000650 <MX_I2C1_Init+0x50>)
 8000638:	2200      	movs	r2, #0
 800063a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800063c:	4804      	ldr	r0, [pc, #16]	; (8000650 <MX_I2C1_Init+0x50>)
 800063e:	f002 fd87 	bl	8003150 <HAL_I2C_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000648:	f000 f9e0 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	200000b4 	.word	0x200000b4
 8000654:	40005400 	.word	0x40005400
 8000658:	000186a0 	.word	0x000186a0

0800065c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000660:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <MX_I2S3_Init+0x54>)
 8000662:	4a14      	ldr	r2, [pc, #80]	; (80006b4 <MX_I2S3_Init+0x58>)
 8000664:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000666:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <MX_I2S3_Init+0x54>)
 8000668:	f44f 7200 	mov.w	r2, #512	; 0x200
 800066c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <MX_I2S3_Init+0x54>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000674:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <MX_I2S3_Init+0x54>)
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800067a:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <MX_I2S3_Init+0x54>)
 800067c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000680:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <MX_I2S3_Init+0x54>)
 8000684:	4a0c      	ldr	r2, [pc, #48]	; (80006b8 <MX_I2S3_Init+0x5c>)
 8000686:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <MX_I2S3_Init+0x54>)
 800068a:	2200      	movs	r2, #0
 800068c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800068e:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <MX_I2S3_Init+0x54>)
 8000690:	2200      	movs	r2, #0
 8000692:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <MX_I2S3_Init+0x54>)
 8000696:	2200      	movs	r2, #0
 8000698:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <MX_I2S3_Init+0x54>)
 800069c:	f002 fe9c 	bl	80033d8 <HAL_I2S_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006a6:	f000 f9b1 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000108 	.word	0x20000108
 80006b4:	40003c00 	.word	0x40003c00
 80006b8:	00017700 	.word	0x00017700

080006bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006c0:	4b17      	ldr	r3, [pc, #92]	; (8000720 <MX_SPI1_Init+0x64>)
 80006c2:	4a18      	ldr	r2, [pc, #96]	; (8000724 <MX_SPI1_Init+0x68>)
 80006c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006c6:	4b16      	ldr	r3, [pc, #88]	; (8000720 <MX_SPI1_Init+0x64>)
 80006c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ce:	4b14      	ldr	r3, [pc, #80]	; (8000720 <MX_SPI1_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <MX_SPI1_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_SPI1_Init+0x64>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_SPI1_Init+0x64>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_SPI1_Init+0x64>)
 80006e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_SPI1_Init+0x64>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <MX_SPI1_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_SPI1_Init+0x64>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000700:	4b07      	ldr	r3, [pc, #28]	; (8000720 <MX_SPI1_Init+0x64>)
 8000702:	2200      	movs	r2, #0
 8000704:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_SPI1_Init+0x64>)
 8000708:	220a      	movs	r2, #10
 800070a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800070c:	4804      	ldr	r0, [pc, #16]	; (8000720 <MX_SPI1_Init+0x64>)
 800070e:	f004 f8db 	bl	80048c8 <HAL_SPI_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000718:	f000 f978 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000150 	.word	0x20000150
 8000724:	40013000 	.word	0x40013000

08000728 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <MX_SPI2_Init+0x64>)
 800072e:	4a18      	ldr	r2, [pc, #96]	; (8000790 <MX_SPI2_Init+0x68>)
 8000730:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000732:	4b16      	ldr	r3, [pc, #88]	; (800078c <MX_SPI2_Init+0x64>)
 8000734:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000738:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_SPI2_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <MX_SPI2_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_SPI2_Init+0x64>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_SPI2_Init+0x64>)
 800074e:	2200      	movs	r2, #0
 8000750:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_SPI2_Init+0x64>)
 8000754:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000758:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800075a:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_SPI2_Init+0x64>)
 800075c:	2218      	movs	r2, #24
 800075e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000760:	4b0a      	ldr	r3, [pc, #40]	; (800078c <MX_SPI2_Init+0x64>)
 8000762:	2200      	movs	r2, #0
 8000764:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_SPI2_Init+0x64>)
 8000768:	2200      	movs	r2, #0
 800076a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800076c:	4b07      	ldr	r3, [pc, #28]	; (800078c <MX_SPI2_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_SPI2_Init+0x64>)
 8000774:	220a      	movs	r2, #10
 8000776:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000778:	4804      	ldr	r0, [pc, #16]	; (800078c <MX_SPI2_Init+0x64>)
 800077a:	f004 f8a5 	bl	80048c8 <HAL_SPI_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000784:	f000 f942 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	200001a8 	.word	0x200001a8
 8000790:	40003800 	.word	0x40003800

08000794 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 800079a:	4a12      	ldr	r2, [pc, #72]	; (80007e4 <MX_USART2_UART_Init+0x50>)
 800079c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800079e:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007b2:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b8:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007ba:	220c      	movs	r2, #12
 80007bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007be:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ca:	4805      	ldr	r0, [pc, #20]	; (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007cc:	f004 fe24 	bl	8005418 <HAL_UART_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007d6:	f000 f919 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000200 	.word	0x20000200
 80007e4:	40004400 	.word	0x40004400

080007e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08c      	sub	sp, #48	; 0x30
 80007ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	f107 031c 	add.w	r3, r7, #28
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	61bb      	str	r3, [r7, #24]
 8000802:	4b7c      	ldr	r3, [pc, #496]	; (80009f4 <MX_GPIO_Init+0x20c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a7b      	ldr	r2, [pc, #492]	; (80009f4 <MX_GPIO_Init+0x20c>)
 8000808:	f043 0310 	orr.w	r3, r3, #16
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b79      	ldr	r3, [pc, #484]	; (80009f4 <MX_GPIO_Init+0x20c>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0310 	and.w	r3, r3, #16
 8000816:	61bb      	str	r3, [r7, #24]
 8000818:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
 800081e:	4b75      	ldr	r3, [pc, #468]	; (80009f4 <MX_GPIO_Init+0x20c>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a74      	ldr	r2, [pc, #464]	; (80009f4 <MX_GPIO_Init+0x20c>)
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b72      	ldr	r3, [pc, #456]	; (80009f4 <MX_GPIO_Init+0x20c>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0304 	and.w	r3, r3, #4
 8000832:	617b      	str	r3, [r7, #20]
 8000834:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	613b      	str	r3, [r7, #16]
 800083a:	4b6e      	ldr	r3, [pc, #440]	; (80009f4 <MX_GPIO_Init+0x20c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a6d      	ldr	r2, [pc, #436]	; (80009f4 <MX_GPIO_Init+0x20c>)
 8000840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b6b      	ldr	r3, [pc, #428]	; (80009f4 <MX_GPIO_Init+0x20c>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	4b67      	ldr	r3, [pc, #412]	; (80009f4 <MX_GPIO_Init+0x20c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a66      	ldr	r2, [pc, #408]	; (80009f4 <MX_GPIO_Init+0x20c>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b64      	ldr	r3, [pc, #400]	; (80009f4 <MX_GPIO_Init+0x20c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	4b60      	ldr	r3, [pc, #384]	; (80009f4 <MX_GPIO_Init+0x20c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a5f      	ldr	r2, [pc, #380]	; (80009f4 <MX_GPIO_Init+0x20c>)
 8000878:	f043 0302 	orr.w	r3, r3, #2
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b5d      	ldr	r3, [pc, #372]	; (80009f4 <MX_GPIO_Init+0x20c>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0302 	and.w	r3, r3, #2
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	4b59      	ldr	r3, [pc, #356]	; (80009f4 <MX_GPIO_Init+0x20c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a58      	ldr	r2, [pc, #352]	; (80009f4 <MX_GPIO_Init+0x20c>)
 8000894:	f043 0308 	orr.w	r3, r3, #8
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b56      	ldr	r3, [pc, #344]	; (80009f4 <MX_GPIO_Init+0x20c>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0308 	and.w	r3, r3, #8
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2108      	movs	r1, #8
 80008aa:	4853      	ldr	r0, [pc, #332]	; (80009f8 <MX_GPIO_Init+0x210>)
 80008ac:	f001 f848 	bl	8001940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008b0:	2201      	movs	r2, #1
 80008b2:	2101      	movs	r1, #1
 80008b4:	4851      	ldr	r0, [pc, #324]	; (80009fc <MX_GPIO_Init+0x214>)
 80008b6:	f001 f843 	bl	8001940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80008c0:	484f      	ldr	r0, [pc, #316]	; (8000a00 <MX_GPIO_Init+0x218>)
 80008c2:	f001 f83d 	bl	8001940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008c6:	2200      	movs	r2, #0
 80008c8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008cc:	484d      	ldr	r0, [pc, #308]	; (8000a04 <MX_GPIO_Init+0x21c>)
 80008ce:	f001 f837 	bl	8001940 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008d2:	2308      	movs	r3, #8
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d6:	2301      	movs	r3, #1
 80008d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	4843      	ldr	r0, [pc, #268]	; (80009f8 <MX_GPIO_Init+0x210>)
 80008ea:	f000 fe8d 	bl	8001608 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008ee:	2301      	movs	r3, #1
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	483d      	ldr	r0, [pc, #244]	; (80009fc <MX_GPIO_Init+0x214>)
 8000906:	f000 fe7f 	bl	8001608 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800090a:	2308      	movs	r3, #8
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090e:	2302      	movs	r3, #2
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800091a:	2305      	movs	r3, #5
 800091c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	4835      	ldr	r0, [pc, #212]	; (80009fc <MX_GPIO_Init+0x214>)
 8000926:	f000 fe6f 	bl	8001608 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800092a:	2301      	movs	r3, #1
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800092e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000932:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	4619      	mov	r1, r3
 800093e:	4832      	ldr	r0, [pc, #200]	; (8000a08 <MX_GPIO_Init+0x220>)
 8000940:	f000 fe62 	bl	8001608 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000944:	2304      	movs	r3, #4
 8000946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000948:	2300      	movs	r3, #0
 800094a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	482a      	ldr	r0, [pc, #168]	; (8000a00 <MX_GPIO_Init+0x218>)
 8000958:	f000 fe56 	bl	8001608 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800095c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000962:	2302      	movs	r3, #2
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800096e:	2305      	movs	r3, #5
 8000970:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	4821      	ldr	r0, [pc, #132]	; (8000a00 <MX_GPIO_Init+0x218>)
 800097a:	f000 fe45 	bl	8001608 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800097e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000984:	2301      	movs	r3, #1
 8000986:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2300      	movs	r3, #0
 800098e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	481a      	ldr	r0, [pc, #104]	; (8000a00 <MX_GPIO_Init+0x218>)
 8000998:	f000 fe36 	bl	8001608 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800099c:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009a0:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	4813      	ldr	r0, [pc, #76]	; (8000a04 <MX_GPIO_Init+0x21c>)
 80009b6:	f000 fe27 	bl	8001608 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009ba:	2320      	movs	r3, #32
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009be:	2300      	movs	r3, #0
 80009c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	480d      	ldr	r0, [pc, #52]	; (8000a04 <MX_GPIO_Init+0x21c>)
 80009ce:	f000 fe1b 	bl	8001608 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009d2:	2302      	movs	r3, #2
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009d6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009e0:	f107 031c 	add.w	r3, r7, #28
 80009e4:	4619      	mov	r1, r3
 80009e6:	4804      	ldr	r0, [pc, #16]	; (80009f8 <MX_GPIO_Init+0x210>)
 80009e8:	f000 fe0e 	bl	8001608 <HAL_GPIO_Init>

}
 80009ec:	bf00      	nop
 80009ee:	3730      	adds	r7, #48	; 0x30
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40021000 	.word	0x40021000
 80009fc:	40020800 	.word	0x40020800
 8000a00:	40020400 	.word	0x40020400
 8000a04:	40020c00 	.word	0x40020c00
 8000a08:	40020000 	.word	0x40020000

08000a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a10:	b672      	cpsid	i
}
 8000a12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <Error_Handler+0x8>
	...

08000a18 <selectCS>:
#define SPI_CS_PIN			GPIO_PIN_12

/**
 * @brief met le pin CS a 0
 */
void selectCS(void){
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI_CS_GPIO, SPI_CS_PIN, GPIO_PIN_RESET);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a22:	4802      	ldr	r0, [pc, #8]	; (8000a2c <selectCS+0x14>)
 8000a24:	f000 ff8c 	bl	8001940 <HAL_GPIO_WritePin>
}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40020400 	.word	0x40020400

08000a30 <unselectCS>:

/**
 * @brief met le pin CS a 1
 */
void unselectCS(void){
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI_CS_GPIO, SPI_CS_PIN, GPIO_PIN_SET);
 8000a34:	2201      	movs	r2, #1
 8000a36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a3a:	4802      	ldr	r0, [pc, #8]	; (8000a44 <unselectCS+0x14>)
 8000a3c:	f000 ff80 	bl	8001940 <HAL_GPIO_WritePin>
}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40020400 	.word	0x40020400

08000a48 <enableCE>:

/**
 * @brief met le pin CE a 1
 */
void enableCE(void){
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI_CE_GPIO, SPI_CE_PIN, GPIO_PIN_SET);
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a52:	4802      	ldr	r0, [pc, #8]	; (8000a5c <enableCE+0x14>)
 8000a54:	f000 ff74 	bl	8001940 <HAL_GPIO_WritePin>
}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40020400 	.word	0x40020400

08000a60 <disableCE>:

/**
 * @brief met le pin CE a 0
 */
void disableCE(void){
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI_CE_GPIO, SPI_CE_PIN, GPIO_PIN_RESET);
 8000a64:	2200      	movs	r2, #0
 8000a66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a6a:	4802      	ldr	r0, [pc, #8]	; (8000a74 <disableCE+0x14>)
 8000a6c:	f000 ff68 	bl	8001940 <HAL_GPIO_WritePin>
}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40020400 	.word	0x40020400

08000a78 <nrf24_WriteReg>:
 * @brief Ecrit une valeur dans un registre du module
 *
 * @param Reg : Registre a modifier
 * @param Data : Donnee a ecrire dans le registre
 */
void nrf24_WriteReg(uint8_t Reg, uint8_t Data){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	460a      	mov	r2, r1
 8000a82:	71fb      	strb	r3, [r7, #7]
 8000a84:	4613      	mov	r3, r2
 8000a86:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0]=Reg|1<<5;
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	f043 0320 	orr.w	r3, r3, #32
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	733b      	strb	r3, [r7, #12]
	buf[1]=Data;
 8000a92:	79bb      	ldrb	r3, [r7, #6]
 8000a94:	737b      	strb	r3, [r7, #13]

	selectCS();
 8000a96:	f7ff ffbf 	bl	8000a18 <selectCS>
	HAL_SPI_Transmit(SPI_PROTO, buf, 2, 100);
 8000a9a:	f107 010c 	add.w	r1, r7, #12
 8000a9e:	2364      	movs	r3, #100	; 0x64
 8000aa0:	2202      	movs	r2, #2
 8000aa2:	4804      	ldr	r0, [pc, #16]	; (8000ab4 <nrf24_WriteReg+0x3c>)
 8000aa4:	f003 ff99 	bl	80049da <HAL_SPI_Transmit>
	unselectCS();
 8000aa8:	f7ff ffc2 	bl	8000a30 <unselectCS>
}
 8000aac:	bf00      	nop
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	200001a8 	.word	0x200001a8

08000ab8 <nrf24_WriteRegMulti>:
 *
 * @param Reg : Registre a modifier
 * @param Data : Donnee a ecrire dans le registre
 * @param size : Taille de la donnee (en octets)
 */
void nrf24_WriteRegMulti(uint8_t Reg, uint8_t *Data, uint8_t size){
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	6039      	str	r1, [r7, #0]
 8000ac2:	71fb      	strb	r3, [r7, #7]
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0]=Reg|1<<5;
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	f043 0320 	orr.w	r3, r3, #32
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	733b      	strb	r3, [r7, #12]
	//buf[1]=Data;

	selectCS();
 8000ad2:	f7ff ffa1 	bl	8000a18 <selectCS>
	HAL_SPI_Transmit(SPI_PROTO, &buf[0], 1, 100);
 8000ad6:	f107 010c 	add.w	r1, r7, #12
 8000ada:	2364      	movs	r3, #100	; 0x64
 8000adc:	2201      	movs	r2, #1
 8000ade:	4808      	ldr	r0, [pc, #32]	; (8000b00 <nrf24_WriteRegMulti+0x48>)
 8000ae0:	f003 ff7b 	bl	80049da <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_PROTO, Data, size, 100);
 8000ae4:	79bb      	ldrb	r3, [r7, #6]
 8000ae6:	b29a      	uxth	r2, r3
 8000ae8:	2364      	movs	r3, #100	; 0x64
 8000aea:	6839      	ldr	r1, [r7, #0]
 8000aec:	4804      	ldr	r0, [pc, #16]	; (8000b00 <nrf24_WriteRegMulti+0x48>)
 8000aee:	f003 ff74 	bl	80049da <HAL_SPI_Transmit>

	unselectCS();
 8000af2:	f7ff ff9d 	bl	8000a30 <unselectCS>
}
 8000af6:	bf00      	nop
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	200001a8 	.word	0x200001a8

08000b04 <nrf24_ReadReg>:
 * @brief lit la valeur d'un registre du module
 *
 * @param Reg : Registre ou l'on veut lire la valeur
 * @return la valeur du registre
 */
uint8_t nrf24_ReadReg(uint8_t Reg){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	73fb      	strb	r3, [r7, #15]
	selectCS();
 8000b12:	f7ff ff81 	bl	8000a18 <selectCS>
	HAL_SPI_Transmit(SPI_PROTO, &Reg, 1, 100);
 8000b16:	1df9      	adds	r1, r7, #7
 8000b18:	2364      	movs	r3, #100	; 0x64
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	4808      	ldr	r0, [pc, #32]	; (8000b40 <nrf24_ReadReg+0x3c>)
 8000b1e:	f003 ff5c 	bl	80049da <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_PROTO, &data, 1, 100);
 8000b22:	f107 010f 	add.w	r1, r7, #15
 8000b26:	2364      	movs	r3, #100	; 0x64
 8000b28:	2201      	movs	r2, #1
 8000b2a:	4805      	ldr	r0, [pc, #20]	; (8000b40 <nrf24_ReadReg+0x3c>)
 8000b2c:	f004 f891 	bl	8004c52 <HAL_SPI_Receive>
	unselectCS();
 8000b30:	f7ff ff7e 	bl	8000a30 <unselectCS>
	return data;
 8000b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	200001a8 	.word	0x200001a8

08000b44 <nrfsendcmd>:
/**
 * @brief Envoie une commande au module
 *
 * @param cmd : Commande a envoyer (voir datasheet module pour liste des commandes)
 */
void nrfsendcmd(uint8_t cmd){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]
	selectCS();
 8000b4e:	f7ff ff63 	bl	8000a18 <selectCS>
	HAL_SPI_Transmit(SPI_PROTO, &cmd, 1, 100);
 8000b52:	1df9      	adds	r1, r7, #7
 8000b54:	2364      	movs	r3, #100	; 0x64
 8000b56:	2201      	movs	r2, #1
 8000b58:	4804      	ldr	r0, [pc, #16]	; (8000b6c <nrfsendcmd+0x28>)
 8000b5a:	f003 ff3e 	bl	80049da <HAL_SPI_Transmit>
	unselectCS();
 8000b5e:	f7ff ff67 	bl	8000a30 <unselectCS>
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	200001a8 	.word	0x200001a8

08000b70 <nrf24_Init>:

/**
 * @brief Initialise les diff�rents registre du module
 */
void nrf24_Init(void){
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
	disableCE();
 8000b74:	f7ff ff74 	bl	8000a60 <disableCE>
	nrf24_WriteReg(CONFIG, 0);
 8000b78:	2100      	movs	r1, #0
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f7ff ff7c 	bl	8000a78 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0);
 8000b80:	2100      	movs	r1, #0
 8000b82:	2001      	movs	r0, #1
 8000b84:	f7ff ff78 	bl	8000a78 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0);
 8000b88:	2100      	movs	r1, #0
 8000b8a:	2002      	movs	r0, #2
 8000b8c:	f7ff ff74 	bl	8000a78 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 8000b90:	2103      	movs	r1, #3
 8000b92:	2003      	movs	r0, #3
 8000b94:	f7ff ff70 	bl	8000a78 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0);
 8000b98:	2100      	movs	r1, #0
 8000b9a:	2004      	movs	r0, #4
 8000b9c:	f7ff ff6c 	bl	8000a78 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0);
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	2005      	movs	r0, #5
 8000ba4:	f7ff ff68 	bl	8000a78 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0e);
 8000ba8:	210e      	movs	r1, #14
 8000baa:	2006      	movs	r0, #6
 8000bac:	f7ff ff64 	bl	8000a78 <nrf24_WriteReg>
	enableCE();
 8000bb0:	f7ff ff4a 	bl	8000a48 <enableCE>
}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <nrf24_RxMode>:
 * @brief initialise le module en mode Rx (reception de donnees)
 *
 * @param Address : l'adresse du module
 * @param channel : chaine du module (mettre 10)
 */
void nrf24_RxMode(uint8_t *Address, uint8_t channel){
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	70fb      	strb	r3, [r7, #3]
	disableCE();
 8000bc4:	f7ff ff4c 	bl	8000a60 <disableCE>
	nrf24_WriteReg(RF_CH, channel);
 8000bc8:	78fb      	ldrb	r3, [r7, #3]
 8000bca:	4619      	mov	r1, r3
 8000bcc:	2005      	movs	r0, #5
 8000bce:	f7ff ff53 	bl	8000a78 <nrf24_WriteReg>

	uint8_t en_rxaddr=nrf24_ReadReg(EN_RXADDR);
 8000bd2:	2002      	movs	r0, #2
 8000bd4:	f7ff ff96 	bl	8000b04 <nrf24_ReadReg>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	73fb      	strb	r3, [r7, #15]
	en_rxaddr=en_rxaddr | (1<<1);
 8000bdc:	7bfb      	ldrb	r3, [r7, #15]
 8000bde:	f043 0302 	orr.w	r3, r3, #2
 8000be2:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg(EN_RXADDR, en_rxaddr);
 8000be4:	7bfb      	ldrb	r3, [r7, #15]
 8000be6:	4619      	mov	r1, r3
 8000be8:	2002      	movs	r0, #2
 8000bea:	f7ff ff45 	bl	8000a78 <nrf24_WriteReg>
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);
 8000bee:	2205      	movs	r2, #5
 8000bf0:	6879      	ldr	r1, [r7, #4]
 8000bf2:	200b      	movs	r0, #11
 8000bf4:	f7ff ff60 	bl	8000ab8 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P1, 32); //Set up la taille maximale de la donnee a recuperer
 8000bf8:	2120      	movs	r1, #32
 8000bfa:	2012      	movs	r0, #18
 8000bfc:	f7ff ff3c 	bl	8000a78 <nrf24_WriteReg>

	//power up the device in RX mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 8000c00:	2000      	movs	r0, #0
 8000c02:	f7ff ff7f 	bl	8000b04 <nrf24_ReadReg>
 8000c06:	4603      	mov	r3, r0
 8000c08:	73bb      	strb	r3, [r7, #14]
	config=config | (1<<1) | (1<<0);
 8000c0a:	7bbb      	ldrb	r3, [r7, #14]
 8000c0c:	f043 0303 	orr.w	r3, r3, #3
 8000c10:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg(CONFIG, config);
 8000c12:	7bbb      	ldrb	r3, [r7, #14]
 8000c14:	4619      	mov	r1, r3
 8000c16:	2000      	movs	r0, #0
 8000c18:	f7ff ff2e 	bl	8000a78 <nrf24_WriteReg>
	enableCE();
 8000c1c:	f7ff ff14 	bl	8000a48 <enableCE>
}
 8000c20:	bf00      	nop
 8000c22:	3710      	adds	r7, #16
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <isDataAvailable>:
 * @brief observe si une donnee est arrivee dans la pipe
 *
 * @param pipenum : pipe a scuter
 * @return true : donnee disponible; false : pas de donnee
 */
uint8_t isDataAvailable(uint8_t pipenum){
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
	uint8_t status = nrf24_ReadReg(STATUS);
 8000c32:	2007      	movs	r0, #7
 8000c34:	f7ff ff66 	bl	8000b04 <nrf24_ReadReg>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	73fb      	strb	r3, [r7, #15]

	//uint8_t check = nrf24_ReadReg(RF_SETUP);

	if((status&(1<<6)) && (status&(pipenum<<1))){
 8000c3c:	7bfb      	ldrb	r3, [r7, #15]
 8000c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d00b      	beq.n	8000c5e <isDataAvailable+0x36>
 8000c46:	7bfa      	ldrb	r2, [r7, #15]
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d005      	beq.n	8000c5e <isDataAvailable+0x36>
		nrf24_WriteReg(STATUS, (1<<6));
 8000c52:	2140      	movs	r1, #64	; 0x40
 8000c54:	2007      	movs	r0, #7
 8000c56:	f7ff ff0f 	bl	8000a78 <nrf24_WriteReg>
		return 1;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e000      	b.n	8000c60 <isDataAvailable+0x38>
	}
	else
		return 0;
 8000c5e:	2300      	movs	r3, #0
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3710      	adds	r7, #16
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <nrf24_Receive>:
/**
 * @brief recupere la donnee dans la pipe 1
 *
 * @param data pointeur vers la ou l'on veut stocker la donnee (32 bits)
 */
void nrf24_Receive(uint8_t *data){
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	73fb      	strb	r3, [r7, #15]
	selectCS();
 8000c74:	f7ff fed0 	bl	8000a18 <selectCS>

	cmdtosend=R_RX_PAYLOAD;
 8000c78:	2361      	movs	r3, #97	; 0x61
 8000c7a:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(SPI_PROTO, &cmdtosend, 1, 100);
 8000c7c:	f107 010f 	add.w	r1, r7, #15
 8000c80:	2364      	movs	r3, #100	; 0x64
 8000c82:	2201      	movs	r2, #1
 8000c84:	480b      	ldr	r0, [pc, #44]	; (8000cb4 <nrf24_Receive+0x4c>)
 8000c86:	f003 fea8 	bl	80049da <HAL_SPI_Transmit>

	HAL_SPI_Receive(SPI_PROTO, data, 32, 100);
 8000c8a:	2364      	movs	r3, #100	; 0x64
 8000c8c:	2220      	movs	r2, #32
 8000c8e:	6879      	ldr	r1, [r7, #4]
 8000c90:	4808      	ldr	r0, [pc, #32]	; (8000cb4 <nrf24_Receive+0x4c>)
 8000c92:	f003 ffde 	bl	8004c52 <HAL_SPI_Receive>

	unselectCS();
 8000c96:	f7ff fecb 	bl	8000a30 <unselectCS>

	HAL_Delay(1);
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f000 faec 	bl	8001278 <HAL_Delay>

	cmdtosend=FLUSH_RX;
 8000ca0:	23e2      	movs	r3, #226	; 0xe2
 8000ca2:	73fb      	strb	r3, [r7, #15]
	nrfsendcmd(cmdtosend);
 8000ca4:	7bfb      	ldrb	r3, [r7, #15]
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff ff4c 	bl	8000b44 <nrfsendcmd>
}
 8000cac:	bf00      	nop
 8000cae:	3710      	adds	r7, #16
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	200001a8 	.word	0x200001a8

08000cb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	607b      	str	r3, [r7, #4]
 8000cc2:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <HAL_MspInit+0x4c>)
 8000cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc6:	4a0f      	ldr	r2, [pc, #60]	; (8000d04 <HAL_MspInit+0x4c>)
 8000cc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cce:	4b0d      	ldr	r3, [pc, #52]	; (8000d04 <HAL_MspInit+0x4c>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	603b      	str	r3, [r7, #0]
 8000cde:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <HAL_MspInit+0x4c>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce2:	4a08      	ldr	r2, [pc, #32]	; (8000d04 <HAL_MspInit+0x4c>)
 8000ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cea:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <HAL_MspInit+0x4c>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	603b      	str	r3, [r7, #0]
 8000cf4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cf6:	2007      	movs	r0, #7
 8000cf8:	f000 fbb2 	bl	8001460 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40023800 	.word	0x40023800

08000d08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08a      	sub	sp, #40	; 0x28
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a19      	ldr	r2, [pc, #100]	; (8000d8c <HAL_I2C_MspInit+0x84>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d12c      	bne.n	8000d84 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <HAL_I2C_MspInit+0x88>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a17      	ldr	r2, [pc, #92]	; (8000d90 <HAL_I2C_MspInit+0x88>)
 8000d34:	f043 0302 	orr.w	r3, r3, #2
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <HAL_I2C_MspInit+0x88>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d46:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d4c:	2312      	movs	r3, #18
 8000d4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d50:	2301      	movs	r3, #1
 8000d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d54:	2300      	movs	r3, #0
 8000d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d58:	2304      	movs	r3, #4
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	4619      	mov	r1, r3
 8000d62:	480c      	ldr	r0, [pc, #48]	; (8000d94 <HAL_I2C_MspInit+0x8c>)
 8000d64:	f000 fc50 	bl	8001608 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <HAL_I2C_MspInit+0x88>)
 8000d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d70:	4a07      	ldr	r2, [pc, #28]	; (8000d90 <HAL_I2C_MspInit+0x88>)
 8000d72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d76:	6413      	str	r3, [r2, #64]	; 0x40
 8000d78:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <HAL_I2C_MspInit+0x88>)
 8000d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d84:	bf00      	nop
 8000d86:	3728      	adds	r7, #40	; 0x28
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40005400 	.word	0x40005400
 8000d90:	40023800 	.word	0x40023800
 8000d94:	40020400 	.word	0x40020400

08000d98 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08e      	sub	sp, #56	; 0x38
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a31      	ldr	r2, [pc, #196]	; (8000e88 <HAL_I2S_MspInit+0xf0>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d15a      	bne.n	8000e7e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000dcc:	23c0      	movs	r3, #192	; 0xc0
 8000dce:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f003 fc35 	bl	8004648 <HAL_RCCEx_PeriphCLKConfig>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000de4:	f7ff fe12 	bl	8000a0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000de8:	2300      	movs	r3, #0
 8000dea:	613b      	str	r3, [r7, #16]
 8000dec:	4b27      	ldr	r3, [pc, #156]	; (8000e8c <HAL_I2S_MspInit+0xf4>)
 8000dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df0:	4a26      	ldr	r2, [pc, #152]	; (8000e8c <HAL_I2S_MspInit+0xf4>)
 8000df2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000df6:	6413      	str	r3, [r2, #64]	; 0x40
 8000df8:	4b24      	ldr	r3, [pc, #144]	; (8000e8c <HAL_I2S_MspInit+0xf4>)
 8000dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e00:	613b      	str	r3, [r7, #16]
 8000e02:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e04:	2300      	movs	r3, #0
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	4b20      	ldr	r3, [pc, #128]	; (8000e8c <HAL_I2S_MspInit+0xf4>)
 8000e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0c:	4a1f      	ldr	r2, [pc, #124]	; (8000e8c <HAL_I2S_MspInit+0xf4>)
 8000e0e:	f043 0301 	orr.w	r3, r3, #1
 8000e12:	6313      	str	r3, [r2, #48]	; 0x30
 8000e14:	4b1d      	ldr	r3, [pc, #116]	; (8000e8c <HAL_I2S_MspInit+0xf4>)
 8000e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e18:	f003 0301 	and.w	r3, r3, #1
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e20:	2300      	movs	r3, #0
 8000e22:	60bb      	str	r3, [r7, #8]
 8000e24:	4b19      	ldr	r3, [pc, #100]	; (8000e8c <HAL_I2S_MspInit+0xf4>)
 8000e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e28:	4a18      	ldr	r2, [pc, #96]	; (8000e8c <HAL_I2S_MspInit+0xf4>)
 8000e2a:	f043 0304 	orr.w	r3, r3, #4
 8000e2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e30:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <HAL_I2S_MspInit+0xf4>)
 8000e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e34:	f003 0304 	and.w	r3, r3, #4
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000e3c:	2310      	movs	r3, #16
 8000e3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	2302      	movs	r3, #2
 8000e42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e4c:	2306      	movs	r3, #6
 8000e4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000e50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e54:	4619      	mov	r1, r3
 8000e56:	480e      	ldr	r0, [pc, #56]	; (8000e90 <HAL_I2S_MspInit+0xf8>)
 8000e58:	f000 fbd6 	bl	8001608 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000e5c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	2302      	movs	r3, #2
 8000e64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e6e:	2306      	movs	r3, #6
 8000e70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e76:	4619      	mov	r1, r3
 8000e78:	4806      	ldr	r0, [pc, #24]	; (8000e94 <HAL_I2S_MspInit+0xfc>)
 8000e7a:	f000 fbc5 	bl	8001608 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e7e:	bf00      	nop
 8000e80:	3738      	adds	r7, #56	; 0x38
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40003c00 	.word	0x40003c00
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40020000 	.word	0x40020000
 8000e94:	40020800 	.word	0x40020800

08000e98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08c      	sub	sp, #48	; 0x30
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea0:	f107 031c 	add.w	r3, r7, #28
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a32      	ldr	r2, [pc, #200]	; (8000f80 <HAL_SPI_MspInit+0xe8>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d12c      	bne.n	8000f14 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61bb      	str	r3, [r7, #24]
 8000ebe:	4b31      	ldr	r3, [pc, #196]	; (8000f84 <HAL_SPI_MspInit+0xec>)
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec2:	4a30      	ldr	r2, [pc, #192]	; (8000f84 <HAL_SPI_MspInit+0xec>)
 8000ec4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ec8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eca:	4b2e      	ldr	r3, [pc, #184]	; (8000f84 <HAL_SPI_MspInit+0xec>)
 8000ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ece:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ed2:	61bb      	str	r3, [r7, #24]
 8000ed4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	4b2a      	ldr	r3, [pc, #168]	; (8000f84 <HAL_SPI_MspInit+0xec>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	4a29      	ldr	r2, [pc, #164]	; (8000f84 <HAL_SPI_MspInit+0xec>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee6:	4b27      	ldr	r3, [pc, #156]	; (8000f84 <HAL_SPI_MspInit+0xec>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000ef2:	23e0      	movs	r3, #224	; 0xe0
 8000ef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f02:	2305      	movs	r3, #5
 8000f04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f06:	f107 031c 	add.w	r3, r7, #28
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	481e      	ldr	r0, [pc, #120]	; (8000f88 <HAL_SPI_MspInit+0xf0>)
 8000f0e:	f000 fb7b 	bl	8001608 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000f12:	e031      	b.n	8000f78 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a1c      	ldr	r2, [pc, #112]	; (8000f8c <HAL_SPI_MspInit+0xf4>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d12c      	bne.n	8000f78 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
 8000f22:	4b18      	ldr	r3, [pc, #96]	; (8000f84 <HAL_SPI_MspInit+0xec>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	4a17      	ldr	r2, [pc, #92]	; (8000f84 <HAL_SPI_MspInit+0xec>)
 8000f28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2e:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <HAL_SPI_MspInit+0xec>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <HAL_SPI_MspInit+0xec>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a10      	ldr	r2, [pc, #64]	; (8000f84 <HAL_SPI_MspInit+0xec>)
 8000f44:	f043 0302 	orr.w	r3, r3, #2
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <HAL_SPI_MspInit+0xec>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000f56:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f64:	2303      	movs	r3, #3
 8000f66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f68:	2305      	movs	r3, #5
 8000f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f6c:	f107 031c 	add.w	r3, r7, #28
 8000f70:	4619      	mov	r1, r3
 8000f72:	4807      	ldr	r0, [pc, #28]	; (8000f90 <HAL_SPI_MspInit+0xf8>)
 8000f74:	f000 fb48 	bl	8001608 <HAL_GPIO_Init>
}
 8000f78:	bf00      	nop
 8000f7a:	3730      	adds	r7, #48	; 0x30
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40013000 	.word	0x40013000
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40020000 	.word	0x40020000
 8000f8c:	40003800 	.word	0x40003800
 8000f90:	40020400 	.word	0x40020400

08000f94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08a      	sub	sp, #40	; 0x28
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a1d      	ldr	r2, [pc, #116]	; (8001028 <HAL_UART_MspInit+0x94>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d133      	bne.n	800101e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
 8000fba:	4b1c      	ldr	r3, [pc, #112]	; (800102c <HAL_UART_MspInit+0x98>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	4a1b      	ldr	r2, [pc, #108]	; (800102c <HAL_UART_MspInit+0x98>)
 8000fc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc6:	4b19      	ldr	r3, [pc, #100]	; (800102c <HAL_UART_MspInit+0x98>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	4b15      	ldr	r3, [pc, #84]	; (800102c <HAL_UART_MspInit+0x98>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a14      	ldr	r2, [pc, #80]	; (800102c <HAL_UART_MspInit+0x98>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b12      	ldr	r3, [pc, #72]	; (800102c <HAL_UART_MspInit+0x98>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fee:	230c      	movs	r3, #12
 8000ff0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ffe:	2307      	movs	r3, #7
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001002:	f107 0314 	add.w	r3, r7, #20
 8001006:	4619      	mov	r1, r3
 8001008:	4809      	ldr	r0, [pc, #36]	; (8001030 <HAL_UART_MspInit+0x9c>)
 800100a:	f000 fafd 	bl	8001608 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	2100      	movs	r1, #0
 8001012:	2026      	movs	r0, #38	; 0x26
 8001014:	f000 fa2f 	bl	8001476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001018:	2026      	movs	r0, #38	; 0x26
 800101a:	f000 fa48 	bl	80014ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800101e:	bf00      	nop
 8001020:	3728      	adds	r7, #40	; 0x28
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40004400 	.word	0x40004400
 800102c:	40023800 	.word	0x40023800
 8001030:	40020000 	.word	0x40020000

08001034 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001038:	e7fe      	b.n	8001038 <NMI_Handler+0x4>

0800103a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800103e:	e7fe      	b.n	800103e <HardFault_Handler+0x4>

08001040 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001044:	e7fe      	b.n	8001044 <MemManage_Handler+0x4>

08001046 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800104a:	e7fe      	b.n	800104a <BusFault_Handler+0x4>

0800104c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001050:	e7fe      	b.n	8001050 <UsageFault_Handler+0x4>

08001052 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001080:	f000 f8da 	bl	8001238 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}

08001088 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800108c:	4802      	ldr	r0, [pc, #8]	; (8001098 <USART2_IRQHandler+0x10>)
 800108e:	f004 faa3 	bl	80055d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000200 	.word	0x20000200

0800109c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80010a0:	4802      	ldr	r0, [pc, #8]	; (80010ac <OTG_FS_IRQHandler+0x10>)
 80010a2:	f000 fed1 	bl	8001e48 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000648 	.word	0x20000648

080010b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010b8:	4a14      	ldr	r2, [pc, #80]	; (800110c <_sbrk+0x5c>)
 80010ba:	4b15      	ldr	r3, [pc, #84]	; (8001110 <_sbrk+0x60>)
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010c4:	4b13      	ldr	r3, [pc, #76]	; (8001114 <_sbrk+0x64>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d102      	bne.n	80010d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <_sbrk+0x64>)
 80010ce:	4a12      	ldr	r2, [pc, #72]	; (8001118 <_sbrk+0x68>)
 80010d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010d2:	4b10      	ldr	r3, [pc, #64]	; (8001114 <_sbrk+0x64>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4413      	add	r3, r2
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d207      	bcs.n	80010f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010e0:	f007 fc78 	bl	80089d4 <__errno>
 80010e4:	4603      	mov	r3, r0
 80010e6:	220c      	movs	r2, #12
 80010e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ea:	f04f 33ff 	mov.w	r3, #4294967295
 80010ee:	e009      	b.n	8001104 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <_sbrk+0x64>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010f6:	4b07      	ldr	r3, [pc, #28]	; (8001114 <_sbrk+0x64>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4413      	add	r3, r2
 80010fe:	4a05      	ldr	r2, [pc, #20]	; (8001114 <_sbrk+0x64>)
 8001100:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001102:	68fb      	ldr	r3, [r7, #12]
}
 8001104:	4618      	mov	r0, r3
 8001106:	3718      	adds	r7, #24
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20020000 	.word	0x20020000
 8001110:	00000400 	.word	0x00000400
 8001114:	20000264 	.word	0x20000264
 8001118:	20000960 	.word	0x20000960

0800111c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <SystemInit+0x20>)
 8001122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001126:	4a05      	ldr	r2, [pc, #20]	; (800113c <SystemInit+0x20>)
 8001128:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800112c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001140:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001178 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001144:	480d      	ldr	r0, [pc, #52]	; (800117c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001146:	490e      	ldr	r1, [pc, #56]	; (8001180 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001148:	4a0e      	ldr	r2, [pc, #56]	; (8001184 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800114a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800114c:	e002      	b.n	8001154 <LoopCopyDataInit>

0800114e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800114e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001150:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001152:	3304      	adds	r3, #4

08001154 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001154:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001156:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001158:	d3f9      	bcc.n	800114e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800115a:	4a0b      	ldr	r2, [pc, #44]	; (8001188 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800115c:	4c0b      	ldr	r4, [pc, #44]	; (800118c <LoopFillZerobss+0x26>)
  movs r3, #0
 800115e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001160:	e001      	b.n	8001166 <LoopFillZerobss>

08001162 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001162:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001164:	3204      	adds	r2, #4

08001166 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001166:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001168:	d3fb      	bcc.n	8001162 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800116a:	f7ff ffd7 	bl	800111c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800116e:	f007 fc37 	bl	80089e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001172:	f7ff f9ab 	bl	80004cc <main>
  bx  lr    
 8001176:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001178:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800117c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001180:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001184:	08008c98 	.word	0x08008c98
  ldr r2, =_sbss
 8001188:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 800118c:	2000095c 	.word	0x2000095c

08001190 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001190:	e7fe      	b.n	8001190 <ADC_IRQHandler>
	...

08001194 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001198:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <HAL_Init+0x40>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a0d      	ldr	r2, [pc, #52]	; (80011d4 <HAL_Init+0x40>)
 800119e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011a4:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <HAL_Init+0x40>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a0a      	ldr	r2, [pc, #40]	; (80011d4 <HAL_Init+0x40>)
 80011aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011b0:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <HAL_Init+0x40>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a07      	ldr	r2, [pc, #28]	; (80011d4 <HAL_Init+0x40>)
 80011b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011bc:	2003      	movs	r0, #3
 80011be:	f000 f94f 	bl	8001460 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011c2:	2000      	movs	r0, #0
 80011c4:	f000 f808 	bl	80011d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011c8:	f7ff fd76 	bl	8000cb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40023c00 	.word	0x40023c00

080011d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <HAL_InitTick+0x54>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <HAL_InitTick+0x58>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	4619      	mov	r1, r3
 80011ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80011f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 f967 	bl	80014ca <HAL_SYSTICK_Config>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e00e      	b.n	8001224 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b0f      	cmp	r3, #15
 800120a:	d80a      	bhi.n	8001222 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800120c:	2200      	movs	r2, #0
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	f04f 30ff 	mov.w	r0, #4294967295
 8001214:	f000 f92f 	bl	8001476 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001218:	4a06      	ldr	r2, [pc, #24]	; (8001234 <HAL_InitTick+0x5c>)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800121e:	2300      	movs	r3, #0
 8001220:	e000      	b.n	8001224 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
}
 8001224:	4618      	mov	r0, r3
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000008 	.word	0x20000008
 8001230:	20000010 	.word	0x20000010
 8001234:	2000000c 	.word	0x2000000c

08001238 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <HAL_IncTick+0x20>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	461a      	mov	r2, r3
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <HAL_IncTick+0x24>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4413      	add	r3, r2
 8001248:	4a04      	ldr	r2, [pc, #16]	; (800125c <HAL_IncTick+0x24>)
 800124a:	6013      	str	r3, [r2, #0]
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	20000010 	.word	0x20000010
 800125c:	20000268 	.word	0x20000268

08001260 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return uwTick;
 8001264:	4b03      	ldr	r3, [pc, #12]	; (8001274 <HAL_GetTick+0x14>)
 8001266:	681b      	ldr	r3, [r3, #0]
}
 8001268:	4618      	mov	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	20000268 	.word	0x20000268

08001278 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001280:	f7ff ffee 	bl	8001260 <HAL_GetTick>
 8001284:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001290:	d005      	beq.n	800129e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001292:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <HAL_Delay+0x44>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	461a      	mov	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4413      	add	r3, r2
 800129c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800129e:	bf00      	nop
 80012a0:	f7ff ffde 	bl	8001260 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d8f7      	bhi.n	80012a0 <HAL_Delay+0x28>
  {
  }
}
 80012b0:	bf00      	nop
 80012b2:	bf00      	nop
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000010 	.word	0x20000010

080012c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <__NVIC_SetPriorityGrouping+0x44>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012dc:	4013      	ands	r3, r2
 80012de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012f2:	4a04      	ldr	r2, [pc, #16]	; (8001304 <__NVIC_SetPriorityGrouping+0x44>)
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	60d3      	str	r3, [r2, #12]
}
 80012f8:	bf00      	nop
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <__NVIC_GetPriorityGrouping+0x18>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	0a1b      	lsrs	r3, r3, #8
 8001312:	f003 0307 	and.w	r3, r3, #7
}
 8001316:	4618      	mov	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	2b00      	cmp	r3, #0
 8001334:	db0b      	blt.n	800134e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	f003 021f 	and.w	r2, r3, #31
 800133c:	4907      	ldr	r1, [pc, #28]	; (800135c <__NVIC_EnableIRQ+0x38>)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	095b      	lsrs	r3, r3, #5
 8001344:	2001      	movs	r0, #1
 8001346:	fa00 f202 	lsl.w	r2, r0, r2
 800134a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	e000e100 	.word	0xe000e100

08001360 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	6039      	str	r1, [r7, #0]
 800136a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800136c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001370:	2b00      	cmp	r3, #0
 8001372:	db0a      	blt.n	800138a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	b2da      	uxtb	r2, r3
 8001378:	490c      	ldr	r1, [pc, #48]	; (80013ac <__NVIC_SetPriority+0x4c>)
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	0112      	lsls	r2, r2, #4
 8001380:	b2d2      	uxtb	r2, r2
 8001382:	440b      	add	r3, r1
 8001384:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001388:	e00a      	b.n	80013a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	b2da      	uxtb	r2, r3
 800138e:	4908      	ldr	r1, [pc, #32]	; (80013b0 <__NVIC_SetPriority+0x50>)
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	f003 030f 	and.w	r3, r3, #15
 8001396:	3b04      	subs	r3, #4
 8001398:	0112      	lsls	r2, r2, #4
 800139a:	b2d2      	uxtb	r2, r2
 800139c:	440b      	add	r3, r1
 800139e:	761a      	strb	r2, [r3, #24]
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	e000e100 	.word	0xe000e100
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b089      	sub	sp, #36	; 0x24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	f1c3 0307 	rsb	r3, r3, #7
 80013ce:	2b04      	cmp	r3, #4
 80013d0:	bf28      	it	cs
 80013d2:	2304      	movcs	r3, #4
 80013d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	3304      	adds	r3, #4
 80013da:	2b06      	cmp	r3, #6
 80013dc:	d902      	bls.n	80013e4 <NVIC_EncodePriority+0x30>
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	3b03      	subs	r3, #3
 80013e2:	e000      	b.n	80013e6 <NVIC_EncodePriority+0x32>
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e8:	f04f 32ff 	mov.w	r2, #4294967295
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43da      	mvns	r2, r3
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	401a      	ands	r2, r3
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	fa01 f303 	lsl.w	r3, r1, r3
 8001406:	43d9      	mvns	r1, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800140c:	4313      	orrs	r3, r2
         );
}
 800140e:	4618      	mov	r0, r3
 8001410:	3724      	adds	r7, #36	; 0x24
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
	...

0800141c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3b01      	subs	r3, #1
 8001428:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800142c:	d301      	bcc.n	8001432 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800142e:	2301      	movs	r3, #1
 8001430:	e00f      	b.n	8001452 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001432:	4a0a      	ldr	r2, [pc, #40]	; (800145c <SysTick_Config+0x40>)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3b01      	subs	r3, #1
 8001438:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800143a:	210f      	movs	r1, #15
 800143c:	f04f 30ff 	mov.w	r0, #4294967295
 8001440:	f7ff ff8e 	bl	8001360 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001444:	4b05      	ldr	r3, [pc, #20]	; (800145c <SysTick_Config+0x40>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800144a:	4b04      	ldr	r3, [pc, #16]	; (800145c <SysTick_Config+0x40>)
 800144c:	2207      	movs	r2, #7
 800144e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	e000e010 	.word	0xe000e010

08001460 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff ff29 	bl	80012c0 <__NVIC_SetPriorityGrouping>
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001476:	b580      	push	{r7, lr}
 8001478:	b086      	sub	sp, #24
 800147a:	af00      	add	r7, sp, #0
 800147c:	4603      	mov	r3, r0
 800147e:	60b9      	str	r1, [r7, #8]
 8001480:	607a      	str	r2, [r7, #4]
 8001482:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001488:	f7ff ff3e 	bl	8001308 <__NVIC_GetPriorityGrouping>
 800148c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	68b9      	ldr	r1, [r7, #8]
 8001492:	6978      	ldr	r0, [r7, #20]
 8001494:	f7ff ff8e 	bl	80013b4 <NVIC_EncodePriority>
 8001498:	4602      	mov	r2, r0
 800149a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800149e:	4611      	mov	r1, r2
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ff5d 	bl	8001360 <__NVIC_SetPriority>
}
 80014a6:	bf00      	nop
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	4603      	mov	r3, r0
 80014b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ff31 	bl	8001324 <__NVIC_EnableIRQ>
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff ffa2 	bl	800141c <SysTick_Config>
 80014d8:	4603      	mov	r3, r0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b084      	sub	sp, #16
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ee:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80014f0:	f7ff feb6 	bl	8001260 <HAL_GetTick>
 80014f4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d008      	beq.n	8001514 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2280      	movs	r2, #128	; 0x80
 8001506:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e052      	b.n	80015ba <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f022 0216 	bic.w	r2, r2, #22
 8001522:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	695a      	ldr	r2, [r3, #20]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001532:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001538:	2b00      	cmp	r3, #0
 800153a:	d103      	bne.n	8001544 <HAL_DMA_Abort+0x62>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001540:	2b00      	cmp	r3, #0
 8001542:	d007      	beq.n	8001554 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f022 0208 	bic.w	r2, r2, #8
 8001552:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f022 0201 	bic.w	r2, r2, #1
 8001562:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001564:	e013      	b.n	800158e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001566:	f7ff fe7b 	bl	8001260 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b05      	cmp	r3, #5
 8001572:	d90c      	bls.n	800158e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2220      	movs	r2, #32
 8001578:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2203      	movs	r2, #3
 800157e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e015      	b.n	80015ba <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1e4      	bne.n	8001566 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a0:	223f      	movs	r2, #63	; 0x3f
 80015a2:	409a      	lsls	r2, r3
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2201      	movs	r2, #1
 80015ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b083      	sub	sp, #12
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d004      	beq.n	80015e0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2280      	movs	r2, #128	; 0x80
 80015da:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e00c      	b.n	80015fa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2205      	movs	r2, #5
 80015e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f022 0201 	bic.w	r2, r2, #1
 80015f6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
	...

08001608 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001608:	b480      	push	{r7}
 800160a:	b089      	sub	sp, #36	; 0x24
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001616:	2300      	movs	r3, #0
 8001618:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800161a:	2300      	movs	r3, #0
 800161c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800161e:	2300      	movs	r3, #0
 8001620:	61fb      	str	r3, [r7, #28]
 8001622:	e16b      	b.n	80018fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001624:	2201      	movs	r2, #1
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	697a      	ldr	r2, [r7, #20]
 8001634:	4013      	ands	r3, r2
 8001636:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	429a      	cmp	r2, r3
 800163e:	f040 815a 	bne.w	80018f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f003 0303 	and.w	r3, r3, #3
 800164a:	2b01      	cmp	r3, #1
 800164c:	d005      	beq.n	800165a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001656:	2b02      	cmp	r3, #2
 8001658:	d130      	bne.n	80016bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	2203      	movs	r2, #3
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	43db      	mvns	r3, r3
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4013      	ands	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	68da      	ldr	r2, [r3, #12]
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4313      	orrs	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001690:	2201      	movs	r2, #1
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	43db      	mvns	r3, r3
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4013      	ands	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	091b      	lsrs	r3, r3, #4
 80016a6:	f003 0201 	and.w	r2, r3, #1
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f003 0303 	and.w	r3, r3, #3
 80016c4:	2b03      	cmp	r3, #3
 80016c6:	d017      	beq.n	80016f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	2203      	movs	r2, #3
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4013      	ands	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f003 0303 	and.w	r3, r3, #3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d123      	bne.n	800174c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	08da      	lsrs	r2, r3, #3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3208      	adds	r2, #8
 800170c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001710:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	f003 0307 	and.w	r3, r3, #7
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	220f      	movs	r2, #15
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4013      	ands	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	691a      	ldr	r2, [r3, #16]
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	08da      	lsrs	r2, r3, #3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	3208      	adds	r2, #8
 8001746:	69b9      	ldr	r1, [r7, #24]
 8001748:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	2203      	movs	r2, #3
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	43db      	mvns	r3, r3
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	4013      	ands	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 0203 	and.w	r2, r3, #3
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4313      	orrs	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001788:	2b00      	cmp	r3, #0
 800178a:	f000 80b4 	beq.w	80018f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	4b60      	ldr	r3, [pc, #384]	; (8001914 <HAL_GPIO_Init+0x30c>)
 8001794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001796:	4a5f      	ldr	r2, [pc, #380]	; (8001914 <HAL_GPIO_Init+0x30c>)
 8001798:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800179c:	6453      	str	r3, [r2, #68]	; 0x44
 800179e:	4b5d      	ldr	r3, [pc, #372]	; (8001914 <HAL_GPIO_Init+0x30c>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017aa:	4a5b      	ldr	r2, [pc, #364]	; (8001918 <HAL_GPIO_Init+0x310>)
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	089b      	lsrs	r3, r3, #2
 80017b0:	3302      	adds	r3, #2
 80017b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	f003 0303 	and.w	r3, r3, #3
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	220f      	movs	r2, #15
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43db      	mvns	r3, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4013      	ands	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a52      	ldr	r2, [pc, #328]	; (800191c <HAL_GPIO_Init+0x314>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d02b      	beq.n	800182e <HAL_GPIO_Init+0x226>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a51      	ldr	r2, [pc, #324]	; (8001920 <HAL_GPIO_Init+0x318>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d025      	beq.n	800182a <HAL_GPIO_Init+0x222>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a50      	ldr	r2, [pc, #320]	; (8001924 <HAL_GPIO_Init+0x31c>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d01f      	beq.n	8001826 <HAL_GPIO_Init+0x21e>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a4f      	ldr	r2, [pc, #316]	; (8001928 <HAL_GPIO_Init+0x320>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d019      	beq.n	8001822 <HAL_GPIO_Init+0x21a>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a4e      	ldr	r2, [pc, #312]	; (800192c <HAL_GPIO_Init+0x324>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d013      	beq.n	800181e <HAL_GPIO_Init+0x216>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a4d      	ldr	r2, [pc, #308]	; (8001930 <HAL_GPIO_Init+0x328>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d00d      	beq.n	800181a <HAL_GPIO_Init+0x212>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a4c      	ldr	r2, [pc, #304]	; (8001934 <HAL_GPIO_Init+0x32c>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d007      	beq.n	8001816 <HAL_GPIO_Init+0x20e>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a4b      	ldr	r2, [pc, #300]	; (8001938 <HAL_GPIO_Init+0x330>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d101      	bne.n	8001812 <HAL_GPIO_Init+0x20a>
 800180e:	2307      	movs	r3, #7
 8001810:	e00e      	b.n	8001830 <HAL_GPIO_Init+0x228>
 8001812:	2308      	movs	r3, #8
 8001814:	e00c      	b.n	8001830 <HAL_GPIO_Init+0x228>
 8001816:	2306      	movs	r3, #6
 8001818:	e00a      	b.n	8001830 <HAL_GPIO_Init+0x228>
 800181a:	2305      	movs	r3, #5
 800181c:	e008      	b.n	8001830 <HAL_GPIO_Init+0x228>
 800181e:	2304      	movs	r3, #4
 8001820:	e006      	b.n	8001830 <HAL_GPIO_Init+0x228>
 8001822:	2303      	movs	r3, #3
 8001824:	e004      	b.n	8001830 <HAL_GPIO_Init+0x228>
 8001826:	2302      	movs	r3, #2
 8001828:	e002      	b.n	8001830 <HAL_GPIO_Init+0x228>
 800182a:	2301      	movs	r3, #1
 800182c:	e000      	b.n	8001830 <HAL_GPIO_Init+0x228>
 800182e:	2300      	movs	r3, #0
 8001830:	69fa      	ldr	r2, [r7, #28]
 8001832:	f002 0203 	and.w	r2, r2, #3
 8001836:	0092      	lsls	r2, r2, #2
 8001838:	4093      	lsls	r3, r2
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4313      	orrs	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001840:	4935      	ldr	r1, [pc, #212]	; (8001918 <HAL_GPIO_Init+0x310>)
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	089b      	lsrs	r3, r3, #2
 8001846:	3302      	adds	r3, #2
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800184e:	4b3b      	ldr	r3, [pc, #236]	; (800193c <HAL_GPIO_Init+0x334>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	43db      	mvns	r3, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4013      	ands	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	4313      	orrs	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001872:	4a32      	ldr	r2, [pc, #200]	; (800193c <HAL_GPIO_Init+0x334>)
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001878:	4b30      	ldr	r3, [pc, #192]	; (800193c <HAL_GPIO_Init+0x334>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	43db      	mvns	r3, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4013      	ands	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d003      	beq.n	800189c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800189c:	4a27      	ldr	r2, [pc, #156]	; (800193c <HAL_GPIO_Init+0x334>)
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018a2:	4b26      	ldr	r3, [pc, #152]	; (800193c <HAL_GPIO_Init+0x334>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	43db      	mvns	r3, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4013      	ands	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018c6:	4a1d      	ldr	r2, [pc, #116]	; (800193c <HAL_GPIO_Init+0x334>)
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018cc:	4b1b      	ldr	r3, [pc, #108]	; (800193c <HAL_GPIO_Init+0x334>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	43db      	mvns	r3, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4013      	ands	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d003      	beq.n	80018f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018f0:	4a12      	ldr	r2, [pc, #72]	; (800193c <HAL_GPIO_Init+0x334>)
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	3301      	adds	r3, #1
 80018fa:	61fb      	str	r3, [r7, #28]
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	2b0f      	cmp	r3, #15
 8001900:	f67f ae90 	bls.w	8001624 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001904:	bf00      	nop
 8001906:	bf00      	nop
 8001908:	3724      	adds	r7, #36	; 0x24
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	40023800 	.word	0x40023800
 8001918:	40013800 	.word	0x40013800
 800191c:	40020000 	.word	0x40020000
 8001920:	40020400 	.word	0x40020400
 8001924:	40020800 	.word	0x40020800
 8001928:	40020c00 	.word	0x40020c00
 800192c:	40021000 	.word	0x40021000
 8001930:	40021400 	.word	0x40021400
 8001934:	40021800 	.word	0x40021800
 8001938:	40021c00 	.word	0x40021c00
 800193c:	40013c00 	.word	0x40013c00

08001940 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	460b      	mov	r3, r1
 800194a:	807b      	strh	r3, [r7, #2]
 800194c:	4613      	mov	r3, r2
 800194e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001950:	787b      	ldrb	r3, [r7, #1]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001956:	887a      	ldrh	r2, [r7, #2]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800195c:	e003      	b.n	8001966 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800195e:	887b      	ldrh	r3, [r7, #2]
 8001960:	041a      	lsls	r2, r3, #16
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	619a      	str	r2, [r3, #24]
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001972:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001974:	b08f      	sub	sp, #60	; 0x3c
 8001976:	af0a      	add	r7, sp, #40	; 0x28
 8001978:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d101      	bne.n	8001984 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e054      	b.n	8001a2e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	d106      	bne.n	80019a4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f006 fdbc 	bl	800851c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2203      	movs	r2, #3
 80019a8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d102      	bne.n	80019be <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f004 fdae 	bl	8006524 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	603b      	str	r3, [r7, #0]
 80019ce:	687e      	ldr	r6, [r7, #4]
 80019d0:	466d      	mov	r5, sp
 80019d2:	f106 0410 	add.w	r4, r6, #16
 80019d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80019e6:	1d33      	adds	r3, r6, #4
 80019e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019ea:	6838      	ldr	r0, [r7, #0]
 80019ec:	f004 fd28 	bl	8006440 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2101      	movs	r1, #1
 80019f6:	4618      	mov	r0, r3
 80019f8:	f004 fda5 	bl	8006546 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	603b      	str	r3, [r7, #0]
 8001a02:	687e      	ldr	r6, [r7, #4]
 8001a04:	466d      	mov	r5, sp
 8001a06:	f106 0410 	add.w	r4, r6, #16
 8001a0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a12:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a16:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a1a:	1d33      	adds	r3, r6, #4
 8001a1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a1e:	6838      	ldr	r0, [r7, #0]
 8001a20:	f004 ff2e 	bl	8006880 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a36 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001a36:	b590      	push	{r4, r7, lr}
 8001a38:	b089      	sub	sp, #36	; 0x24
 8001a3a:	af04      	add	r7, sp, #16
 8001a3c:	6078      	str	r0, [r7, #4]
 8001a3e:	4608      	mov	r0, r1
 8001a40:	4611      	mov	r1, r2
 8001a42:	461a      	mov	r2, r3
 8001a44:	4603      	mov	r3, r0
 8001a46:	70fb      	strb	r3, [r7, #3]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	70bb      	strb	r3, [r7, #2]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d101      	bne.n	8001a5e <HAL_HCD_HC_Init+0x28>
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	e076      	b.n	8001b4c <HAL_HCD_HC_Init+0x116>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2201      	movs	r2, #1
 8001a62:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001a66:	78fb      	ldrb	r3, [r7, #3]
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	212c      	movs	r1, #44	; 0x2c
 8001a6c:	fb01 f303 	mul.w	r3, r1, r3
 8001a70:	4413      	add	r3, r2
 8001a72:	333d      	adds	r3, #61	; 0x3d
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001a78:	78fb      	ldrb	r3, [r7, #3]
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	212c      	movs	r1, #44	; 0x2c
 8001a7e:	fb01 f303 	mul.w	r3, r1, r3
 8001a82:	4413      	add	r3, r2
 8001a84:	3338      	adds	r3, #56	; 0x38
 8001a86:	787a      	ldrb	r2, [r7, #1]
 8001a88:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001a8a:	78fb      	ldrb	r3, [r7, #3]
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	212c      	movs	r1, #44	; 0x2c
 8001a90:	fb01 f303 	mul.w	r3, r1, r3
 8001a94:	4413      	add	r3, r2
 8001a96:	3340      	adds	r3, #64	; 0x40
 8001a98:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001a9a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a9c:	78fb      	ldrb	r3, [r7, #3]
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	212c      	movs	r1, #44	; 0x2c
 8001aa2:	fb01 f303 	mul.w	r3, r1, r3
 8001aa6:	4413      	add	r3, r2
 8001aa8:	3339      	adds	r3, #57	; 0x39
 8001aaa:	78fa      	ldrb	r2, [r7, #3]
 8001aac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001aae:	78fb      	ldrb	r3, [r7, #3]
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	212c      	movs	r1, #44	; 0x2c
 8001ab4:	fb01 f303 	mul.w	r3, r1, r3
 8001ab8:	4413      	add	r3, r2
 8001aba:	333f      	adds	r3, #63	; 0x3f
 8001abc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001ac0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001ac2:	78fb      	ldrb	r3, [r7, #3]
 8001ac4:	78ba      	ldrb	r2, [r7, #2]
 8001ac6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001aca:	b2d0      	uxtb	r0, r2
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	212c      	movs	r1, #44	; 0x2c
 8001ad0:	fb01 f303 	mul.w	r3, r1, r3
 8001ad4:	4413      	add	r3, r2
 8001ad6:	333a      	adds	r3, #58	; 0x3a
 8001ad8:	4602      	mov	r2, r0
 8001ada:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001adc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	da09      	bge.n	8001af8 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001ae4:	78fb      	ldrb	r3, [r7, #3]
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	212c      	movs	r1, #44	; 0x2c
 8001aea:	fb01 f303 	mul.w	r3, r1, r3
 8001aee:	4413      	add	r3, r2
 8001af0:	333b      	adds	r3, #59	; 0x3b
 8001af2:	2201      	movs	r2, #1
 8001af4:	701a      	strb	r2, [r3, #0]
 8001af6:	e008      	b.n	8001b0a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001af8:	78fb      	ldrb	r3, [r7, #3]
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	212c      	movs	r1, #44	; 0x2c
 8001afe:	fb01 f303 	mul.w	r3, r1, r3
 8001b02:	4413      	add	r3, r2
 8001b04:	333b      	adds	r3, #59	; 0x3b
 8001b06:	2200      	movs	r2, #0
 8001b08:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001b0a:	78fb      	ldrb	r3, [r7, #3]
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	212c      	movs	r1, #44	; 0x2c
 8001b10:	fb01 f303 	mul.w	r3, r1, r3
 8001b14:	4413      	add	r3, r2
 8001b16:	333c      	adds	r3, #60	; 0x3c
 8001b18:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001b1c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6818      	ldr	r0, [r3, #0]
 8001b22:	787c      	ldrb	r4, [r7, #1]
 8001b24:	78ba      	ldrb	r2, [r7, #2]
 8001b26:	78f9      	ldrb	r1, [r7, #3]
 8001b28:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b2a:	9302      	str	r3, [sp, #8]
 8001b2c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001b30:	9301      	str	r3, [sp, #4]
 8001b32:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	4623      	mov	r3, r4
 8001b3a:	f004 fffd 	bl	8006b38 <USB_HC_Init>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd90      	pop	{r4, r7, pc}

08001b54 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001b60:	2300      	movs	r3, #0
 8001b62:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d101      	bne.n	8001b72 <HAL_HCD_HC_Halt+0x1e>
 8001b6e:	2302      	movs	r3, #2
 8001b70:	e00f      	b.n	8001b92 <HAL_HCD_HC_Halt+0x3e>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2201      	movs	r2, #1
 8001b76:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	78fa      	ldrb	r2, [r7, #3]
 8001b80:	4611      	mov	r1, r2
 8001b82:	4618      	mov	r0, r3
 8001b84:	f005 fa4d 	bl	8007022 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
	...

08001b9c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	4608      	mov	r0, r1
 8001ba6:	4611      	mov	r1, r2
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4603      	mov	r3, r0
 8001bac:	70fb      	strb	r3, [r7, #3]
 8001bae:	460b      	mov	r3, r1
 8001bb0:	70bb      	strb	r3, [r7, #2]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001bb6:	78fb      	ldrb	r3, [r7, #3]
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	212c      	movs	r1, #44	; 0x2c
 8001bbc:	fb01 f303 	mul.w	r3, r1, r3
 8001bc0:	4413      	add	r3, r2
 8001bc2:	333b      	adds	r3, #59	; 0x3b
 8001bc4:	78ba      	ldrb	r2, [r7, #2]
 8001bc6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001bc8:	78fb      	ldrb	r3, [r7, #3]
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	212c      	movs	r1, #44	; 0x2c
 8001bce:	fb01 f303 	mul.w	r3, r1, r3
 8001bd2:	4413      	add	r3, r2
 8001bd4:	333f      	adds	r3, #63	; 0x3f
 8001bd6:	787a      	ldrb	r2, [r7, #1]
 8001bd8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001bda:	7c3b      	ldrb	r3, [r7, #16]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d112      	bne.n	8001c06 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001be0:	78fb      	ldrb	r3, [r7, #3]
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	212c      	movs	r1, #44	; 0x2c
 8001be6:	fb01 f303 	mul.w	r3, r1, r3
 8001bea:	4413      	add	r3, r2
 8001bec:	3342      	adds	r3, #66	; 0x42
 8001bee:	2203      	movs	r2, #3
 8001bf0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001bf2:	78fb      	ldrb	r3, [r7, #3]
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	212c      	movs	r1, #44	; 0x2c
 8001bf8:	fb01 f303 	mul.w	r3, r1, r3
 8001bfc:	4413      	add	r3, r2
 8001bfe:	333d      	adds	r3, #61	; 0x3d
 8001c00:	7f3a      	ldrb	r2, [r7, #28]
 8001c02:	701a      	strb	r2, [r3, #0]
 8001c04:	e008      	b.n	8001c18 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c06:	78fb      	ldrb	r3, [r7, #3]
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	212c      	movs	r1, #44	; 0x2c
 8001c0c:	fb01 f303 	mul.w	r3, r1, r3
 8001c10:	4413      	add	r3, r2
 8001c12:	3342      	adds	r3, #66	; 0x42
 8001c14:	2202      	movs	r2, #2
 8001c16:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001c18:	787b      	ldrb	r3, [r7, #1]
 8001c1a:	2b03      	cmp	r3, #3
 8001c1c:	f200 80c6 	bhi.w	8001dac <HAL_HCD_HC_SubmitRequest+0x210>
 8001c20:	a201      	add	r2, pc, #4	; (adr r2, 8001c28 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c26:	bf00      	nop
 8001c28:	08001c39 	.word	0x08001c39
 8001c2c:	08001d99 	.word	0x08001d99
 8001c30:	08001c9d 	.word	0x08001c9d
 8001c34:	08001d1b 	.word	0x08001d1b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001c38:	7c3b      	ldrb	r3, [r7, #16]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	f040 80b8 	bne.w	8001db0 <HAL_HCD_HC_SubmitRequest+0x214>
 8001c40:	78bb      	ldrb	r3, [r7, #2]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f040 80b4 	bne.w	8001db0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001c48:	8b3b      	ldrh	r3, [r7, #24]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d108      	bne.n	8001c60 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001c4e:	78fb      	ldrb	r3, [r7, #3]
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	212c      	movs	r1, #44	; 0x2c
 8001c54:	fb01 f303 	mul.w	r3, r1, r3
 8001c58:	4413      	add	r3, r2
 8001c5a:	3355      	adds	r3, #85	; 0x55
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c60:	78fb      	ldrb	r3, [r7, #3]
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	212c      	movs	r1, #44	; 0x2c
 8001c66:	fb01 f303 	mul.w	r3, r1, r3
 8001c6a:	4413      	add	r3, r2
 8001c6c:	3355      	adds	r3, #85	; 0x55
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d109      	bne.n	8001c88 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c74:	78fb      	ldrb	r3, [r7, #3]
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	212c      	movs	r1, #44	; 0x2c
 8001c7a:	fb01 f303 	mul.w	r3, r1, r3
 8001c7e:	4413      	add	r3, r2
 8001c80:	3342      	adds	r3, #66	; 0x42
 8001c82:	2200      	movs	r2, #0
 8001c84:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001c86:	e093      	b.n	8001db0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c88:	78fb      	ldrb	r3, [r7, #3]
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	212c      	movs	r1, #44	; 0x2c
 8001c8e:	fb01 f303 	mul.w	r3, r1, r3
 8001c92:	4413      	add	r3, r2
 8001c94:	3342      	adds	r3, #66	; 0x42
 8001c96:	2202      	movs	r2, #2
 8001c98:	701a      	strb	r2, [r3, #0]
      break;
 8001c9a:	e089      	b.n	8001db0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001c9c:	78bb      	ldrb	r3, [r7, #2]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d11d      	bne.n	8001cde <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ca2:	78fb      	ldrb	r3, [r7, #3]
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	212c      	movs	r1, #44	; 0x2c
 8001ca8:	fb01 f303 	mul.w	r3, r1, r3
 8001cac:	4413      	add	r3, r2
 8001cae:	3355      	adds	r3, #85	; 0x55
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d109      	bne.n	8001cca <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cb6:	78fb      	ldrb	r3, [r7, #3]
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	212c      	movs	r1, #44	; 0x2c
 8001cbc:	fb01 f303 	mul.w	r3, r1, r3
 8001cc0:	4413      	add	r3, r2
 8001cc2:	3342      	adds	r3, #66	; 0x42
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001cc8:	e073      	b.n	8001db2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cca:	78fb      	ldrb	r3, [r7, #3]
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	212c      	movs	r1, #44	; 0x2c
 8001cd0:	fb01 f303 	mul.w	r3, r1, r3
 8001cd4:	4413      	add	r3, r2
 8001cd6:	3342      	adds	r3, #66	; 0x42
 8001cd8:	2202      	movs	r2, #2
 8001cda:	701a      	strb	r2, [r3, #0]
      break;
 8001cdc:	e069      	b.n	8001db2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001cde:	78fb      	ldrb	r3, [r7, #3]
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	212c      	movs	r1, #44	; 0x2c
 8001ce4:	fb01 f303 	mul.w	r3, r1, r3
 8001ce8:	4413      	add	r3, r2
 8001cea:	3354      	adds	r3, #84	; 0x54
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d109      	bne.n	8001d06 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cf2:	78fb      	ldrb	r3, [r7, #3]
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	212c      	movs	r1, #44	; 0x2c
 8001cf8:	fb01 f303 	mul.w	r3, r1, r3
 8001cfc:	4413      	add	r3, r2
 8001cfe:	3342      	adds	r3, #66	; 0x42
 8001d00:	2200      	movs	r2, #0
 8001d02:	701a      	strb	r2, [r3, #0]
      break;
 8001d04:	e055      	b.n	8001db2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d06:	78fb      	ldrb	r3, [r7, #3]
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	212c      	movs	r1, #44	; 0x2c
 8001d0c:	fb01 f303 	mul.w	r3, r1, r3
 8001d10:	4413      	add	r3, r2
 8001d12:	3342      	adds	r3, #66	; 0x42
 8001d14:	2202      	movs	r2, #2
 8001d16:	701a      	strb	r2, [r3, #0]
      break;
 8001d18:	e04b      	b.n	8001db2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001d1a:	78bb      	ldrb	r3, [r7, #2]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d11d      	bne.n	8001d5c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001d20:	78fb      	ldrb	r3, [r7, #3]
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	212c      	movs	r1, #44	; 0x2c
 8001d26:	fb01 f303 	mul.w	r3, r1, r3
 8001d2a:	4413      	add	r3, r2
 8001d2c:	3355      	adds	r3, #85	; 0x55
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d109      	bne.n	8001d48 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d34:	78fb      	ldrb	r3, [r7, #3]
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	212c      	movs	r1, #44	; 0x2c
 8001d3a:	fb01 f303 	mul.w	r3, r1, r3
 8001d3e:	4413      	add	r3, r2
 8001d40:	3342      	adds	r3, #66	; 0x42
 8001d42:	2200      	movs	r2, #0
 8001d44:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001d46:	e034      	b.n	8001db2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d48:	78fb      	ldrb	r3, [r7, #3]
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	212c      	movs	r1, #44	; 0x2c
 8001d4e:	fb01 f303 	mul.w	r3, r1, r3
 8001d52:	4413      	add	r3, r2
 8001d54:	3342      	adds	r3, #66	; 0x42
 8001d56:	2202      	movs	r2, #2
 8001d58:	701a      	strb	r2, [r3, #0]
      break;
 8001d5a:	e02a      	b.n	8001db2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001d5c:	78fb      	ldrb	r3, [r7, #3]
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	212c      	movs	r1, #44	; 0x2c
 8001d62:	fb01 f303 	mul.w	r3, r1, r3
 8001d66:	4413      	add	r3, r2
 8001d68:	3354      	adds	r3, #84	; 0x54
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d109      	bne.n	8001d84 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d70:	78fb      	ldrb	r3, [r7, #3]
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	212c      	movs	r1, #44	; 0x2c
 8001d76:	fb01 f303 	mul.w	r3, r1, r3
 8001d7a:	4413      	add	r3, r2
 8001d7c:	3342      	adds	r3, #66	; 0x42
 8001d7e:	2200      	movs	r2, #0
 8001d80:	701a      	strb	r2, [r3, #0]
      break;
 8001d82:	e016      	b.n	8001db2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d84:	78fb      	ldrb	r3, [r7, #3]
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	212c      	movs	r1, #44	; 0x2c
 8001d8a:	fb01 f303 	mul.w	r3, r1, r3
 8001d8e:	4413      	add	r3, r2
 8001d90:	3342      	adds	r3, #66	; 0x42
 8001d92:	2202      	movs	r2, #2
 8001d94:	701a      	strb	r2, [r3, #0]
      break;
 8001d96:	e00c      	b.n	8001db2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d98:	78fb      	ldrb	r3, [r7, #3]
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	212c      	movs	r1, #44	; 0x2c
 8001d9e:	fb01 f303 	mul.w	r3, r1, r3
 8001da2:	4413      	add	r3, r2
 8001da4:	3342      	adds	r3, #66	; 0x42
 8001da6:	2200      	movs	r2, #0
 8001da8:	701a      	strb	r2, [r3, #0]
      break;
 8001daa:	e002      	b.n	8001db2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001dac:	bf00      	nop
 8001dae:	e000      	b.n	8001db2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001db0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001db2:	78fb      	ldrb	r3, [r7, #3]
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	212c      	movs	r1, #44	; 0x2c
 8001db8:	fb01 f303 	mul.w	r3, r1, r3
 8001dbc:	4413      	add	r3, r2
 8001dbe:	3344      	adds	r3, #68	; 0x44
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001dc4:	78fb      	ldrb	r3, [r7, #3]
 8001dc6:	8b3a      	ldrh	r2, [r7, #24]
 8001dc8:	6879      	ldr	r1, [r7, #4]
 8001dca:	202c      	movs	r0, #44	; 0x2c
 8001dcc:	fb00 f303 	mul.w	r3, r0, r3
 8001dd0:	440b      	add	r3, r1
 8001dd2:	334c      	adds	r3, #76	; 0x4c
 8001dd4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001dd6:	78fb      	ldrb	r3, [r7, #3]
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	212c      	movs	r1, #44	; 0x2c
 8001ddc:	fb01 f303 	mul.w	r3, r1, r3
 8001de0:	4413      	add	r3, r2
 8001de2:	3360      	adds	r3, #96	; 0x60
 8001de4:	2200      	movs	r2, #0
 8001de6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001de8:	78fb      	ldrb	r3, [r7, #3]
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	212c      	movs	r1, #44	; 0x2c
 8001dee:	fb01 f303 	mul.w	r3, r1, r3
 8001df2:	4413      	add	r3, r2
 8001df4:	3350      	adds	r3, #80	; 0x50
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001dfa:	78fb      	ldrb	r3, [r7, #3]
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	212c      	movs	r1, #44	; 0x2c
 8001e00:	fb01 f303 	mul.w	r3, r1, r3
 8001e04:	4413      	add	r3, r2
 8001e06:	3339      	adds	r3, #57	; 0x39
 8001e08:	78fa      	ldrb	r2, [r7, #3]
 8001e0a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001e0c:	78fb      	ldrb	r3, [r7, #3]
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	212c      	movs	r1, #44	; 0x2c
 8001e12:	fb01 f303 	mul.w	r3, r1, r3
 8001e16:	4413      	add	r3, r2
 8001e18:	3361      	adds	r3, #97	; 0x61
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6818      	ldr	r0, [r3, #0]
 8001e22:	78fb      	ldrb	r3, [r7, #3]
 8001e24:	222c      	movs	r2, #44	; 0x2c
 8001e26:	fb02 f303 	mul.w	r3, r2, r3
 8001e2a:	3338      	adds	r3, #56	; 0x38
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	18d1      	adds	r1, r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	461a      	mov	r2, r3
 8001e38:	f004 ffa0 	bl	8006d7c <USB_HC_StartXfer>
 8001e3c:	4603      	mov	r3, r0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop

08001e48 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f004 fccb 	bl	80067fa <USB_GetMode>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	f040 80f6 	bne.w	8002058 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f004 fcaf 	bl	80067d4 <USB_ReadInterrupts>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f000 80ec 	beq.w	8002056 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f004 fca6 	bl	80067d4 <USB_ReadInterrupts>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e92:	d104      	bne.n	8001e9e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001e9c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f004 fc96 	bl	80067d4 <USB_ReadInterrupts>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001eb2:	d104      	bne.n	8001ebe <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ebc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f004 fc86 	bl	80067d4 <USB_ReadInterrupts>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ece:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001ed2:	d104      	bne.n	8001ede <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001edc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f004 fc76 	bl	80067d4 <USB_ReadInterrupts>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d103      	bne.n	8001efa <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f004 fc68 	bl	80067d4 <USB_ReadInterrupts>
 8001f04:	4603      	mov	r3, r0
 8001f06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f0e:	d11c      	bne.n	8001f4a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001f18:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d10f      	bne.n	8001f4a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001f2a:	2110      	movs	r1, #16
 8001f2c:	6938      	ldr	r0, [r7, #16]
 8001f2e:	f004 fb57 	bl	80065e0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001f32:	6938      	ldr	r0, [r7, #16]
 8001f34:	f004 fb88 	bl	8006648 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f004 fd5e 	bl	8006a00 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f006 fb67 	bl	8008618 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f004 fc40 	bl	80067d4 <USB_ReadInterrupts>
 8001f54:	4603      	mov	r3, r0
 8001f56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f5a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f5e:	d102      	bne.n	8001f66 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f001 f882 	bl	800306a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f004 fc32 	bl	80067d4 <USB_ReadInterrupts>
 8001f70:	4603      	mov	r3, r0
 8001f72:	f003 0308 	and.w	r3, r3, #8
 8001f76:	2b08      	cmp	r3, #8
 8001f78:	d106      	bne.n	8001f88 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f006 fb30 	bl	80085e0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2208      	movs	r2, #8
 8001f86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f004 fc21 	bl	80067d4 <USB_ReadInterrupts>
 8001f92:	4603      	mov	r3, r0
 8001f94:	f003 0310 	and.w	r3, r3, #16
 8001f98:	2b10      	cmp	r3, #16
 8001f9a:	d101      	bne.n	8001fa0 <HAL_HCD_IRQHandler+0x158>
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e000      	b.n	8001fa2 <HAL_HCD_IRQHandler+0x15a>
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d012      	beq.n	8001fcc <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	699a      	ldr	r2, [r3, #24]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 0210 	bic.w	r2, r2, #16
 8001fb4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 ff85 	bl	8002ec6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	699a      	ldr	r2, [r3, #24]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f042 0210 	orr.w	r2, r2, #16
 8001fca:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f004 fbff 	bl	80067d4 <USB_ReadInterrupts>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001fe0:	d13a      	bne.n	8002058 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f005 f80a 	bl	8007000 <USB_HC_ReadInterrupt>
 8001fec:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001fee:	2300      	movs	r3, #0
 8001ff0:	617b      	str	r3, [r7, #20]
 8001ff2:	e025      	b.n	8002040 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b00      	cmp	r3, #0
 8002006:	d018      	beq.n	800203a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	015a      	lsls	r2, r3, #5
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	4413      	add	r3, r2
 8002010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800201a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800201e:	d106      	bne.n	800202e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	b2db      	uxtb	r3, r3
 8002024:	4619      	mov	r1, r3
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f88f 	bl	800214a <HCD_HC_IN_IRQHandler>
 800202c:	e005      	b.n	800203a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	b2db      	uxtb	r3, r3
 8002032:	4619      	mov	r1, r3
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 fbdd 	bl	80027f4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	3301      	adds	r3, #1
 800203e:	617b      	str	r3, [r7, #20]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	697a      	ldr	r2, [r7, #20]
 8002046:	429a      	cmp	r2, r3
 8002048:	d3d4      	bcc.n	8001ff4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002052:	615a      	str	r2, [r3, #20]
 8002054:	e000      	b.n	8002058 <HAL_HCD_IRQHandler+0x210>
      return;
 8002056:	bf00      	nop
    }
  }
}
 8002058:	3718      	adds	r7, #24
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800206c:	2b01      	cmp	r3, #1
 800206e:	d101      	bne.n	8002074 <HAL_HCD_Start+0x16>
 8002070:	2302      	movs	r3, #2
 8002072:	e013      	b.n	800209c <HAL_HCD_Start+0x3e>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2101      	movs	r1, #1
 8002082:	4618      	mov	r0, r3
 8002084:	f004 fcf6 	bl	8006a74 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4618      	mov	r0, r3
 800208e:	f004 fa38 	bl	8006502 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d101      	bne.n	80020ba <HAL_HCD_Stop+0x16>
 80020b6:	2302      	movs	r3, #2
 80020b8:	e00d      	b.n	80020d6 <HAL_HCD_Stop+0x32>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2201      	movs	r2, #1
 80020be:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f005 f8e4 	bl	8007294 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80020de:	b480      	push	{r7}
 80020e0:	b083      	sub	sp, #12
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
 80020e6:	460b      	mov	r3, r1
 80020e8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80020ea:	78fb      	ldrb	r3, [r7, #3]
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	212c      	movs	r1, #44	; 0x2c
 80020f0:	fb01 f303 	mul.w	r3, r1, r3
 80020f4:	4413      	add	r3, r2
 80020f6:	3360      	adds	r3, #96	; 0x60
 80020f8:	781b      	ldrb	r3, [r3, #0]
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
 800210e:	460b      	mov	r3, r1
 8002110:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002112:	78fb      	ldrb	r3, [r7, #3]
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	212c      	movs	r1, #44	; 0x2c
 8002118:	fb01 f303 	mul.w	r3, r1, r3
 800211c:	4413      	add	r3, r2
 800211e:	3350      	adds	r3, #80	; 0x50
 8002120:	681b      	ldr	r3, [r3, #0]
}
 8002122:	4618      	mov	r0, r3
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr

0800212e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f004 fcea 	bl	8006b14 <USB_GetCurrentFrame>
 8002140:	4603      	mov	r3, r0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b086      	sub	sp, #24
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
 8002152:	460b      	mov	r3, r1
 8002154:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002160:	78fb      	ldrb	r3, [r7, #3]
 8002162:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	015a      	lsls	r2, r3, #5
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	4413      	add	r3, r2
 800216c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 0304 	and.w	r3, r3, #4
 8002176:	2b04      	cmp	r3, #4
 8002178:	d11a      	bne.n	80021b0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	015a      	lsls	r2, r3, #5
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	4413      	add	r3, r2
 8002182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002186:	461a      	mov	r2, r3
 8002188:	2304      	movs	r3, #4
 800218a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	212c      	movs	r1, #44	; 0x2c
 8002192:	fb01 f303 	mul.w	r3, r1, r3
 8002196:	4413      	add	r3, r2
 8002198:	3361      	adds	r3, #97	; 0x61
 800219a:	2206      	movs	r2, #6
 800219c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	b2d2      	uxtb	r2, r2
 80021a6:	4611      	mov	r1, r2
 80021a8:	4618      	mov	r0, r3
 80021aa:	f004 ff3a 	bl	8007022 <USB_HC_Halt>
 80021ae:	e0af      	b.n	8002310 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	015a      	lsls	r2, r3, #5
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	4413      	add	r3, r2
 80021b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021c6:	d11b      	bne.n	8002200 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	015a      	lsls	r2, r3, #5
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	4413      	add	r3, r2
 80021d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d4:	461a      	mov	r2, r3
 80021d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021da:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	212c      	movs	r1, #44	; 0x2c
 80021e2:	fb01 f303 	mul.w	r3, r1, r3
 80021e6:	4413      	add	r3, r2
 80021e8:	3361      	adds	r3, #97	; 0x61
 80021ea:	2207      	movs	r2, #7
 80021ec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	4611      	mov	r1, r2
 80021f8:	4618      	mov	r0, r3
 80021fa:	f004 ff12 	bl	8007022 <USB_HC_Halt>
 80021fe:	e087      	b.n	8002310 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	015a      	lsls	r2, r3, #5
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	4413      	add	r3, r2
 8002208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 0320 	and.w	r3, r3, #32
 8002212:	2b20      	cmp	r3, #32
 8002214:	d109      	bne.n	800222a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	015a      	lsls	r2, r3, #5
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	4413      	add	r3, r2
 800221e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002222:	461a      	mov	r2, r3
 8002224:	2320      	movs	r3, #32
 8002226:	6093      	str	r3, [r2, #8]
 8002228:	e072      	b.n	8002310 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	015a      	lsls	r2, r3, #5
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	4413      	add	r3, r2
 8002232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f003 0308 	and.w	r3, r3, #8
 800223c:	2b08      	cmp	r3, #8
 800223e:	d11a      	bne.n	8002276 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	015a      	lsls	r2, r3, #5
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4413      	add	r3, r2
 8002248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800224c:	461a      	mov	r2, r3
 800224e:	2308      	movs	r3, #8
 8002250:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	212c      	movs	r1, #44	; 0x2c
 8002258:	fb01 f303 	mul.w	r3, r1, r3
 800225c:	4413      	add	r3, r2
 800225e:	3361      	adds	r3, #97	; 0x61
 8002260:	2205      	movs	r2, #5
 8002262:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	b2d2      	uxtb	r2, r2
 800226c:	4611      	mov	r1, r2
 800226e:	4618      	mov	r0, r3
 8002270:	f004 fed7 	bl	8007022 <USB_HC_Halt>
 8002274:	e04c      	b.n	8002310 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	015a      	lsls	r2, r3, #5
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	4413      	add	r3, r2
 800227e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800228c:	d11b      	bne.n	80022c6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	015a      	lsls	r2, r3, #5
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	4413      	add	r3, r2
 8002296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800229a:	461a      	mov	r2, r3
 800229c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	212c      	movs	r1, #44	; 0x2c
 80022a8:	fb01 f303 	mul.w	r3, r1, r3
 80022ac:	4413      	add	r3, r2
 80022ae:	3361      	adds	r3, #97	; 0x61
 80022b0:	2208      	movs	r2, #8
 80022b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	b2d2      	uxtb	r2, r2
 80022bc:	4611      	mov	r1, r2
 80022be:	4618      	mov	r0, r3
 80022c0:	f004 feaf 	bl	8007022 <USB_HC_Halt>
 80022c4:	e024      	b.n	8002310 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	015a      	lsls	r2, r3, #5
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	4413      	add	r3, r2
 80022ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022d8:	2b80      	cmp	r3, #128	; 0x80
 80022da:	d119      	bne.n	8002310 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	015a      	lsls	r2, r3, #5
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	4413      	add	r3, r2
 80022e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e8:	461a      	mov	r2, r3
 80022ea:	2380      	movs	r3, #128	; 0x80
 80022ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	212c      	movs	r1, #44	; 0x2c
 80022f4:	fb01 f303 	mul.w	r3, r1, r3
 80022f8:	4413      	add	r3, r2
 80022fa:	3361      	adds	r3, #97	; 0x61
 80022fc:	2206      	movs	r2, #6
 80022fe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	b2d2      	uxtb	r2, r2
 8002308:	4611      	mov	r1, r2
 800230a:	4618      	mov	r0, r3
 800230c:	f004 fe89 	bl	8007022 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	015a      	lsls	r2, r3, #5
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	4413      	add	r3, r2
 8002318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002322:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002326:	d112      	bne.n	800234e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	b2d2      	uxtb	r2, r2
 8002330:	4611      	mov	r1, r2
 8002332:	4618      	mov	r0, r3
 8002334:	f004 fe75 	bl	8007022 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	015a      	lsls	r2, r3, #5
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	4413      	add	r3, r2
 8002340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002344:	461a      	mov	r2, r3
 8002346:	f44f 7300 	mov.w	r3, #512	; 0x200
 800234a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800234c:	e24e      	b.n	80027ec <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	015a      	lsls	r2, r3, #5
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	4413      	add	r3, r2
 8002356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	2b01      	cmp	r3, #1
 8002362:	f040 80df 	bne.w	8002524 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d019      	beq.n	80023a2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	212c      	movs	r1, #44	; 0x2c
 8002374:	fb01 f303 	mul.w	r3, r1, r3
 8002378:	4413      	add	r3, r2
 800237a:	3348      	adds	r3, #72	; 0x48
 800237c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	0159      	lsls	r1, r3, #5
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	440b      	add	r3, r1
 8002386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002390:	1ad2      	subs	r2, r2, r3
 8002392:	6879      	ldr	r1, [r7, #4]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	202c      	movs	r0, #44	; 0x2c
 8002398:	fb00 f303 	mul.w	r3, r0, r3
 800239c:	440b      	add	r3, r1
 800239e:	3350      	adds	r3, #80	; 0x50
 80023a0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	212c      	movs	r1, #44	; 0x2c
 80023a8:	fb01 f303 	mul.w	r3, r1, r3
 80023ac:	4413      	add	r3, r2
 80023ae:	3361      	adds	r3, #97	; 0x61
 80023b0:	2201      	movs	r2, #1
 80023b2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	212c      	movs	r1, #44	; 0x2c
 80023ba:	fb01 f303 	mul.w	r3, r1, r3
 80023be:	4413      	add	r3, r2
 80023c0:	335c      	adds	r3, #92	; 0x5c
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	015a      	lsls	r2, r3, #5
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	4413      	add	r3, r2
 80023ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d2:	461a      	mov	r2, r3
 80023d4:	2301      	movs	r3, #1
 80023d6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	212c      	movs	r1, #44	; 0x2c
 80023de:	fb01 f303 	mul.w	r3, r1, r3
 80023e2:	4413      	add	r3, r2
 80023e4:	333f      	adds	r3, #63	; 0x3f
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d009      	beq.n	8002400 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	212c      	movs	r1, #44	; 0x2c
 80023f2:	fb01 f303 	mul.w	r3, r1, r3
 80023f6:	4413      	add	r3, r2
 80023f8:	333f      	adds	r3, #63	; 0x3f
 80023fa:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d111      	bne.n	8002424 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	4611      	mov	r1, r2
 800240a:	4618      	mov	r0, r3
 800240c:	f004 fe09 	bl	8007022 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	015a      	lsls	r2, r3, #5
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	4413      	add	r3, r2
 8002418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800241c:	461a      	mov	r2, r3
 800241e:	2310      	movs	r3, #16
 8002420:	6093      	str	r3, [r2, #8]
 8002422:	e03a      	b.n	800249a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	212c      	movs	r1, #44	; 0x2c
 800242a:	fb01 f303 	mul.w	r3, r1, r3
 800242e:	4413      	add	r3, r2
 8002430:	333f      	adds	r3, #63	; 0x3f
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b03      	cmp	r3, #3
 8002436:	d009      	beq.n	800244c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	212c      	movs	r1, #44	; 0x2c
 800243e:	fb01 f303 	mul.w	r3, r1, r3
 8002442:	4413      	add	r3, r2
 8002444:	333f      	adds	r3, #63	; 0x3f
 8002446:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002448:	2b01      	cmp	r3, #1
 800244a:	d126      	bne.n	800249a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	015a      	lsls	r2, r3, #5
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	4413      	add	r3, r2
 8002454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	0151      	lsls	r1, r2, #5
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	440a      	add	r2, r1
 8002462:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002466:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800246a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	212c      	movs	r1, #44	; 0x2c
 8002472:	fb01 f303 	mul.w	r3, r1, r3
 8002476:	4413      	add	r3, r2
 8002478:	3360      	adds	r3, #96	; 0x60
 800247a:	2201      	movs	r2, #1
 800247c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	b2d9      	uxtb	r1, r3
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	202c      	movs	r0, #44	; 0x2c
 8002488:	fb00 f303 	mul.w	r3, r0, r3
 800248c:	4413      	add	r3, r2
 800248e:	3360      	adds	r3, #96	; 0x60
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	461a      	mov	r2, r3
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f006 f8cd 	bl	8008634 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d12b      	bne.n	80024fa <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	212c      	movs	r1, #44	; 0x2c
 80024a8:	fb01 f303 	mul.w	r3, r1, r3
 80024ac:	4413      	add	r3, r2
 80024ae:	3348      	adds	r3, #72	; 0x48
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	202c      	movs	r0, #44	; 0x2c
 80024b8:	fb00 f202 	mul.w	r2, r0, r2
 80024bc:	440a      	add	r2, r1
 80024be:	3240      	adds	r2, #64	; 0x40
 80024c0:	8812      	ldrh	r2, [r2, #0]
 80024c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f000 818e 	beq.w	80027ec <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	212c      	movs	r1, #44	; 0x2c
 80024d6:	fb01 f303 	mul.w	r3, r1, r3
 80024da:	4413      	add	r3, r2
 80024dc:	3354      	adds	r3, #84	; 0x54
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	f083 0301 	eor.w	r3, r3, #1
 80024e4:	b2d8      	uxtb	r0, r3
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	212c      	movs	r1, #44	; 0x2c
 80024ec:	fb01 f303 	mul.w	r3, r1, r3
 80024f0:	4413      	add	r3, r2
 80024f2:	3354      	adds	r3, #84	; 0x54
 80024f4:	4602      	mov	r2, r0
 80024f6:	701a      	strb	r2, [r3, #0]
}
 80024f8:	e178      	b.n	80027ec <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	212c      	movs	r1, #44	; 0x2c
 8002500:	fb01 f303 	mul.w	r3, r1, r3
 8002504:	4413      	add	r3, r2
 8002506:	3354      	adds	r3, #84	; 0x54
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	f083 0301 	eor.w	r3, r3, #1
 800250e:	b2d8      	uxtb	r0, r3
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	212c      	movs	r1, #44	; 0x2c
 8002516:	fb01 f303 	mul.w	r3, r1, r3
 800251a:	4413      	add	r3, r2
 800251c:	3354      	adds	r3, #84	; 0x54
 800251e:	4602      	mov	r2, r0
 8002520:	701a      	strb	r2, [r3, #0]
}
 8002522:	e163      	b.n	80027ec <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	015a      	lsls	r2, r3, #5
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	4413      	add	r3, r2
 800252c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b02      	cmp	r3, #2
 8002538:	f040 80f6 	bne.w	8002728 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	212c      	movs	r1, #44	; 0x2c
 8002542:	fb01 f303 	mul.w	r3, r1, r3
 8002546:	4413      	add	r3, r2
 8002548:	3361      	adds	r3, #97	; 0x61
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d109      	bne.n	8002564 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	212c      	movs	r1, #44	; 0x2c
 8002556:	fb01 f303 	mul.w	r3, r1, r3
 800255a:	4413      	add	r3, r2
 800255c:	3360      	adds	r3, #96	; 0x60
 800255e:	2201      	movs	r2, #1
 8002560:	701a      	strb	r2, [r3, #0]
 8002562:	e0c9      	b.n	80026f8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	212c      	movs	r1, #44	; 0x2c
 800256a:	fb01 f303 	mul.w	r3, r1, r3
 800256e:	4413      	add	r3, r2
 8002570:	3361      	adds	r3, #97	; 0x61
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	2b05      	cmp	r3, #5
 8002576:	d109      	bne.n	800258c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	212c      	movs	r1, #44	; 0x2c
 800257e:	fb01 f303 	mul.w	r3, r1, r3
 8002582:	4413      	add	r3, r2
 8002584:	3360      	adds	r3, #96	; 0x60
 8002586:	2205      	movs	r2, #5
 8002588:	701a      	strb	r2, [r3, #0]
 800258a:	e0b5      	b.n	80026f8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	212c      	movs	r1, #44	; 0x2c
 8002592:	fb01 f303 	mul.w	r3, r1, r3
 8002596:	4413      	add	r3, r2
 8002598:	3361      	adds	r3, #97	; 0x61
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b06      	cmp	r3, #6
 800259e:	d009      	beq.n	80025b4 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	212c      	movs	r1, #44	; 0x2c
 80025a6:	fb01 f303 	mul.w	r3, r1, r3
 80025aa:	4413      	add	r3, r2
 80025ac:	3361      	adds	r3, #97	; 0x61
 80025ae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80025b0:	2b08      	cmp	r3, #8
 80025b2:	d150      	bne.n	8002656 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	212c      	movs	r1, #44	; 0x2c
 80025ba:	fb01 f303 	mul.w	r3, r1, r3
 80025be:	4413      	add	r3, r2
 80025c0:	335c      	adds	r3, #92	; 0x5c
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	1c5a      	adds	r2, r3, #1
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	202c      	movs	r0, #44	; 0x2c
 80025cc:	fb00 f303 	mul.w	r3, r0, r3
 80025d0:	440b      	add	r3, r1
 80025d2:	335c      	adds	r3, #92	; 0x5c
 80025d4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	212c      	movs	r1, #44	; 0x2c
 80025dc:	fb01 f303 	mul.w	r3, r1, r3
 80025e0:	4413      	add	r3, r2
 80025e2:	335c      	adds	r3, #92	; 0x5c
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d912      	bls.n	8002610 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	212c      	movs	r1, #44	; 0x2c
 80025f0:	fb01 f303 	mul.w	r3, r1, r3
 80025f4:	4413      	add	r3, r2
 80025f6:	335c      	adds	r3, #92	; 0x5c
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	212c      	movs	r1, #44	; 0x2c
 8002602:	fb01 f303 	mul.w	r3, r1, r3
 8002606:	4413      	add	r3, r2
 8002608:	3360      	adds	r3, #96	; 0x60
 800260a:	2204      	movs	r2, #4
 800260c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800260e:	e073      	b.n	80026f8 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	212c      	movs	r1, #44	; 0x2c
 8002616:	fb01 f303 	mul.w	r3, r1, r3
 800261a:	4413      	add	r3, r2
 800261c:	3360      	adds	r3, #96	; 0x60
 800261e:	2202      	movs	r2, #2
 8002620:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	015a      	lsls	r2, r3, #5
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	4413      	add	r3, r2
 800262a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002638:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002640:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	015a      	lsls	r2, r3, #5
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	4413      	add	r3, r2
 800264a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800264e:	461a      	mov	r2, r3
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002654:	e050      	b.n	80026f8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	212c      	movs	r1, #44	; 0x2c
 800265c:	fb01 f303 	mul.w	r3, r1, r3
 8002660:	4413      	add	r3, r2
 8002662:	3361      	adds	r3, #97	; 0x61
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	2b03      	cmp	r3, #3
 8002668:	d122      	bne.n	80026b0 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	212c      	movs	r1, #44	; 0x2c
 8002670:	fb01 f303 	mul.w	r3, r1, r3
 8002674:	4413      	add	r3, r2
 8002676:	3360      	adds	r3, #96	; 0x60
 8002678:	2202      	movs	r2, #2
 800267a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	015a      	lsls	r2, r3, #5
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	4413      	add	r3, r2
 8002684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002692:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800269a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	015a      	lsls	r2, r3, #5
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	4413      	add	r3, r2
 80026a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a8:	461a      	mov	r2, r3
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	e023      	b.n	80026f8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	212c      	movs	r1, #44	; 0x2c
 80026b6:	fb01 f303 	mul.w	r3, r1, r3
 80026ba:	4413      	add	r3, r2
 80026bc:	3361      	adds	r3, #97	; 0x61
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b07      	cmp	r3, #7
 80026c2:	d119      	bne.n	80026f8 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	212c      	movs	r1, #44	; 0x2c
 80026ca:	fb01 f303 	mul.w	r3, r1, r3
 80026ce:	4413      	add	r3, r2
 80026d0:	335c      	adds	r3, #92	; 0x5c
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	1c5a      	adds	r2, r3, #1
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	202c      	movs	r0, #44	; 0x2c
 80026dc:	fb00 f303 	mul.w	r3, r0, r3
 80026e0:	440b      	add	r3, r1
 80026e2:	335c      	adds	r3, #92	; 0x5c
 80026e4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	212c      	movs	r1, #44	; 0x2c
 80026ec:	fb01 f303 	mul.w	r3, r1, r3
 80026f0:	4413      	add	r3, r2
 80026f2:	3360      	adds	r3, #96	; 0x60
 80026f4:	2204      	movs	r2, #4
 80026f6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	015a      	lsls	r2, r3, #5
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	4413      	add	r3, r2
 8002700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002704:	461a      	mov	r2, r3
 8002706:	2302      	movs	r3, #2
 8002708:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	b2d9      	uxtb	r1, r3
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	202c      	movs	r0, #44	; 0x2c
 8002714:	fb00 f303 	mul.w	r3, r0, r3
 8002718:	4413      	add	r3, r2
 800271a:	3360      	adds	r3, #96	; 0x60
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	461a      	mov	r2, r3
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f005 ff87 	bl	8008634 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002726:	e061      	b.n	80027ec <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	015a      	lsls	r2, r3, #5
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	4413      	add	r3, r2
 8002730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f003 0310 	and.w	r3, r3, #16
 800273a:	2b10      	cmp	r3, #16
 800273c:	d156      	bne.n	80027ec <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	212c      	movs	r1, #44	; 0x2c
 8002744:	fb01 f303 	mul.w	r3, r1, r3
 8002748:	4413      	add	r3, r2
 800274a:	333f      	adds	r3, #63	; 0x3f
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	2b03      	cmp	r3, #3
 8002750:	d111      	bne.n	8002776 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	212c      	movs	r1, #44	; 0x2c
 8002758:	fb01 f303 	mul.w	r3, r1, r3
 800275c:	4413      	add	r3, r2
 800275e:	335c      	adds	r3, #92	; 0x5c
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	4611      	mov	r1, r2
 800276e:	4618      	mov	r0, r3
 8002770:	f004 fc57 	bl	8007022 <USB_HC_Halt>
 8002774:	e031      	b.n	80027da <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	212c      	movs	r1, #44	; 0x2c
 800277c:	fb01 f303 	mul.w	r3, r1, r3
 8002780:	4413      	add	r3, r2
 8002782:	333f      	adds	r3, #63	; 0x3f
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d009      	beq.n	800279e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	212c      	movs	r1, #44	; 0x2c
 8002790:	fb01 f303 	mul.w	r3, r1, r3
 8002794:	4413      	add	r3, r2
 8002796:	333f      	adds	r3, #63	; 0x3f
 8002798:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800279a:	2b02      	cmp	r3, #2
 800279c:	d11d      	bne.n	80027da <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	212c      	movs	r1, #44	; 0x2c
 80027a4:	fb01 f303 	mul.w	r3, r1, r3
 80027a8:	4413      	add	r3, r2
 80027aa:	335c      	adds	r3, #92	; 0x5c
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d110      	bne.n	80027da <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	212c      	movs	r1, #44	; 0x2c
 80027be:	fb01 f303 	mul.w	r3, r1, r3
 80027c2:	4413      	add	r3, r2
 80027c4:	3361      	adds	r3, #97	; 0x61
 80027c6:	2203      	movs	r2, #3
 80027c8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	b2d2      	uxtb	r2, r2
 80027d2:	4611      	mov	r1, r2
 80027d4:	4618      	mov	r0, r3
 80027d6:	f004 fc24 	bl	8007022 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	015a      	lsls	r2, r3, #5
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	4413      	add	r3, r2
 80027e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e6:	461a      	mov	r2, r3
 80027e8:	2310      	movs	r3, #16
 80027ea:	6093      	str	r3, [r2, #8]
}
 80027ec:	bf00      	nop
 80027ee:	3718      	adds	r7, #24
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b088      	sub	sp, #32
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	460b      	mov	r3, r1
 80027fe:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800280a:	78fb      	ldrb	r3, [r7, #3]
 800280c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	015a      	lsls	r2, r3, #5
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	4413      	add	r3, r2
 8002816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f003 0304 	and.w	r3, r3, #4
 8002820:	2b04      	cmp	r3, #4
 8002822:	d11a      	bne.n	800285a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	015a      	lsls	r2, r3, #5
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	4413      	add	r3, r2
 800282c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002830:	461a      	mov	r2, r3
 8002832:	2304      	movs	r3, #4
 8002834:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	212c      	movs	r1, #44	; 0x2c
 800283c:	fb01 f303 	mul.w	r3, r1, r3
 8002840:	4413      	add	r3, r2
 8002842:	3361      	adds	r3, #97	; 0x61
 8002844:	2206      	movs	r2, #6
 8002846:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	697a      	ldr	r2, [r7, #20]
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	4611      	mov	r1, r2
 8002852:	4618      	mov	r0, r3
 8002854:	f004 fbe5 	bl	8007022 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002858:	e331      	b.n	8002ebe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	015a      	lsls	r2, r3, #5
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	4413      	add	r3, r2
 8002862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 0320 	and.w	r3, r3, #32
 800286c:	2b20      	cmp	r3, #32
 800286e:	d12e      	bne.n	80028ce <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	015a      	lsls	r2, r3, #5
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	4413      	add	r3, r2
 8002878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287c:	461a      	mov	r2, r3
 800287e:	2320      	movs	r3, #32
 8002880:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	212c      	movs	r1, #44	; 0x2c
 8002888:	fb01 f303 	mul.w	r3, r1, r3
 800288c:	4413      	add	r3, r2
 800288e:	333d      	adds	r3, #61	; 0x3d
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	2b01      	cmp	r3, #1
 8002894:	f040 8313 	bne.w	8002ebe <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	212c      	movs	r1, #44	; 0x2c
 800289e:	fb01 f303 	mul.w	r3, r1, r3
 80028a2:	4413      	add	r3, r2
 80028a4:	333d      	adds	r3, #61	; 0x3d
 80028a6:	2200      	movs	r2, #0
 80028a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	212c      	movs	r1, #44	; 0x2c
 80028b0:	fb01 f303 	mul.w	r3, r1, r3
 80028b4:	4413      	add	r3, r2
 80028b6:	3360      	adds	r3, #96	; 0x60
 80028b8:	2202      	movs	r2, #2
 80028ba:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	4611      	mov	r1, r2
 80028c6:	4618      	mov	r0, r3
 80028c8:	f004 fbab 	bl	8007022 <USB_HC_Halt>
}
 80028cc:	e2f7      	b.n	8002ebe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	015a      	lsls	r2, r3, #5
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	4413      	add	r3, r2
 80028d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028e4:	d112      	bne.n	800290c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	015a      	lsls	r2, r3, #5
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	4413      	add	r3, r2
 80028ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f2:	461a      	mov	r2, r3
 80028f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028f8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	b2d2      	uxtb	r2, r2
 8002902:	4611      	mov	r1, r2
 8002904:	4618      	mov	r0, r3
 8002906:	f004 fb8c 	bl	8007022 <USB_HC_Halt>
}
 800290a:	e2d8      	b.n	8002ebe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	015a      	lsls	r2, r3, #5
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	4413      	add	r3, r2
 8002914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b01      	cmp	r3, #1
 8002920:	d140      	bne.n	80029a4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	212c      	movs	r1, #44	; 0x2c
 8002928:	fb01 f303 	mul.w	r3, r1, r3
 800292c:	4413      	add	r3, r2
 800292e:	335c      	adds	r3, #92	; 0x5c
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	015a      	lsls	r2, r3, #5
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	4413      	add	r3, r2
 800293c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002946:	2b40      	cmp	r3, #64	; 0x40
 8002948:	d111      	bne.n	800296e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	212c      	movs	r1, #44	; 0x2c
 8002950:	fb01 f303 	mul.w	r3, r1, r3
 8002954:	4413      	add	r3, r2
 8002956:	333d      	adds	r3, #61	; 0x3d
 8002958:	2201      	movs	r2, #1
 800295a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	015a      	lsls	r2, r3, #5
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	4413      	add	r3, r2
 8002964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002968:	461a      	mov	r2, r3
 800296a:	2340      	movs	r3, #64	; 0x40
 800296c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	015a      	lsls	r2, r3, #5
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	4413      	add	r3, r2
 8002976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297a:	461a      	mov	r2, r3
 800297c:	2301      	movs	r3, #1
 800297e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	212c      	movs	r1, #44	; 0x2c
 8002986:	fb01 f303 	mul.w	r3, r1, r3
 800298a:	4413      	add	r3, r2
 800298c:	3361      	adds	r3, #97	; 0x61
 800298e:	2201      	movs	r2, #1
 8002990:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	4611      	mov	r1, r2
 800299c:	4618      	mov	r0, r3
 800299e:	f004 fb40 	bl	8007022 <USB_HC_Halt>
}
 80029a2:	e28c      	b.n	8002ebe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	015a      	lsls	r2, r3, #5
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	4413      	add	r3, r2
 80029ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b6:	2b40      	cmp	r3, #64	; 0x40
 80029b8:	d12c      	bne.n	8002a14 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	212c      	movs	r1, #44	; 0x2c
 80029c0:	fb01 f303 	mul.w	r3, r1, r3
 80029c4:	4413      	add	r3, r2
 80029c6:	3361      	adds	r3, #97	; 0x61
 80029c8:	2204      	movs	r2, #4
 80029ca:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	212c      	movs	r1, #44	; 0x2c
 80029d2:	fb01 f303 	mul.w	r3, r1, r3
 80029d6:	4413      	add	r3, r2
 80029d8:	333d      	adds	r3, #61	; 0x3d
 80029da:	2201      	movs	r2, #1
 80029dc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	212c      	movs	r1, #44	; 0x2c
 80029e4:	fb01 f303 	mul.w	r3, r1, r3
 80029e8:	4413      	add	r3, r2
 80029ea:	335c      	adds	r3, #92	; 0x5c
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	4611      	mov	r1, r2
 80029fa:	4618      	mov	r0, r3
 80029fc:	f004 fb11 	bl	8007022 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	015a      	lsls	r2, r3, #5
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	4413      	add	r3, r2
 8002a08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	2340      	movs	r3, #64	; 0x40
 8002a10:	6093      	str	r3, [r2, #8]
}
 8002a12:	e254      	b.n	8002ebe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	015a      	lsls	r2, r3, #5
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 0308 	and.w	r3, r3, #8
 8002a26:	2b08      	cmp	r3, #8
 8002a28:	d11a      	bne.n	8002a60 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	015a      	lsls	r2, r3, #5
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	4413      	add	r3, r2
 8002a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a36:	461a      	mov	r2, r3
 8002a38:	2308      	movs	r3, #8
 8002a3a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	212c      	movs	r1, #44	; 0x2c
 8002a42:	fb01 f303 	mul.w	r3, r1, r3
 8002a46:	4413      	add	r3, r2
 8002a48:	3361      	adds	r3, #97	; 0x61
 8002a4a:	2205      	movs	r2, #5
 8002a4c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	b2d2      	uxtb	r2, r2
 8002a56:	4611      	mov	r1, r2
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f004 fae2 	bl	8007022 <USB_HC_Halt>
}
 8002a5e:	e22e      	b.n	8002ebe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	015a      	lsls	r2, r3, #5
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	4413      	add	r3, r2
 8002a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 0310 	and.w	r3, r3, #16
 8002a72:	2b10      	cmp	r3, #16
 8002a74:	d140      	bne.n	8002af8 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	212c      	movs	r1, #44	; 0x2c
 8002a7c:	fb01 f303 	mul.w	r3, r1, r3
 8002a80:	4413      	add	r3, r2
 8002a82:	335c      	adds	r3, #92	; 0x5c
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	212c      	movs	r1, #44	; 0x2c
 8002a8e:	fb01 f303 	mul.w	r3, r1, r3
 8002a92:	4413      	add	r3, r2
 8002a94:	3361      	adds	r3, #97	; 0x61
 8002a96:	2203      	movs	r2, #3
 8002a98:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	212c      	movs	r1, #44	; 0x2c
 8002aa0:	fb01 f303 	mul.w	r3, r1, r3
 8002aa4:	4413      	add	r3, r2
 8002aa6:	333d      	adds	r3, #61	; 0x3d
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d112      	bne.n	8002ad4 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	212c      	movs	r1, #44	; 0x2c
 8002ab4:	fb01 f303 	mul.w	r3, r1, r3
 8002ab8:	4413      	add	r3, r2
 8002aba:	333c      	adds	r3, #60	; 0x3c
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d108      	bne.n	8002ad4 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	212c      	movs	r1, #44	; 0x2c
 8002ac8:	fb01 f303 	mul.w	r3, r1, r3
 8002acc:	4413      	add	r3, r2
 8002ace:	333d      	adds	r3, #61	; 0x3d
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	4611      	mov	r1, r2
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f004 fa9f 	bl	8007022 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	015a      	lsls	r2, r3, #5
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	4413      	add	r3, r2
 8002aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af0:	461a      	mov	r2, r3
 8002af2:	2310      	movs	r3, #16
 8002af4:	6093      	str	r3, [r2, #8]
}
 8002af6:	e1e2      	b.n	8002ebe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	015a      	lsls	r2, r3, #5
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	4413      	add	r3, r2
 8002b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b0a:	2b80      	cmp	r3, #128	; 0x80
 8002b0c:	d164      	bne.n	8002bd8 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d111      	bne.n	8002b3a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	212c      	movs	r1, #44	; 0x2c
 8002b1c:	fb01 f303 	mul.w	r3, r1, r3
 8002b20:	4413      	add	r3, r2
 8002b22:	3361      	adds	r3, #97	; 0x61
 8002b24:	2206      	movs	r2, #6
 8002b26:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	697a      	ldr	r2, [r7, #20]
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	4611      	mov	r1, r2
 8002b32:	4618      	mov	r0, r3
 8002b34:	f004 fa75 	bl	8007022 <USB_HC_Halt>
 8002b38:	e044      	b.n	8002bc4 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	212c      	movs	r1, #44	; 0x2c
 8002b40:	fb01 f303 	mul.w	r3, r1, r3
 8002b44:	4413      	add	r3, r2
 8002b46:	335c      	adds	r3, #92	; 0x5c
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	1c5a      	adds	r2, r3, #1
 8002b4c:	6879      	ldr	r1, [r7, #4]
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	202c      	movs	r0, #44	; 0x2c
 8002b52:	fb00 f303 	mul.w	r3, r0, r3
 8002b56:	440b      	add	r3, r1
 8002b58:	335c      	adds	r3, #92	; 0x5c
 8002b5a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	212c      	movs	r1, #44	; 0x2c
 8002b62:	fb01 f303 	mul.w	r3, r1, r3
 8002b66:	4413      	add	r3, r2
 8002b68:	335c      	adds	r3, #92	; 0x5c
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d920      	bls.n	8002bb2 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	212c      	movs	r1, #44	; 0x2c
 8002b76:	fb01 f303 	mul.w	r3, r1, r3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	335c      	adds	r3, #92	; 0x5c
 8002b7e:	2200      	movs	r2, #0
 8002b80:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	212c      	movs	r1, #44	; 0x2c
 8002b88:	fb01 f303 	mul.w	r3, r1, r3
 8002b8c:	4413      	add	r3, r2
 8002b8e:	3360      	adds	r3, #96	; 0x60
 8002b90:	2204      	movs	r2, #4
 8002b92:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	b2d9      	uxtb	r1, r3
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	202c      	movs	r0, #44	; 0x2c
 8002b9e:	fb00 f303 	mul.w	r3, r0, r3
 8002ba2:	4413      	add	r3, r2
 8002ba4:	3360      	adds	r3, #96	; 0x60
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f005 fd42 	bl	8008634 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002bb0:	e008      	b.n	8002bc4 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	212c      	movs	r1, #44	; 0x2c
 8002bb8:	fb01 f303 	mul.w	r3, r1, r3
 8002bbc:	4413      	add	r3, r2
 8002bbe:	3360      	adds	r3, #96	; 0x60
 8002bc0:	2202      	movs	r2, #2
 8002bc2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	015a      	lsls	r2, r3, #5
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	4413      	add	r3, r2
 8002bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	2380      	movs	r3, #128	; 0x80
 8002bd4:	6093      	str	r3, [r2, #8]
}
 8002bd6:	e172      	b.n	8002ebe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	015a      	lsls	r2, r3, #5
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	4413      	add	r3, r2
 8002be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bee:	d11b      	bne.n	8002c28 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	212c      	movs	r1, #44	; 0x2c
 8002bf6:	fb01 f303 	mul.w	r3, r1, r3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3361      	adds	r3, #97	; 0x61
 8002bfe:	2208      	movs	r2, #8
 8002c00:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	b2d2      	uxtb	r2, r2
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f004 fa08 	bl	8007022 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	015a      	lsls	r2, r3, #5
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	4413      	add	r3, r2
 8002c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c1e:	461a      	mov	r2, r3
 8002c20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c24:	6093      	str	r3, [r2, #8]
}
 8002c26:	e14a      	b.n	8002ebe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	015a      	lsls	r2, r3, #5
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	4413      	add	r3, r2
 8002c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	f040 813f 	bne.w	8002ebe <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	212c      	movs	r1, #44	; 0x2c
 8002c46:	fb01 f303 	mul.w	r3, r1, r3
 8002c4a:	4413      	add	r3, r2
 8002c4c:	3361      	adds	r3, #97	; 0x61
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d17d      	bne.n	8002d50 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	212c      	movs	r1, #44	; 0x2c
 8002c5a:	fb01 f303 	mul.w	r3, r1, r3
 8002c5e:	4413      	add	r3, r2
 8002c60:	3360      	adds	r3, #96	; 0x60
 8002c62:	2201      	movs	r2, #1
 8002c64:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	212c      	movs	r1, #44	; 0x2c
 8002c6c:	fb01 f303 	mul.w	r3, r1, r3
 8002c70:	4413      	add	r3, r2
 8002c72:	333f      	adds	r3, #63	; 0x3f
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d00a      	beq.n	8002c90 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	212c      	movs	r1, #44	; 0x2c
 8002c80:	fb01 f303 	mul.w	r3, r1, r3
 8002c84:	4413      	add	r3, r2
 8002c86:	333f      	adds	r3, #63	; 0x3f
 8002c88:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002c8a:	2b03      	cmp	r3, #3
 8002c8c:	f040 8100 	bne.w	8002e90 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d113      	bne.n	8002cc0 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	212c      	movs	r1, #44	; 0x2c
 8002c9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ca2:	4413      	add	r3, r2
 8002ca4:	3355      	adds	r3, #85	; 0x55
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	f083 0301 	eor.w	r3, r3, #1
 8002cac:	b2d8      	uxtb	r0, r3
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	212c      	movs	r1, #44	; 0x2c
 8002cb4:	fb01 f303 	mul.w	r3, r1, r3
 8002cb8:	4413      	add	r3, r2
 8002cba:	3355      	adds	r3, #85	; 0x55
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	f040 80e3 	bne.w	8002e90 <HCD_HC_OUT_IRQHandler+0x69c>
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	212c      	movs	r1, #44	; 0x2c
 8002cd0:	fb01 f303 	mul.w	r3, r1, r3
 8002cd4:	4413      	add	r3, r2
 8002cd6:	334c      	adds	r3, #76	; 0x4c
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f000 80d8 	beq.w	8002e90 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	212c      	movs	r1, #44	; 0x2c
 8002ce6:	fb01 f303 	mul.w	r3, r1, r3
 8002cea:	4413      	add	r3, r2
 8002cec:	334c      	adds	r3, #76	; 0x4c
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6879      	ldr	r1, [r7, #4]
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	202c      	movs	r0, #44	; 0x2c
 8002cf6:	fb00 f202 	mul.w	r2, r0, r2
 8002cfa:	440a      	add	r2, r1
 8002cfc:	3240      	adds	r2, #64	; 0x40
 8002cfe:	8812      	ldrh	r2, [r2, #0]
 8002d00:	4413      	add	r3, r2
 8002d02:	3b01      	subs	r3, #1
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	202c      	movs	r0, #44	; 0x2c
 8002d0a:	fb00 f202 	mul.w	r2, r0, r2
 8002d0e:	440a      	add	r2, r1
 8002d10:	3240      	adds	r2, #64	; 0x40
 8002d12:	8812      	ldrh	r2, [r2, #0]
 8002d14:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d18:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 80b5 	beq.w	8002e90 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	212c      	movs	r1, #44	; 0x2c
 8002d2c:	fb01 f303 	mul.w	r3, r1, r3
 8002d30:	4413      	add	r3, r2
 8002d32:	3355      	adds	r3, #85	; 0x55
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	f083 0301 	eor.w	r3, r3, #1
 8002d3a:	b2d8      	uxtb	r0, r3
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	212c      	movs	r1, #44	; 0x2c
 8002d42:	fb01 f303 	mul.w	r3, r1, r3
 8002d46:	4413      	add	r3, r2
 8002d48:	3355      	adds	r3, #85	; 0x55
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	701a      	strb	r2, [r3, #0]
 8002d4e:	e09f      	b.n	8002e90 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	212c      	movs	r1, #44	; 0x2c
 8002d56:	fb01 f303 	mul.w	r3, r1, r3
 8002d5a:	4413      	add	r3, r2
 8002d5c:	3361      	adds	r3, #97	; 0x61
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b03      	cmp	r3, #3
 8002d62:	d109      	bne.n	8002d78 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	212c      	movs	r1, #44	; 0x2c
 8002d6a:	fb01 f303 	mul.w	r3, r1, r3
 8002d6e:	4413      	add	r3, r2
 8002d70:	3360      	adds	r3, #96	; 0x60
 8002d72:	2202      	movs	r2, #2
 8002d74:	701a      	strb	r2, [r3, #0]
 8002d76:	e08b      	b.n	8002e90 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	212c      	movs	r1, #44	; 0x2c
 8002d7e:	fb01 f303 	mul.w	r3, r1, r3
 8002d82:	4413      	add	r3, r2
 8002d84:	3361      	adds	r3, #97	; 0x61
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	2b04      	cmp	r3, #4
 8002d8a:	d109      	bne.n	8002da0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	212c      	movs	r1, #44	; 0x2c
 8002d92:	fb01 f303 	mul.w	r3, r1, r3
 8002d96:	4413      	add	r3, r2
 8002d98:	3360      	adds	r3, #96	; 0x60
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	701a      	strb	r2, [r3, #0]
 8002d9e:	e077      	b.n	8002e90 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	212c      	movs	r1, #44	; 0x2c
 8002da6:	fb01 f303 	mul.w	r3, r1, r3
 8002daa:	4413      	add	r3, r2
 8002dac:	3361      	adds	r3, #97	; 0x61
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	2b05      	cmp	r3, #5
 8002db2:	d109      	bne.n	8002dc8 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	212c      	movs	r1, #44	; 0x2c
 8002dba:	fb01 f303 	mul.w	r3, r1, r3
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3360      	adds	r3, #96	; 0x60
 8002dc2:	2205      	movs	r2, #5
 8002dc4:	701a      	strb	r2, [r3, #0]
 8002dc6:	e063      	b.n	8002e90 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	212c      	movs	r1, #44	; 0x2c
 8002dce:	fb01 f303 	mul.w	r3, r1, r3
 8002dd2:	4413      	add	r3, r2
 8002dd4:	3361      	adds	r3, #97	; 0x61
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2b06      	cmp	r3, #6
 8002dda:	d009      	beq.n	8002df0 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	212c      	movs	r1, #44	; 0x2c
 8002de2:	fb01 f303 	mul.w	r3, r1, r3
 8002de6:	4413      	add	r3, r2
 8002de8:	3361      	adds	r3, #97	; 0x61
 8002dea:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002dec:	2b08      	cmp	r3, #8
 8002dee:	d14f      	bne.n	8002e90 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	212c      	movs	r1, #44	; 0x2c
 8002df6:	fb01 f303 	mul.w	r3, r1, r3
 8002dfa:	4413      	add	r3, r2
 8002dfc:	335c      	adds	r3, #92	; 0x5c
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	1c5a      	adds	r2, r3, #1
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	202c      	movs	r0, #44	; 0x2c
 8002e08:	fb00 f303 	mul.w	r3, r0, r3
 8002e0c:	440b      	add	r3, r1
 8002e0e:	335c      	adds	r3, #92	; 0x5c
 8002e10:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	212c      	movs	r1, #44	; 0x2c
 8002e18:	fb01 f303 	mul.w	r3, r1, r3
 8002e1c:	4413      	add	r3, r2
 8002e1e:	335c      	adds	r3, #92	; 0x5c
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d912      	bls.n	8002e4c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	212c      	movs	r1, #44	; 0x2c
 8002e2c:	fb01 f303 	mul.w	r3, r1, r3
 8002e30:	4413      	add	r3, r2
 8002e32:	335c      	adds	r3, #92	; 0x5c
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	212c      	movs	r1, #44	; 0x2c
 8002e3e:	fb01 f303 	mul.w	r3, r1, r3
 8002e42:	4413      	add	r3, r2
 8002e44:	3360      	adds	r3, #96	; 0x60
 8002e46:	2204      	movs	r2, #4
 8002e48:	701a      	strb	r2, [r3, #0]
 8002e4a:	e021      	b.n	8002e90 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	212c      	movs	r1, #44	; 0x2c
 8002e52:	fb01 f303 	mul.w	r3, r1, r3
 8002e56:	4413      	add	r3, r2
 8002e58:	3360      	adds	r3, #96	; 0x60
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	015a      	lsls	r2, r3, #5
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	4413      	add	r3, r2
 8002e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e74:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e7c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	015a      	lsls	r2, r3, #5
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	4413      	add	r3, r2
 8002e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	015a      	lsls	r2, r3, #5
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	4413      	add	r3, r2
 8002e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	b2d9      	uxtb	r1, r3
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	202c      	movs	r0, #44	; 0x2c
 8002eac:	fb00 f303 	mul.w	r3, r0, r3
 8002eb0:	4413      	add	r3, r2
 8002eb2:	3360      	adds	r3, #96	; 0x60
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f005 fbbb 	bl	8008634 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002ebe:	bf00      	nop
 8002ec0:	3720      	adds	r7, #32
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b08a      	sub	sp, #40	; 0x28
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	0c5b      	lsrs	r3, r3, #17
 8002eec:	f003 030f 	and.w	r3, r3, #15
 8002ef0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	091b      	lsrs	r3, r3, #4
 8002ef6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002efa:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d004      	beq.n	8002f0c <HCD_RXQLVL_IRQHandler+0x46>
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	2b05      	cmp	r3, #5
 8002f06:	f000 80a9 	beq.w	800305c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002f0a:	e0aa      	b.n	8003062 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f000 80a6 	beq.w	8003060 <HCD_RXQLVL_IRQHandler+0x19a>
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	212c      	movs	r1, #44	; 0x2c
 8002f1a:	fb01 f303 	mul.w	r3, r1, r3
 8002f1e:	4413      	add	r3, r2
 8002f20:	3344      	adds	r3, #68	; 0x44
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 809b 	beq.w	8003060 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	212c      	movs	r1, #44	; 0x2c
 8002f30:	fb01 f303 	mul.w	r3, r1, r3
 8002f34:	4413      	add	r3, r2
 8002f36:	3350      	adds	r3, #80	; 0x50
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	441a      	add	r2, r3
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	202c      	movs	r0, #44	; 0x2c
 8002f44:	fb00 f303 	mul.w	r3, r0, r3
 8002f48:	440b      	add	r3, r1
 8002f4a:	334c      	adds	r3, #76	; 0x4c
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d87a      	bhi.n	8003048 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6818      	ldr	r0, [r3, #0]
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	212c      	movs	r1, #44	; 0x2c
 8002f5c:	fb01 f303 	mul.w	r3, r1, r3
 8002f60:	4413      	add	r3, r2
 8002f62:	3344      	adds	r3, #68	; 0x44
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	b292      	uxth	r2, r2
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	f003 fbda 	bl	8006724 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	212c      	movs	r1, #44	; 0x2c
 8002f76:	fb01 f303 	mul.w	r3, r1, r3
 8002f7a:	4413      	add	r3, r2
 8002f7c:	3344      	adds	r3, #68	; 0x44
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	441a      	add	r2, r3
 8002f84:	6879      	ldr	r1, [r7, #4]
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	202c      	movs	r0, #44	; 0x2c
 8002f8a:	fb00 f303 	mul.w	r3, r0, r3
 8002f8e:	440b      	add	r3, r1
 8002f90:	3344      	adds	r3, #68	; 0x44
 8002f92:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	212c      	movs	r1, #44	; 0x2c
 8002f9a:	fb01 f303 	mul.w	r3, r1, r3
 8002f9e:	4413      	add	r3, r2
 8002fa0:	3350      	adds	r3, #80	; 0x50
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	441a      	add	r2, r3
 8002fa8:	6879      	ldr	r1, [r7, #4]
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	202c      	movs	r0, #44	; 0x2c
 8002fae:	fb00 f303 	mul.w	r3, r0, r3
 8002fb2:	440b      	add	r3, r1
 8002fb4:	3350      	adds	r3, #80	; 0x50
 8002fb6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	015a      	lsls	r2, r3, #5
 8002fbc:	6a3b      	ldr	r3, [r7, #32]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	0cdb      	lsrs	r3, r3, #19
 8002fc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fcc:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	212c      	movs	r1, #44	; 0x2c
 8002fd4:	fb01 f303 	mul.w	r3, r1, r3
 8002fd8:	4413      	add	r3, r2
 8002fda:	3340      	adds	r3, #64	; 0x40
 8002fdc:	881b      	ldrh	r3, [r3, #0]
 8002fde:	461a      	mov	r2, r3
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d13c      	bne.n	8003060 <HCD_RXQLVL_IRQHandler+0x19a>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d039      	beq.n	8003060 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	015a      	lsls	r2, r3, #5
 8002ff0:	6a3b      	ldr	r3, [r7, #32]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003002:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800300a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	015a      	lsls	r2, r3, #5
 8003010:	6a3b      	ldr	r3, [r7, #32]
 8003012:	4413      	add	r3, r2
 8003014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003018:	461a      	mov	r2, r3
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	212c      	movs	r1, #44	; 0x2c
 8003024:	fb01 f303 	mul.w	r3, r1, r3
 8003028:	4413      	add	r3, r2
 800302a:	3354      	adds	r3, #84	; 0x54
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	f083 0301 	eor.w	r3, r3, #1
 8003032:	b2d8      	uxtb	r0, r3
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	212c      	movs	r1, #44	; 0x2c
 800303a:	fb01 f303 	mul.w	r3, r1, r3
 800303e:	4413      	add	r3, r2
 8003040:	3354      	adds	r3, #84	; 0x54
 8003042:	4602      	mov	r2, r0
 8003044:	701a      	strb	r2, [r3, #0]
      break;
 8003046:	e00b      	b.n	8003060 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	212c      	movs	r1, #44	; 0x2c
 800304e:	fb01 f303 	mul.w	r3, r1, r3
 8003052:	4413      	add	r3, r2
 8003054:	3360      	adds	r3, #96	; 0x60
 8003056:	2204      	movs	r2, #4
 8003058:	701a      	strb	r2, [r3, #0]
      break;
 800305a:	e001      	b.n	8003060 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800305c:	bf00      	nop
 800305e:	e000      	b.n	8003062 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003060:	bf00      	nop
  }
}
 8003062:	bf00      	nop
 8003064:	3728      	adds	r7, #40	; 0x28
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b086      	sub	sp, #24
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003096:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d10b      	bne.n	80030ba <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d102      	bne.n	80030b2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f005 faa5 	bl	80085fc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	f043 0302 	orr.w	r3, r3, #2
 80030b8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f003 0308 	and.w	r3, r3, #8
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	d132      	bne.n	800312a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	f043 0308 	orr.w	r3, r3, #8
 80030ca:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f003 0304 	and.w	r3, r3, #4
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	d126      	bne.n	8003124 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d113      	bne.n	8003106 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80030e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030e8:	d106      	bne.n	80030f8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2102      	movs	r1, #2
 80030f0:	4618      	mov	r0, r3
 80030f2:	f003 fc85 	bl	8006a00 <USB_InitFSLSPClkSel>
 80030f6:	e011      	b.n	800311c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2101      	movs	r1, #1
 80030fe:	4618      	mov	r0, r3
 8003100:	f003 fc7e 	bl	8006a00 <USB_InitFSLSPClkSel>
 8003104:	e00a      	b.n	800311c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d106      	bne.n	800311c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003114:	461a      	mov	r2, r3
 8003116:	f64e 2360 	movw	r3, #60000	; 0xea60
 800311a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f005 fa97 	bl	8008650 <HAL_HCD_PortEnabled_Callback>
 8003122:	e002      	b.n	800312a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f005 faa1 	bl	800866c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f003 0320 	and.w	r3, r3, #32
 8003130:	2b20      	cmp	r3, #32
 8003132:	d103      	bne.n	800313c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	f043 0320 	orr.w	r3, r3, #32
 800313a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003142:	461a      	mov	r2, r3
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	6013      	str	r3, [r2, #0]
}
 8003148:	bf00      	nop
 800314a:	3718      	adds	r7, #24
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e12b      	b.n	80033ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d106      	bne.n	800317c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f7fd fdc6 	bl	8000d08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2224      	movs	r2, #36	; 0x24
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 0201 	bic.w	r2, r2, #1
 8003192:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031b4:	f001 fa20 	bl	80045f8 <HAL_RCC_GetPCLK1Freq>
 80031b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	4a81      	ldr	r2, [pc, #516]	; (80033c4 <HAL_I2C_Init+0x274>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d807      	bhi.n	80031d4 <HAL_I2C_Init+0x84>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	4a80      	ldr	r2, [pc, #512]	; (80033c8 <HAL_I2C_Init+0x278>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	bf94      	ite	ls
 80031cc:	2301      	movls	r3, #1
 80031ce:	2300      	movhi	r3, #0
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	e006      	b.n	80031e2 <HAL_I2C_Init+0x92>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	4a7d      	ldr	r2, [pc, #500]	; (80033cc <HAL_I2C_Init+0x27c>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	bf94      	ite	ls
 80031dc:	2301      	movls	r3, #1
 80031de:	2300      	movhi	r3, #0
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e0e7      	b.n	80033ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	4a78      	ldr	r2, [pc, #480]	; (80033d0 <HAL_I2C_Init+0x280>)
 80031ee:	fba2 2303 	umull	r2, r3, r2, r3
 80031f2:	0c9b      	lsrs	r3, r3, #18
 80031f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68ba      	ldr	r2, [r7, #8]
 8003206:	430a      	orrs	r2, r1
 8003208:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	4a6a      	ldr	r2, [pc, #424]	; (80033c4 <HAL_I2C_Init+0x274>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d802      	bhi.n	8003224 <HAL_I2C_Init+0xd4>
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	3301      	adds	r3, #1
 8003222:	e009      	b.n	8003238 <HAL_I2C_Init+0xe8>
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800322a:	fb02 f303 	mul.w	r3, r2, r3
 800322e:	4a69      	ldr	r2, [pc, #420]	; (80033d4 <HAL_I2C_Init+0x284>)
 8003230:	fba2 2303 	umull	r2, r3, r2, r3
 8003234:	099b      	lsrs	r3, r3, #6
 8003236:	3301      	adds	r3, #1
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	6812      	ldr	r2, [r2, #0]
 800323c:	430b      	orrs	r3, r1
 800323e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800324a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	495c      	ldr	r1, [pc, #368]	; (80033c4 <HAL_I2C_Init+0x274>)
 8003254:	428b      	cmp	r3, r1
 8003256:	d819      	bhi.n	800328c <HAL_I2C_Init+0x13c>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	1e59      	subs	r1, r3, #1
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	fbb1 f3f3 	udiv	r3, r1, r3
 8003266:	1c59      	adds	r1, r3, #1
 8003268:	f640 73fc 	movw	r3, #4092	; 0xffc
 800326c:	400b      	ands	r3, r1
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00a      	beq.n	8003288 <HAL_I2C_Init+0x138>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	1e59      	subs	r1, r3, #1
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003280:	3301      	adds	r3, #1
 8003282:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003286:	e051      	b.n	800332c <HAL_I2C_Init+0x1dc>
 8003288:	2304      	movs	r3, #4
 800328a:	e04f      	b.n	800332c <HAL_I2C_Init+0x1dc>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d111      	bne.n	80032b8 <HAL_I2C_Init+0x168>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	1e58      	subs	r0, r3, #1
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6859      	ldr	r1, [r3, #4]
 800329c:	460b      	mov	r3, r1
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	440b      	add	r3, r1
 80032a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80032a6:	3301      	adds	r3, #1
 80032a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	bf0c      	ite	eq
 80032b0:	2301      	moveq	r3, #1
 80032b2:	2300      	movne	r3, #0
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	e012      	b.n	80032de <HAL_I2C_Init+0x18e>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	1e58      	subs	r0, r3, #1
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6859      	ldr	r1, [r3, #4]
 80032c0:	460b      	mov	r3, r1
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	440b      	add	r3, r1
 80032c6:	0099      	lsls	r1, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80032ce:	3301      	adds	r3, #1
 80032d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	bf0c      	ite	eq
 80032d8:	2301      	moveq	r3, #1
 80032da:	2300      	movne	r3, #0
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <HAL_I2C_Init+0x196>
 80032e2:	2301      	movs	r3, #1
 80032e4:	e022      	b.n	800332c <HAL_I2C_Init+0x1dc>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d10e      	bne.n	800330c <HAL_I2C_Init+0x1bc>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	1e58      	subs	r0, r3, #1
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6859      	ldr	r1, [r3, #4]
 80032f6:	460b      	mov	r3, r1
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	440b      	add	r3, r1
 80032fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003300:	3301      	adds	r3, #1
 8003302:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003306:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800330a:	e00f      	b.n	800332c <HAL_I2C_Init+0x1dc>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	1e58      	subs	r0, r3, #1
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6859      	ldr	r1, [r3, #4]
 8003314:	460b      	mov	r3, r1
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	440b      	add	r3, r1
 800331a:	0099      	lsls	r1, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003322:	3301      	adds	r3, #1
 8003324:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003328:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800332c:	6879      	ldr	r1, [r7, #4]
 800332e:	6809      	ldr	r1, [r1, #0]
 8003330:	4313      	orrs	r3, r2
 8003332:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	69da      	ldr	r2, [r3, #28]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	431a      	orrs	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	430a      	orrs	r2, r1
 800334e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800335a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	6911      	ldr	r1, [r2, #16]
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	68d2      	ldr	r2, [r2, #12]
 8003366:	4311      	orrs	r1, r2
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	6812      	ldr	r2, [r2, #0]
 800336c:	430b      	orrs	r3, r1
 800336e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	695a      	ldr	r2, [r3, #20]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	431a      	orrs	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	430a      	orrs	r2, r1
 800338a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f042 0201 	orr.w	r2, r2, #1
 800339a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2220      	movs	r2, #32
 80033a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	000186a0 	.word	0x000186a0
 80033c8:	001e847f 	.word	0x001e847f
 80033cc:	003d08ff 	.word	0x003d08ff
 80033d0:	431bde83 	.word	0x431bde83
 80033d4:	10624dd3 	.word	0x10624dd3

080033d8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b088      	sub	sp, #32
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e128      	b.n	800363c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d109      	bne.n	800340a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a90      	ldr	r2, [pc, #576]	; (8003644 <HAL_I2S_Init+0x26c>)
 8003402:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f7fd fcc7 	bl	8000d98 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2202      	movs	r2, #2
 800340e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	69db      	ldr	r3, [r3, #28]
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6812      	ldr	r2, [r2, #0]
 800341c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003420:	f023 030f 	bic.w	r3, r3, #15
 8003424:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2202      	movs	r2, #2
 800342c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	2b02      	cmp	r3, #2
 8003434:	d060      	beq.n	80034f8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d102      	bne.n	8003444 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800343e:	2310      	movs	r3, #16
 8003440:	617b      	str	r3, [r7, #20]
 8003442:	e001      	b.n	8003448 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003444:	2320      	movs	r3, #32
 8003446:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	2b20      	cmp	r3, #32
 800344e:	d802      	bhi.n	8003456 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003456:	2001      	movs	r0, #1
 8003458:	f001 f9d8 	bl	800480c <HAL_RCCEx_GetPeriphCLKFreq>
 800345c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003466:	d125      	bne.n	80034b4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d010      	beq.n	8003492 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	fbb2 f2f3 	udiv	r2, r2, r3
 800347a:	4613      	mov	r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	4413      	add	r3, r2
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	461a      	mov	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	695b      	ldr	r3, [r3, #20]
 8003488:	fbb2 f3f3 	udiv	r3, r2, r3
 800348c:	3305      	adds	r3, #5
 800348e:	613b      	str	r3, [r7, #16]
 8003490:	e01f      	b.n	80034d2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	fbb2 f2f3 	udiv	r2, r2, r3
 800349c:	4613      	mov	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	461a      	mov	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ae:	3305      	adds	r3, #5
 80034b0:	613b      	str	r3, [r7, #16]
 80034b2:	e00e      	b.n	80034d2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80034bc:	4613      	mov	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	461a      	mov	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ce:	3305      	adds	r3, #5
 80034d0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	4a5c      	ldr	r2, [pc, #368]	; (8003648 <HAL_I2S_Init+0x270>)
 80034d6:	fba2 2303 	umull	r2, r3, r2, r3
 80034da:	08db      	lsrs	r3, r3, #3
 80034dc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	085b      	lsrs	r3, r3, #1
 80034ee:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	021b      	lsls	r3, r3, #8
 80034f4:	61bb      	str	r3, [r7, #24]
 80034f6:	e003      	b.n	8003500 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80034f8:	2302      	movs	r3, #2
 80034fa:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80034fc:	2300      	movs	r3, #0
 80034fe:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d902      	bls.n	800350c <HAL_I2S_Init+0x134>
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	2bff      	cmp	r3, #255	; 0xff
 800350a:	d907      	bls.n	800351c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003510:	f043 0210 	orr.w	r2, r3, #16
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e08f      	b.n	800363c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	691a      	ldr	r2, [r3, #16]
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	ea42 0103 	orr.w	r1, r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	69fa      	ldr	r2, [r7, #28]
 800352c:	430a      	orrs	r2, r1
 800352e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800353a:	f023 030f 	bic.w	r3, r3, #15
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	6851      	ldr	r1, [r2, #4]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6892      	ldr	r2, [r2, #8]
 8003546:	4311      	orrs	r1, r2
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	68d2      	ldr	r2, [r2, #12]
 800354c:	4311      	orrs	r1, r2
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	6992      	ldr	r2, [r2, #24]
 8003552:	430a      	orrs	r2, r1
 8003554:	431a      	orrs	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800355e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a1b      	ldr	r3, [r3, #32]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d161      	bne.n	800362c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a38      	ldr	r2, [pc, #224]	; (800364c <HAL_I2S_Init+0x274>)
 800356c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a37      	ldr	r2, [pc, #220]	; (8003650 <HAL_I2S_Init+0x278>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d101      	bne.n	800357c <HAL_I2S_Init+0x1a4>
 8003578:	4b36      	ldr	r3, [pc, #216]	; (8003654 <HAL_I2S_Init+0x27c>)
 800357a:	e001      	b.n	8003580 <HAL_I2S_Init+0x1a8>
 800357c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	6812      	ldr	r2, [r2, #0]
 8003586:	4932      	ldr	r1, [pc, #200]	; (8003650 <HAL_I2S_Init+0x278>)
 8003588:	428a      	cmp	r2, r1
 800358a:	d101      	bne.n	8003590 <HAL_I2S_Init+0x1b8>
 800358c:	4a31      	ldr	r2, [pc, #196]	; (8003654 <HAL_I2S_Init+0x27c>)
 800358e:	e001      	b.n	8003594 <HAL_I2S_Init+0x1bc>
 8003590:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003594:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003598:	f023 030f 	bic.w	r3, r3, #15
 800359c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a2b      	ldr	r2, [pc, #172]	; (8003650 <HAL_I2S_Init+0x278>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d101      	bne.n	80035ac <HAL_I2S_Init+0x1d4>
 80035a8:	4b2a      	ldr	r3, [pc, #168]	; (8003654 <HAL_I2S_Init+0x27c>)
 80035aa:	e001      	b.n	80035b0 <HAL_I2S_Init+0x1d8>
 80035ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035b0:	2202      	movs	r2, #2
 80035b2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a25      	ldr	r2, [pc, #148]	; (8003650 <HAL_I2S_Init+0x278>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d101      	bne.n	80035c2 <HAL_I2S_Init+0x1ea>
 80035be:	4b25      	ldr	r3, [pc, #148]	; (8003654 <HAL_I2S_Init+0x27c>)
 80035c0:	e001      	b.n	80035c6 <HAL_I2S_Init+0x1ee>
 80035c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035c6:	69db      	ldr	r3, [r3, #28]
 80035c8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035d2:	d003      	beq.n	80035dc <HAL_I2S_Init+0x204>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d103      	bne.n	80035e4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80035dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035e0:	613b      	str	r3, [r7, #16]
 80035e2:	e001      	b.n	80035e8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80035e4:	2300      	movs	r3, #0
 80035e6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80035f2:	4313      	orrs	r3, r2
 80035f4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80035fc:	4313      	orrs	r3, r2
 80035fe:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003606:	4313      	orrs	r3, r2
 8003608:	b29a      	uxth	r2, r3
 800360a:	897b      	ldrh	r3, [r7, #10]
 800360c:	4313      	orrs	r3, r2
 800360e:	b29b      	uxth	r3, r3
 8003610:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003614:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a0d      	ldr	r2, [pc, #52]	; (8003650 <HAL_I2S_Init+0x278>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d101      	bne.n	8003624 <HAL_I2S_Init+0x24c>
 8003620:	4b0c      	ldr	r3, [pc, #48]	; (8003654 <HAL_I2S_Init+0x27c>)
 8003622:	e001      	b.n	8003628 <HAL_I2S_Init+0x250>
 8003624:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003628:	897a      	ldrh	r2, [r7, #10]
 800362a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3720      	adds	r7, #32
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	0800374f 	.word	0x0800374f
 8003648:	cccccccd 	.word	0xcccccccd
 800364c:	08003865 	.word	0x08003865
 8003650:	40003800 	.word	0x40003800
 8003654:	40003400 	.word	0x40003400

08003658 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a0:	881a      	ldrh	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	1c9a      	adds	r2, r3, #2
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	3b01      	subs	r3, #1
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10e      	bne.n	80036e8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036d8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7ff ffb8 	bl	8003658 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80036e8:	bf00      	nop
 80036ea:	3708      	adds	r7, #8
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68da      	ldr	r2, [r3, #12]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003702:	b292      	uxth	r2, r2
 8003704:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370a:	1c9a      	adds	r2, r3, #2
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003714:	b29b      	uxth	r3, r3
 8003716:	3b01      	subs	r3, #1
 8003718:	b29a      	uxth	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003722:	b29b      	uxth	r3, r3
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10e      	bne.n	8003746 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003736:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f7ff ff93 	bl	800366c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003746:	bf00      	nop
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b086      	sub	sp, #24
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b04      	cmp	r3, #4
 8003768:	d13a      	bne.n	80037e0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	f003 0301 	and.w	r3, r3, #1
 8003770:	2b01      	cmp	r3, #1
 8003772:	d109      	bne.n	8003788 <I2S_IRQHandler+0x3a>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377e:	2b40      	cmp	r3, #64	; 0x40
 8003780:	d102      	bne.n	8003788 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7ff ffb4 	bl	80036f0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800378e:	2b40      	cmp	r3, #64	; 0x40
 8003790:	d126      	bne.n	80037e0 <I2S_IRQHandler+0x92>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f003 0320 	and.w	r3, r3, #32
 800379c:	2b20      	cmp	r3, #32
 800379e:	d11f      	bne.n	80037e0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037ae:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80037b0:	2300      	movs	r3, #0
 80037b2:	613b      	str	r3, [r7, #16]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	613b      	str	r3, [r7, #16]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	613b      	str	r3, [r7, #16]
 80037c4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d2:	f043 0202 	orr.w	r2, r3, #2
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7ff ff50 	bl	8003680 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b03      	cmp	r3, #3
 80037ea:	d136      	bne.n	800385a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d109      	bne.n	800380a <I2S_IRQHandler+0xbc>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003800:	2b80      	cmp	r3, #128	; 0x80
 8003802:	d102      	bne.n	800380a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f7ff ff45 	bl	8003694 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f003 0308 	and.w	r3, r3, #8
 8003810:	2b08      	cmp	r3, #8
 8003812:	d122      	bne.n	800385a <I2S_IRQHandler+0x10c>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f003 0320 	and.w	r3, r3, #32
 800381e:	2b20      	cmp	r3, #32
 8003820:	d11b      	bne.n	800385a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	685a      	ldr	r2, [r3, #4]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003830:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003832:	2300      	movs	r3, #0
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	60fb      	str	r3, [r7, #12]
 800383e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384c:	f043 0204 	orr.w	r2, r3, #4
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f7ff ff13 	bl	8003680 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800385a:	bf00      	nop
 800385c:	3718      	adds	r7, #24
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
	...

08003864 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b088      	sub	sp, #32
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a92      	ldr	r2, [pc, #584]	; (8003ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d101      	bne.n	8003882 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800387e:	4b92      	ldr	r3, [pc, #584]	; (8003ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003880:	e001      	b.n	8003886 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003882:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a8b      	ldr	r2, [pc, #556]	; (8003ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d101      	bne.n	80038a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800389c:	4b8a      	ldr	r3, [pc, #552]	; (8003ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800389e:	e001      	b.n	80038a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80038a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038b0:	d004      	beq.n	80038bc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f040 8099 	bne.w	80039ee <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d107      	bne.n	80038d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d002      	beq.n	80038d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 f925 	bl	8003b20 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	f003 0301 	and.w	r3, r3, #1
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d107      	bne.n	80038f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d002      	beq.n	80038f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f9c8 	bl	8003c80 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f6:	2b40      	cmp	r3, #64	; 0x40
 80038f8:	d13a      	bne.n	8003970 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	f003 0320 	and.w	r3, r3, #32
 8003900:	2b00      	cmp	r3, #0
 8003902:	d035      	beq.n	8003970 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a6e      	ldr	r2, [pc, #440]	; (8003ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d101      	bne.n	8003912 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800390e:	4b6e      	ldr	r3, [pc, #440]	; (8003ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003910:	e001      	b.n	8003916 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003912:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4969      	ldr	r1, [pc, #420]	; (8003ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800391e:	428b      	cmp	r3, r1
 8003920:	d101      	bne.n	8003926 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003922:	4b69      	ldr	r3, [pc, #420]	; (8003ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003924:	e001      	b.n	800392a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003926:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800392a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800392e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800393e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003940:	2300      	movs	r3, #0
 8003942:	60fb      	str	r3, [r7, #12]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	60fb      	str	r3, [r7, #12]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	60fb      	str	r3, [r7, #12]
 8003954:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003962:	f043 0202 	orr.w	r2, r3, #2
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7ff fe88 	bl	8003680 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	f003 0308 	and.w	r3, r3, #8
 8003976:	2b08      	cmp	r3, #8
 8003978:	f040 80c3 	bne.w	8003b02 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	f003 0320 	and.w	r3, r3, #32
 8003982:	2b00      	cmp	r3, #0
 8003984:	f000 80bd 	beq.w	8003b02 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003996:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a49      	ldr	r2, [pc, #292]	; (8003ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d101      	bne.n	80039a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80039a2:	4b49      	ldr	r3, [pc, #292]	; (8003ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039a4:	e001      	b.n	80039aa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80039a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039aa:	685a      	ldr	r2, [r3, #4]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4944      	ldr	r1, [pc, #272]	; (8003ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039b2:	428b      	cmp	r3, r1
 80039b4:	d101      	bne.n	80039ba <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80039b6:	4b44      	ldr	r3, [pc, #272]	; (8003ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039b8:	e001      	b.n	80039be <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80039ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039c2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80039c4:	2300      	movs	r3, #0
 80039c6:	60bb      	str	r3, [r7, #8]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	60bb      	str	r3, [r7, #8]
 80039d0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039de:	f043 0204 	orr.w	r2, r3, #4
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7ff fe4a 	bl	8003680 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80039ec:	e089      	b.n	8003b02 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d107      	bne.n	8003a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d002      	beq.n	8003a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f8be 	bl	8003b84 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d107      	bne.n	8003a22 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d002      	beq.n	8003a22 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 f8fd 	bl	8003c1c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a28:	2b40      	cmp	r3, #64	; 0x40
 8003a2a:	d12f      	bne.n	8003a8c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	f003 0320 	and.w	r3, r3, #32
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d02a      	beq.n	8003a8c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a44:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a1e      	ldr	r2, [pc, #120]	; (8003ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d101      	bne.n	8003a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003a50:	4b1d      	ldr	r3, [pc, #116]	; (8003ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a52:	e001      	b.n	8003a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003a54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a58:	685a      	ldr	r2, [r3, #4]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4919      	ldr	r1, [pc, #100]	; (8003ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a60:	428b      	cmp	r3, r1
 8003a62:	d101      	bne.n	8003a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003a64:	4b18      	ldr	r3, [pc, #96]	; (8003ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a66:	e001      	b.n	8003a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003a68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a6c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a70:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7e:	f043 0202 	orr.w	r2, r3, #2
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f7ff fdfa 	bl	8003680 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	f003 0308 	and.w	r3, r3, #8
 8003a92:	2b08      	cmp	r3, #8
 8003a94:	d136      	bne.n	8003b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	f003 0320 	and.w	r3, r3, #32
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d031      	beq.n	8003b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a07      	ldr	r2, [pc, #28]	; (8003ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d101      	bne.n	8003aae <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003aaa:	4b07      	ldr	r3, [pc, #28]	; (8003ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003aac:	e001      	b.n	8003ab2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003aae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4902      	ldr	r1, [pc, #8]	; (8003ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003aba:	428b      	cmp	r3, r1
 8003abc:	d106      	bne.n	8003acc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003abe:	4b02      	ldr	r3, [pc, #8]	; (8003ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ac0:	e006      	b.n	8003ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003ac2:	bf00      	nop
 8003ac4:	40003800 	.word	0x40003800
 8003ac8:	40003400 	.word	0x40003400
 8003acc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ad0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ad4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	685a      	ldr	r2, [r3, #4]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ae4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af2:	f043 0204 	orr.w	r2, r3, #4
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7ff fdc0 	bl	8003680 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b00:	e000      	b.n	8003b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b02:	bf00      	nop
}
 8003b04:	bf00      	nop
 8003b06:	3720      	adds	r7, #32
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2c:	1c99      	adds	r1, r3, #2
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	6251      	str	r1, [r2, #36]	; 0x24
 8003b32:	881a      	ldrh	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	3b01      	subs	r3, #1
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d113      	bne.n	8003b7a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b60:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d106      	bne.n	8003b7a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f7ff ffc9 	bl	8003b0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b7a:	bf00      	nop
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
	...

08003b84 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b90:	1c99      	adds	r1, r3, #2
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	6251      	str	r1, [r2, #36]	; 0x24
 8003b96:	8819      	ldrh	r1, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a1d      	ldr	r2, [pc, #116]	; (8003c14 <I2SEx_TxISR_I2SExt+0x90>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d101      	bne.n	8003ba6 <I2SEx_TxISR_I2SExt+0x22>
 8003ba2:	4b1d      	ldr	r3, [pc, #116]	; (8003c18 <I2SEx_TxISR_I2SExt+0x94>)
 8003ba4:	e001      	b.n	8003baa <I2SEx_TxISR_I2SExt+0x26>
 8003ba6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003baa:	460a      	mov	r2, r1
 8003bac:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d121      	bne.n	8003c0a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a12      	ldr	r2, [pc, #72]	; (8003c14 <I2SEx_TxISR_I2SExt+0x90>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d101      	bne.n	8003bd4 <I2SEx_TxISR_I2SExt+0x50>
 8003bd0:	4b11      	ldr	r3, [pc, #68]	; (8003c18 <I2SEx_TxISR_I2SExt+0x94>)
 8003bd2:	e001      	b.n	8003bd8 <I2SEx_TxISR_I2SExt+0x54>
 8003bd4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	490d      	ldr	r1, [pc, #52]	; (8003c14 <I2SEx_TxISR_I2SExt+0x90>)
 8003be0:	428b      	cmp	r3, r1
 8003be2:	d101      	bne.n	8003be8 <I2SEx_TxISR_I2SExt+0x64>
 8003be4:	4b0c      	ldr	r3, [pc, #48]	; (8003c18 <I2SEx_TxISR_I2SExt+0x94>)
 8003be6:	e001      	b.n	8003bec <I2SEx_TxISR_I2SExt+0x68>
 8003be8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003bf0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d106      	bne.n	8003c0a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f7ff ff81 	bl	8003b0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c0a:	bf00      	nop
 8003c0c:	3708      	adds	r7, #8
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	40003800 	.word	0x40003800
 8003c18:	40003400 	.word	0x40003400

08003c1c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68d8      	ldr	r0, [r3, #12]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2e:	1c99      	adds	r1, r3, #2
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003c34:	b282      	uxth	r2, r0
 8003c36:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d113      	bne.n	8003c78 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c5e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d106      	bne.n	8003c78 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f7ff ff4a 	bl	8003b0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c78:	bf00      	nop
 8003c7a:	3708      	adds	r7, #8
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a20      	ldr	r2, [pc, #128]	; (8003d10 <I2SEx_RxISR_I2SExt+0x90>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d101      	bne.n	8003c96 <I2SEx_RxISR_I2SExt+0x16>
 8003c92:	4b20      	ldr	r3, [pc, #128]	; (8003d14 <I2SEx_RxISR_I2SExt+0x94>)
 8003c94:	e001      	b.n	8003c9a <I2SEx_RxISR_I2SExt+0x1a>
 8003c96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c9a:	68d8      	ldr	r0, [r3, #12]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca0:	1c99      	adds	r1, r3, #2
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003ca6:	b282      	uxth	r2, r0
 8003ca8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d121      	bne.n	8003d06 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a12      	ldr	r2, [pc, #72]	; (8003d10 <I2SEx_RxISR_I2SExt+0x90>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d101      	bne.n	8003cd0 <I2SEx_RxISR_I2SExt+0x50>
 8003ccc:	4b11      	ldr	r3, [pc, #68]	; (8003d14 <I2SEx_RxISR_I2SExt+0x94>)
 8003cce:	e001      	b.n	8003cd4 <I2SEx_RxISR_I2SExt+0x54>
 8003cd0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	490d      	ldr	r1, [pc, #52]	; (8003d10 <I2SEx_RxISR_I2SExt+0x90>)
 8003cdc:	428b      	cmp	r3, r1
 8003cde:	d101      	bne.n	8003ce4 <I2SEx_RxISR_I2SExt+0x64>
 8003ce0:	4b0c      	ldr	r3, [pc, #48]	; (8003d14 <I2SEx_RxISR_I2SExt+0x94>)
 8003ce2:	e001      	b.n	8003ce8 <I2SEx_RxISR_I2SExt+0x68>
 8003ce4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ce8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003cec:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d106      	bne.n	8003d06 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f7ff ff03 	bl	8003b0c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d06:	bf00      	nop
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	40003800 	.word	0x40003800
 8003d14:	40003400 	.word	0x40003400

08003d18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e267      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d075      	beq.n	8003e22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d36:	4b88      	ldr	r3, [pc, #544]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f003 030c 	and.w	r3, r3, #12
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	d00c      	beq.n	8003d5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d42:	4b85      	ldr	r3, [pc, #532]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d4a:	2b08      	cmp	r3, #8
 8003d4c:	d112      	bne.n	8003d74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d4e:	4b82      	ldr	r3, [pc, #520]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d5a:	d10b      	bne.n	8003d74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d5c:	4b7e      	ldr	r3, [pc, #504]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d05b      	beq.n	8003e20 <HAL_RCC_OscConfig+0x108>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d157      	bne.n	8003e20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e242      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d7c:	d106      	bne.n	8003d8c <HAL_RCC_OscConfig+0x74>
 8003d7e:	4b76      	ldr	r3, [pc, #472]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a75      	ldr	r2, [pc, #468]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d88:	6013      	str	r3, [r2, #0]
 8003d8a:	e01d      	b.n	8003dc8 <HAL_RCC_OscConfig+0xb0>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d94:	d10c      	bne.n	8003db0 <HAL_RCC_OscConfig+0x98>
 8003d96:	4b70      	ldr	r3, [pc, #448]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a6f      	ldr	r2, [pc, #444]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003d9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	4b6d      	ldr	r3, [pc, #436]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a6c      	ldr	r2, [pc, #432]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	e00b      	b.n	8003dc8 <HAL_RCC_OscConfig+0xb0>
 8003db0:	4b69      	ldr	r3, [pc, #420]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a68      	ldr	r2, [pc, #416]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003db6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dba:	6013      	str	r3, [r2, #0]
 8003dbc:	4b66      	ldr	r3, [pc, #408]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a65      	ldr	r2, [pc, #404]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003dc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d013      	beq.n	8003df8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd0:	f7fd fa46 	bl	8001260 <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dd8:	f7fd fa42 	bl	8001260 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b64      	cmp	r3, #100	; 0x64
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e207      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dea:	4b5b      	ldr	r3, [pc, #364]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d0f0      	beq.n	8003dd8 <HAL_RCC_OscConfig+0xc0>
 8003df6:	e014      	b.n	8003e22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df8:	f7fd fa32 	bl	8001260 <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e00:	f7fd fa2e 	bl	8001260 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b64      	cmp	r3, #100	; 0x64
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e1f3      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e12:	4b51      	ldr	r3, [pc, #324]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1f0      	bne.n	8003e00 <HAL_RCC_OscConfig+0xe8>
 8003e1e:	e000      	b.n	8003e22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d063      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e2e:	4b4a      	ldr	r3, [pc, #296]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f003 030c 	and.w	r3, r3, #12
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00b      	beq.n	8003e52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e3a:	4b47      	ldr	r3, [pc, #284]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e42:	2b08      	cmp	r3, #8
 8003e44:	d11c      	bne.n	8003e80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e46:	4b44      	ldr	r3, [pc, #272]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d116      	bne.n	8003e80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e52:	4b41      	ldr	r3, [pc, #260]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d005      	beq.n	8003e6a <HAL_RCC_OscConfig+0x152>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d001      	beq.n	8003e6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e1c7      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e6a:	4b3b      	ldr	r3, [pc, #236]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	4937      	ldr	r1, [pc, #220]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e7e:	e03a      	b.n	8003ef6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d020      	beq.n	8003eca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e88:	4b34      	ldr	r3, [pc, #208]	; (8003f5c <HAL_RCC_OscConfig+0x244>)
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8e:	f7fd f9e7 	bl	8001260 <HAL_GetTick>
 8003e92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e94:	e008      	b.n	8003ea8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e96:	f7fd f9e3 	bl	8001260 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e1a8      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ea8:	4b2b      	ldr	r3, [pc, #172]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d0f0      	beq.n	8003e96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eb4:	4b28      	ldr	r3, [pc, #160]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	4925      	ldr	r1, [pc, #148]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	600b      	str	r3, [r1, #0]
 8003ec8:	e015      	b.n	8003ef6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eca:	4b24      	ldr	r3, [pc, #144]	; (8003f5c <HAL_RCC_OscConfig+0x244>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed0:	f7fd f9c6 	bl	8001260 <HAL_GetTick>
 8003ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ed6:	e008      	b.n	8003eea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ed8:	f7fd f9c2 	bl	8001260 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e187      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eea:	4b1b      	ldr	r3, [pc, #108]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1f0      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0308 	and.w	r3, r3, #8
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d036      	beq.n	8003f70 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d016      	beq.n	8003f38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f0a:	4b15      	ldr	r3, [pc, #84]	; (8003f60 <HAL_RCC_OscConfig+0x248>)
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f10:	f7fd f9a6 	bl	8001260 <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f16:	e008      	b.n	8003f2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f18:	f7fd f9a2 	bl	8001260 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e167      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f2a:	4b0b      	ldr	r3, [pc, #44]	; (8003f58 <HAL_RCC_OscConfig+0x240>)
 8003f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d0f0      	beq.n	8003f18 <HAL_RCC_OscConfig+0x200>
 8003f36:	e01b      	b.n	8003f70 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f38:	4b09      	ldr	r3, [pc, #36]	; (8003f60 <HAL_RCC_OscConfig+0x248>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f3e:	f7fd f98f 	bl	8001260 <HAL_GetTick>
 8003f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f44:	e00e      	b.n	8003f64 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f46:	f7fd f98b 	bl	8001260 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d907      	bls.n	8003f64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e150      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
 8003f58:	40023800 	.word	0x40023800
 8003f5c:	42470000 	.word	0x42470000
 8003f60:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f64:	4b88      	ldr	r3, [pc, #544]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 8003f66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1ea      	bne.n	8003f46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0304 	and.w	r3, r3, #4
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f000 8097 	beq.w	80040ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f82:	4b81      	ldr	r3, [pc, #516]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10f      	bne.n	8003fae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f8e:	2300      	movs	r3, #0
 8003f90:	60bb      	str	r3, [r7, #8]
 8003f92:	4b7d      	ldr	r3, [pc, #500]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 8003f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f96:	4a7c      	ldr	r2, [pc, #496]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 8003f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f9e:	4b7a      	ldr	r3, [pc, #488]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa6:	60bb      	str	r3, [r7, #8]
 8003fa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003faa:	2301      	movs	r3, #1
 8003fac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fae:	4b77      	ldr	r3, [pc, #476]	; (800418c <HAL_RCC_OscConfig+0x474>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d118      	bne.n	8003fec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fba:	4b74      	ldr	r3, [pc, #464]	; (800418c <HAL_RCC_OscConfig+0x474>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a73      	ldr	r2, [pc, #460]	; (800418c <HAL_RCC_OscConfig+0x474>)
 8003fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fc6:	f7fd f94b 	bl	8001260 <HAL_GetTick>
 8003fca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fcc:	e008      	b.n	8003fe0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fce:	f7fd f947 	bl	8001260 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e10c      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fe0:	4b6a      	ldr	r3, [pc, #424]	; (800418c <HAL_RCC_OscConfig+0x474>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d0f0      	beq.n	8003fce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d106      	bne.n	8004002 <HAL_RCC_OscConfig+0x2ea>
 8003ff4:	4b64      	ldr	r3, [pc, #400]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 8003ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff8:	4a63      	ldr	r2, [pc, #396]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 8003ffa:	f043 0301 	orr.w	r3, r3, #1
 8003ffe:	6713      	str	r3, [r2, #112]	; 0x70
 8004000:	e01c      	b.n	800403c <HAL_RCC_OscConfig+0x324>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	2b05      	cmp	r3, #5
 8004008:	d10c      	bne.n	8004024 <HAL_RCC_OscConfig+0x30c>
 800400a:	4b5f      	ldr	r3, [pc, #380]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 800400c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400e:	4a5e      	ldr	r2, [pc, #376]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 8004010:	f043 0304 	orr.w	r3, r3, #4
 8004014:	6713      	str	r3, [r2, #112]	; 0x70
 8004016:	4b5c      	ldr	r3, [pc, #368]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 8004018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401a:	4a5b      	ldr	r2, [pc, #364]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 800401c:	f043 0301 	orr.w	r3, r3, #1
 8004020:	6713      	str	r3, [r2, #112]	; 0x70
 8004022:	e00b      	b.n	800403c <HAL_RCC_OscConfig+0x324>
 8004024:	4b58      	ldr	r3, [pc, #352]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 8004026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004028:	4a57      	ldr	r2, [pc, #348]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 800402a:	f023 0301 	bic.w	r3, r3, #1
 800402e:	6713      	str	r3, [r2, #112]	; 0x70
 8004030:	4b55      	ldr	r3, [pc, #340]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 8004032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004034:	4a54      	ldr	r2, [pc, #336]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 8004036:	f023 0304 	bic.w	r3, r3, #4
 800403a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d015      	beq.n	8004070 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004044:	f7fd f90c 	bl	8001260 <HAL_GetTick>
 8004048:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800404a:	e00a      	b.n	8004062 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800404c:	f7fd f908 	bl	8001260 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	f241 3288 	movw	r2, #5000	; 0x1388
 800405a:	4293      	cmp	r3, r2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e0cb      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004062:	4b49      	ldr	r3, [pc, #292]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 8004064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d0ee      	beq.n	800404c <HAL_RCC_OscConfig+0x334>
 800406e:	e014      	b.n	800409a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004070:	f7fd f8f6 	bl	8001260 <HAL_GetTick>
 8004074:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004076:	e00a      	b.n	800408e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004078:	f7fd f8f2 	bl	8001260 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	f241 3288 	movw	r2, #5000	; 0x1388
 8004086:	4293      	cmp	r3, r2
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e0b5      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800408e:	4b3e      	ldr	r3, [pc, #248]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 8004090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1ee      	bne.n	8004078 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800409a:	7dfb      	ldrb	r3, [r7, #23]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d105      	bne.n	80040ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040a0:	4b39      	ldr	r3, [pc, #228]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 80040a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a4:	4a38      	ldr	r2, [pc, #224]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 80040a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 80a1 	beq.w	80041f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040b6:	4b34      	ldr	r3, [pc, #208]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f003 030c 	and.w	r3, r3, #12
 80040be:	2b08      	cmp	r3, #8
 80040c0:	d05c      	beq.n	800417c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d141      	bne.n	800414e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ca:	4b31      	ldr	r3, [pc, #196]	; (8004190 <HAL_RCC_OscConfig+0x478>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d0:	f7fd f8c6 	bl	8001260 <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040d8:	f7fd f8c2 	bl	8001260 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e087      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ea:	4b27      	ldr	r3, [pc, #156]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1f0      	bne.n	80040d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	69da      	ldr	r2, [r3, #28]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	431a      	orrs	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004104:	019b      	lsls	r3, r3, #6
 8004106:	431a      	orrs	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410c:	085b      	lsrs	r3, r3, #1
 800410e:	3b01      	subs	r3, #1
 8004110:	041b      	lsls	r3, r3, #16
 8004112:	431a      	orrs	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004118:	061b      	lsls	r3, r3, #24
 800411a:	491b      	ldr	r1, [pc, #108]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 800411c:	4313      	orrs	r3, r2
 800411e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004120:	4b1b      	ldr	r3, [pc, #108]	; (8004190 <HAL_RCC_OscConfig+0x478>)
 8004122:	2201      	movs	r2, #1
 8004124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004126:	f7fd f89b 	bl	8001260 <HAL_GetTick>
 800412a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800412c:	e008      	b.n	8004140 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800412e:	f7fd f897 	bl	8001260 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b02      	cmp	r3, #2
 800413a:	d901      	bls.n	8004140 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e05c      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004140:	4b11      	ldr	r3, [pc, #68]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d0f0      	beq.n	800412e <HAL_RCC_OscConfig+0x416>
 800414c:	e054      	b.n	80041f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800414e:	4b10      	ldr	r3, [pc, #64]	; (8004190 <HAL_RCC_OscConfig+0x478>)
 8004150:	2200      	movs	r2, #0
 8004152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004154:	f7fd f884 	bl	8001260 <HAL_GetTick>
 8004158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800415a:	e008      	b.n	800416e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800415c:	f7fd f880 	bl	8001260 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b02      	cmp	r3, #2
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e045      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800416e:	4b06      	ldr	r3, [pc, #24]	; (8004188 <HAL_RCC_OscConfig+0x470>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1f0      	bne.n	800415c <HAL_RCC_OscConfig+0x444>
 800417a:	e03d      	b.n	80041f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d107      	bne.n	8004194 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e038      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
 8004188:	40023800 	.word	0x40023800
 800418c:	40007000 	.word	0x40007000
 8004190:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004194:	4b1b      	ldr	r3, [pc, #108]	; (8004204 <HAL_RCC_OscConfig+0x4ec>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d028      	beq.n	80041f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d121      	bne.n	80041f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d11a      	bne.n	80041f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041c4:	4013      	ands	r3, r2
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d111      	bne.n	80041f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041da:	085b      	lsrs	r3, r3, #1
 80041dc:	3b01      	subs	r3, #1
 80041de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d107      	bne.n	80041f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d001      	beq.n	80041f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e000      	b.n	80041fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3718      	adds	r7, #24
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	40023800 	.word	0x40023800

08004208 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d101      	bne.n	800421c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e0cc      	b.n	80043b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800421c:	4b68      	ldr	r3, [pc, #416]	; (80043c0 <HAL_RCC_ClockConfig+0x1b8>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0307 	and.w	r3, r3, #7
 8004224:	683a      	ldr	r2, [r7, #0]
 8004226:	429a      	cmp	r2, r3
 8004228:	d90c      	bls.n	8004244 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800422a:	4b65      	ldr	r3, [pc, #404]	; (80043c0 <HAL_RCC_ClockConfig+0x1b8>)
 800422c:	683a      	ldr	r2, [r7, #0]
 800422e:	b2d2      	uxtb	r2, r2
 8004230:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004232:	4b63      	ldr	r3, [pc, #396]	; (80043c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0307 	and.w	r3, r3, #7
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	429a      	cmp	r2, r3
 800423e:	d001      	beq.n	8004244 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e0b8      	b.n	80043b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0302 	and.w	r3, r3, #2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d020      	beq.n	8004292 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	2b00      	cmp	r3, #0
 800425a:	d005      	beq.n	8004268 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800425c:	4b59      	ldr	r3, [pc, #356]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	4a58      	ldr	r2, [pc, #352]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004262:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004266:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0308 	and.w	r3, r3, #8
 8004270:	2b00      	cmp	r3, #0
 8004272:	d005      	beq.n	8004280 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004274:	4b53      	ldr	r3, [pc, #332]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	4a52      	ldr	r2, [pc, #328]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 800427a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800427e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004280:	4b50      	ldr	r3, [pc, #320]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	494d      	ldr	r1, [pc, #308]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 800428e:	4313      	orrs	r3, r2
 8004290:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b00      	cmp	r3, #0
 800429c:	d044      	beq.n	8004328 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d107      	bne.n	80042b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042a6:	4b47      	ldr	r3, [pc, #284]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d119      	bne.n	80042e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e07f      	b.n	80043b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d003      	beq.n	80042c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042c2:	2b03      	cmp	r3, #3
 80042c4:	d107      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042c6:	4b3f      	ldr	r3, [pc, #252]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d109      	bne.n	80042e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e06f      	b.n	80043b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042d6:	4b3b      	ldr	r3, [pc, #236]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e067      	b.n	80043b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042e6:	4b37      	ldr	r3, [pc, #220]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f023 0203 	bic.w	r2, r3, #3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	4934      	ldr	r1, [pc, #208]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042f8:	f7fc ffb2 	bl	8001260 <HAL_GetTick>
 80042fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042fe:	e00a      	b.n	8004316 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004300:	f7fc ffae 	bl	8001260 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	f241 3288 	movw	r2, #5000	; 0x1388
 800430e:	4293      	cmp	r3, r2
 8004310:	d901      	bls.n	8004316 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e04f      	b.n	80043b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004316:	4b2b      	ldr	r3, [pc, #172]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f003 020c 	and.w	r2, r3, #12
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	429a      	cmp	r2, r3
 8004326:	d1eb      	bne.n	8004300 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004328:	4b25      	ldr	r3, [pc, #148]	; (80043c0 <HAL_RCC_ClockConfig+0x1b8>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0307 	and.w	r3, r3, #7
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	429a      	cmp	r2, r3
 8004334:	d20c      	bcs.n	8004350 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004336:	4b22      	ldr	r3, [pc, #136]	; (80043c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004338:	683a      	ldr	r2, [r7, #0]
 800433a:	b2d2      	uxtb	r2, r2
 800433c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800433e:	4b20      	ldr	r3, [pc, #128]	; (80043c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0307 	and.w	r3, r3, #7
 8004346:	683a      	ldr	r2, [r7, #0]
 8004348:	429a      	cmp	r2, r3
 800434a:	d001      	beq.n	8004350 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e032      	b.n	80043b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0304 	and.w	r3, r3, #4
 8004358:	2b00      	cmp	r3, #0
 800435a:	d008      	beq.n	800436e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800435c:	4b19      	ldr	r3, [pc, #100]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	4916      	ldr	r1, [pc, #88]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 800436a:	4313      	orrs	r3, r2
 800436c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0308 	and.w	r3, r3, #8
 8004376:	2b00      	cmp	r3, #0
 8004378:	d009      	beq.n	800438e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800437a:	4b12      	ldr	r3, [pc, #72]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	490e      	ldr	r1, [pc, #56]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 800438a:	4313      	orrs	r3, r2
 800438c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800438e:	f000 f821 	bl	80043d4 <HAL_RCC_GetSysClockFreq>
 8004392:	4602      	mov	r2, r0
 8004394:	4b0b      	ldr	r3, [pc, #44]	; (80043c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	091b      	lsrs	r3, r3, #4
 800439a:	f003 030f 	and.w	r3, r3, #15
 800439e:	490a      	ldr	r1, [pc, #40]	; (80043c8 <HAL_RCC_ClockConfig+0x1c0>)
 80043a0:	5ccb      	ldrb	r3, [r1, r3]
 80043a2:	fa22 f303 	lsr.w	r3, r2, r3
 80043a6:	4a09      	ldr	r2, [pc, #36]	; (80043cc <HAL_RCC_ClockConfig+0x1c4>)
 80043a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043aa:	4b09      	ldr	r3, [pc, #36]	; (80043d0 <HAL_RCC_ClockConfig+0x1c8>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7fc ff12 	bl	80011d8 <HAL_InitTick>

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	40023c00 	.word	0x40023c00
 80043c4:	40023800 	.word	0x40023800
 80043c8:	08008c70 	.word	0x08008c70
 80043cc:	20000008 	.word	0x20000008
 80043d0:	2000000c 	.word	0x2000000c

080043d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043d8:	b094      	sub	sp, #80	; 0x50
 80043da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043dc:	2300      	movs	r3, #0
 80043de:	647b      	str	r3, [r7, #68]	; 0x44
 80043e0:	2300      	movs	r3, #0
 80043e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043e4:	2300      	movs	r3, #0
 80043e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80043e8:	2300      	movs	r3, #0
 80043ea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043ec:	4b79      	ldr	r3, [pc, #484]	; (80045d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f003 030c 	and.w	r3, r3, #12
 80043f4:	2b08      	cmp	r3, #8
 80043f6:	d00d      	beq.n	8004414 <HAL_RCC_GetSysClockFreq+0x40>
 80043f8:	2b08      	cmp	r3, #8
 80043fa:	f200 80e1 	bhi.w	80045c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d002      	beq.n	8004408 <HAL_RCC_GetSysClockFreq+0x34>
 8004402:	2b04      	cmp	r3, #4
 8004404:	d003      	beq.n	800440e <HAL_RCC_GetSysClockFreq+0x3a>
 8004406:	e0db      	b.n	80045c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004408:	4b73      	ldr	r3, [pc, #460]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800440a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800440c:	e0db      	b.n	80045c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800440e:	4b73      	ldr	r3, [pc, #460]	; (80045dc <HAL_RCC_GetSysClockFreq+0x208>)
 8004410:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004412:	e0d8      	b.n	80045c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004414:	4b6f      	ldr	r3, [pc, #444]	; (80045d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800441c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800441e:	4b6d      	ldr	r3, [pc, #436]	; (80045d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d063      	beq.n	80044f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800442a:	4b6a      	ldr	r3, [pc, #424]	; (80045d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	099b      	lsrs	r3, r3, #6
 8004430:	2200      	movs	r2, #0
 8004432:	63bb      	str	r3, [r7, #56]	; 0x38
 8004434:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004438:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800443c:	633b      	str	r3, [r7, #48]	; 0x30
 800443e:	2300      	movs	r3, #0
 8004440:	637b      	str	r3, [r7, #52]	; 0x34
 8004442:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004446:	4622      	mov	r2, r4
 8004448:	462b      	mov	r3, r5
 800444a:	f04f 0000 	mov.w	r0, #0
 800444e:	f04f 0100 	mov.w	r1, #0
 8004452:	0159      	lsls	r1, r3, #5
 8004454:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004458:	0150      	lsls	r0, r2, #5
 800445a:	4602      	mov	r2, r0
 800445c:	460b      	mov	r3, r1
 800445e:	4621      	mov	r1, r4
 8004460:	1a51      	subs	r1, r2, r1
 8004462:	6139      	str	r1, [r7, #16]
 8004464:	4629      	mov	r1, r5
 8004466:	eb63 0301 	sbc.w	r3, r3, r1
 800446a:	617b      	str	r3, [r7, #20]
 800446c:	f04f 0200 	mov.w	r2, #0
 8004470:	f04f 0300 	mov.w	r3, #0
 8004474:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004478:	4659      	mov	r1, fp
 800447a:	018b      	lsls	r3, r1, #6
 800447c:	4651      	mov	r1, sl
 800447e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004482:	4651      	mov	r1, sl
 8004484:	018a      	lsls	r2, r1, #6
 8004486:	4651      	mov	r1, sl
 8004488:	ebb2 0801 	subs.w	r8, r2, r1
 800448c:	4659      	mov	r1, fp
 800448e:	eb63 0901 	sbc.w	r9, r3, r1
 8004492:	f04f 0200 	mov.w	r2, #0
 8004496:	f04f 0300 	mov.w	r3, #0
 800449a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800449e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044a6:	4690      	mov	r8, r2
 80044a8:	4699      	mov	r9, r3
 80044aa:	4623      	mov	r3, r4
 80044ac:	eb18 0303 	adds.w	r3, r8, r3
 80044b0:	60bb      	str	r3, [r7, #8]
 80044b2:	462b      	mov	r3, r5
 80044b4:	eb49 0303 	adc.w	r3, r9, r3
 80044b8:	60fb      	str	r3, [r7, #12]
 80044ba:	f04f 0200 	mov.w	r2, #0
 80044be:	f04f 0300 	mov.w	r3, #0
 80044c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80044c6:	4629      	mov	r1, r5
 80044c8:	024b      	lsls	r3, r1, #9
 80044ca:	4621      	mov	r1, r4
 80044cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80044d0:	4621      	mov	r1, r4
 80044d2:	024a      	lsls	r2, r1, #9
 80044d4:	4610      	mov	r0, r2
 80044d6:	4619      	mov	r1, r3
 80044d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044da:	2200      	movs	r2, #0
 80044dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80044de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044e4:	f7fb fe70 	bl	80001c8 <__aeabi_uldivmod>
 80044e8:	4602      	mov	r2, r0
 80044ea:	460b      	mov	r3, r1
 80044ec:	4613      	mov	r3, r2
 80044ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044f0:	e058      	b.n	80045a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044f2:	4b38      	ldr	r3, [pc, #224]	; (80045d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	099b      	lsrs	r3, r3, #6
 80044f8:	2200      	movs	r2, #0
 80044fa:	4618      	mov	r0, r3
 80044fc:	4611      	mov	r1, r2
 80044fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004502:	623b      	str	r3, [r7, #32]
 8004504:	2300      	movs	r3, #0
 8004506:	627b      	str	r3, [r7, #36]	; 0x24
 8004508:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800450c:	4642      	mov	r2, r8
 800450e:	464b      	mov	r3, r9
 8004510:	f04f 0000 	mov.w	r0, #0
 8004514:	f04f 0100 	mov.w	r1, #0
 8004518:	0159      	lsls	r1, r3, #5
 800451a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800451e:	0150      	lsls	r0, r2, #5
 8004520:	4602      	mov	r2, r0
 8004522:	460b      	mov	r3, r1
 8004524:	4641      	mov	r1, r8
 8004526:	ebb2 0a01 	subs.w	sl, r2, r1
 800452a:	4649      	mov	r1, r9
 800452c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004530:	f04f 0200 	mov.w	r2, #0
 8004534:	f04f 0300 	mov.w	r3, #0
 8004538:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800453c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004540:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004544:	ebb2 040a 	subs.w	r4, r2, sl
 8004548:	eb63 050b 	sbc.w	r5, r3, fp
 800454c:	f04f 0200 	mov.w	r2, #0
 8004550:	f04f 0300 	mov.w	r3, #0
 8004554:	00eb      	lsls	r3, r5, #3
 8004556:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800455a:	00e2      	lsls	r2, r4, #3
 800455c:	4614      	mov	r4, r2
 800455e:	461d      	mov	r5, r3
 8004560:	4643      	mov	r3, r8
 8004562:	18e3      	adds	r3, r4, r3
 8004564:	603b      	str	r3, [r7, #0]
 8004566:	464b      	mov	r3, r9
 8004568:	eb45 0303 	adc.w	r3, r5, r3
 800456c:	607b      	str	r3, [r7, #4]
 800456e:	f04f 0200 	mov.w	r2, #0
 8004572:	f04f 0300 	mov.w	r3, #0
 8004576:	e9d7 4500 	ldrd	r4, r5, [r7]
 800457a:	4629      	mov	r1, r5
 800457c:	028b      	lsls	r3, r1, #10
 800457e:	4621      	mov	r1, r4
 8004580:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004584:	4621      	mov	r1, r4
 8004586:	028a      	lsls	r2, r1, #10
 8004588:	4610      	mov	r0, r2
 800458a:	4619      	mov	r1, r3
 800458c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800458e:	2200      	movs	r2, #0
 8004590:	61bb      	str	r3, [r7, #24]
 8004592:	61fa      	str	r2, [r7, #28]
 8004594:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004598:	f7fb fe16 	bl	80001c8 <__aeabi_uldivmod>
 800459c:	4602      	mov	r2, r0
 800459e:	460b      	mov	r3, r1
 80045a0:	4613      	mov	r3, r2
 80045a2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045a4:	4b0b      	ldr	r3, [pc, #44]	; (80045d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	0c1b      	lsrs	r3, r3, #16
 80045aa:	f003 0303 	and.w	r3, r3, #3
 80045ae:	3301      	adds	r3, #1
 80045b0:	005b      	lsls	r3, r3, #1
 80045b2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80045b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045be:	e002      	b.n	80045c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045c0:	4b05      	ldr	r3, [pc, #20]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80045c2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3750      	adds	r7, #80	; 0x50
 80045cc:	46bd      	mov	sp, r7
 80045ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045d2:	bf00      	nop
 80045d4:	40023800 	.word	0x40023800
 80045d8:	00f42400 	.word	0x00f42400
 80045dc:	007a1200 	.word	0x007a1200

080045e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045e0:	b480      	push	{r7}
 80045e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045e4:	4b03      	ldr	r3, [pc, #12]	; (80045f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80045e6:	681b      	ldr	r3, [r3, #0]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	20000008 	.word	0x20000008

080045f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045fc:	f7ff fff0 	bl	80045e0 <HAL_RCC_GetHCLKFreq>
 8004600:	4602      	mov	r2, r0
 8004602:	4b05      	ldr	r3, [pc, #20]	; (8004618 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	0a9b      	lsrs	r3, r3, #10
 8004608:	f003 0307 	and.w	r3, r3, #7
 800460c:	4903      	ldr	r1, [pc, #12]	; (800461c <HAL_RCC_GetPCLK1Freq+0x24>)
 800460e:	5ccb      	ldrb	r3, [r1, r3]
 8004610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004614:	4618      	mov	r0, r3
 8004616:	bd80      	pop	{r7, pc}
 8004618:	40023800 	.word	0x40023800
 800461c:	08008c80 	.word	0x08008c80

08004620 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004624:	f7ff ffdc 	bl	80045e0 <HAL_RCC_GetHCLKFreq>
 8004628:	4602      	mov	r2, r0
 800462a:	4b05      	ldr	r3, [pc, #20]	; (8004640 <HAL_RCC_GetPCLK2Freq+0x20>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	0b5b      	lsrs	r3, r3, #13
 8004630:	f003 0307 	and.w	r3, r3, #7
 8004634:	4903      	ldr	r1, [pc, #12]	; (8004644 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004636:	5ccb      	ldrb	r3, [r1, r3]
 8004638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800463c:	4618      	mov	r0, r3
 800463e:	bd80      	pop	{r7, pc}
 8004640:	40023800 	.word	0x40023800
 8004644:	08008c80 	.word	0x08008c80

08004648 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004650:	2300      	movs	r3, #0
 8004652:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004654:	2300      	movs	r3, #0
 8004656:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	2b00      	cmp	r3, #0
 8004662:	d105      	bne.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800466c:	2b00      	cmp	r3, #0
 800466e:	d035      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004670:	4b62      	ldr	r3, [pc, #392]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004672:	2200      	movs	r2, #0
 8004674:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004676:	f7fc fdf3 	bl	8001260 <HAL_GetTick>
 800467a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800467c:	e008      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800467e:	f7fc fdef 	bl	8001260 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d901      	bls.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e0b0      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004690:	4b5b      	ldr	r3, [pc, #364]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1f0      	bne.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	019a      	lsls	r2, r3, #6
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	071b      	lsls	r3, r3, #28
 80046a8:	4955      	ldr	r1, [pc, #340]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80046b0:	4b52      	ldr	r3, [pc, #328]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80046b2:	2201      	movs	r2, #1
 80046b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046b6:	f7fc fdd3 	bl	8001260 <HAL_GetTick>
 80046ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046bc:	e008      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80046be:	f7fc fdcf 	bl	8001260 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d901      	bls.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e090      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046d0:	4b4b      	ldr	r3, [pc, #300]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d0f0      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0302 	and.w	r3, r3, #2
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f000 8083 	beq.w	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80046ea:	2300      	movs	r3, #0
 80046ec:	60fb      	str	r3, [r7, #12]
 80046ee:	4b44      	ldr	r3, [pc, #272]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	4a43      	ldr	r2, [pc, #268]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046f8:	6413      	str	r3, [r2, #64]	; 0x40
 80046fa:	4b41      	ldr	r3, [pc, #260]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004702:	60fb      	str	r3, [r7, #12]
 8004704:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004706:	4b3f      	ldr	r3, [pc, #252]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a3e      	ldr	r2, [pc, #248]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800470c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004710:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004712:	f7fc fda5 	bl	8001260 <HAL_GetTick>
 8004716:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004718:	e008      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800471a:	f7fc fda1 	bl	8001260 <HAL_GetTick>
 800471e:	4602      	mov	r2, r0
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	2b02      	cmp	r3, #2
 8004726:	d901      	bls.n	800472c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e062      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800472c:	4b35      	ldr	r3, [pc, #212]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004734:	2b00      	cmp	r3, #0
 8004736:	d0f0      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004738:	4b31      	ldr	r3, [pc, #196]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800473a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800473c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004740:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d02f      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	429a      	cmp	r2, r3
 8004754:	d028      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004756:	4b2a      	ldr	r3, [pc, #168]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800475a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800475e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004760:	4b29      	ldr	r3, [pc, #164]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004762:	2201      	movs	r2, #1
 8004764:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004766:	4b28      	ldr	r3, [pc, #160]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004768:	2200      	movs	r2, #0
 800476a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800476c:	4a24      	ldr	r2, [pc, #144]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004772:	4b23      	ldr	r3, [pc, #140]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	2b01      	cmp	r3, #1
 800477c:	d114      	bne.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800477e:	f7fc fd6f 	bl	8001260 <HAL_GetTick>
 8004782:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004784:	e00a      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004786:	f7fc fd6b 	bl	8001260 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	f241 3288 	movw	r2, #5000	; 0x1388
 8004794:	4293      	cmp	r3, r2
 8004796:	d901      	bls.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e02a      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800479c:	4b18      	ldr	r3, [pc, #96]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800479e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d0ee      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047b4:	d10d      	bne.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80047b6:	4b12      	ldr	r3, [pc, #72]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80047c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ca:	490d      	ldr	r1, [pc, #52]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	608b      	str	r3, [r1, #8]
 80047d0:	e005      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x196>
 80047d2:	4b0b      	ldr	r3, [pc, #44]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	4a0a      	ldr	r2, [pc, #40]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047d8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80047dc:	6093      	str	r3, [r2, #8]
 80047de:	4b08      	ldr	r3, [pc, #32]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047ea:	4905      	ldr	r1, [pc, #20]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3718      	adds	r7, #24
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	42470068 	.word	0x42470068
 8004800:	40023800 	.word	0x40023800
 8004804:	40007000 	.word	0x40007000
 8004808:	42470e40 	.word	0x42470e40

0800480c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800480c:	b480      	push	{r7}
 800480e:	b087      	sub	sp, #28
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004814:	2300      	movs	r3, #0
 8004816:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004818:	2300      	movs	r3, #0
 800481a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800481c:	2300      	movs	r3, #0
 800481e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004820:	2300      	movs	r3, #0
 8004822:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d13e      	bne.n	80048a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800482a:	4b23      	ldr	r3, [pc, #140]	; (80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004832:	60fb      	str	r3, [r7, #12]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d005      	beq.n	8004846 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d12f      	bne.n	80048a0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004840:	4b1e      	ldr	r3, [pc, #120]	; (80048bc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004842:	617b      	str	r3, [r7, #20]
          break;
 8004844:	e02f      	b.n	80048a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004846:	4b1c      	ldr	r3, [pc, #112]	; (80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800484e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004852:	d108      	bne.n	8004866 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004854:	4b18      	ldr	r3, [pc, #96]	; (80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800485c:	4a18      	ldr	r2, [pc, #96]	; (80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800485e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004862:	613b      	str	r3, [r7, #16]
 8004864:	e007      	b.n	8004876 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004866:	4b14      	ldr	r3, [pc, #80]	; (80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800486e:	4a15      	ldr	r2, [pc, #84]	; (80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004870:	fbb2 f3f3 	udiv	r3, r2, r3
 8004874:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004876:	4b10      	ldr	r3, [pc, #64]	; (80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004878:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800487c:	099b      	lsrs	r3, r3, #6
 800487e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	fb02 f303 	mul.w	r3, r2, r3
 8004888:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800488a:	4b0b      	ldr	r3, [pc, #44]	; (80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800488c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004890:	0f1b      	lsrs	r3, r3, #28
 8004892:	f003 0307 	and.w	r3, r3, #7
 8004896:	68ba      	ldr	r2, [r7, #8]
 8004898:	fbb2 f3f3 	udiv	r3, r2, r3
 800489c:	617b      	str	r3, [r7, #20]
          break;
 800489e:	e002      	b.n	80048a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80048a0:	2300      	movs	r3, #0
 80048a2:	617b      	str	r3, [r7, #20]
          break;
 80048a4:	bf00      	nop
        }
      }
      break;
 80048a6:	bf00      	nop
    }
  }
  return frequency;
 80048a8:	697b      	ldr	r3, [r7, #20]
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	371c      	adds	r7, #28
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	40023800 	.word	0x40023800
 80048bc:	00bb8000 	.word	0x00bb8000
 80048c0:	007a1200 	.word	0x007a1200
 80048c4:	00f42400 	.word	0x00f42400

080048c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e07b      	b.n	80049d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d108      	bne.n	80048f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048ea:	d009      	beq.n	8004900 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	61da      	str	r2, [r3, #28]
 80048f2:	e005      	b.n	8004900 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	d106      	bne.n	8004920 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f7fc fabc 	bl	8000e98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004936:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004948:	431a      	orrs	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004952:	431a      	orrs	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	f003 0302 	and.w	r3, r3, #2
 800495c:	431a      	orrs	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	431a      	orrs	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004970:	431a      	orrs	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800497a:	431a      	orrs	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a1b      	ldr	r3, [r3, #32]
 8004980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004984:	ea42 0103 	orr.w	r1, r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	430a      	orrs	r2, r1
 8004996:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	0c1b      	lsrs	r3, r3, #16
 800499e:	f003 0104 	and.w	r1, r3, #4
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a6:	f003 0210 	and.w	r2, r3, #16
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	69da      	ldr	r2, [r3, #28]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3708      	adds	r7, #8
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}

080049da <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049da:	b580      	push	{r7, lr}
 80049dc:	b088      	sub	sp, #32
 80049de:	af00      	add	r7, sp, #0
 80049e0:	60f8      	str	r0, [r7, #12]
 80049e2:	60b9      	str	r1, [r7, #8]
 80049e4:	603b      	str	r3, [r7, #0]
 80049e6:	4613      	mov	r3, r2
 80049e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049ea:	2300      	movs	r3, #0
 80049ec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d101      	bne.n	80049fc <HAL_SPI_Transmit+0x22>
 80049f8:	2302      	movs	r3, #2
 80049fa:	e126      	b.n	8004c4a <HAL_SPI_Transmit+0x270>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a04:	f7fc fc2c 	bl	8001260 <HAL_GetTick>
 8004a08:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004a0a:	88fb      	ldrh	r3, [r7, #6]
 8004a0c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d002      	beq.n	8004a20 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a1e:	e10b      	b.n	8004c38 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d002      	beq.n	8004a2c <HAL_SPI_Transmit+0x52>
 8004a26:	88fb      	ldrh	r3, [r7, #6]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d102      	bne.n	8004a32 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a30:	e102      	b.n	8004c38 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2203      	movs	r2, #3
 8004a36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	88fa      	ldrh	r2, [r7, #6]
 8004a4a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	88fa      	ldrh	r2, [r7, #6]
 8004a50:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a78:	d10f      	bne.n	8004a9a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a88:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a98:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa4:	2b40      	cmp	r3, #64	; 0x40
 8004aa6:	d007      	beq.n	8004ab8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ab6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ac0:	d14b      	bne.n	8004b5a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d002      	beq.n	8004ad0 <HAL_SPI_Transmit+0xf6>
 8004aca:	8afb      	ldrh	r3, [r7, #22]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d13e      	bne.n	8004b4e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad4:	881a      	ldrh	r2, [r3, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae0:	1c9a      	adds	r2, r3, #2
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	3b01      	subs	r3, #1
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004af4:	e02b      	b.n	8004b4e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f003 0302 	and.w	r3, r3, #2
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d112      	bne.n	8004b2a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b08:	881a      	ldrh	r2, [r3, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b14:	1c9a      	adds	r2, r3, #2
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	3b01      	subs	r3, #1
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b28:	e011      	b.n	8004b4e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b2a:	f7fc fb99 	bl	8001260 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	683a      	ldr	r2, [r7, #0]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d803      	bhi.n	8004b42 <HAL_SPI_Transmit+0x168>
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b40:	d102      	bne.n	8004b48 <HAL_SPI_Transmit+0x16e>
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d102      	bne.n	8004b4e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b4c:	e074      	b.n	8004c38 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1ce      	bne.n	8004af6 <HAL_SPI_Transmit+0x11c>
 8004b58:	e04c      	b.n	8004bf4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d002      	beq.n	8004b68 <HAL_SPI_Transmit+0x18e>
 8004b62:	8afb      	ldrh	r3, [r7, #22]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d140      	bne.n	8004bea <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	330c      	adds	r3, #12
 8004b72:	7812      	ldrb	r2, [r2, #0]
 8004b74:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7a:	1c5a      	adds	r2, r3, #1
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	3b01      	subs	r3, #1
 8004b88:	b29a      	uxth	r2, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004b8e:	e02c      	b.n	8004bea <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d113      	bne.n	8004bc6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	330c      	adds	r3, #12
 8004ba8:	7812      	ldrb	r2, [r2, #0]
 8004baa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb0:	1c5a      	adds	r2, r3, #1
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	86da      	strh	r2, [r3, #54]	; 0x36
 8004bc4:	e011      	b.n	8004bea <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bc6:	f7fc fb4b 	bl	8001260 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	683a      	ldr	r2, [r7, #0]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d803      	bhi.n	8004bde <HAL_SPI_Transmit+0x204>
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bdc:	d102      	bne.n	8004be4 <HAL_SPI_Transmit+0x20a>
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d102      	bne.n	8004bea <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004be8:	e026      	b.n	8004c38 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1cd      	bne.n	8004b90 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bf4:	69ba      	ldr	r2, [r7, #24]
 8004bf6:	6839      	ldr	r1, [r7, #0]
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f000 fbcb 	bl	8005394 <SPI_EndRxTxTransaction>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d002      	beq.n	8004c0a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2220      	movs	r2, #32
 8004c08:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d10a      	bne.n	8004c28 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c12:	2300      	movs	r3, #0
 8004c14:	613b      	str	r3, [r7, #16]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	613b      	str	r3, [r7, #16]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	613b      	str	r3, [r7, #16]
 8004c26:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d002      	beq.n	8004c36 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	77fb      	strb	r3, [r7, #31]
 8004c34:	e000      	b.n	8004c38 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004c36:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c48:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3720      	adds	r7, #32
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b088      	sub	sp, #32
 8004c56:	af02      	add	r7, sp, #8
 8004c58:	60f8      	str	r0, [r7, #12]
 8004c5a:	60b9      	str	r1, [r7, #8]
 8004c5c:	603b      	str	r3, [r7, #0]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c62:	2300      	movs	r3, #0
 8004c64:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c6e:	d112      	bne.n	8004c96 <HAL_SPI_Receive+0x44>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d10e      	bne.n	8004c96 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2204      	movs	r2, #4
 8004c7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004c80:	88fa      	ldrh	r2, [r7, #6]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	9300      	str	r3, [sp, #0]
 8004c86:	4613      	mov	r3, r2
 8004c88:	68ba      	ldr	r2, [r7, #8]
 8004c8a:	68b9      	ldr	r1, [r7, #8]
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f000 f8f1 	bl	8004e74 <HAL_SPI_TransmitReceive>
 8004c92:	4603      	mov	r3, r0
 8004c94:	e0ea      	b.n	8004e6c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d101      	bne.n	8004ca4 <HAL_SPI_Receive+0x52>
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	e0e3      	b.n	8004e6c <HAL_SPI_Receive+0x21a>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cac:	f7fc fad8 	bl	8001260 <HAL_GetTick>
 8004cb0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d002      	beq.n	8004cc4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004cbe:	2302      	movs	r3, #2
 8004cc0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004cc2:	e0ca      	b.n	8004e5a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d002      	beq.n	8004cd0 <HAL_SPI_Receive+0x7e>
 8004cca:	88fb      	ldrh	r3, [r7, #6]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d102      	bne.n	8004cd6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004cd4:	e0c1      	b.n	8004e5a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2204      	movs	r2, #4
 8004cda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	68ba      	ldr	r2, [r7, #8]
 8004ce8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	88fa      	ldrh	r2, [r7, #6]
 8004cee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	88fa      	ldrh	r2, [r7, #6]
 8004cf4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d1c:	d10f      	bne.n	8004d3e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d2c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d3c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d48:	2b40      	cmp	r3, #64	; 0x40
 8004d4a:	d007      	beq.n	8004d5c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d5a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d162      	bne.n	8004e2a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004d64:	e02e      	b.n	8004dc4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d115      	bne.n	8004da0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f103 020c 	add.w	r2, r3, #12
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d80:	7812      	ldrb	r2, [r2, #0]
 8004d82:	b2d2      	uxtb	r2, r2
 8004d84:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8a:	1c5a      	adds	r2, r3, #1
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	3b01      	subs	r3, #1
 8004d98:	b29a      	uxth	r2, r3
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d9e:	e011      	b.n	8004dc4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004da0:	f7fc fa5e 	bl	8001260 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	683a      	ldr	r2, [r7, #0]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d803      	bhi.n	8004db8 <HAL_SPI_Receive+0x166>
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db6:	d102      	bne.n	8004dbe <HAL_SPI_Receive+0x16c>
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d102      	bne.n	8004dc4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004dc2:	e04a      	b.n	8004e5a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1cb      	bne.n	8004d66 <HAL_SPI_Receive+0x114>
 8004dce:	e031      	b.n	8004e34 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d113      	bne.n	8004e06 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68da      	ldr	r2, [r3, #12]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de8:	b292      	uxth	r2, r2
 8004dea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df0:	1c9a      	adds	r2, r3, #2
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e04:	e011      	b.n	8004e2a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e06:	f7fc fa2b 	bl	8001260 <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	683a      	ldr	r2, [r7, #0]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d803      	bhi.n	8004e1e <HAL_SPI_Receive+0x1cc>
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e1c:	d102      	bne.n	8004e24 <HAL_SPI_Receive+0x1d2>
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d102      	bne.n	8004e2a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004e28:	e017      	b.n	8004e5a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1cd      	bne.n	8004dd0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	6839      	ldr	r1, [r7, #0]
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f000 fa45 	bl	80052c8 <SPI_EndRxTransaction>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d002      	beq.n	8004e4a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2220      	movs	r2, #32
 8004e48:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d002      	beq.n	8004e58 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	75fb      	strb	r3, [r7, #23]
 8004e56:	e000      	b.n	8004e5a <HAL_SPI_Receive+0x208>
  }

error :
 8004e58:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3718      	adds	r7, #24
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b08c      	sub	sp, #48	; 0x30
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]
 8004e80:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004e82:	2301      	movs	r3, #1
 8004e84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004e86:	2300      	movs	r3, #0
 8004e88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d101      	bne.n	8004e9a <HAL_SPI_TransmitReceive+0x26>
 8004e96:	2302      	movs	r3, #2
 8004e98:	e18a      	b.n	80051b0 <HAL_SPI_TransmitReceive+0x33c>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ea2:	f7fc f9dd 	bl	8001260 <HAL_GetTick>
 8004ea6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004eae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004eb8:	887b      	ldrh	r3, [r7, #2]
 8004eba:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ebc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d00f      	beq.n	8004ee4 <HAL_SPI_TransmitReceive+0x70>
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004eca:	d107      	bne.n	8004edc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d103      	bne.n	8004edc <HAL_SPI_TransmitReceive+0x68>
 8004ed4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ed8:	2b04      	cmp	r3, #4
 8004eda:	d003      	beq.n	8004ee4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004edc:	2302      	movs	r3, #2
 8004ede:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004ee2:	e15b      	b.n	800519c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d005      	beq.n	8004ef6 <HAL_SPI_TransmitReceive+0x82>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d002      	beq.n	8004ef6 <HAL_SPI_TransmitReceive+0x82>
 8004ef0:	887b      	ldrh	r3, [r7, #2]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d103      	bne.n	8004efe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004efc:	e14e      	b.n	800519c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b04      	cmp	r3, #4
 8004f08:	d003      	beq.n	8004f12 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2205      	movs	r2, #5
 8004f0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	887a      	ldrh	r2, [r7, #2]
 8004f22:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	887a      	ldrh	r2, [r7, #2]
 8004f28:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	68ba      	ldr	r2, [r7, #8]
 8004f2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	887a      	ldrh	r2, [r7, #2]
 8004f34:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	887a      	ldrh	r2, [r7, #2]
 8004f3a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f52:	2b40      	cmp	r3, #64	; 0x40
 8004f54:	d007      	beq.n	8004f66 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f64:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f6e:	d178      	bne.n	8005062 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d002      	beq.n	8004f7e <HAL_SPI_TransmitReceive+0x10a>
 8004f78:	8b7b      	ldrh	r3, [r7, #26]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d166      	bne.n	800504c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f82:	881a      	ldrh	r2, [r3, #0]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8e:	1c9a      	adds	r2, r3, #2
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fa2:	e053      	b.n	800504c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d11b      	bne.n	8004fea <HAL_SPI_TransmitReceive+0x176>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d016      	beq.n	8004fea <HAL_SPI_TransmitReceive+0x176>
 8004fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d113      	bne.n	8004fea <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc6:	881a      	ldrh	r2, [r3, #0]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd2:	1c9a      	adds	r2, r3, #2
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	b29a      	uxth	r2, r3
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f003 0301 	and.w	r3, r3, #1
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d119      	bne.n	800502c <HAL_SPI_TransmitReceive+0x1b8>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d014      	beq.n	800502c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68da      	ldr	r2, [r3, #12]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500c:	b292      	uxth	r2, r2
 800500e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005014:	1c9a      	adds	r2, r3, #2
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800501e:	b29b      	uxth	r3, r3
 8005020:	3b01      	subs	r3, #1
 8005022:	b29a      	uxth	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005028:	2301      	movs	r3, #1
 800502a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800502c:	f7fc f918 	bl	8001260 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005038:	429a      	cmp	r2, r3
 800503a:	d807      	bhi.n	800504c <HAL_SPI_TransmitReceive+0x1d8>
 800503c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800503e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005042:	d003      	beq.n	800504c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800504a:	e0a7      	b.n	800519c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005050:	b29b      	uxth	r3, r3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1a6      	bne.n	8004fa4 <HAL_SPI_TransmitReceive+0x130>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800505a:	b29b      	uxth	r3, r3
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1a1      	bne.n	8004fa4 <HAL_SPI_TransmitReceive+0x130>
 8005060:	e07c      	b.n	800515c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d002      	beq.n	8005070 <HAL_SPI_TransmitReceive+0x1fc>
 800506a:	8b7b      	ldrh	r3, [r7, #26]
 800506c:	2b01      	cmp	r3, #1
 800506e:	d16b      	bne.n	8005148 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	330c      	adds	r3, #12
 800507a:	7812      	ldrb	r2, [r2, #0]
 800507c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005082:	1c5a      	adds	r2, r3, #1
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800508c:	b29b      	uxth	r3, r3
 800508e:	3b01      	subs	r3, #1
 8005090:	b29a      	uxth	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005096:	e057      	b.n	8005148 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d11c      	bne.n	80050e0 <HAL_SPI_TransmitReceive+0x26c>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d017      	beq.n	80050e0 <HAL_SPI_TransmitReceive+0x26c>
 80050b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d114      	bne.n	80050e0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	330c      	adds	r3, #12
 80050c0:	7812      	ldrb	r2, [r2, #0]
 80050c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c8:	1c5a      	adds	r2, r3, #1
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	3b01      	subs	r3, #1
 80050d6:	b29a      	uxth	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050dc:	2300      	movs	r3, #0
 80050de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d119      	bne.n	8005122 <HAL_SPI_TransmitReceive+0x2ae>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d014      	beq.n	8005122 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68da      	ldr	r2, [r3, #12]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005102:	b2d2      	uxtb	r2, r2
 8005104:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510a:	1c5a      	adds	r2, r3, #1
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005114:	b29b      	uxth	r3, r3
 8005116:	3b01      	subs	r3, #1
 8005118:	b29a      	uxth	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800511e:	2301      	movs	r3, #1
 8005120:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005122:	f7fc f89d 	bl	8001260 <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800512e:	429a      	cmp	r2, r3
 8005130:	d803      	bhi.n	800513a <HAL_SPI_TransmitReceive+0x2c6>
 8005132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005138:	d102      	bne.n	8005140 <HAL_SPI_TransmitReceive+0x2cc>
 800513a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800513c:	2b00      	cmp	r3, #0
 800513e:	d103      	bne.n	8005148 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005146:	e029      	b.n	800519c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800514c:	b29b      	uxth	r3, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d1a2      	bne.n	8005098 <HAL_SPI_TransmitReceive+0x224>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005156:	b29b      	uxth	r3, r3
 8005158:	2b00      	cmp	r3, #0
 800515a:	d19d      	bne.n	8005098 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800515c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800515e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f000 f917 	bl	8005394 <SPI_EndRxTxTransaction>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d006      	beq.n	800517a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2220      	movs	r2, #32
 8005176:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005178:	e010      	b.n	800519c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d10b      	bne.n	800519a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005182:	2300      	movs	r3, #0
 8005184:	617b      	str	r3, [r7, #20]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	617b      	str	r3, [r7, #20]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	617b      	str	r3, [r7, #20]
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	e000      	b.n	800519c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800519a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80051ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3730      	adds	r7, #48	; 0x30
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b088      	sub	sp, #32
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	603b      	str	r3, [r7, #0]
 80051c4:	4613      	mov	r3, r2
 80051c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80051c8:	f7fc f84a 	bl	8001260 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d0:	1a9b      	subs	r3, r3, r2
 80051d2:	683a      	ldr	r2, [r7, #0]
 80051d4:	4413      	add	r3, r2
 80051d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80051d8:	f7fc f842 	bl	8001260 <HAL_GetTick>
 80051dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80051de:	4b39      	ldr	r3, [pc, #228]	; (80052c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	015b      	lsls	r3, r3, #5
 80051e4:	0d1b      	lsrs	r3, r3, #20
 80051e6:	69fa      	ldr	r2, [r7, #28]
 80051e8:	fb02 f303 	mul.w	r3, r2, r3
 80051ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051ee:	e054      	b.n	800529a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f6:	d050      	beq.n	800529a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051f8:	f7fc f832 	bl	8001260 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	69fa      	ldr	r2, [r7, #28]
 8005204:	429a      	cmp	r2, r3
 8005206:	d902      	bls.n	800520e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d13d      	bne.n	800528a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	685a      	ldr	r2, [r3, #4]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800521c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005226:	d111      	bne.n	800524c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005230:	d004      	beq.n	800523c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800523a:	d107      	bne.n	800524c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800524a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005250:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005254:	d10f      	bne.n	8005276 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005264:	601a      	str	r2, [r3, #0]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005274:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2201      	movs	r2, #1
 800527a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e017      	b.n	80052ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d101      	bne.n	8005294 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005290:	2300      	movs	r3, #0
 8005292:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	3b01      	subs	r3, #1
 8005298:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	689a      	ldr	r2, [r3, #8]
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	4013      	ands	r3, r2
 80052a4:	68ba      	ldr	r2, [r7, #8]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	bf0c      	ite	eq
 80052aa:	2301      	moveq	r3, #1
 80052ac:	2300      	movne	r3, #0
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	461a      	mov	r2, r3
 80052b2:	79fb      	ldrb	r3, [r7, #7]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d19b      	bne.n	80051f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3720      	adds	r7, #32
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	20000008 	.word	0x20000008

080052c8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af02      	add	r7, sp, #8
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052dc:	d111      	bne.n	8005302 <SPI_EndRxTransaction+0x3a>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052e6:	d004      	beq.n	80052f2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052f0:	d107      	bne.n	8005302 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005300:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800530a:	d12a      	bne.n	8005362 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005314:	d012      	beq.n	800533c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	9300      	str	r3, [sp, #0]
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	2200      	movs	r2, #0
 800531e:	2180      	movs	r1, #128	; 0x80
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f7ff ff49 	bl	80051b8 <SPI_WaitFlagStateUntilTimeout>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d02d      	beq.n	8005388 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005330:	f043 0220 	orr.w	r2, r3, #32
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e026      	b.n	800538a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	9300      	str	r3, [sp, #0]
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	2200      	movs	r2, #0
 8005344:	2101      	movs	r1, #1
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f7ff ff36 	bl	80051b8 <SPI_WaitFlagStateUntilTimeout>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d01a      	beq.n	8005388 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005356:	f043 0220 	orr.w	r2, r3, #32
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e013      	b.n	800538a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	9300      	str	r3, [sp, #0]
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	2200      	movs	r2, #0
 800536a:	2101      	movs	r1, #1
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f7ff ff23 	bl	80051b8 <SPI_WaitFlagStateUntilTimeout>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d007      	beq.n	8005388 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800537c:	f043 0220 	orr.w	r2, r3, #32
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e000      	b.n	800538a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
	...

08005394 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b088      	sub	sp, #32
 8005398:	af02      	add	r7, sp, #8
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80053a0:	4b1b      	ldr	r3, [pc, #108]	; (8005410 <SPI_EndRxTxTransaction+0x7c>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a1b      	ldr	r2, [pc, #108]	; (8005414 <SPI_EndRxTxTransaction+0x80>)
 80053a6:	fba2 2303 	umull	r2, r3, r2, r3
 80053aa:	0d5b      	lsrs	r3, r3, #21
 80053ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80053b0:	fb02 f303 	mul.w	r3, r2, r3
 80053b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053be:	d112      	bne.n	80053e6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	9300      	str	r3, [sp, #0]
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	2200      	movs	r2, #0
 80053c8:	2180      	movs	r1, #128	; 0x80
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f7ff fef4 	bl	80051b8 <SPI_WaitFlagStateUntilTimeout>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d016      	beq.n	8005404 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053da:	f043 0220 	orr.w	r2, r3, #32
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e00f      	b.n	8005406 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00a      	beq.n	8005402 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	3b01      	subs	r3, #1
 80053f0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053fc:	2b80      	cmp	r3, #128	; 0x80
 80053fe:	d0f2      	beq.n	80053e6 <SPI_EndRxTxTransaction+0x52>
 8005400:	e000      	b.n	8005404 <SPI_EndRxTxTransaction+0x70>
        break;
 8005402:	bf00      	nop
  }

  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3718      	adds	r7, #24
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	20000008 	.word	0x20000008
 8005414:	165e9f81 	.word	0x165e9f81

08005418 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e03f      	b.n	80054aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005430:	b2db      	uxtb	r3, r3
 8005432:	2b00      	cmp	r3, #0
 8005434:	d106      	bne.n	8005444 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f7fb fda8 	bl	8000f94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2224      	movs	r2, #36	; 0x24
 8005448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68da      	ldr	r2, [r3, #12]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800545a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 fd7b 	bl	8005f58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	691a      	ldr	r2, [r3, #16]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005470:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	695a      	ldr	r2, [r3, #20]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005480:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68da      	ldr	r2, [r3, #12]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005490:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2220      	movs	r2, #32
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2220      	movs	r2, #32
 80054a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3708      	adds	r7, #8
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b08a      	sub	sp, #40	; 0x28
 80054b6:	af02      	add	r7, sp, #8
 80054b8:	60f8      	str	r0, [r7, #12]
 80054ba:	60b9      	str	r1, [r7, #8]
 80054bc:	603b      	str	r3, [r7, #0]
 80054be:	4613      	mov	r3, r2
 80054c0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80054c2:	2300      	movs	r3, #0
 80054c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b20      	cmp	r3, #32
 80054d0:	d17c      	bne.n	80055cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d002      	beq.n	80054de <HAL_UART_Transmit+0x2c>
 80054d8:	88fb      	ldrh	r3, [r7, #6]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d101      	bne.n	80054e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e075      	b.n	80055ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d101      	bne.n	80054f0 <HAL_UART_Transmit+0x3e>
 80054ec:	2302      	movs	r3, #2
 80054ee:	e06e      	b.n	80055ce <HAL_UART_Transmit+0x11c>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2221      	movs	r2, #33	; 0x21
 8005502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005506:	f7fb feab 	bl	8001260 <HAL_GetTick>
 800550a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	88fa      	ldrh	r2, [r7, #6]
 8005510:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	88fa      	ldrh	r2, [r7, #6]
 8005516:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005520:	d108      	bne.n	8005534 <HAL_UART_Transmit+0x82>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d104      	bne.n	8005534 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800552a:	2300      	movs	r3, #0
 800552c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	61bb      	str	r3, [r7, #24]
 8005532:	e003      	b.n	800553c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005538:	2300      	movs	r3, #0
 800553a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005544:	e02a      	b.n	800559c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	9300      	str	r3, [sp, #0]
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	2200      	movs	r2, #0
 800554e:	2180      	movs	r1, #128	; 0x80
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f000 faf9 	bl	8005b48 <UART_WaitOnFlagUntilTimeout>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d001      	beq.n	8005560 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e036      	b.n	80055ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10b      	bne.n	800557e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	881b      	ldrh	r3, [r3, #0]
 800556a:	461a      	mov	r2, r3
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005574:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	3302      	adds	r3, #2
 800557a:	61bb      	str	r3, [r7, #24]
 800557c:	e007      	b.n	800558e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	781a      	ldrb	r2, [r3, #0]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	3301      	adds	r3, #1
 800558c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005592:	b29b      	uxth	r3, r3
 8005594:	3b01      	subs	r3, #1
 8005596:	b29a      	uxth	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1cf      	bne.n	8005546 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	9300      	str	r3, [sp, #0]
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	2200      	movs	r2, #0
 80055ae:	2140      	movs	r1, #64	; 0x40
 80055b0:	68f8      	ldr	r0, [r7, #12]
 80055b2:	f000 fac9 	bl	8005b48 <UART_WaitOnFlagUntilTimeout>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d001      	beq.n	80055c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e006      	b.n	80055ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2220      	movs	r2, #32
 80055c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80055c8:	2300      	movs	r3, #0
 80055ca:	e000      	b.n	80055ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80055cc:	2302      	movs	r3, #2
  }
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3720      	adds	r7, #32
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
	...

080055d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b0ba      	sub	sp, #232	; 0xe8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80055fe:	2300      	movs	r3, #0
 8005600:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005604:	2300      	movs	r3, #0
 8005606:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800560a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800560e:	f003 030f 	and.w	r3, r3, #15
 8005612:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005616:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800561a:	2b00      	cmp	r3, #0
 800561c:	d10f      	bne.n	800563e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800561e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005622:	f003 0320 	and.w	r3, r3, #32
 8005626:	2b00      	cmp	r3, #0
 8005628:	d009      	beq.n	800563e <HAL_UART_IRQHandler+0x66>
 800562a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800562e:	f003 0320 	and.w	r3, r3, #32
 8005632:	2b00      	cmp	r3, #0
 8005634:	d003      	beq.n	800563e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 fbd3 	bl	8005de2 <UART_Receive_IT>
      return;
 800563c:	e256      	b.n	8005aec <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800563e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005642:	2b00      	cmp	r3, #0
 8005644:	f000 80de 	beq.w	8005804 <HAL_UART_IRQHandler+0x22c>
 8005648:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800564c:	f003 0301 	and.w	r3, r3, #1
 8005650:	2b00      	cmp	r3, #0
 8005652:	d106      	bne.n	8005662 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005658:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800565c:	2b00      	cmp	r3, #0
 800565e:	f000 80d1 	beq.w	8005804 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00b      	beq.n	8005686 <HAL_UART_IRQHandler+0xae>
 800566e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005676:	2b00      	cmp	r3, #0
 8005678:	d005      	beq.n	8005686 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567e:	f043 0201 	orr.w	r2, r3, #1
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800568a:	f003 0304 	and.w	r3, r3, #4
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00b      	beq.n	80056aa <HAL_UART_IRQHandler+0xd2>
 8005692:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005696:	f003 0301 	and.w	r3, r3, #1
 800569a:	2b00      	cmp	r3, #0
 800569c:	d005      	beq.n	80056aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a2:	f043 0202 	orr.w	r2, r3, #2
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056ae:	f003 0302 	and.w	r3, r3, #2
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00b      	beq.n	80056ce <HAL_UART_IRQHandler+0xf6>
 80056b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056ba:	f003 0301 	and.w	r3, r3, #1
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d005      	beq.n	80056ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c6:	f043 0204 	orr.w	r2, r3, #4
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80056ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056d2:	f003 0308 	and.w	r3, r3, #8
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d011      	beq.n	80056fe <HAL_UART_IRQHandler+0x126>
 80056da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056de:	f003 0320 	and.w	r3, r3, #32
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d105      	bne.n	80056f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80056e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056ea:	f003 0301 	and.w	r3, r3, #1
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d005      	beq.n	80056fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f6:	f043 0208 	orr.w	r2, r3, #8
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005702:	2b00      	cmp	r3, #0
 8005704:	f000 81ed 	beq.w	8005ae2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800570c:	f003 0320 	and.w	r3, r3, #32
 8005710:	2b00      	cmp	r3, #0
 8005712:	d008      	beq.n	8005726 <HAL_UART_IRQHandler+0x14e>
 8005714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005718:	f003 0320 	and.w	r3, r3, #32
 800571c:	2b00      	cmp	r3, #0
 800571e:	d002      	beq.n	8005726 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 fb5e 	bl	8005de2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	695b      	ldr	r3, [r3, #20]
 800572c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005730:	2b40      	cmp	r3, #64	; 0x40
 8005732:	bf0c      	ite	eq
 8005734:	2301      	moveq	r3, #1
 8005736:	2300      	movne	r3, #0
 8005738:	b2db      	uxtb	r3, r3
 800573a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005742:	f003 0308 	and.w	r3, r3, #8
 8005746:	2b00      	cmp	r3, #0
 8005748:	d103      	bne.n	8005752 <HAL_UART_IRQHandler+0x17a>
 800574a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800574e:	2b00      	cmp	r3, #0
 8005750:	d04f      	beq.n	80057f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 fa66 	bl	8005c24 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005762:	2b40      	cmp	r3, #64	; 0x40
 8005764:	d141      	bne.n	80057ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	3314      	adds	r3, #20
 800576c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005770:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005774:	e853 3f00 	ldrex	r3, [r3]
 8005778:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800577c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005780:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005784:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	3314      	adds	r3, #20
 800578e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005792:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005796:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800579e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80057a2:	e841 2300 	strex	r3, r2, [r1]
 80057a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80057aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d1d9      	bne.n	8005766 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d013      	beq.n	80057e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057be:	4a7d      	ldr	r2, [pc, #500]	; (80059b4 <HAL_UART_IRQHandler+0x3dc>)
 80057c0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7fb fefb 	bl	80015c2 <HAL_DMA_Abort_IT>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d016      	beq.n	8005800 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80057dc:	4610      	mov	r0, r2
 80057de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057e0:	e00e      	b.n	8005800 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f99a 	bl	8005b1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057e8:	e00a      	b.n	8005800 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 f996 	bl	8005b1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057f0:	e006      	b.n	8005800 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f992 	bl	8005b1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80057fe:	e170      	b.n	8005ae2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005800:	bf00      	nop
    return;
 8005802:	e16e      	b.n	8005ae2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005808:	2b01      	cmp	r3, #1
 800580a:	f040 814a 	bne.w	8005aa2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800580e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005812:	f003 0310 	and.w	r3, r3, #16
 8005816:	2b00      	cmp	r3, #0
 8005818:	f000 8143 	beq.w	8005aa2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800581c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005820:	f003 0310 	and.w	r3, r3, #16
 8005824:	2b00      	cmp	r3, #0
 8005826:	f000 813c 	beq.w	8005aa2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800582a:	2300      	movs	r3, #0
 800582c:	60bb      	str	r3, [r7, #8]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	60bb      	str	r3, [r7, #8]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	60bb      	str	r3, [r7, #8]
 800583e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800584a:	2b40      	cmp	r3, #64	; 0x40
 800584c:	f040 80b4 	bne.w	80059b8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800585c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005860:	2b00      	cmp	r3, #0
 8005862:	f000 8140 	beq.w	8005ae6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800586a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800586e:	429a      	cmp	r2, r3
 8005870:	f080 8139 	bcs.w	8005ae6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800587a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005880:	69db      	ldr	r3, [r3, #28]
 8005882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005886:	f000 8088 	beq.w	800599a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	330c      	adds	r3, #12
 8005890:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005894:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005898:	e853 3f00 	ldrex	r3, [r3]
 800589c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80058a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	330c      	adds	r3, #12
 80058b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80058b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80058ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80058c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80058c6:	e841 2300 	strex	r3, r2, [r1]
 80058ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80058ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1d9      	bne.n	800588a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	3314      	adds	r3, #20
 80058dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058e0:	e853 3f00 	ldrex	r3, [r3]
 80058e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80058e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058e8:	f023 0301 	bic.w	r3, r3, #1
 80058ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	3314      	adds	r3, #20
 80058f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80058fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80058fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005900:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005902:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005906:	e841 2300 	strex	r3, r2, [r1]
 800590a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800590c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1e1      	bne.n	80058d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	3314      	adds	r3, #20
 8005918:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800591c:	e853 3f00 	ldrex	r3, [r3]
 8005920:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005922:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005924:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005928:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	3314      	adds	r3, #20
 8005932:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005936:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005938:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800593c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800593e:	e841 2300 	strex	r3, r2, [r1]
 8005942:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005944:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1e3      	bne.n	8005912 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2220      	movs	r2, #32
 800594e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	330c      	adds	r3, #12
 800595e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005960:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005962:	e853 3f00 	ldrex	r3, [r3]
 8005966:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005968:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800596a:	f023 0310 	bic.w	r3, r3, #16
 800596e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	330c      	adds	r3, #12
 8005978:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800597c:	65ba      	str	r2, [r7, #88]	; 0x58
 800597e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005980:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005982:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005984:	e841 2300 	strex	r3, r2, [r1]
 8005988:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800598a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1e3      	bne.n	8005958 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005994:	4618      	mov	r0, r3
 8005996:	f7fb fda4 	bl	80014e2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	4619      	mov	r1, r3
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 f8c0 	bl	8005b30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80059b0:	e099      	b.n	8005ae6 <HAL_UART_IRQHandler+0x50e>
 80059b2:	bf00      	nop
 80059b4:	08005ceb 	.word	0x08005ceb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f000 808b 	beq.w	8005aea <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80059d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f000 8086 	beq.w	8005aea <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	330c      	adds	r3, #12
 80059e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e8:	e853 3f00 	ldrex	r3, [r3]
 80059ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80059ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	330c      	adds	r3, #12
 80059fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005a02:	647a      	str	r2, [r7, #68]	; 0x44
 8005a04:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a0a:	e841 2300 	strex	r3, r2, [r1]
 8005a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d1e3      	bne.n	80059de <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	3314      	adds	r3, #20
 8005a1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a20:	e853 3f00 	ldrex	r3, [r3]
 8005a24:	623b      	str	r3, [r7, #32]
   return(result);
 8005a26:	6a3b      	ldr	r3, [r7, #32]
 8005a28:	f023 0301 	bic.w	r3, r3, #1
 8005a2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	3314      	adds	r3, #20
 8005a36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005a3a:	633a      	str	r2, [r7, #48]	; 0x30
 8005a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a42:	e841 2300 	strex	r3, r2, [r1]
 8005a46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1e3      	bne.n	8005a16 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2220      	movs	r2, #32
 8005a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	330c      	adds	r3, #12
 8005a62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	e853 3f00 	ldrex	r3, [r3]
 8005a6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f023 0310 	bic.w	r3, r3, #16
 8005a72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	330c      	adds	r3, #12
 8005a7c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005a80:	61fa      	str	r2, [r7, #28]
 8005a82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a84:	69b9      	ldr	r1, [r7, #24]
 8005a86:	69fa      	ldr	r2, [r7, #28]
 8005a88:	e841 2300 	strex	r3, r2, [r1]
 8005a8c:	617b      	str	r3, [r7, #20]
   return(result);
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d1e3      	bne.n	8005a5c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a98:	4619      	mov	r1, r3
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 f848 	bl	8005b30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005aa0:	e023      	b.n	8005aea <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d009      	beq.n	8005ac2 <HAL_UART_IRQHandler+0x4ea>
 8005aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d003      	beq.n	8005ac2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 f929 	bl	8005d12 <UART_Transmit_IT>
    return;
 8005ac0:	e014      	b.n	8005aec <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00e      	beq.n	8005aec <HAL_UART_IRQHandler+0x514>
 8005ace:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d008      	beq.n	8005aec <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 f969 	bl	8005db2 <UART_EndTransmit_IT>
    return;
 8005ae0:	e004      	b.n	8005aec <HAL_UART_IRQHandler+0x514>
    return;
 8005ae2:	bf00      	nop
 8005ae4:	e002      	b.n	8005aec <HAL_UART_IRQHandler+0x514>
      return;
 8005ae6:	bf00      	nop
 8005ae8:	e000      	b.n	8005aec <HAL_UART_IRQHandler+0x514>
      return;
 8005aea:	bf00      	nop
  }
}
 8005aec:	37e8      	adds	r7, #232	; 0xe8
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop

08005af4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005afc:	bf00      	nop
 8005afe:	370c      	adds	r7, #12
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005b10:	bf00      	nop
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	460b      	mov	r3, r1
 8005b3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b3c:	bf00      	nop
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b090      	sub	sp, #64	; 0x40
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	603b      	str	r3, [r7, #0]
 8005b54:	4613      	mov	r3, r2
 8005b56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b58:	e050      	b.n	8005bfc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b60:	d04c      	beq.n	8005bfc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005b62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d007      	beq.n	8005b78 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b68:	f7fb fb7a 	bl	8001260 <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d241      	bcs.n	8005bfc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	330c      	adds	r3, #12
 8005b7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b82:	e853 3f00 	ldrex	r3, [r3]
 8005b86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	330c      	adds	r3, #12
 8005b96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b98:	637a      	str	r2, [r7, #52]	; 0x34
 8005b9a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ba0:	e841 2300 	strex	r3, r2, [r1]
 8005ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d1e5      	bne.n	8005b78 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	3314      	adds	r3, #20
 8005bb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	e853 3f00 	ldrex	r3, [r3]
 8005bba:	613b      	str	r3, [r7, #16]
   return(result);
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	f023 0301 	bic.w	r3, r3, #1
 8005bc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	3314      	adds	r3, #20
 8005bca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bcc:	623a      	str	r2, [r7, #32]
 8005bce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd0:	69f9      	ldr	r1, [r7, #28]
 8005bd2:	6a3a      	ldr	r2, [r7, #32]
 8005bd4:	e841 2300 	strex	r3, r2, [r1]
 8005bd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d1e5      	bne.n	8005bac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2220      	movs	r2, #32
 8005be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2220      	movs	r2, #32
 8005bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e00f      	b.n	8005c1c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	4013      	ands	r3, r2
 8005c06:	68ba      	ldr	r2, [r7, #8]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	bf0c      	ite	eq
 8005c0c:	2301      	moveq	r3, #1
 8005c0e:	2300      	movne	r3, #0
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	461a      	mov	r2, r3
 8005c14:	79fb      	ldrb	r3, [r7, #7]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d09f      	beq.n	8005b5a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3740      	adds	r7, #64	; 0x40
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b095      	sub	sp, #84	; 0x54
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	330c      	adds	r3, #12
 8005c32:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c36:	e853 3f00 	ldrex	r3, [r3]
 8005c3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	330c      	adds	r3, #12
 8005c4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c4c:	643a      	str	r2, [r7, #64]	; 0x40
 8005c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c54:	e841 2300 	strex	r3, r2, [r1]
 8005c58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1e5      	bne.n	8005c2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	3314      	adds	r3, #20
 8005c66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c68:	6a3b      	ldr	r3, [r7, #32]
 8005c6a:	e853 3f00 	ldrex	r3, [r3]
 8005c6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	f023 0301 	bic.w	r3, r3, #1
 8005c76:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	3314      	adds	r3, #20
 8005c7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c88:	e841 2300 	strex	r3, r2, [r1]
 8005c8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d1e5      	bne.n	8005c60 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d119      	bne.n	8005cd0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	330c      	adds	r3, #12
 8005ca2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	e853 3f00 	ldrex	r3, [r3]
 8005caa:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	f023 0310 	bic.w	r3, r3, #16
 8005cb2:	647b      	str	r3, [r7, #68]	; 0x44
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	330c      	adds	r3, #12
 8005cba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cbc:	61ba      	str	r2, [r7, #24]
 8005cbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc0:	6979      	ldr	r1, [r7, #20]
 8005cc2:	69ba      	ldr	r2, [r7, #24]
 8005cc4:	e841 2300 	strex	r3, r2, [r1]
 8005cc8:	613b      	str	r3, [r7, #16]
   return(result);
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d1e5      	bne.n	8005c9c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2220      	movs	r2, #32
 8005cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005cde:	bf00      	nop
 8005ce0:	3754      	adds	r7, #84	; 0x54
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr

08005cea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b084      	sub	sp, #16
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	f7ff ff09 	bl	8005b1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d0a:	bf00      	nop
 8005d0c:	3710      	adds	r7, #16
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d12:	b480      	push	{r7}
 8005d14:	b085      	sub	sp, #20
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	2b21      	cmp	r3, #33	; 0x21
 8005d24:	d13e      	bne.n	8005da4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d2e:	d114      	bne.n	8005d5a <UART_Transmit_IT+0x48>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d110      	bne.n	8005d5a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6a1b      	ldr	r3, [r3, #32]
 8005d3c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	881b      	ldrh	r3, [r3, #0]
 8005d42:	461a      	mov	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d4c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	1c9a      	adds	r2, r3, #2
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	621a      	str	r2, [r3, #32]
 8005d58:	e008      	b.n	8005d6c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	1c59      	adds	r1, r3, #1
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	6211      	str	r1, [r2, #32]
 8005d64:	781a      	ldrb	r2, [r3, #0]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	3b01      	subs	r3, #1
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	4619      	mov	r1, r3
 8005d7a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d10f      	bne.n	8005da0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68da      	ldr	r2, [r3, #12]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d8e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68da      	ldr	r2, [r3, #12]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d9e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005da0:	2300      	movs	r3, #0
 8005da2:	e000      	b.n	8005da6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005da4:	2302      	movs	r3, #2
  }
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3714      	adds	r7, #20
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005db2:	b580      	push	{r7, lr}
 8005db4:	b082      	sub	sp, #8
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68da      	ldr	r2, [r3, #12]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dc8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2220      	movs	r2, #32
 8005dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f7ff fe8e 	bl	8005af4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3708      	adds	r7, #8
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b08c      	sub	sp, #48	; 0x30
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	2b22      	cmp	r3, #34	; 0x22
 8005df4:	f040 80ab 	bne.w	8005f4e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e00:	d117      	bne.n	8005e32 <UART_Receive_IT+0x50>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d113      	bne.n	8005e32 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e12:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e24:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e2a:	1c9a      	adds	r2, r3, #2
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	629a      	str	r2, [r3, #40]	; 0x28
 8005e30:	e026      	b.n	8005e80 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e36:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e44:	d007      	beq.n	8005e56 <UART_Receive_IT+0x74>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d10a      	bne.n	8005e64 <UART_Receive_IT+0x82>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d106      	bne.n	8005e64 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	b2da      	uxtb	r2, r3
 8005e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e60:	701a      	strb	r2, [r3, #0]
 8005e62:	e008      	b.n	8005e76 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e70:	b2da      	uxtb	r2, r3
 8005e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e74:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e7a:	1c5a      	adds	r2, r3, #1
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	3b01      	subs	r3, #1
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d15a      	bne.n	8005f4a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68da      	ldr	r2, [r3, #12]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f022 0220 	bic.w	r2, r2, #32
 8005ea2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68da      	ldr	r2, [r3, #12]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005eb2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	695a      	ldr	r2, [r3, #20]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f022 0201 	bic.w	r2, r2, #1
 8005ec2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2220      	movs	r2, #32
 8005ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d135      	bne.n	8005f40 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	330c      	adds	r3, #12
 8005ee0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	e853 3f00 	ldrex	r3, [r3]
 8005ee8:	613b      	str	r3, [r7, #16]
   return(result);
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	f023 0310 	bic.w	r3, r3, #16
 8005ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	330c      	adds	r3, #12
 8005ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005efa:	623a      	str	r2, [r7, #32]
 8005efc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005efe:	69f9      	ldr	r1, [r7, #28]
 8005f00:	6a3a      	ldr	r2, [r7, #32]
 8005f02:	e841 2300 	strex	r3, r2, [r1]
 8005f06:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d1e5      	bne.n	8005eda <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0310 	and.w	r3, r3, #16
 8005f18:	2b10      	cmp	r3, #16
 8005f1a:	d10a      	bne.n	8005f32 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	60fb      	str	r3, [r7, #12]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	60fb      	str	r3, [r7, #12]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	60fb      	str	r3, [r7, #12]
 8005f30:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f36:	4619      	mov	r1, r3
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f7ff fdf9 	bl	8005b30 <HAL_UARTEx_RxEventCallback>
 8005f3e:	e002      	b.n	8005f46 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f7ff fde1 	bl	8005b08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005f46:	2300      	movs	r3, #0
 8005f48:	e002      	b.n	8005f50 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	e000      	b.n	8005f50 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005f4e:	2302      	movs	r3, #2
  }
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3730      	adds	r7, #48	; 0x30
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f5c:	b0c0      	sub	sp, #256	; 0x100
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f74:	68d9      	ldr	r1, [r3, #12]
 8005f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	ea40 0301 	orr.w	r3, r0, r1
 8005f80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f86:	689a      	ldr	r2, [r3, #8]
 8005f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	431a      	orrs	r2, r3
 8005f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	431a      	orrs	r2, r3
 8005f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f9c:	69db      	ldr	r3, [r3, #28]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005fb0:	f021 010c 	bic.w	r1, r1, #12
 8005fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005fbe:	430b      	orrs	r3, r1
 8005fc0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	695b      	ldr	r3, [r3, #20]
 8005fca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fd2:	6999      	ldr	r1, [r3, #24]
 8005fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	ea40 0301 	orr.w	r3, r0, r1
 8005fde:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	4b8f      	ldr	r3, [pc, #572]	; (8006224 <UART_SetConfig+0x2cc>)
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d005      	beq.n	8005ff8 <UART_SetConfig+0xa0>
 8005fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	4b8d      	ldr	r3, [pc, #564]	; (8006228 <UART_SetConfig+0x2d0>)
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d104      	bne.n	8006002 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ff8:	f7fe fb12 	bl	8004620 <HAL_RCC_GetPCLK2Freq>
 8005ffc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006000:	e003      	b.n	800600a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006002:	f7fe faf9 	bl	80045f8 <HAL_RCC_GetPCLK1Freq>
 8006006:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800600a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800600e:	69db      	ldr	r3, [r3, #28]
 8006010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006014:	f040 810c 	bne.w	8006230 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006018:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800601c:	2200      	movs	r2, #0
 800601e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006022:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006026:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800602a:	4622      	mov	r2, r4
 800602c:	462b      	mov	r3, r5
 800602e:	1891      	adds	r1, r2, r2
 8006030:	65b9      	str	r1, [r7, #88]	; 0x58
 8006032:	415b      	adcs	r3, r3
 8006034:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006036:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800603a:	4621      	mov	r1, r4
 800603c:	eb12 0801 	adds.w	r8, r2, r1
 8006040:	4629      	mov	r1, r5
 8006042:	eb43 0901 	adc.w	r9, r3, r1
 8006046:	f04f 0200 	mov.w	r2, #0
 800604a:	f04f 0300 	mov.w	r3, #0
 800604e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006052:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006056:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800605a:	4690      	mov	r8, r2
 800605c:	4699      	mov	r9, r3
 800605e:	4623      	mov	r3, r4
 8006060:	eb18 0303 	adds.w	r3, r8, r3
 8006064:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006068:	462b      	mov	r3, r5
 800606a:	eb49 0303 	adc.w	r3, r9, r3
 800606e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800607e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006082:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006086:	460b      	mov	r3, r1
 8006088:	18db      	adds	r3, r3, r3
 800608a:	653b      	str	r3, [r7, #80]	; 0x50
 800608c:	4613      	mov	r3, r2
 800608e:	eb42 0303 	adc.w	r3, r2, r3
 8006092:	657b      	str	r3, [r7, #84]	; 0x54
 8006094:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006098:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800609c:	f7fa f894 	bl	80001c8 <__aeabi_uldivmod>
 80060a0:	4602      	mov	r2, r0
 80060a2:	460b      	mov	r3, r1
 80060a4:	4b61      	ldr	r3, [pc, #388]	; (800622c <UART_SetConfig+0x2d4>)
 80060a6:	fba3 2302 	umull	r2, r3, r3, r2
 80060aa:	095b      	lsrs	r3, r3, #5
 80060ac:	011c      	lsls	r4, r3, #4
 80060ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060b2:	2200      	movs	r2, #0
 80060b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80060b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80060bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80060c0:	4642      	mov	r2, r8
 80060c2:	464b      	mov	r3, r9
 80060c4:	1891      	adds	r1, r2, r2
 80060c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80060c8:	415b      	adcs	r3, r3
 80060ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80060d0:	4641      	mov	r1, r8
 80060d2:	eb12 0a01 	adds.w	sl, r2, r1
 80060d6:	4649      	mov	r1, r9
 80060d8:	eb43 0b01 	adc.w	fp, r3, r1
 80060dc:	f04f 0200 	mov.w	r2, #0
 80060e0:	f04f 0300 	mov.w	r3, #0
 80060e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80060e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80060ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060f0:	4692      	mov	sl, r2
 80060f2:	469b      	mov	fp, r3
 80060f4:	4643      	mov	r3, r8
 80060f6:	eb1a 0303 	adds.w	r3, sl, r3
 80060fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80060fe:	464b      	mov	r3, r9
 8006100:	eb4b 0303 	adc.w	r3, fp, r3
 8006104:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006114:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006118:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800611c:	460b      	mov	r3, r1
 800611e:	18db      	adds	r3, r3, r3
 8006120:	643b      	str	r3, [r7, #64]	; 0x40
 8006122:	4613      	mov	r3, r2
 8006124:	eb42 0303 	adc.w	r3, r2, r3
 8006128:	647b      	str	r3, [r7, #68]	; 0x44
 800612a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800612e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006132:	f7fa f849 	bl	80001c8 <__aeabi_uldivmod>
 8006136:	4602      	mov	r2, r0
 8006138:	460b      	mov	r3, r1
 800613a:	4611      	mov	r1, r2
 800613c:	4b3b      	ldr	r3, [pc, #236]	; (800622c <UART_SetConfig+0x2d4>)
 800613e:	fba3 2301 	umull	r2, r3, r3, r1
 8006142:	095b      	lsrs	r3, r3, #5
 8006144:	2264      	movs	r2, #100	; 0x64
 8006146:	fb02 f303 	mul.w	r3, r2, r3
 800614a:	1acb      	subs	r3, r1, r3
 800614c:	00db      	lsls	r3, r3, #3
 800614e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006152:	4b36      	ldr	r3, [pc, #216]	; (800622c <UART_SetConfig+0x2d4>)
 8006154:	fba3 2302 	umull	r2, r3, r3, r2
 8006158:	095b      	lsrs	r3, r3, #5
 800615a:	005b      	lsls	r3, r3, #1
 800615c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006160:	441c      	add	r4, r3
 8006162:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006166:	2200      	movs	r2, #0
 8006168:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800616c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006170:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006174:	4642      	mov	r2, r8
 8006176:	464b      	mov	r3, r9
 8006178:	1891      	adds	r1, r2, r2
 800617a:	63b9      	str	r1, [r7, #56]	; 0x38
 800617c:	415b      	adcs	r3, r3
 800617e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006180:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006184:	4641      	mov	r1, r8
 8006186:	1851      	adds	r1, r2, r1
 8006188:	6339      	str	r1, [r7, #48]	; 0x30
 800618a:	4649      	mov	r1, r9
 800618c:	414b      	adcs	r3, r1
 800618e:	637b      	str	r3, [r7, #52]	; 0x34
 8006190:	f04f 0200 	mov.w	r2, #0
 8006194:	f04f 0300 	mov.w	r3, #0
 8006198:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800619c:	4659      	mov	r1, fp
 800619e:	00cb      	lsls	r3, r1, #3
 80061a0:	4651      	mov	r1, sl
 80061a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061a6:	4651      	mov	r1, sl
 80061a8:	00ca      	lsls	r2, r1, #3
 80061aa:	4610      	mov	r0, r2
 80061ac:	4619      	mov	r1, r3
 80061ae:	4603      	mov	r3, r0
 80061b0:	4642      	mov	r2, r8
 80061b2:	189b      	adds	r3, r3, r2
 80061b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061b8:	464b      	mov	r3, r9
 80061ba:	460a      	mov	r2, r1
 80061bc:	eb42 0303 	adc.w	r3, r2, r3
 80061c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80061d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80061d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80061d8:	460b      	mov	r3, r1
 80061da:	18db      	adds	r3, r3, r3
 80061dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80061de:	4613      	mov	r3, r2
 80061e0:	eb42 0303 	adc.w	r3, r2, r3
 80061e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80061ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80061ee:	f7f9 ffeb 	bl	80001c8 <__aeabi_uldivmod>
 80061f2:	4602      	mov	r2, r0
 80061f4:	460b      	mov	r3, r1
 80061f6:	4b0d      	ldr	r3, [pc, #52]	; (800622c <UART_SetConfig+0x2d4>)
 80061f8:	fba3 1302 	umull	r1, r3, r3, r2
 80061fc:	095b      	lsrs	r3, r3, #5
 80061fe:	2164      	movs	r1, #100	; 0x64
 8006200:	fb01 f303 	mul.w	r3, r1, r3
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	00db      	lsls	r3, r3, #3
 8006208:	3332      	adds	r3, #50	; 0x32
 800620a:	4a08      	ldr	r2, [pc, #32]	; (800622c <UART_SetConfig+0x2d4>)
 800620c:	fba2 2303 	umull	r2, r3, r2, r3
 8006210:	095b      	lsrs	r3, r3, #5
 8006212:	f003 0207 	and.w	r2, r3, #7
 8006216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4422      	add	r2, r4
 800621e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006220:	e105      	b.n	800642e <UART_SetConfig+0x4d6>
 8006222:	bf00      	nop
 8006224:	40011000 	.word	0x40011000
 8006228:	40011400 	.word	0x40011400
 800622c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006230:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006234:	2200      	movs	r2, #0
 8006236:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800623a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800623e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006242:	4642      	mov	r2, r8
 8006244:	464b      	mov	r3, r9
 8006246:	1891      	adds	r1, r2, r2
 8006248:	6239      	str	r1, [r7, #32]
 800624a:	415b      	adcs	r3, r3
 800624c:	627b      	str	r3, [r7, #36]	; 0x24
 800624e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006252:	4641      	mov	r1, r8
 8006254:	1854      	adds	r4, r2, r1
 8006256:	4649      	mov	r1, r9
 8006258:	eb43 0501 	adc.w	r5, r3, r1
 800625c:	f04f 0200 	mov.w	r2, #0
 8006260:	f04f 0300 	mov.w	r3, #0
 8006264:	00eb      	lsls	r3, r5, #3
 8006266:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800626a:	00e2      	lsls	r2, r4, #3
 800626c:	4614      	mov	r4, r2
 800626e:	461d      	mov	r5, r3
 8006270:	4643      	mov	r3, r8
 8006272:	18e3      	adds	r3, r4, r3
 8006274:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006278:	464b      	mov	r3, r9
 800627a:	eb45 0303 	adc.w	r3, r5, r3
 800627e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800628e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006292:	f04f 0200 	mov.w	r2, #0
 8006296:	f04f 0300 	mov.w	r3, #0
 800629a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800629e:	4629      	mov	r1, r5
 80062a0:	008b      	lsls	r3, r1, #2
 80062a2:	4621      	mov	r1, r4
 80062a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062a8:	4621      	mov	r1, r4
 80062aa:	008a      	lsls	r2, r1, #2
 80062ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80062b0:	f7f9 ff8a 	bl	80001c8 <__aeabi_uldivmod>
 80062b4:	4602      	mov	r2, r0
 80062b6:	460b      	mov	r3, r1
 80062b8:	4b60      	ldr	r3, [pc, #384]	; (800643c <UART_SetConfig+0x4e4>)
 80062ba:	fba3 2302 	umull	r2, r3, r3, r2
 80062be:	095b      	lsrs	r3, r3, #5
 80062c0:	011c      	lsls	r4, r3, #4
 80062c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062c6:	2200      	movs	r2, #0
 80062c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80062cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80062d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80062d4:	4642      	mov	r2, r8
 80062d6:	464b      	mov	r3, r9
 80062d8:	1891      	adds	r1, r2, r2
 80062da:	61b9      	str	r1, [r7, #24]
 80062dc:	415b      	adcs	r3, r3
 80062de:	61fb      	str	r3, [r7, #28]
 80062e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062e4:	4641      	mov	r1, r8
 80062e6:	1851      	adds	r1, r2, r1
 80062e8:	6139      	str	r1, [r7, #16]
 80062ea:	4649      	mov	r1, r9
 80062ec:	414b      	adcs	r3, r1
 80062ee:	617b      	str	r3, [r7, #20]
 80062f0:	f04f 0200 	mov.w	r2, #0
 80062f4:	f04f 0300 	mov.w	r3, #0
 80062f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80062fc:	4659      	mov	r1, fp
 80062fe:	00cb      	lsls	r3, r1, #3
 8006300:	4651      	mov	r1, sl
 8006302:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006306:	4651      	mov	r1, sl
 8006308:	00ca      	lsls	r2, r1, #3
 800630a:	4610      	mov	r0, r2
 800630c:	4619      	mov	r1, r3
 800630e:	4603      	mov	r3, r0
 8006310:	4642      	mov	r2, r8
 8006312:	189b      	adds	r3, r3, r2
 8006314:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006318:	464b      	mov	r3, r9
 800631a:	460a      	mov	r2, r1
 800631c:	eb42 0303 	adc.w	r3, r2, r3
 8006320:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	67bb      	str	r3, [r7, #120]	; 0x78
 800632e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006330:	f04f 0200 	mov.w	r2, #0
 8006334:	f04f 0300 	mov.w	r3, #0
 8006338:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800633c:	4649      	mov	r1, r9
 800633e:	008b      	lsls	r3, r1, #2
 8006340:	4641      	mov	r1, r8
 8006342:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006346:	4641      	mov	r1, r8
 8006348:	008a      	lsls	r2, r1, #2
 800634a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800634e:	f7f9 ff3b 	bl	80001c8 <__aeabi_uldivmod>
 8006352:	4602      	mov	r2, r0
 8006354:	460b      	mov	r3, r1
 8006356:	4b39      	ldr	r3, [pc, #228]	; (800643c <UART_SetConfig+0x4e4>)
 8006358:	fba3 1302 	umull	r1, r3, r3, r2
 800635c:	095b      	lsrs	r3, r3, #5
 800635e:	2164      	movs	r1, #100	; 0x64
 8006360:	fb01 f303 	mul.w	r3, r1, r3
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	011b      	lsls	r3, r3, #4
 8006368:	3332      	adds	r3, #50	; 0x32
 800636a:	4a34      	ldr	r2, [pc, #208]	; (800643c <UART_SetConfig+0x4e4>)
 800636c:	fba2 2303 	umull	r2, r3, r2, r3
 8006370:	095b      	lsrs	r3, r3, #5
 8006372:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006376:	441c      	add	r4, r3
 8006378:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800637c:	2200      	movs	r2, #0
 800637e:	673b      	str	r3, [r7, #112]	; 0x70
 8006380:	677a      	str	r2, [r7, #116]	; 0x74
 8006382:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006386:	4642      	mov	r2, r8
 8006388:	464b      	mov	r3, r9
 800638a:	1891      	adds	r1, r2, r2
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	415b      	adcs	r3, r3
 8006390:	60fb      	str	r3, [r7, #12]
 8006392:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006396:	4641      	mov	r1, r8
 8006398:	1851      	adds	r1, r2, r1
 800639a:	6039      	str	r1, [r7, #0]
 800639c:	4649      	mov	r1, r9
 800639e:	414b      	adcs	r3, r1
 80063a0:	607b      	str	r3, [r7, #4]
 80063a2:	f04f 0200 	mov.w	r2, #0
 80063a6:	f04f 0300 	mov.w	r3, #0
 80063aa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80063ae:	4659      	mov	r1, fp
 80063b0:	00cb      	lsls	r3, r1, #3
 80063b2:	4651      	mov	r1, sl
 80063b4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063b8:	4651      	mov	r1, sl
 80063ba:	00ca      	lsls	r2, r1, #3
 80063bc:	4610      	mov	r0, r2
 80063be:	4619      	mov	r1, r3
 80063c0:	4603      	mov	r3, r0
 80063c2:	4642      	mov	r2, r8
 80063c4:	189b      	adds	r3, r3, r2
 80063c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80063c8:	464b      	mov	r3, r9
 80063ca:	460a      	mov	r2, r1
 80063cc:	eb42 0303 	adc.w	r3, r2, r3
 80063d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	663b      	str	r3, [r7, #96]	; 0x60
 80063dc:	667a      	str	r2, [r7, #100]	; 0x64
 80063de:	f04f 0200 	mov.w	r2, #0
 80063e2:	f04f 0300 	mov.w	r3, #0
 80063e6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80063ea:	4649      	mov	r1, r9
 80063ec:	008b      	lsls	r3, r1, #2
 80063ee:	4641      	mov	r1, r8
 80063f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063f4:	4641      	mov	r1, r8
 80063f6:	008a      	lsls	r2, r1, #2
 80063f8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80063fc:	f7f9 fee4 	bl	80001c8 <__aeabi_uldivmod>
 8006400:	4602      	mov	r2, r0
 8006402:	460b      	mov	r3, r1
 8006404:	4b0d      	ldr	r3, [pc, #52]	; (800643c <UART_SetConfig+0x4e4>)
 8006406:	fba3 1302 	umull	r1, r3, r3, r2
 800640a:	095b      	lsrs	r3, r3, #5
 800640c:	2164      	movs	r1, #100	; 0x64
 800640e:	fb01 f303 	mul.w	r3, r1, r3
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	011b      	lsls	r3, r3, #4
 8006416:	3332      	adds	r3, #50	; 0x32
 8006418:	4a08      	ldr	r2, [pc, #32]	; (800643c <UART_SetConfig+0x4e4>)
 800641a:	fba2 2303 	umull	r2, r3, r2, r3
 800641e:	095b      	lsrs	r3, r3, #5
 8006420:	f003 020f 	and.w	r2, r3, #15
 8006424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4422      	add	r2, r4
 800642c:	609a      	str	r2, [r3, #8]
}
 800642e:	bf00      	nop
 8006430:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006434:	46bd      	mov	sp, r7
 8006436:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800643a:	bf00      	nop
 800643c:	51eb851f 	.word	0x51eb851f

08006440 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006440:	b084      	sub	sp, #16
 8006442:	b580      	push	{r7, lr}
 8006444:	b084      	sub	sp, #16
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
 800644a:	f107 001c 	add.w	r0, r7, #28
 800644e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006454:	2b01      	cmp	r3, #1
 8006456:	d122      	bne.n	800649e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800645c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800646c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006482:	2b01      	cmp	r3, #1
 8006484:	d105      	bne.n	8006492 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 f9c0 	bl	8006818 <USB_CoreReset>
 8006498:	4603      	mov	r3, r0
 800649a:	73fb      	strb	r3, [r7, #15]
 800649c:	e01a      	b.n	80064d4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 f9b4 	bl	8006818 <USB_CoreReset>
 80064b0:	4603      	mov	r3, r0
 80064b2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80064b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d106      	bne.n	80064c8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	639a      	str	r2, [r3, #56]	; 0x38
 80064c6:	e005      	b.n	80064d4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80064d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d10b      	bne.n	80064f2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	f043 0206 	orr.w	r2, r3, #6
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	f043 0220 	orr.w	r2, r3, #32
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80064f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3710      	adds	r7, #16
 80064f8:	46bd      	mov	sp, r7
 80064fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064fe:	b004      	add	sp, #16
 8006500:	4770      	bx	lr

08006502 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006502:	b480      	push	{r7}
 8006504:	b083      	sub	sp, #12
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	f043 0201 	orr.w	r2, r3, #1
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	f023 0201 	bic.w	r2, r3, #1
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	370c      	adds	r7, #12
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr

08006546 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b084      	sub	sp, #16
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
 800654e:	460b      	mov	r3, r1
 8006550:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006552:	2300      	movs	r3, #0
 8006554:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006562:	78fb      	ldrb	r3, [r7, #3]
 8006564:	2b01      	cmp	r3, #1
 8006566:	d115      	bne.n	8006594 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006574:	2001      	movs	r0, #1
 8006576:	f7fa fe7f 	bl	8001278 <HAL_Delay>
      ms++;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	3301      	adds	r3, #1
 800657e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 f93a 	bl	80067fa <USB_GetMode>
 8006586:	4603      	mov	r3, r0
 8006588:	2b01      	cmp	r3, #1
 800658a:	d01e      	beq.n	80065ca <USB_SetCurrentMode+0x84>
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2b31      	cmp	r3, #49	; 0x31
 8006590:	d9f0      	bls.n	8006574 <USB_SetCurrentMode+0x2e>
 8006592:	e01a      	b.n	80065ca <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006594:	78fb      	ldrb	r3, [r7, #3]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d115      	bne.n	80065c6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80065a6:	2001      	movs	r0, #1
 80065a8:	f7fa fe66 	bl	8001278 <HAL_Delay>
      ms++;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	3301      	adds	r3, #1
 80065b0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 f921 	bl	80067fa <USB_GetMode>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d005      	beq.n	80065ca <USB_SetCurrentMode+0x84>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2b31      	cmp	r3, #49	; 0x31
 80065c2:	d9f0      	bls.n	80065a6 <USB_SetCurrentMode+0x60>
 80065c4:	e001      	b.n	80065ca <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e005      	b.n	80065d6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2b32      	cmp	r3, #50	; 0x32
 80065ce:	d101      	bne.n	80065d4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e000      	b.n	80065d6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3710      	adds	r7, #16
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
	...

080065e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80065ea:	2300      	movs	r3, #0
 80065ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	3301      	adds	r3, #1
 80065f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	4a13      	ldr	r2, [pc, #76]	; (8006644 <USB_FlushTxFifo+0x64>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d901      	bls.n	8006600 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80065fc:	2303      	movs	r3, #3
 80065fe:	e01b      	b.n	8006638 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	691b      	ldr	r3, [r3, #16]
 8006604:	2b00      	cmp	r3, #0
 8006606:	daf2      	bge.n	80065ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006608:	2300      	movs	r3, #0
 800660a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	019b      	lsls	r3, r3, #6
 8006610:	f043 0220 	orr.w	r2, r3, #32
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	3301      	adds	r3, #1
 800661c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	4a08      	ldr	r2, [pc, #32]	; (8006644 <USB_FlushTxFifo+0x64>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d901      	bls.n	800662a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006626:	2303      	movs	r3, #3
 8006628:	e006      	b.n	8006638 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	f003 0320 	and.w	r3, r3, #32
 8006632:	2b20      	cmp	r3, #32
 8006634:	d0f0      	beq.n	8006618 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006636:	2300      	movs	r3, #0
}
 8006638:	4618      	mov	r0, r3
 800663a:	3714      	adds	r7, #20
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr
 8006644:	00030d40 	.word	0x00030d40

08006648 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006650:	2300      	movs	r3, #0
 8006652:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	3301      	adds	r3, #1
 8006658:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	4a11      	ldr	r2, [pc, #68]	; (80066a4 <USB_FlushRxFifo+0x5c>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d901      	bls.n	8006666 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e018      	b.n	8006698 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	2b00      	cmp	r3, #0
 800666c:	daf2      	bge.n	8006654 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800666e:	2300      	movs	r3, #0
 8006670:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2210      	movs	r2, #16
 8006676:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	3301      	adds	r3, #1
 800667c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	4a08      	ldr	r2, [pc, #32]	; (80066a4 <USB_FlushRxFifo+0x5c>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d901      	bls.n	800668a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	e006      	b.n	8006698 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	f003 0310 	and.w	r3, r3, #16
 8006692:	2b10      	cmp	r3, #16
 8006694:	d0f0      	beq.n	8006678 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006696:	2300      	movs	r3, #0
}
 8006698:	4618      	mov	r0, r3
 800669a:	3714      	adds	r7, #20
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr
 80066a4:	00030d40 	.word	0x00030d40

080066a8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b089      	sub	sp, #36	; 0x24
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	4611      	mov	r1, r2
 80066b4:	461a      	mov	r2, r3
 80066b6:	460b      	mov	r3, r1
 80066b8:	71fb      	strb	r3, [r7, #7]
 80066ba:	4613      	mov	r3, r2
 80066bc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80066c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d123      	bne.n	8006716 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80066ce:	88bb      	ldrh	r3, [r7, #4]
 80066d0:	3303      	adds	r3, #3
 80066d2:	089b      	lsrs	r3, r3, #2
 80066d4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80066d6:	2300      	movs	r3, #0
 80066d8:	61bb      	str	r3, [r7, #24]
 80066da:	e018      	b.n	800670e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80066dc:	79fb      	ldrb	r3, [r7, #7]
 80066de:	031a      	lsls	r2, r3, #12
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	4413      	add	r3, r2
 80066e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066e8:	461a      	mov	r2, r3
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	6013      	str	r3, [r2, #0]
      pSrc++;
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	3301      	adds	r3, #1
 80066f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	3301      	adds	r3, #1
 80066fa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	3301      	adds	r3, #1
 8006700:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	3301      	adds	r3, #1
 8006706:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	3301      	adds	r3, #1
 800670c:	61bb      	str	r3, [r7, #24]
 800670e:	69ba      	ldr	r2, [r7, #24]
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	429a      	cmp	r2, r3
 8006714:	d3e2      	bcc.n	80066dc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	3724      	adds	r7, #36	; 0x24
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006724:	b480      	push	{r7}
 8006726:	b08b      	sub	sp, #44	; 0x2c
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	4613      	mov	r3, r2
 8006730:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800673a:	88fb      	ldrh	r3, [r7, #6]
 800673c:	089b      	lsrs	r3, r3, #2
 800673e:	b29b      	uxth	r3, r3
 8006740:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006742:	88fb      	ldrh	r3, [r7, #6]
 8006744:	f003 0303 	and.w	r3, r3, #3
 8006748:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800674a:	2300      	movs	r3, #0
 800674c:	623b      	str	r3, [r7, #32]
 800674e:	e014      	b.n	800677a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675a:	601a      	str	r2, [r3, #0]
    pDest++;
 800675c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675e:	3301      	adds	r3, #1
 8006760:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006764:	3301      	adds	r3, #1
 8006766:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676a:	3301      	adds	r3, #1
 800676c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800676e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006770:	3301      	adds	r3, #1
 8006772:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006774:	6a3b      	ldr	r3, [r7, #32]
 8006776:	3301      	adds	r3, #1
 8006778:	623b      	str	r3, [r7, #32]
 800677a:	6a3a      	ldr	r2, [r7, #32]
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	429a      	cmp	r2, r3
 8006780:	d3e6      	bcc.n	8006750 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006782:	8bfb      	ldrh	r3, [r7, #30]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d01e      	beq.n	80067c6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006788:	2300      	movs	r3, #0
 800678a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006792:	461a      	mov	r2, r3
 8006794:	f107 0310 	add.w	r3, r7, #16
 8006798:	6812      	ldr	r2, [r2, #0]
 800679a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800679c:	693a      	ldr	r2, [r7, #16]
 800679e:	6a3b      	ldr	r3, [r7, #32]
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	00db      	lsls	r3, r3, #3
 80067a4:	fa22 f303 	lsr.w	r3, r2, r3
 80067a8:	b2da      	uxtb	r2, r3
 80067aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ac:	701a      	strb	r2, [r3, #0]
      i++;
 80067ae:	6a3b      	ldr	r3, [r7, #32]
 80067b0:	3301      	adds	r3, #1
 80067b2:	623b      	str	r3, [r7, #32]
      pDest++;
 80067b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b6:	3301      	adds	r3, #1
 80067b8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80067ba:	8bfb      	ldrh	r3, [r7, #30]
 80067bc:	3b01      	subs	r3, #1
 80067be:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80067c0:	8bfb      	ldrh	r3, [r7, #30]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d1ea      	bne.n	800679c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80067c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	372c      	adds	r7, #44	; 0x2c
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	695b      	ldr	r3, [r3, #20]
 80067e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	699b      	ldr	r3, [r3, #24]
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	4013      	ands	r3, r2
 80067ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80067ec:	68fb      	ldr	r3, [r7, #12]
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3714      	adds	r7, #20
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr

080067fa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80067fa:	b480      	push	{r7}
 80067fc:	b083      	sub	sp, #12
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	695b      	ldr	r3, [r3, #20]
 8006806:	f003 0301 	and.w	r3, r3, #1
}
 800680a:	4618      	mov	r0, r3
 800680c:	370c      	adds	r7, #12
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr
	...

08006818 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006818:	b480      	push	{r7}
 800681a:	b085      	sub	sp, #20
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006820:	2300      	movs	r3, #0
 8006822:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	3301      	adds	r3, #1
 8006828:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	4a13      	ldr	r2, [pc, #76]	; (800687c <USB_CoreReset+0x64>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d901      	bls.n	8006836 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006832:	2303      	movs	r3, #3
 8006834:	e01b      	b.n	800686e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	2b00      	cmp	r3, #0
 800683c:	daf2      	bge.n	8006824 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800683e:	2300      	movs	r3, #0
 8006840:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	f043 0201 	orr.w	r2, r3, #1
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	3301      	adds	r3, #1
 8006852:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	4a09      	ldr	r2, [pc, #36]	; (800687c <USB_CoreReset+0x64>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d901      	bls.n	8006860 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800685c:	2303      	movs	r3, #3
 800685e:	e006      	b.n	800686e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	691b      	ldr	r3, [r3, #16]
 8006864:	f003 0301 	and.w	r3, r3, #1
 8006868:	2b01      	cmp	r3, #1
 800686a:	d0f0      	beq.n	800684e <USB_CoreReset+0x36>

  return HAL_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3714      	adds	r7, #20
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr
 800687a:	bf00      	nop
 800687c:	00030d40 	.word	0x00030d40

08006880 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006880:	b084      	sub	sp, #16
 8006882:	b580      	push	{r7, lr}
 8006884:	b086      	sub	sp, #24
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
 800688a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800688e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006892:	2300      	movs	r3, #0
 8006894:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80068a0:	461a      	mov	r2, r3
 80068a2:	2300      	movs	r3, #0
 80068a4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d018      	beq.n	8006908 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80068d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d10a      	bne.n	80068f2 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80068ea:	f043 0304 	orr.w	r3, r3, #4
 80068ee:	6013      	str	r3, [r2, #0]
 80068f0:	e014      	b.n	800691c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006900:	f023 0304 	bic.w	r3, r3, #4
 8006904:	6013      	str	r3, [r2, #0]
 8006906:	e009      	b.n	800691c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006916:	f023 0304 	bic.w	r3, r3, #4
 800691a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800691c:	2110      	movs	r1, #16
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f7ff fe5e 	bl	80065e0 <USB_FlushTxFifo>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d001      	beq.n	800692e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f7ff fe8a 	bl	8006648 <USB_FlushRxFifo>
 8006934:	4603      	mov	r3, r0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d001      	beq.n	800693e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800693e:	2300      	movs	r3, #0
 8006940:	613b      	str	r3, [r7, #16]
 8006942:	e015      	b.n	8006970 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	015a      	lsls	r2, r3, #5
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	4413      	add	r3, r2
 800694c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006950:	461a      	mov	r2, r3
 8006952:	f04f 33ff 	mov.w	r3, #4294967295
 8006956:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	015a      	lsls	r2, r3, #5
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	4413      	add	r3, r2
 8006960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006964:	461a      	mov	r2, r3
 8006966:	2300      	movs	r3, #0
 8006968:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	3301      	adds	r3, #1
 800696e:	613b      	str	r3, [r7, #16]
 8006970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006972:	693a      	ldr	r2, [r7, #16]
 8006974:	429a      	cmp	r2, r3
 8006976:	d3e5      	bcc.n	8006944 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f04f 32ff 	mov.w	r2, #4294967295
 8006984:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800698a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00b      	beq.n	80069aa <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006998:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a13      	ldr	r2, [pc, #76]	; (80069ec <USB_HostInit+0x16c>)
 800699e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a13      	ldr	r2, [pc, #76]	; (80069f0 <USB_HostInit+0x170>)
 80069a4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80069a8:	e009      	b.n	80069be <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2280      	movs	r2, #128	; 0x80
 80069ae:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a10      	ldr	r2, [pc, #64]	; (80069f4 <USB_HostInit+0x174>)
 80069b4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4a0f      	ldr	r2, [pc, #60]	; (80069f8 <USB_HostInit+0x178>)
 80069ba:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80069be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d105      	bne.n	80069d0 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	699b      	ldr	r3, [r3, #24]
 80069c8:	f043 0210 	orr.w	r2, r3, #16
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	699a      	ldr	r2, [r3, #24]
 80069d4:	4b09      	ldr	r3, [pc, #36]	; (80069fc <USB_HostInit+0x17c>)
 80069d6:	4313      	orrs	r3, r2
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80069dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3718      	adds	r7, #24
 80069e2:	46bd      	mov	sp, r7
 80069e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069e8:	b004      	add	sp, #16
 80069ea:	4770      	bx	lr
 80069ec:	01000200 	.word	0x01000200
 80069f0:	00e00300 	.word	0x00e00300
 80069f4:	00600080 	.word	0x00600080
 80069f8:	004000e0 	.word	0x004000e0
 80069fc:	a3200008 	.word	0xa3200008

08006a00 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b085      	sub	sp, #20
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	460b      	mov	r3, r1
 8006a0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006a1e:	f023 0303 	bic.w	r3, r3, #3
 8006a22:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	78fb      	ldrb	r3, [r7, #3]
 8006a2e:	f003 0303 	and.w	r3, r3, #3
 8006a32:	68f9      	ldr	r1, [r7, #12]
 8006a34:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006a3c:	78fb      	ldrb	r3, [r7, #3]
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d107      	bne.n	8006a52 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a48:	461a      	mov	r2, r3
 8006a4a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006a4e:	6053      	str	r3, [r2, #4]
 8006a50:	e009      	b.n	8006a66 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006a52:	78fb      	ldrb	r3, [r7, #3]
 8006a54:	2b02      	cmp	r3, #2
 8006a56:	d106      	bne.n	8006a66 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a5e:	461a      	mov	r2, r3
 8006a60:	f241 7370 	movw	r3, #6000	; 0x1770
 8006a64:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3714      	adds	r7, #20
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b085      	sub	sp, #20
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006a84:	2300      	movs	r3, #0
 8006a86:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006a98:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d109      	bne.n	8006ab8 <USB_DriveVbus+0x44>
 8006aa4:	78fb      	ldrb	r3, [r7, #3]
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d106      	bne.n	8006ab8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006ab2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006ab6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ac2:	d109      	bne.n	8006ad8 <USB_DriveVbus+0x64>
 8006ac4:	78fb      	ldrb	r3, [r7, #3]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d106      	bne.n	8006ad8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006ad2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ad6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr

08006ae6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006ae6:	b480      	push	{r7}
 8006ae8:	b085      	sub	sp, #20
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006af2:	2300      	movs	r3, #0
 8006af4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	0c5b      	lsrs	r3, r3, #17
 8006b04:	f003 0303 	and.w	r3, r3, #3
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3714      	adds	r7, #20
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b085      	sub	sp, #20
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	b29b      	uxth	r3, r3
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3714      	adds	r7, #20
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr
	...

08006b38 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b088      	sub	sp, #32
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	4608      	mov	r0, r1
 8006b42:	4611      	mov	r1, r2
 8006b44:	461a      	mov	r2, r3
 8006b46:	4603      	mov	r3, r0
 8006b48:	70fb      	strb	r3, [r7, #3]
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	70bb      	strb	r3, [r7, #2]
 8006b4e:	4613      	mov	r3, r2
 8006b50:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006b52:	2300      	movs	r3, #0
 8006b54:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006b5a:	78fb      	ldrb	r3, [r7, #3]
 8006b5c:	015a      	lsls	r2, r3, #5
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	4413      	add	r3, r2
 8006b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b66:	461a      	mov	r2, r3
 8006b68:	f04f 33ff 	mov.w	r3, #4294967295
 8006b6c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006b6e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006b72:	2b03      	cmp	r3, #3
 8006b74:	d87e      	bhi.n	8006c74 <USB_HC_Init+0x13c>
 8006b76:	a201      	add	r2, pc, #4	; (adr r2, 8006b7c <USB_HC_Init+0x44>)
 8006b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b7c:	08006b8d 	.word	0x08006b8d
 8006b80:	08006c37 	.word	0x08006c37
 8006b84:	08006b8d 	.word	0x08006b8d
 8006b88:	08006bf9 	.word	0x08006bf9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006b8c:	78fb      	ldrb	r3, [r7, #3]
 8006b8e:	015a      	lsls	r2, r3, #5
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	4413      	add	r3, r2
 8006b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b98:	461a      	mov	r2, r3
 8006b9a:	f240 439d 	movw	r3, #1181	; 0x49d
 8006b9e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006ba0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	da10      	bge.n	8006bca <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006ba8:	78fb      	ldrb	r3, [r7, #3]
 8006baa:	015a      	lsls	r2, r3, #5
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	4413      	add	r3, r2
 8006bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	78fa      	ldrb	r2, [r7, #3]
 8006bb8:	0151      	lsls	r1, r2, #5
 8006bba:	693a      	ldr	r2, [r7, #16]
 8006bbc:	440a      	add	r2, r1
 8006bbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bc6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006bc8:	e057      	b.n	8006c7a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d051      	beq.n	8006c7a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006bd6:	78fb      	ldrb	r3, [r7, #3]
 8006bd8:	015a      	lsls	r2, r3, #5
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	4413      	add	r3, r2
 8006bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	78fa      	ldrb	r2, [r7, #3]
 8006be6:	0151      	lsls	r1, r2, #5
 8006be8:	693a      	ldr	r2, [r7, #16]
 8006bea:	440a      	add	r2, r1
 8006bec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bf0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006bf4:	60d3      	str	r3, [r2, #12]
      break;
 8006bf6:	e040      	b.n	8006c7a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006bf8:	78fb      	ldrb	r3, [r7, #3]
 8006bfa:	015a      	lsls	r2, r3, #5
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	4413      	add	r3, r2
 8006c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c04:	461a      	mov	r2, r3
 8006c06:	f240 639d 	movw	r3, #1693	; 0x69d
 8006c0a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006c0c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	da34      	bge.n	8006c7e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006c14:	78fb      	ldrb	r3, [r7, #3]
 8006c16:	015a      	lsls	r2, r3, #5
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	78fa      	ldrb	r2, [r7, #3]
 8006c24:	0151      	lsls	r1, r2, #5
 8006c26:	693a      	ldr	r2, [r7, #16]
 8006c28:	440a      	add	r2, r1
 8006c2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c32:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006c34:	e023      	b.n	8006c7e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006c36:	78fb      	ldrb	r3, [r7, #3]
 8006c38:	015a      	lsls	r2, r3, #5
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c42:	461a      	mov	r2, r3
 8006c44:	f240 2325 	movw	r3, #549	; 0x225
 8006c48:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006c4a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	da17      	bge.n	8006c82 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006c52:	78fb      	ldrb	r3, [r7, #3]
 8006c54:	015a      	lsls	r2, r3, #5
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	4413      	add	r3, r2
 8006c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	78fa      	ldrb	r2, [r7, #3]
 8006c62:	0151      	lsls	r1, r2, #5
 8006c64:	693a      	ldr	r2, [r7, #16]
 8006c66:	440a      	add	r2, r1
 8006c68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c6c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006c70:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006c72:	e006      	b.n	8006c82 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	77fb      	strb	r3, [r7, #31]
      break;
 8006c78:	e004      	b.n	8006c84 <USB_HC_Init+0x14c>
      break;
 8006c7a:	bf00      	nop
 8006c7c:	e002      	b.n	8006c84 <USB_HC_Init+0x14c>
      break;
 8006c7e:	bf00      	nop
 8006c80:	e000      	b.n	8006c84 <USB_HC_Init+0x14c>
      break;
 8006c82:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006c84:	78fb      	ldrb	r3, [r7, #3]
 8006c86:	015a      	lsls	r2, r3, #5
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	78fa      	ldrb	r2, [r7, #3]
 8006c94:	0151      	lsls	r1, r2, #5
 8006c96:	693a      	ldr	r2, [r7, #16]
 8006c98:	440a      	add	r2, r1
 8006c9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c9e:	f043 0302 	orr.w	r3, r3, #2
 8006ca2:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006caa:	699a      	ldr	r2, [r3, #24]
 8006cac:	78fb      	ldrb	r3, [r7, #3]
 8006cae:	f003 030f 	and.w	r3, r3, #15
 8006cb2:	2101      	movs	r1, #1
 8006cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8006cb8:	6939      	ldr	r1, [r7, #16]
 8006cba:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006cce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	da03      	bge.n	8006cde <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006cd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cda:	61bb      	str	r3, [r7, #24]
 8006cdc:	e001      	b.n	8006ce2 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f7ff feff 	bl	8006ae6 <USB_GetHostSpeed>
 8006ce8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006cea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006cee:	2b02      	cmp	r3, #2
 8006cf0:	d106      	bne.n	8006d00 <USB_HC_Init+0x1c8>
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2b02      	cmp	r3, #2
 8006cf6:	d003      	beq.n	8006d00 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006cf8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006cfc:	617b      	str	r3, [r7, #20]
 8006cfe:	e001      	b.n	8006d04 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006d00:	2300      	movs	r3, #0
 8006d02:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d04:	787b      	ldrb	r3, [r7, #1]
 8006d06:	059b      	lsls	r3, r3, #22
 8006d08:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006d0c:	78bb      	ldrb	r3, [r7, #2]
 8006d0e:	02db      	lsls	r3, r3, #11
 8006d10:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d14:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006d16:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006d1a:	049b      	lsls	r3, r3, #18
 8006d1c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006d20:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006d22:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006d24:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006d28:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d2e:	78fb      	ldrb	r3, [r7, #3]
 8006d30:	0159      	lsls	r1, r3, #5
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	440b      	add	r3, r1
 8006d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d3a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d40:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006d42:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006d46:	2b03      	cmp	r3, #3
 8006d48:	d003      	beq.n	8006d52 <USB_HC_Init+0x21a>
 8006d4a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d10f      	bne.n	8006d72 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006d52:	78fb      	ldrb	r3, [r7, #3]
 8006d54:	015a      	lsls	r2, r3, #5
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	4413      	add	r3, r2
 8006d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	78fa      	ldrb	r2, [r7, #3]
 8006d62:	0151      	lsls	r1, r2, #5
 8006d64:	693a      	ldr	r2, [r7, #16]
 8006d66:	440a      	add	r2, r1
 8006d68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d6c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d70:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006d72:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3720      	adds	r7, #32
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b08c      	sub	sp, #48	; 0x30
 8006d80:	af02      	add	r7, sp, #8
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	4613      	mov	r3, r2
 8006d88:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	785b      	ldrb	r3, [r3, #1]
 8006d92:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006d94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d98:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d02d      	beq.n	8006e02 <USB_HC_StartXfer+0x86>
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	791b      	ldrb	r3, [r3, #4]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d129      	bne.n	8006e02 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006dae:	79fb      	ldrb	r3, [r7, #7]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d117      	bne.n	8006de4 <USB_HC_StartXfer+0x68>
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	79db      	ldrb	r3, [r3, #7]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d003      	beq.n	8006dc4 <USB_HC_StartXfer+0x48>
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	79db      	ldrb	r3, [r3, #7]
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	d10f      	bne.n	8006de4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	015a      	lsls	r2, r3, #5
 8006dc8:	6a3b      	ldr	r3, [r7, #32]
 8006dca:	4413      	add	r3, r2
 8006dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	69fa      	ldr	r2, [r7, #28]
 8006dd4:	0151      	lsls	r1, r2, #5
 8006dd6:	6a3a      	ldr	r2, [r7, #32]
 8006dd8:	440a      	add	r2, r1
 8006dda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006de4:	79fb      	ldrb	r3, [r7, #7]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d10b      	bne.n	8006e02 <USB_HC_StartXfer+0x86>
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	795b      	ldrb	r3, [r3, #5]
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d107      	bne.n	8006e02 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	785b      	ldrb	r3, [r3, #1]
 8006df6:	4619      	mov	r1, r3
 8006df8:	68f8      	ldr	r0, [r7, #12]
 8006dfa:	f000 fa0f 	bl	800721c <USB_DoPing>
      return HAL_OK;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	e0f8      	b.n	8006ff4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	695b      	ldr	r3, [r3, #20]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d018      	beq.n	8006e3c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	695b      	ldr	r3, [r3, #20]
 8006e0e:	68ba      	ldr	r2, [r7, #8]
 8006e10:	8912      	ldrh	r2, [r2, #8]
 8006e12:	4413      	add	r3, r2
 8006e14:	3b01      	subs	r3, #1
 8006e16:	68ba      	ldr	r2, [r7, #8]
 8006e18:	8912      	ldrh	r2, [r2, #8]
 8006e1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e1e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006e20:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006e22:	8b7b      	ldrh	r3, [r7, #26]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d90b      	bls.n	8006e40 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006e28:	8b7b      	ldrh	r3, [r7, #26]
 8006e2a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006e2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e2e:	68ba      	ldr	r2, [r7, #8]
 8006e30:	8912      	ldrh	r2, [r2, #8]
 8006e32:	fb03 f202 	mul.w	r2, r3, r2
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	611a      	str	r2, [r3, #16]
 8006e3a:	e001      	b.n	8006e40 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	78db      	ldrb	r3, [r3, #3]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d007      	beq.n	8006e58 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006e48:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e4a:	68ba      	ldr	r2, [r7, #8]
 8006e4c:	8912      	ldrh	r2, [r2, #8]
 8006e4e:	fb03 f202 	mul.w	r2, r3, r2
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	611a      	str	r2, [r3, #16]
 8006e56:	e003      	b.n	8006e60 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	695a      	ldr	r2, [r3, #20]
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	691b      	ldr	r3, [r3, #16]
 8006e64:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006e68:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e6a:	04d9      	lsls	r1, r3, #19
 8006e6c:	4b63      	ldr	r3, [pc, #396]	; (8006ffc <USB_HC_StartXfer+0x280>)
 8006e6e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006e70:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	7a9b      	ldrb	r3, [r3, #10]
 8006e76:	075b      	lsls	r3, r3, #29
 8006e78:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006e7c:	69f9      	ldr	r1, [r7, #28]
 8006e7e:	0148      	lsls	r0, r1, #5
 8006e80:	6a39      	ldr	r1, [r7, #32]
 8006e82:	4401      	add	r1, r0
 8006e84:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006e88:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006e8a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006e8c:	79fb      	ldrb	r3, [r7, #7]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d009      	beq.n	8006ea6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	68d9      	ldr	r1, [r3, #12]
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	015a      	lsls	r2, r3, #5
 8006e9a:	6a3b      	ldr	r3, [r7, #32]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ea2:	460a      	mov	r2, r1
 8006ea4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006ea6:	6a3b      	ldr	r3, [r7, #32]
 8006ea8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	f003 0301 	and.w	r3, r3, #1
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	bf0c      	ite	eq
 8006eb6:	2301      	moveq	r3, #1
 8006eb8:	2300      	movne	r3, #0
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	015a      	lsls	r2, r3, #5
 8006ec2:	6a3b      	ldr	r3, [r7, #32]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	69fa      	ldr	r2, [r7, #28]
 8006ece:	0151      	lsls	r1, r2, #5
 8006ed0:	6a3a      	ldr	r2, [r7, #32]
 8006ed2:	440a      	add	r2, r1
 8006ed4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ed8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006edc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	015a      	lsls	r2, r3, #5
 8006ee2:	6a3b      	ldr	r3, [r7, #32]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	7e7b      	ldrb	r3, [r7, #25]
 8006eee:	075b      	lsls	r3, r3, #29
 8006ef0:	69f9      	ldr	r1, [r7, #28]
 8006ef2:	0148      	lsls	r0, r1, #5
 8006ef4:	6a39      	ldr	r1, [r7, #32]
 8006ef6:	4401      	add	r1, r0
 8006ef8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006efc:	4313      	orrs	r3, r2
 8006efe:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	015a      	lsls	r2, r3, #5
 8006f04:	6a3b      	ldr	r3, [r7, #32]
 8006f06:	4413      	add	r3, r2
 8006f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006f16:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	78db      	ldrb	r3, [r3, #3]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d004      	beq.n	8006f2a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f26:	613b      	str	r3, [r7, #16]
 8006f28:	e003      	b.n	8006f32 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f30:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f38:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	015a      	lsls	r2, r3, #5
 8006f3e:	6a3b      	ldr	r3, [r7, #32]
 8006f40:	4413      	add	r3, r2
 8006f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f46:	461a      	mov	r2, r3
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006f4c:	79fb      	ldrb	r3, [r7, #7]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d001      	beq.n	8006f56 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006f52:	2300      	movs	r3, #0
 8006f54:	e04e      	b.n	8006ff4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	78db      	ldrb	r3, [r3, #3]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d149      	bne.n	8006ff2 <USB_HC_StartXfer+0x276>
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	695b      	ldr	r3, [r3, #20]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d045      	beq.n	8006ff2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	79db      	ldrb	r3, [r3, #7]
 8006f6a:	2b03      	cmp	r3, #3
 8006f6c:	d830      	bhi.n	8006fd0 <USB_HC_StartXfer+0x254>
 8006f6e:	a201      	add	r2, pc, #4	; (adr r2, 8006f74 <USB_HC_StartXfer+0x1f8>)
 8006f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f74:	08006f85 	.word	0x08006f85
 8006f78:	08006fa9 	.word	0x08006fa9
 8006f7c:	08006f85 	.word	0x08006f85
 8006f80:	08006fa9 	.word	0x08006fa9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	695b      	ldr	r3, [r3, #20]
 8006f88:	3303      	adds	r3, #3
 8006f8a:	089b      	lsrs	r3, r3, #2
 8006f8c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006f8e:	8afa      	ldrh	r2, [r7, #22]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d91c      	bls.n	8006fd4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	699b      	ldr	r3, [r3, #24]
 8006f9e:	f043 0220 	orr.w	r2, r3, #32
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	619a      	str	r2, [r3, #24]
        }
        break;
 8006fa6:	e015      	b.n	8006fd4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	695b      	ldr	r3, [r3, #20]
 8006fac:	3303      	adds	r3, #3
 8006fae:	089b      	lsrs	r3, r3, #2
 8006fb0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006fb2:	8afa      	ldrh	r2, [r7, #22]
 8006fb4:	6a3b      	ldr	r3, [r7, #32]
 8006fb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fba:	691b      	ldr	r3, [r3, #16]
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d90a      	bls.n	8006fd8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	699b      	ldr	r3, [r3, #24]
 8006fc6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	619a      	str	r2, [r3, #24]
        }
        break;
 8006fce:	e003      	b.n	8006fd8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006fd0:	bf00      	nop
 8006fd2:	e002      	b.n	8006fda <USB_HC_StartXfer+0x25e>
        break;
 8006fd4:	bf00      	nop
 8006fd6:	e000      	b.n	8006fda <USB_HC_StartXfer+0x25e>
        break;
 8006fd8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	68d9      	ldr	r1, [r3, #12]
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	785a      	ldrb	r2, [r3, #1]
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	695b      	ldr	r3, [r3, #20]
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	2000      	movs	r0, #0
 8006fea:	9000      	str	r0, [sp, #0]
 8006fec:	68f8      	ldr	r0, [r7, #12]
 8006fee:	f7ff fb5b 	bl	80066a8 <USB_WritePacket>
  }

  return HAL_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3728      	adds	r7, #40	; 0x28
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	1ff80000 	.word	0x1ff80000

08007000 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007000:	b480      	push	{r7}
 8007002:	b085      	sub	sp, #20
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007012:	695b      	ldr	r3, [r3, #20]
 8007014:	b29b      	uxth	r3, r3
}
 8007016:	4618      	mov	r0, r3
 8007018:	3714      	adds	r7, #20
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr

08007022 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007022:	b480      	push	{r7}
 8007024:	b089      	sub	sp, #36	; 0x24
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
 800702a:	460b      	mov	r3, r1
 800702c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007032:	78fb      	ldrb	r3, [r7, #3]
 8007034:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007036:	2300      	movs	r3, #0
 8007038:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	015a      	lsls	r2, r3, #5
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	4413      	add	r3, r2
 8007042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	0c9b      	lsrs	r3, r3, #18
 800704a:	f003 0303 	and.w	r3, r3, #3
 800704e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	015a      	lsls	r2, r3, #5
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	4413      	add	r3, r2
 8007058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	0fdb      	lsrs	r3, r3, #31
 8007060:	f003 0301 	and.w	r3, r3, #1
 8007064:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	f003 0320 	and.w	r3, r3, #32
 800706e:	2b20      	cmp	r3, #32
 8007070:	d104      	bne.n	800707c <USB_HC_Halt+0x5a>
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d101      	bne.n	800707c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007078:	2300      	movs	r3, #0
 800707a:	e0c8      	b.n	800720e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d002      	beq.n	8007088 <USB_HC_Halt+0x66>
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	2b02      	cmp	r3, #2
 8007086:	d163      	bne.n	8007150 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	015a      	lsls	r2, r3, #5
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	4413      	add	r3, r2
 8007090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	69ba      	ldr	r2, [r7, #24]
 8007098:	0151      	lsls	r1, r2, #5
 800709a:	69fa      	ldr	r2, [r7, #28]
 800709c:	440a      	add	r2, r1
 800709e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070a6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	f003 0320 	and.w	r3, r3, #32
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f040 80ab 	bne.w	800720c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d133      	bne.n	800712a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	015a      	lsls	r2, r3, #5
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	4413      	add	r3, r2
 80070ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	69ba      	ldr	r2, [r7, #24]
 80070d2:	0151      	lsls	r1, r2, #5
 80070d4:	69fa      	ldr	r2, [r7, #28]
 80070d6:	440a      	add	r2, r1
 80070d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80070e0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	015a      	lsls	r2, r3, #5
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	4413      	add	r3, r2
 80070ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	69ba      	ldr	r2, [r7, #24]
 80070f2:	0151      	lsls	r1, r2, #5
 80070f4:	69fa      	ldr	r2, [r7, #28]
 80070f6:	440a      	add	r2, r1
 80070f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007100:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	3301      	adds	r3, #1
 8007106:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800710e:	d81d      	bhi.n	800714c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007110:	69bb      	ldr	r3, [r7, #24]
 8007112:	015a      	lsls	r2, r3, #5
 8007114:	69fb      	ldr	r3, [r7, #28]
 8007116:	4413      	add	r3, r2
 8007118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007122:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007126:	d0ec      	beq.n	8007102 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007128:	e070      	b.n	800720c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	015a      	lsls	r2, r3, #5
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	4413      	add	r3, r2
 8007132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	69ba      	ldr	r2, [r7, #24]
 800713a:	0151      	lsls	r1, r2, #5
 800713c:	69fa      	ldr	r2, [r7, #28]
 800713e:	440a      	add	r2, r1
 8007140:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007144:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007148:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800714a:	e05f      	b.n	800720c <USB_HC_Halt+0x1ea>
            break;
 800714c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800714e:	e05d      	b.n	800720c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	015a      	lsls	r2, r3, #5
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	4413      	add	r3, r2
 8007158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	69ba      	ldr	r2, [r7, #24]
 8007160:	0151      	lsls	r1, r2, #5
 8007162:	69fa      	ldr	r2, [r7, #28]
 8007164:	440a      	add	r2, r1
 8007166:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800716a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800716e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800717c:	2b00      	cmp	r3, #0
 800717e:	d133      	bne.n	80071e8 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	015a      	lsls	r2, r3, #5
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	4413      	add	r3, r2
 8007188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	69ba      	ldr	r2, [r7, #24]
 8007190:	0151      	lsls	r1, r2, #5
 8007192:	69fa      	ldr	r2, [r7, #28]
 8007194:	440a      	add	r2, r1
 8007196:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800719a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800719e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	015a      	lsls	r2, r3, #5
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	4413      	add	r3, r2
 80071a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	69ba      	ldr	r2, [r7, #24]
 80071b0:	0151      	lsls	r1, r2, #5
 80071b2:	69fa      	ldr	r2, [r7, #28]
 80071b4:	440a      	add	r2, r1
 80071b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80071be:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	3301      	adds	r3, #1
 80071c4:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071cc:	d81d      	bhi.n	800720a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	015a      	lsls	r2, r3, #5
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	4413      	add	r3, r2
 80071d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071e4:	d0ec      	beq.n	80071c0 <USB_HC_Halt+0x19e>
 80071e6:	e011      	b.n	800720c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80071e8:	69bb      	ldr	r3, [r7, #24]
 80071ea:	015a      	lsls	r2, r3, #5
 80071ec:	69fb      	ldr	r3, [r7, #28]
 80071ee:	4413      	add	r3, r2
 80071f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	69ba      	ldr	r2, [r7, #24]
 80071f8:	0151      	lsls	r1, r2, #5
 80071fa:	69fa      	ldr	r2, [r7, #28]
 80071fc:	440a      	add	r2, r1
 80071fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007202:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007206:	6013      	str	r3, [r2, #0]
 8007208:	e000      	b.n	800720c <USB_HC_Halt+0x1ea>
          break;
 800720a:	bf00      	nop
    }
  }

  return HAL_OK;
 800720c:	2300      	movs	r3, #0
}
 800720e:	4618      	mov	r0, r3
 8007210:	3724      	adds	r7, #36	; 0x24
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr
	...

0800721c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800721c:	b480      	push	{r7}
 800721e:	b087      	sub	sp, #28
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	460b      	mov	r3, r1
 8007226:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800722c:	78fb      	ldrb	r3, [r7, #3]
 800722e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007230:	2301      	movs	r3, #1
 8007232:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	04da      	lsls	r2, r3, #19
 8007238:	4b15      	ldr	r3, [pc, #84]	; (8007290 <USB_DoPing+0x74>)
 800723a:	4013      	ands	r3, r2
 800723c:	693a      	ldr	r2, [r7, #16]
 800723e:	0151      	lsls	r1, r2, #5
 8007240:	697a      	ldr	r2, [r7, #20]
 8007242:	440a      	add	r2, r1
 8007244:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007248:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800724c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	015a      	lsls	r2, r3, #5
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	4413      	add	r3, r2
 8007256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007264:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800726c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	015a      	lsls	r2, r3, #5
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	4413      	add	r3, r2
 8007276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800727a:	461a      	mov	r2, r3
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	371c      	adds	r7, #28
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr
 800728e:	bf00      	nop
 8007290:	1ff80000 	.word	0x1ff80000

08007294 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b088      	sub	sp, #32
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800729c:	2300      	movs	r3, #0
 800729e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80072a4:	2300      	movs	r3, #0
 80072a6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f7ff f93b 	bl	8006524 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80072ae:	2110      	movs	r1, #16
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f7ff f995 	bl	80065e0 <USB_FlushTxFifo>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d001      	beq.n	80072c0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f7ff f9c1 	bl	8006648 <USB_FlushRxFifo>
 80072c6:	4603      	mov	r3, r0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d001      	beq.n	80072d0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80072d0:	2300      	movs	r3, #0
 80072d2:	61bb      	str	r3, [r7, #24]
 80072d4:	e01f      	b.n	8007316 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	015a      	lsls	r2, r3, #5
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	4413      	add	r3, r2
 80072de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072ec:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80072f4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80072fc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	015a      	lsls	r2, r3, #5
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	4413      	add	r3, r2
 8007306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800730a:	461a      	mov	r2, r3
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	3301      	adds	r3, #1
 8007314:	61bb      	str	r3, [r7, #24]
 8007316:	69bb      	ldr	r3, [r7, #24]
 8007318:	2b0f      	cmp	r3, #15
 800731a:	d9dc      	bls.n	80072d6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800731c:	2300      	movs	r3, #0
 800731e:	61bb      	str	r3, [r7, #24]
 8007320:	e034      	b.n	800738c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	015a      	lsls	r2, r3, #5
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	4413      	add	r3, r2
 800732a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007338:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007340:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007348:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	015a      	lsls	r2, r3, #5
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	4413      	add	r3, r2
 8007352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007356:	461a      	mov	r2, r3
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	3301      	adds	r3, #1
 8007360:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007368:	d80c      	bhi.n	8007384 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800736a:	69bb      	ldr	r3, [r7, #24]
 800736c:	015a      	lsls	r2, r3, #5
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	4413      	add	r3, r2
 8007372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800737c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007380:	d0ec      	beq.n	800735c <USB_StopHost+0xc8>
 8007382:	e000      	b.n	8007386 <USB_StopHost+0xf2>
        break;
 8007384:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	3301      	adds	r3, #1
 800738a:	61bb      	str	r3, [r7, #24]
 800738c:	69bb      	ldr	r3, [r7, #24]
 800738e:	2b0f      	cmp	r3, #15
 8007390:	d9c7      	bls.n	8007322 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007398:	461a      	mov	r2, r3
 800739a:	f04f 33ff 	mov.w	r3, #4294967295
 800739e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f04f 32ff 	mov.w	r2, #4294967295
 80073a6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f7ff f8aa 	bl	8006502 <USB_EnableGlobalInt>

  return ret;
 80073ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3720      	adds	r7, #32
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80073b8:	b590      	push	{r4, r7, lr}
 80073ba:	b089      	sub	sp, #36	; 0x24
 80073bc:	af04      	add	r7, sp, #16
 80073be:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80073c0:	2301      	movs	r3, #1
 80073c2:	2202      	movs	r2, #2
 80073c4:	2102      	movs	r1, #2
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 fc66 	bl	8007c98 <USBH_FindInterface>
 80073cc:	4603      	mov	r3, r0
 80073ce:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80073d0:	7bfb      	ldrb	r3, [r7, #15]
 80073d2:	2bff      	cmp	r3, #255	; 0xff
 80073d4:	d002      	beq.n	80073dc <USBH_CDC_InterfaceInit+0x24>
 80073d6:	7bfb      	ldrb	r3, [r7, #15]
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d901      	bls.n	80073e0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80073dc:	2302      	movs	r3, #2
 80073de:	e13d      	b.n	800765c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80073e0:	7bfb      	ldrb	r3, [r7, #15]
 80073e2:	4619      	mov	r1, r3
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 fc3b 	bl	8007c60 <USBH_SelectInterface>
 80073ea:	4603      	mov	r3, r0
 80073ec:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80073ee:	7bbb      	ldrb	r3, [r7, #14]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d001      	beq.n	80073f8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80073f4:	2302      	movs	r3, #2
 80073f6:	e131      	b.n	800765c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80073fe:	2050      	movs	r0, #80	; 0x50
 8007400:	f001 fb12 	bl	8008a28 <malloc>
 8007404:	4603      	mov	r3, r0
 8007406:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800740e:	69db      	ldr	r3, [r3, #28]
 8007410:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d101      	bne.n	800741c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007418:	2302      	movs	r3, #2
 800741a:	e11f      	b.n	800765c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800741c:	2250      	movs	r2, #80	; 0x50
 800741e:	2100      	movs	r1, #0
 8007420:	68b8      	ldr	r0, [r7, #8]
 8007422:	f001 fb11 	bl	8008a48 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007426:	7bfb      	ldrb	r3, [r7, #15]
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	211a      	movs	r1, #26
 800742c:	fb01 f303 	mul.w	r3, r1, r3
 8007430:	4413      	add	r3, r2
 8007432:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	b25b      	sxtb	r3, r3
 800743a:	2b00      	cmp	r3, #0
 800743c:	da15      	bge.n	800746a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800743e:	7bfb      	ldrb	r3, [r7, #15]
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	211a      	movs	r1, #26
 8007444:	fb01 f303 	mul.w	r3, r1, r3
 8007448:	4413      	add	r3, r2
 800744a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800744e:	781a      	ldrb	r2, [r3, #0]
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007454:	7bfb      	ldrb	r3, [r7, #15]
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	211a      	movs	r1, #26
 800745a:	fb01 f303 	mul.w	r3, r1, r3
 800745e:	4413      	add	r3, r2
 8007460:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007464:	881a      	ldrh	r2, [r3, #0]
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	785b      	ldrb	r3, [r3, #1]
 800746e:	4619      	mov	r1, r3
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 ff9c 	bl	80083ae <USBH_AllocPipe>
 8007476:	4603      	mov	r3, r0
 8007478:	461a      	mov	r2, r3
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	7819      	ldrb	r1, [r3, #0]
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	7858      	ldrb	r0, [r3, #1]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007492:	68ba      	ldr	r2, [r7, #8]
 8007494:	8952      	ldrh	r2, [r2, #10]
 8007496:	9202      	str	r2, [sp, #8]
 8007498:	2203      	movs	r2, #3
 800749a:	9201      	str	r2, [sp, #4]
 800749c:	9300      	str	r3, [sp, #0]
 800749e:	4623      	mov	r3, r4
 80074a0:	4602      	mov	r2, r0
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 ff54 	bl	8008350 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	2200      	movs	r2, #0
 80074ae:	4619      	mov	r1, r3
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f001 fa17 	bl	80088e4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80074b6:	2300      	movs	r3, #0
 80074b8:	2200      	movs	r2, #0
 80074ba:	210a      	movs	r1, #10
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 fbeb 	bl	8007c98 <USBH_FindInterface>
 80074c2:	4603      	mov	r3, r0
 80074c4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80074c6:	7bfb      	ldrb	r3, [r7, #15]
 80074c8:	2bff      	cmp	r3, #255	; 0xff
 80074ca:	d002      	beq.n	80074d2 <USBH_CDC_InterfaceInit+0x11a>
 80074cc:	7bfb      	ldrb	r3, [r7, #15]
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d901      	bls.n	80074d6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80074d2:	2302      	movs	r3, #2
 80074d4:	e0c2      	b.n	800765c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80074d6:	7bfb      	ldrb	r3, [r7, #15]
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	211a      	movs	r1, #26
 80074dc:	fb01 f303 	mul.w	r3, r1, r3
 80074e0:	4413      	add	r3, r2
 80074e2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	b25b      	sxtb	r3, r3
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	da16      	bge.n	800751c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80074ee:	7bfb      	ldrb	r3, [r7, #15]
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	211a      	movs	r1, #26
 80074f4:	fb01 f303 	mul.w	r3, r1, r3
 80074f8:	4413      	add	r3, r2
 80074fa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80074fe:	781a      	ldrb	r2, [r3, #0]
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007504:	7bfb      	ldrb	r3, [r7, #15]
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	211a      	movs	r1, #26
 800750a:	fb01 f303 	mul.w	r3, r1, r3
 800750e:	4413      	add	r3, r2
 8007510:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007514:	881a      	ldrh	r2, [r3, #0]
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	835a      	strh	r2, [r3, #26]
 800751a:	e015      	b.n	8007548 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800751c:	7bfb      	ldrb	r3, [r7, #15]
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	211a      	movs	r1, #26
 8007522:	fb01 f303 	mul.w	r3, r1, r3
 8007526:	4413      	add	r3, r2
 8007528:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800752c:	781a      	ldrb	r2, [r3, #0]
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007532:	7bfb      	ldrb	r3, [r7, #15]
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	211a      	movs	r1, #26
 8007538:	fb01 f303 	mul.w	r3, r1, r3
 800753c:	4413      	add	r3, r2
 800753e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007542:	881a      	ldrh	r2, [r3, #0]
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007548:	7bfb      	ldrb	r3, [r7, #15]
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	211a      	movs	r1, #26
 800754e:	fb01 f303 	mul.w	r3, r1, r3
 8007552:	4413      	add	r3, r2
 8007554:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	b25b      	sxtb	r3, r3
 800755c:	2b00      	cmp	r3, #0
 800755e:	da16      	bge.n	800758e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007560:	7bfb      	ldrb	r3, [r7, #15]
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	211a      	movs	r1, #26
 8007566:	fb01 f303 	mul.w	r3, r1, r3
 800756a:	4413      	add	r3, r2
 800756c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007570:	781a      	ldrb	r2, [r3, #0]
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007576:	7bfb      	ldrb	r3, [r7, #15]
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	211a      	movs	r1, #26
 800757c:	fb01 f303 	mul.w	r3, r1, r3
 8007580:	4413      	add	r3, r2
 8007582:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007586:	881a      	ldrh	r2, [r3, #0]
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	835a      	strh	r2, [r3, #26]
 800758c:	e015      	b.n	80075ba <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800758e:	7bfb      	ldrb	r3, [r7, #15]
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	211a      	movs	r1, #26
 8007594:	fb01 f303 	mul.w	r3, r1, r3
 8007598:	4413      	add	r3, r2
 800759a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800759e:	781a      	ldrb	r2, [r3, #0]
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80075a4:	7bfb      	ldrb	r3, [r7, #15]
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	211a      	movs	r1, #26
 80075aa:	fb01 f303 	mul.w	r3, r1, r3
 80075ae:	4413      	add	r3, r2
 80075b0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80075b4:	881a      	ldrh	r2, [r3, #0]
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	7b9b      	ldrb	r3, [r3, #14]
 80075be:	4619      	mov	r1, r3
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 fef4 	bl	80083ae <USBH_AllocPipe>
 80075c6:	4603      	mov	r3, r0
 80075c8:	461a      	mov	r2, r3
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	7bdb      	ldrb	r3, [r3, #15]
 80075d2:	4619      	mov	r1, r3
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 feea 	bl	80083ae <USBH_AllocPipe>
 80075da:	4603      	mov	r3, r0
 80075dc:	461a      	mov	r2, r3
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	7b59      	ldrb	r1, [r3, #13]
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	7b98      	ldrb	r0, [r3, #14]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80075f6:	68ba      	ldr	r2, [r7, #8]
 80075f8:	8b12      	ldrh	r2, [r2, #24]
 80075fa:	9202      	str	r2, [sp, #8]
 80075fc:	2202      	movs	r2, #2
 80075fe:	9201      	str	r2, [sp, #4]
 8007600:	9300      	str	r3, [sp, #0]
 8007602:	4623      	mov	r3, r4
 8007604:	4602      	mov	r2, r0
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 fea2 	bl	8008350 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	7b19      	ldrb	r1, [r3, #12]
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	7bd8      	ldrb	r0, [r3, #15]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007620:	68ba      	ldr	r2, [r7, #8]
 8007622:	8b52      	ldrh	r2, [r2, #26]
 8007624:	9202      	str	r2, [sp, #8]
 8007626:	2202      	movs	r2, #2
 8007628:	9201      	str	r2, [sp, #4]
 800762a:	9300      	str	r3, [sp, #0]
 800762c:	4623      	mov	r3, r4
 800762e:	4602      	mov	r2, r0
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 fe8d 	bl	8008350 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	2200      	movs	r2, #0
 800763a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	7b5b      	ldrb	r3, [r3, #13]
 8007642:	2200      	movs	r2, #0
 8007644:	4619      	mov	r1, r3
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f001 f94c 	bl	80088e4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	7b1b      	ldrb	r3, [r3, #12]
 8007650:	2200      	movs	r2, #0
 8007652:	4619      	mov	r1, r3
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f001 f945 	bl	80088e4 <USBH_LL_SetToggle>

  return USBH_OK;
 800765a:	2300      	movs	r3, #0
}
 800765c:	4618      	mov	r0, r3
 800765e:	3714      	adds	r7, #20
 8007660:	46bd      	mov	sp, r7
 8007662:	bd90      	pop	{r4, r7, pc}

08007664 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007672:	69db      	ldr	r3, [r3, #28]
 8007674:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d00e      	beq.n	800769c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	4619      	mov	r1, r3
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 fe82 	bl	800838e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	4619      	mov	r1, r3
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 fead 	bl	80083f0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2200      	movs	r2, #0
 800769a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	7b1b      	ldrb	r3, [r3, #12]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d00e      	beq.n	80076c2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	7b1b      	ldrb	r3, [r3, #12]
 80076a8:	4619      	mov	r1, r3
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 fe6f 	bl	800838e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	7b1b      	ldrb	r3, [r3, #12]
 80076b4:	4619      	mov	r1, r3
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 fe9a 	bl	80083f0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2200      	movs	r2, #0
 80076c0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	7b5b      	ldrb	r3, [r3, #13]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d00e      	beq.n	80076e8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	7b5b      	ldrb	r3, [r3, #13]
 80076ce:	4619      	mov	r1, r3
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 fe5c 	bl	800838e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	7b5b      	ldrb	r3, [r3, #13]
 80076da:	4619      	mov	r1, r3
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 fe87 	bl	80083f0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2200      	movs	r2, #0
 80076e6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076ee:	69db      	ldr	r3, [r3, #28]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d00b      	beq.n	800770c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076fa:	69db      	ldr	r3, [r3, #28]
 80076fc:	4618      	mov	r0, r3
 80076fe:	f001 f99b 	bl	8008a38 <free>
    phost->pActiveClass->pData = 0U;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007708:	2200      	movs	r2, #0
 800770a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800770c:	2300      	movs	r3, #0
}
 800770e:	4618      	mov	r0, r3
 8007710:	3710      	adds	r7, #16
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007716:	b580      	push	{r7, lr}
 8007718:	b084      	sub	sp, #16
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007724:	69db      	ldr	r3, [r3, #28]
 8007726:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	3340      	adds	r3, #64	; 0x40
 800772c:	4619      	mov	r1, r3
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 f8b1 	bl	8007896 <GetLineCoding>
 8007734:	4603      	mov	r3, r0
 8007736:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007738:	7afb      	ldrb	r3, [r7, #11]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d105      	bne.n	800774a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007744:	2102      	movs	r1, #2
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800774a:	7afb      	ldrb	r3, [r7, #11]
}
 800774c:	4618      	mov	r0, r3
 800774e:	3710      	adds	r7, #16
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800775c:	2301      	movs	r3, #1
 800775e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007760:	2300      	movs	r3, #0
 8007762:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800776a:	69db      	ldr	r3, [r3, #28]
 800776c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007774:	2b04      	cmp	r3, #4
 8007776:	d877      	bhi.n	8007868 <USBH_CDC_Process+0x114>
 8007778:	a201      	add	r2, pc, #4	; (adr r2, 8007780 <USBH_CDC_Process+0x2c>)
 800777a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800777e:	bf00      	nop
 8007780:	08007795 	.word	0x08007795
 8007784:	0800779b 	.word	0x0800779b
 8007788:	080077cb 	.word	0x080077cb
 800778c:	0800783f 	.word	0x0800783f
 8007790:	0800784d 	.word	0x0800784d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007794:	2300      	movs	r3, #0
 8007796:	73fb      	strb	r3, [r7, #15]
      break;
 8007798:	e06d      	b.n	8007876 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800779e:	4619      	mov	r1, r3
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 f897 	bl	80078d4 <SetLineCoding>
 80077a6:	4603      	mov	r3, r0
 80077a8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80077aa:	7bbb      	ldrb	r3, [r7, #14]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d104      	bne.n	80077ba <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	2202      	movs	r2, #2
 80077b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80077b8:	e058      	b.n	800786c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80077ba:	7bbb      	ldrb	r3, [r7, #14]
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d055      	beq.n	800786c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	2204      	movs	r2, #4
 80077c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80077c8:	e050      	b.n	800786c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	3340      	adds	r3, #64	; 0x40
 80077ce:	4619      	mov	r1, r3
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 f860 	bl	8007896 <GetLineCoding>
 80077d6:	4603      	mov	r3, r0
 80077d8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80077da:	7bbb      	ldrb	r3, [r7, #14]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d126      	bne.n	800782e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077f2:	791b      	ldrb	r3, [r3, #4]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d13b      	bne.n	8007870 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007802:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007804:	429a      	cmp	r2, r3
 8007806:	d133      	bne.n	8007870 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007812:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007814:	429a      	cmp	r2, r3
 8007816:	d12b      	bne.n	8007870 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007820:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007822:	429a      	cmp	r2, r3
 8007824:	d124      	bne.n	8007870 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 f958 	bl	8007adc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800782c:	e020      	b.n	8007870 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800782e:	7bbb      	ldrb	r3, [r7, #14]
 8007830:	2b01      	cmp	r3, #1
 8007832:	d01d      	beq.n	8007870 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	2204      	movs	r2, #4
 8007838:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800783c:	e018      	b.n	8007870 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 f867 	bl	8007912 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 f8da 	bl	80079fe <CDC_ProcessReception>
      break;
 800784a:	e014      	b.n	8007876 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800784c:	2100      	movs	r1, #0
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 fb08 	bl	8007e64 <USBH_ClrFeature>
 8007854:	4603      	mov	r3, r0
 8007856:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007858:	7bbb      	ldrb	r3, [r7, #14]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d10a      	bne.n	8007874 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	2200      	movs	r2, #0
 8007862:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007866:	e005      	b.n	8007874 <USBH_CDC_Process+0x120>

    default:
      break;
 8007868:	bf00      	nop
 800786a:	e004      	b.n	8007876 <USBH_CDC_Process+0x122>
      break;
 800786c:	bf00      	nop
 800786e:	e002      	b.n	8007876 <USBH_CDC_Process+0x122>
      break;
 8007870:	bf00      	nop
 8007872:	e000      	b.n	8007876 <USBH_CDC_Process+0x122>
      break;
 8007874:	bf00      	nop

  }

  return status;
 8007876:	7bfb      	ldrb	r3, [r7, #15]
}
 8007878:	4618      	mov	r0, r3
 800787a:	3710      	adds	r7, #16
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007880:	b480      	push	{r7}
 8007882:	b083      	sub	sp, #12
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007888:	2300      	movs	r3, #0
}
 800788a:	4618      	mov	r0, r3
 800788c:	370c      	adds	r7, #12
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr

08007896 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007896:	b580      	push	{r7, lr}
 8007898:	b082      	sub	sp, #8
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
 800789e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	22a1      	movs	r2, #161	; 0xa1
 80078a4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2221      	movs	r2, #33	; 0x21
 80078aa:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2207      	movs	r2, #7
 80078bc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	2207      	movs	r2, #7
 80078c2:	4619      	mov	r1, r3
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 faf1 	bl	8007eac <USBH_CtlReq>
 80078ca:	4603      	mov	r3, r0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3708      	adds	r7, #8
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b082      	sub	sp, #8
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2221      	movs	r2, #33	; 0x21
 80078e2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2220      	movs	r2, #32
 80078e8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2200      	movs	r2, #0
 80078ee:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2207      	movs	r2, #7
 80078fa:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	2207      	movs	r2, #7
 8007900:	4619      	mov	r1, r3
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 fad2 	bl	8007eac <USBH_CtlReq>
 8007908:	4603      	mov	r3, r0
}
 800790a:	4618      	mov	r0, r3
 800790c:	3708      	adds	r7, #8
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}

08007912 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007912:	b580      	push	{r7, lr}
 8007914:	b086      	sub	sp, #24
 8007916:	af02      	add	r7, sp, #8
 8007918:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007920:	69db      	ldr	r3, [r3, #28]
 8007922:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007924:	2300      	movs	r3, #0
 8007926:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800792e:	2b01      	cmp	r3, #1
 8007930:	d002      	beq.n	8007938 <CDC_ProcessTransmission+0x26>
 8007932:	2b02      	cmp	r3, #2
 8007934:	d023      	beq.n	800797e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007936:	e05e      	b.n	80079f6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800793c:	68fa      	ldr	r2, [r7, #12]
 800793e:	8b12      	ldrh	r2, [r2, #24]
 8007940:	4293      	cmp	r3, r2
 8007942:	d90b      	bls.n	800795c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	69d9      	ldr	r1, [r3, #28]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	8b1a      	ldrh	r2, [r3, #24]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	7b5b      	ldrb	r3, [r3, #13]
 8007950:	2001      	movs	r0, #1
 8007952:	9000      	str	r0, [sp, #0]
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 fcb8 	bl	80082ca <USBH_BulkSendData>
 800795a:	e00b      	b.n	8007974 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8007964:	b29a      	uxth	r2, r3
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	7b5b      	ldrb	r3, [r3, #13]
 800796a:	2001      	movs	r0, #1
 800796c:	9000      	str	r0, [sp, #0]
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 fcab 	bl	80082ca <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2202      	movs	r2, #2
 8007978:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800797c:	e03b      	b.n	80079f6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	7b5b      	ldrb	r3, [r3, #13]
 8007982:	4619      	mov	r1, r3
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 ff83 	bl	8008890 <USBH_LL_GetURBState>
 800798a:	4603      	mov	r3, r0
 800798c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800798e:	7afb      	ldrb	r3, [r7, #11]
 8007990:	2b01      	cmp	r3, #1
 8007992:	d128      	bne.n	80079e6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007998:	68fa      	ldr	r2, [r7, #12]
 800799a:	8b12      	ldrh	r2, [r2, #24]
 800799c:	4293      	cmp	r3, r2
 800799e:	d90e      	bls.n	80079be <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	8b12      	ldrh	r2, [r2, #24]
 80079a8:	1a9a      	subs	r2, r3, r2
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	69db      	ldr	r3, [r3, #28]
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	8b12      	ldrh	r2, [r2, #24]
 80079b6:	441a      	add	r2, r3
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	61da      	str	r2, [r3, #28]
 80079bc:	e002      	b.n	80079c4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2200      	movs	r2, #0
 80079c2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d004      	beq.n	80079d6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80079d4:	e00e      	b.n	80079f4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2200      	movs	r2, #0
 80079da:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 f868 	bl	8007ab4 <USBH_CDC_TransmitCallback>
      break;
 80079e4:	e006      	b.n	80079f4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80079e6:	7afb      	ldrb	r3, [r7, #11]
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	d103      	bne.n	80079f4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2201      	movs	r2, #1
 80079f0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80079f4:	bf00      	nop
  }
}
 80079f6:	bf00      	nop
 80079f8:	3710      	adds	r7, #16
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}

080079fe <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b086      	sub	sp, #24
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a0c:	69db      	ldr	r3, [r3, #28]
 8007a0e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007a10:	2300      	movs	r3, #0
 8007a12:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007a1a:	2b03      	cmp	r3, #3
 8007a1c:	d002      	beq.n	8007a24 <CDC_ProcessReception+0x26>
 8007a1e:	2b04      	cmp	r3, #4
 8007a20:	d00e      	beq.n	8007a40 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007a22:	e043      	b.n	8007aac <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	6a19      	ldr	r1, [r3, #32]
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	8b5a      	ldrh	r2, [r3, #26]
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	7b1b      	ldrb	r3, [r3, #12]
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 fc6f 	bl	8008314 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	2204      	movs	r2, #4
 8007a3a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007a3e:	e035      	b.n	8007aac <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	7b1b      	ldrb	r3, [r3, #12]
 8007a44:	4619      	mov	r1, r3
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 ff22 	bl	8008890 <USBH_LL_GetURBState>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007a50:	7cfb      	ldrb	r3, [r7, #19]
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d129      	bne.n	8007aaa <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	7b1b      	ldrb	r3, [r3, #12]
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 fe85 	bl	800876c <USBH_LL_GetLastXferSize>
 8007a62:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a68:	68fa      	ldr	r2, [r7, #12]
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d016      	beq.n	8007a9c <CDC_ProcessReception+0x9e>
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	8b5b      	ldrh	r3, [r3, #26]
 8007a72:	461a      	mov	r2, r3
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d910      	bls.n	8007a9c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	1ad2      	subs	r2, r2, r3
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	6a1a      	ldr	r2, [r3, #32]
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	441a      	add	r2, r3
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	2203      	movs	r2, #3
 8007a96:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007a9a:	e006      	b.n	8007aaa <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 f80f 	bl	8007ac8 <USBH_CDC_ReceiveCallback>
      break;
 8007aaa:	bf00      	nop
  }
}
 8007aac:	bf00      	nop
 8007aae:	3718      	adds	r7, #24
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b083      	sub	sp, #12
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007abc:	bf00      	nop
 8007abe:	370c      	adds	r7, #12
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007ad0:	bf00      	nop
 8007ad2:	370c      	adds	r7, #12
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr

08007adc <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b083      	sub	sp, #12
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007ae4:	bf00      	nop
 8007ae6:	370c      	adds	r7, #12
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	60b9      	str	r1, [r7, #8]
 8007afa:	4613      	mov	r3, r2
 8007afc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d101      	bne.n	8007b08 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007b04:	2302      	movs	r3, #2
 8007b06:	e029      	b.n	8007b5c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	79fa      	ldrb	r2, [r7, #7]
 8007b0c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007b20:	68f8      	ldr	r0, [r7, #12]
 8007b22:	f000 f81f 	bl	8007b64 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d003      	beq.n	8007b54 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	68ba      	ldr	r2, [r7, #8]
 8007b50:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007b54:	68f8      	ldr	r0, [r7, #12]
 8007b56:	f000 fd97 	bl	8008688 <USBH_LL_Init>

  return USBH_OK;
 8007b5a:	2300      	movs	r3, #0
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3710      	adds	r7, #16
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b085      	sub	sp, #20
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007b70:	2300      	movs	r3, #0
 8007b72:	60fb      	str	r3, [r7, #12]
 8007b74:	e009      	b.n	8007b8a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	33e0      	adds	r3, #224	; 0xe0
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	4413      	add	r3, r2
 8007b80:	2200      	movs	r2, #0
 8007b82:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	3301      	adds	r3, #1
 8007b88:	60fb      	str	r3, [r7, #12]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2b0f      	cmp	r3, #15
 8007b8e:	d9f2      	bls.n	8007b76 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007b90:	2300      	movs	r3, #0
 8007b92:	60fb      	str	r3, [r7, #12]
 8007b94:	e009      	b.n	8007baa <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	60fb      	str	r3, [r7, #12]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bb0:	d3f1      	bcc.n	8007b96 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2240      	movs	r2, #64	; 0x40
 8007bd6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2201      	movs	r2, #1
 8007bea:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3714      	adds	r7, #20
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b085      	sub	sp, #20
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007c16:	2300      	movs	r3, #0
 8007c18:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d016      	beq.n	8007c4e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d10e      	bne.n	8007c48 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007c30:	1c59      	adds	r1, r3, #1
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007c38:	687a      	ldr	r2, [r7, #4]
 8007c3a:	33de      	adds	r3, #222	; 0xde
 8007c3c:	6839      	ldr	r1, [r7, #0]
 8007c3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007c42:	2300      	movs	r3, #0
 8007c44:	73fb      	strb	r3, [r7, #15]
 8007c46:	e004      	b.n	8007c52 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007c48:	2302      	movs	r3, #2
 8007c4a:	73fb      	strb	r3, [r7, #15]
 8007c4c:	e001      	b.n	8007c52 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007c4e:	2302      	movs	r3, #2
 8007c50:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3714      	adds	r7, #20
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b085      	sub	sp, #20
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	460b      	mov	r3, r1
 8007c6a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007c76:	78fa      	ldrb	r2, [r7, #3]
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d204      	bcs.n	8007c86 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	78fa      	ldrb	r2, [r7, #3]
 8007c80:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007c84:	e001      	b.n	8007c8a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007c86:	2302      	movs	r3, #2
 8007c88:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3714      	adds	r7, #20
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b087      	sub	sp, #28
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	4608      	mov	r0, r1
 8007ca2:	4611      	mov	r1, r2
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	70fb      	strb	r3, [r7, #3]
 8007caa:	460b      	mov	r3, r1
 8007cac:	70bb      	strb	r3, [r7, #2]
 8007cae:	4613      	mov	r3, r2
 8007cb0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007cc0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007cc2:	e025      	b.n	8007d10 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007cc4:	7dfb      	ldrb	r3, [r7, #23]
 8007cc6:	221a      	movs	r2, #26
 8007cc8:	fb02 f303 	mul.w	r3, r2, r3
 8007ccc:	3308      	adds	r3, #8
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	3302      	adds	r3, #2
 8007cd4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	795b      	ldrb	r3, [r3, #5]
 8007cda:	78fa      	ldrb	r2, [r7, #3]
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d002      	beq.n	8007ce6 <USBH_FindInterface+0x4e>
 8007ce0:	78fb      	ldrb	r3, [r7, #3]
 8007ce2:	2bff      	cmp	r3, #255	; 0xff
 8007ce4:	d111      	bne.n	8007d0a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007cea:	78ba      	ldrb	r2, [r7, #2]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d002      	beq.n	8007cf6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007cf0:	78bb      	ldrb	r3, [r7, #2]
 8007cf2:	2bff      	cmp	r3, #255	; 0xff
 8007cf4:	d109      	bne.n	8007d0a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007cfa:	787a      	ldrb	r2, [r7, #1]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d002      	beq.n	8007d06 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007d00:	787b      	ldrb	r3, [r7, #1]
 8007d02:	2bff      	cmp	r3, #255	; 0xff
 8007d04:	d101      	bne.n	8007d0a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007d06:	7dfb      	ldrb	r3, [r7, #23]
 8007d08:	e006      	b.n	8007d18 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007d0a:	7dfb      	ldrb	r3, [r7, #23]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007d10:	7dfb      	ldrb	r3, [r7, #23]
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d9d6      	bls.n	8007cc4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007d16:	23ff      	movs	r3, #255	; 0xff
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	371c      	adds	r7, #28
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr

08007d24 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 fce7 	bl	8008700 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007d32:	2101      	movs	r1, #1
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 fdbe 	bl	80088b6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007d3a:	2300      	movs	r3, #0
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3708      	adds	r7, #8
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	683a      	ldr	r2, [r7, #0]
 8007d52:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007d56:	bf00      	nop
 8007d58:	370c      	adds	r7, #12
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr

08007d62 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b082      	sub	sp, #8
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007d70:	1c5a      	adds	r2, r3, #1
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 f804 	bl	8007d86 <USBH_HandleSof>
}
 8007d7e:	bf00      	nop
 8007d80:	3708      	adds	r7, #8
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}

08007d86 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007d86:	b580      	push	{r7, lr}
 8007d88:	b082      	sub	sp, #8
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	2b0b      	cmp	r3, #11
 8007d96:	d10a      	bne.n	8007dae <USBH_HandleSof+0x28>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d005      	beq.n	8007dae <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007da8:	699b      	ldr	r3, [r3, #24]
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	4798      	blx	r3
  }
}
 8007dae:	bf00      	nop
 8007db0:	3708      	adds	r7, #8
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007db6:	b480      	push	{r7}
 8007db8:	b083      	sub	sp, #12
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007dc6:	bf00      	nop
}
 8007dc8:	370c      	adds	r7, #12
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr

08007dd2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007dd2:	b480      	push	{r7}
 8007dd4:	b083      	sub	sp, #12
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007de2:	bf00      	nop
}
 8007de4:	370c      	adds	r7, #12
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr

08007dee <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007dee:	b480      	push	{r7}
 8007df0:	b083      	sub	sp, #12
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2201      	movs	r2, #1
 8007dfa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2200      	movs	r2, #0
 8007e02:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007e0e:	2300      	movs	r3, #0
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2201      	movs	r2, #1
 8007e28:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2200      	movs	r2, #0
 8007e38:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 fc7a 	bl	8008736 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	791b      	ldrb	r3, [r3, #4]
 8007e46:	4619      	mov	r1, r3
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 fad1 	bl	80083f0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	795b      	ldrb	r3, [r3, #5]
 8007e52:	4619      	mov	r1, r3
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 facb 	bl	80083f0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3708      	adds	r7, #8
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	789b      	ldrb	r3, [r3, #2]
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d10f      	bne.n	8007e98 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2202      	movs	r2, #2
 8007e7c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2201      	movs	r2, #1
 8007e82:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2200      	movs	r2, #0
 8007e88:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007e8a:	78fb      	ldrb	r3, [r7, #3]
 8007e8c:	b29a      	uxth	r2, r3
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2200      	movs	r2, #0
 8007e96:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007e98:	2200      	movs	r2, #0
 8007e9a:	2100      	movs	r1, #0
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 f805 	bl	8007eac <USBH_CtlReq>
 8007ea2:	4603      	mov	r3, r0
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3708      	adds	r7, #8
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b086      	sub	sp, #24
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	4613      	mov	r3, r2
 8007eb8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	789b      	ldrb	r3, [r3, #2]
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d002      	beq.n	8007ecc <USBH_CtlReq+0x20>
 8007ec6:	2b02      	cmp	r3, #2
 8007ec8:	d00f      	beq.n	8007eea <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007eca:	e027      	b.n	8007f1c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	68ba      	ldr	r2, [r7, #8]
 8007ed0:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	88fa      	ldrh	r2, [r7, #6]
 8007ed6:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2201      	movs	r2, #1
 8007edc:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2202      	movs	r2, #2
 8007ee2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	75fb      	strb	r3, [r7, #23]
      break;
 8007ee8:	e018      	b.n	8007f1c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007eea:	68f8      	ldr	r0, [r7, #12]
 8007eec:	f000 f81c 	bl	8007f28 <USBH_HandleControl>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007ef4:	7dfb      	ldrb	r3, [r7, #23]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d002      	beq.n	8007f00 <USBH_CtlReq+0x54>
 8007efa:	7dfb      	ldrb	r3, [r7, #23]
 8007efc:	2b03      	cmp	r3, #3
 8007efe:	d106      	bne.n	8007f0e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2201      	movs	r2, #1
 8007f04:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	761a      	strb	r2, [r3, #24]
      break;
 8007f0c:	e005      	b.n	8007f1a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007f0e:	7dfb      	ldrb	r3, [r7, #23]
 8007f10:	2b02      	cmp	r3, #2
 8007f12:	d102      	bne.n	8007f1a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2201      	movs	r2, #1
 8007f18:	709a      	strb	r2, [r3, #2]
      break;
 8007f1a:	bf00      	nop
  }
  return status;
 8007f1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3718      	adds	r7, #24
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
	...

08007f28 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b086      	sub	sp, #24
 8007f2c:	af02      	add	r7, sp, #8
 8007f2e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007f30:	2301      	movs	r3, #1
 8007f32:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007f34:	2300      	movs	r3, #0
 8007f36:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	7e1b      	ldrb	r3, [r3, #24]
 8007f3c:	3b01      	subs	r3, #1
 8007f3e:	2b0a      	cmp	r3, #10
 8007f40:	f200 8156 	bhi.w	80081f0 <USBH_HandleControl+0x2c8>
 8007f44:	a201      	add	r2, pc, #4	; (adr r2, 8007f4c <USBH_HandleControl+0x24>)
 8007f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f4a:	bf00      	nop
 8007f4c:	08007f79 	.word	0x08007f79
 8007f50:	08007f93 	.word	0x08007f93
 8007f54:	08007ffd 	.word	0x08007ffd
 8007f58:	08008023 	.word	0x08008023
 8007f5c:	0800805b 	.word	0x0800805b
 8007f60:	08008085 	.word	0x08008085
 8007f64:	080080d7 	.word	0x080080d7
 8007f68:	080080f9 	.word	0x080080f9
 8007f6c:	08008135 	.word	0x08008135
 8007f70:	0800815b 	.word	0x0800815b
 8007f74:	08008199 	.word	0x08008199
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f103 0110 	add.w	r1, r3, #16
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	795b      	ldrb	r3, [r3, #5]
 8007f82:	461a      	mov	r2, r3
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 f943 	bl	8008210 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2202      	movs	r2, #2
 8007f8e:	761a      	strb	r2, [r3, #24]
      break;
 8007f90:	e139      	b.n	8008206 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	795b      	ldrb	r3, [r3, #5]
 8007f96:	4619      	mov	r1, r3
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 fc79 	bl	8008890 <USBH_LL_GetURBState>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007fa2:	7bbb      	ldrb	r3, [r7, #14]
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d11e      	bne.n	8007fe6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	7c1b      	ldrb	r3, [r3, #16]
 8007fac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007fb0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	8adb      	ldrh	r3, [r3, #22]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d00a      	beq.n	8007fd0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007fba:	7b7b      	ldrb	r3, [r7, #13]
 8007fbc:	2b80      	cmp	r3, #128	; 0x80
 8007fbe:	d103      	bne.n	8007fc8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2203      	movs	r2, #3
 8007fc4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007fc6:	e115      	b.n	80081f4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2205      	movs	r2, #5
 8007fcc:	761a      	strb	r2, [r3, #24]
      break;
 8007fce:	e111      	b.n	80081f4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007fd0:	7b7b      	ldrb	r3, [r7, #13]
 8007fd2:	2b80      	cmp	r3, #128	; 0x80
 8007fd4:	d103      	bne.n	8007fde <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2209      	movs	r2, #9
 8007fda:	761a      	strb	r2, [r3, #24]
      break;
 8007fdc:	e10a      	b.n	80081f4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2207      	movs	r2, #7
 8007fe2:	761a      	strb	r2, [r3, #24]
      break;
 8007fe4:	e106      	b.n	80081f4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007fe6:	7bbb      	ldrb	r3, [r7, #14]
 8007fe8:	2b04      	cmp	r3, #4
 8007fea:	d003      	beq.n	8007ff4 <USBH_HandleControl+0xcc>
 8007fec:	7bbb      	ldrb	r3, [r7, #14]
 8007fee:	2b02      	cmp	r3, #2
 8007ff0:	f040 8100 	bne.w	80081f4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	220b      	movs	r2, #11
 8007ff8:	761a      	strb	r2, [r3, #24]
      break;
 8007ffa:	e0fb      	b.n	80081f4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008002:	b29a      	uxth	r2, r3
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6899      	ldr	r1, [r3, #8]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	899a      	ldrh	r2, [r3, #12]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	791b      	ldrb	r3, [r3, #4]
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 f93a 	bl	800828e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2204      	movs	r2, #4
 800801e:	761a      	strb	r2, [r3, #24]
      break;
 8008020:	e0f1      	b.n	8008206 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	791b      	ldrb	r3, [r3, #4]
 8008026:	4619      	mov	r1, r3
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 fc31 	bl	8008890 <USBH_LL_GetURBState>
 800802e:	4603      	mov	r3, r0
 8008030:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008032:	7bbb      	ldrb	r3, [r7, #14]
 8008034:	2b01      	cmp	r3, #1
 8008036:	d102      	bne.n	800803e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2209      	movs	r2, #9
 800803c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800803e:	7bbb      	ldrb	r3, [r7, #14]
 8008040:	2b05      	cmp	r3, #5
 8008042:	d102      	bne.n	800804a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008044:	2303      	movs	r3, #3
 8008046:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008048:	e0d6      	b.n	80081f8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800804a:	7bbb      	ldrb	r3, [r7, #14]
 800804c:	2b04      	cmp	r3, #4
 800804e:	f040 80d3 	bne.w	80081f8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	220b      	movs	r2, #11
 8008056:	761a      	strb	r2, [r3, #24]
      break;
 8008058:	e0ce      	b.n	80081f8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6899      	ldr	r1, [r3, #8]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	899a      	ldrh	r2, [r3, #12]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	795b      	ldrb	r3, [r3, #5]
 8008066:	2001      	movs	r0, #1
 8008068:	9000      	str	r0, [sp, #0]
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 f8ea 	bl	8008244 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008076:	b29a      	uxth	r2, r3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2206      	movs	r2, #6
 8008080:	761a      	strb	r2, [r3, #24]
      break;
 8008082:	e0c0      	b.n	8008206 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	795b      	ldrb	r3, [r3, #5]
 8008088:	4619      	mov	r1, r3
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 fc00 	bl	8008890 <USBH_LL_GetURBState>
 8008090:	4603      	mov	r3, r0
 8008092:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008094:	7bbb      	ldrb	r3, [r7, #14]
 8008096:	2b01      	cmp	r3, #1
 8008098:	d103      	bne.n	80080a2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2207      	movs	r2, #7
 800809e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80080a0:	e0ac      	b.n	80081fc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80080a2:	7bbb      	ldrb	r3, [r7, #14]
 80080a4:	2b05      	cmp	r3, #5
 80080a6:	d105      	bne.n	80080b4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	220c      	movs	r2, #12
 80080ac:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80080ae:	2303      	movs	r3, #3
 80080b0:	73fb      	strb	r3, [r7, #15]
      break;
 80080b2:	e0a3      	b.n	80081fc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80080b4:	7bbb      	ldrb	r3, [r7, #14]
 80080b6:	2b02      	cmp	r3, #2
 80080b8:	d103      	bne.n	80080c2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2205      	movs	r2, #5
 80080be:	761a      	strb	r2, [r3, #24]
      break;
 80080c0:	e09c      	b.n	80081fc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80080c2:	7bbb      	ldrb	r3, [r7, #14]
 80080c4:	2b04      	cmp	r3, #4
 80080c6:	f040 8099 	bne.w	80081fc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	220b      	movs	r2, #11
 80080ce:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80080d0:	2302      	movs	r3, #2
 80080d2:	73fb      	strb	r3, [r7, #15]
      break;
 80080d4:	e092      	b.n	80081fc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	791b      	ldrb	r3, [r3, #4]
 80080da:	2200      	movs	r2, #0
 80080dc:	2100      	movs	r1, #0
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 f8d5 	bl	800828e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80080ea:	b29a      	uxth	r2, r3
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2208      	movs	r2, #8
 80080f4:	761a      	strb	r2, [r3, #24]

      break;
 80080f6:	e086      	b.n	8008206 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	791b      	ldrb	r3, [r3, #4]
 80080fc:	4619      	mov	r1, r3
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 fbc6 	bl	8008890 <USBH_LL_GetURBState>
 8008104:	4603      	mov	r3, r0
 8008106:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008108:	7bbb      	ldrb	r3, [r7, #14]
 800810a:	2b01      	cmp	r3, #1
 800810c:	d105      	bne.n	800811a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	220d      	movs	r2, #13
 8008112:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008114:	2300      	movs	r3, #0
 8008116:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008118:	e072      	b.n	8008200 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800811a:	7bbb      	ldrb	r3, [r7, #14]
 800811c:	2b04      	cmp	r3, #4
 800811e:	d103      	bne.n	8008128 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	220b      	movs	r2, #11
 8008124:	761a      	strb	r2, [r3, #24]
      break;
 8008126:	e06b      	b.n	8008200 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008128:	7bbb      	ldrb	r3, [r7, #14]
 800812a:	2b05      	cmp	r3, #5
 800812c:	d168      	bne.n	8008200 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800812e:	2303      	movs	r3, #3
 8008130:	73fb      	strb	r3, [r7, #15]
      break;
 8008132:	e065      	b.n	8008200 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	795b      	ldrb	r3, [r3, #5]
 8008138:	2201      	movs	r2, #1
 800813a:	9200      	str	r2, [sp, #0]
 800813c:	2200      	movs	r2, #0
 800813e:	2100      	movs	r1, #0
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 f87f 	bl	8008244 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800814c:	b29a      	uxth	r2, r3
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	220a      	movs	r2, #10
 8008156:	761a      	strb	r2, [r3, #24]
      break;
 8008158:	e055      	b.n	8008206 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	795b      	ldrb	r3, [r3, #5]
 800815e:	4619      	mov	r1, r3
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f000 fb95 	bl	8008890 <USBH_LL_GetURBState>
 8008166:	4603      	mov	r3, r0
 8008168:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800816a:	7bbb      	ldrb	r3, [r7, #14]
 800816c:	2b01      	cmp	r3, #1
 800816e:	d105      	bne.n	800817c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008170:	2300      	movs	r3, #0
 8008172:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	220d      	movs	r2, #13
 8008178:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800817a:	e043      	b.n	8008204 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800817c:	7bbb      	ldrb	r3, [r7, #14]
 800817e:	2b02      	cmp	r3, #2
 8008180:	d103      	bne.n	800818a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2209      	movs	r2, #9
 8008186:	761a      	strb	r2, [r3, #24]
      break;
 8008188:	e03c      	b.n	8008204 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800818a:	7bbb      	ldrb	r3, [r7, #14]
 800818c:	2b04      	cmp	r3, #4
 800818e:	d139      	bne.n	8008204 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	220b      	movs	r2, #11
 8008194:	761a      	strb	r2, [r3, #24]
      break;
 8008196:	e035      	b.n	8008204 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	7e5b      	ldrb	r3, [r3, #25]
 800819c:	3301      	adds	r3, #1
 800819e:	b2da      	uxtb	r2, r3
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	765a      	strb	r2, [r3, #25]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	7e5b      	ldrb	r3, [r3, #25]
 80081a8:	2b02      	cmp	r3, #2
 80081aa:	d806      	bhi.n	80081ba <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2201      	movs	r2, #1
 80081b0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2201      	movs	r2, #1
 80081b6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80081b8:	e025      	b.n	8008206 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80081c0:	2106      	movs	r1, #6
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	795b      	ldrb	r3, [r3, #5]
 80081d0:	4619      	mov	r1, r3
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 f90c 	bl	80083f0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	791b      	ldrb	r3, [r3, #4]
 80081dc:	4619      	mov	r1, r3
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 f906 	bl	80083f0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2200      	movs	r2, #0
 80081e8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80081ea:	2302      	movs	r3, #2
 80081ec:	73fb      	strb	r3, [r7, #15]
      break;
 80081ee:	e00a      	b.n	8008206 <USBH_HandleControl+0x2de>

    default:
      break;
 80081f0:	bf00      	nop
 80081f2:	e008      	b.n	8008206 <USBH_HandleControl+0x2de>
      break;
 80081f4:	bf00      	nop
 80081f6:	e006      	b.n	8008206 <USBH_HandleControl+0x2de>
      break;
 80081f8:	bf00      	nop
 80081fa:	e004      	b.n	8008206 <USBH_HandleControl+0x2de>
      break;
 80081fc:	bf00      	nop
 80081fe:	e002      	b.n	8008206 <USBH_HandleControl+0x2de>
      break;
 8008200:	bf00      	nop
 8008202:	e000      	b.n	8008206 <USBH_HandleControl+0x2de>
      break;
 8008204:	bf00      	nop
  }

  return status;
 8008206:	7bfb      	ldrb	r3, [r7, #15]
}
 8008208:	4618      	mov	r0, r3
 800820a:	3710      	adds	r7, #16
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b088      	sub	sp, #32
 8008214:	af04      	add	r7, sp, #16
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	60b9      	str	r1, [r7, #8]
 800821a:	4613      	mov	r3, r2
 800821c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800821e:	79f9      	ldrb	r1, [r7, #7]
 8008220:	2300      	movs	r3, #0
 8008222:	9303      	str	r3, [sp, #12]
 8008224:	2308      	movs	r3, #8
 8008226:	9302      	str	r3, [sp, #8]
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	9301      	str	r3, [sp, #4]
 800822c:	2300      	movs	r3, #0
 800822e:	9300      	str	r3, [sp, #0]
 8008230:	2300      	movs	r3, #0
 8008232:	2200      	movs	r2, #0
 8008234:	68f8      	ldr	r0, [r7, #12]
 8008236:	f000 fafa 	bl	800882e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800823a:	2300      	movs	r3, #0
}
 800823c:	4618      	mov	r0, r3
 800823e:	3710      	adds	r7, #16
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b088      	sub	sp, #32
 8008248:	af04      	add	r7, sp, #16
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	4611      	mov	r1, r2
 8008250:	461a      	mov	r2, r3
 8008252:	460b      	mov	r3, r1
 8008254:	80fb      	strh	r3, [r7, #6]
 8008256:	4613      	mov	r3, r2
 8008258:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008260:	2b00      	cmp	r3, #0
 8008262:	d001      	beq.n	8008268 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008264:	2300      	movs	r3, #0
 8008266:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008268:	7979      	ldrb	r1, [r7, #5]
 800826a:	7e3b      	ldrb	r3, [r7, #24]
 800826c:	9303      	str	r3, [sp, #12]
 800826e:	88fb      	ldrh	r3, [r7, #6]
 8008270:	9302      	str	r3, [sp, #8]
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	9301      	str	r3, [sp, #4]
 8008276:	2301      	movs	r3, #1
 8008278:	9300      	str	r3, [sp, #0]
 800827a:	2300      	movs	r3, #0
 800827c:	2200      	movs	r2, #0
 800827e:	68f8      	ldr	r0, [r7, #12]
 8008280:	f000 fad5 	bl	800882e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008284:	2300      	movs	r3, #0
}
 8008286:	4618      	mov	r0, r3
 8008288:	3710      	adds	r7, #16
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}

0800828e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800828e:	b580      	push	{r7, lr}
 8008290:	b088      	sub	sp, #32
 8008292:	af04      	add	r7, sp, #16
 8008294:	60f8      	str	r0, [r7, #12]
 8008296:	60b9      	str	r1, [r7, #8]
 8008298:	4611      	mov	r1, r2
 800829a:	461a      	mov	r2, r3
 800829c:	460b      	mov	r3, r1
 800829e:	80fb      	strh	r3, [r7, #6]
 80082a0:	4613      	mov	r3, r2
 80082a2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80082a4:	7979      	ldrb	r1, [r7, #5]
 80082a6:	2300      	movs	r3, #0
 80082a8:	9303      	str	r3, [sp, #12]
 80082aa:	88fb      	ldrh	r3, [r7, #6]
 80082ac:	9302      	str	r3, [sp, #8]
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	9301      	str	r3, [sp, #4]
 80082b2:	2301      	movs	r3, #1
 80082b4:	9300      	str	r3, [sp, #0]
 80082b6:	2300      	movs	r3, #0
 80082b8:	2201      	movs	r2, #1
 80082ba:	68f8      	ldr	r0, [r7, #12]
 80082bc:	f000 fab7 	bl	800882e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80082c0:	2300      	movs	r3, #0

}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3710      	adds	r7, #16
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}

080082ca <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80082ca:	b580      	push	{r7, lr}
 80082cc:	b088      	sub	sp, #32
 80082ce:	af04      	add	r7, sp, #16
 80082d0:	60f8      	str	r0, [r7, #12]
 80082d2:	60b9      	str	r1, [r7, #8]
 80082d4:	4611      	mov	r1, r2
 80082d6:	461a      	mov	r2, r3
 80082d8:	460b      	mov	r3, r1
 80082da:	80fb      	strh	r3, [r7, #6]
 80082dc:	4613      	mov	r3, r2
 80082de:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d001      	beq.n	80082ee <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80082ea:	2300      	movs	r3, #0
 80082ec:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80082ee:	7979      	ldrb	r1, [r7, #5]
 80082f0:	7e3b      	ldrb	r3, [r7, #24]
 80082f2:	9303      	str	r3, [sp, #12]
 80082f4:	88fb      	ldrh	r3, [r7, #6]
 80082f6:	9302      	str	r3, [sp, #8]
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	9301      	str	r3, [sp, #4]
 80082fc:	2301      	movs	r3, #1
 80082fe:	9300      	str	r3, [sp, #0]
 8008300:	2302      	movs	r3, #2
 8008302:	2200      	movs	r2, #0
 8008304:	68f8      	ldr	r0, [r7, #12]
 8008306:	f000 fa92 	bl	800882e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800830a:	2300      	movs	r3, #0
}
 800830c:	4618      	mov	r0, r3
 800830e:	3710      	adds	r7, #16
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b088      	sub	sp, #32
 8008318:	af04      	add	r7, sp, #16
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	4611      	mov	r1, r2
 8008320:	461a      	mov	r2, r3
 8008322:	460b      	mov	r3, r1
 8008324:	80fb      	strh	r3, [r7, #6]
 8008326:	4613      	mov	r3, r2
 8008328:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800832a:	7979      	ldrb	r1, [r7, #5]
 800832c:	2300      	movs	r3, #0
 800832e:	9303      	str	r3, [sp, #12]
 8008330:	88fb      	ldrh	r3, [r7, #6]
 8008332:	9302      	str	r3, [sp, #8]
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	9301      	str	r3, [sp, #4]
 8008338:	2301      	movs	r3, #1
 800833a:	9300      	str	r3, [sp, #0]
 800833c:	2302      	movs	r3, #2
 800833e:	2201      	movs	r2, #1
 8008340:	68f8      	ldr	r0, [r7, #12]
 8008342:	f000 fa74 	bl	800882e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008346:	2300      	movs	r3, #0
}
 8008348:	4618      	mov	r0, r3
 800834a:	3710      	adds	r7, #16
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b086      	sub	sp, #24
 8008354:	af04      	add	r7, sp, #16
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	4608      	mov	r0, r1
 800835a:	4611      	mov	r1, r2
 800835c:	461a      	mov	r2, r3
 800835e:	4603      	mov	r3, r0
 8008360:	70fb      	strb	r3, [r7, #3]
 8008362:	460b      	mov	r3, r1
 8008364:	70bb      	strb	r3, [r7, #2]
 8008366:	4613      	mov	r3, r2
 8008368:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800836a:	7878      	ldrb	r0, [r7, #1]
 800836c:	78ba      	ldrb	r2, [r7, #2]
 800836e:	78f9      	ldrb	r1, [r7, #3]
 8008370:	8b3b      	ldrh	r3, [r7, #24]
 8008372:	9302      	str	r3, [sp, #8]
 8008374:	7d3b      	ldrb	r3, [r7, #20]
 8008376:	9301      	str	r3, [sp, #4]
 8008378:	7c3b      	ldrb	r3, [r7, #16]
 800837a:	9300      	str	r3, [sp, #0]
 800837c:	4603      	mov	r3, r0
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 fa07 	bl	8008792 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008384:	2300      	movs	r3, #0
}
 8008386:	4618      	mov	r0, r3
 8008388:	3708      	adds	r7, #8
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}

0800838e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800838e:	b580      	push	{r7, lr}
 8008390:	b082      	sub	sp, #8
 8008392:	af00      	add	r7, sp, #0
 8008394:	6078      	str	r0, [r7, #4]
 8008396:	460b      	mov	r3, r1
 8008398:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800839a:	78fb      	ldrb	r3, [r7, #3]
 800839c:	4619      	mov	r1, r3
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 fa26 	bl	80087f0 <USBH_LL_ClosePipe>

  return USBH_OK;
 80083a4:	2300      	movs	r3, #0
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3708      	adds	r7, #8
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}

080083ae <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80083ae:	b580      	push	{r7, lr}
 80083b0:	b084      	sub	sp, #16
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
 80083b6:	460b      	mov	r3, r1
 80083b8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 f836 	bl	800842c <USBH_GetFreePipe>
 80083c0:	4603      	mov	r3, r0
 80083c2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80083c4:	89fb      	ldrh	r3, [r7, #14]
 80083c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d00a      	beq.n	80083e4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80083ce:	78fa      	ldrb	r2, [r7, #3]
 80083d0:	89fb      	ldrh	r3, [r7, #14]
 80083d2:	f003 030f 	and.w	r3, r3, #15
 80083d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80083da:	6879      	ldr	r1, [r7, #4]
 80083dc:	33e0      	adds	r3, #224	; 0xe0
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	440b      	add	r3, r1
 80083e2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80083e4:	89fb      	ldrh	r3, [r7, #14]
 80083e6:	b2db      	uxtb	r3, r3
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3710      	adds	r7, #16
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b083      	sub	sp, #12
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	460b      	mov	r3, r1
 80083fa:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80083fc:	78fb      	ldrb	r3, [r7, #3]
 80083fe:	2b0f      	cmp	r3, #15
 8008400:	d80d      	bhi.n	800841e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008402:	78fb      	ldrb	r3, [r7, #3]
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	33e0      	adds	r3, #224	; 0xe0
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	4413      	add	r3, r2
 800840c:	685a      	ldr	r2, [r3, #4]
 800840e:	78fb      	ldrb	r3, [r7, #3]
 8008410:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008414:	6879      	ldr	r1, [r7, #4]
 8008416:	33e0      	adds	r3, #224	; 0xe0
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	440b      	add	r3, r1
 800841c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800841e:	2300      	movs	r3, #0
}
 8008420:	4618      	mov	r0, r3
 8008422:	370c      	adds	r7, #12
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr

0800842c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800842c:	b480      	push	{r7}
 800842e:	b085      	sub	sp, #20
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008434:	2300      	movs	r3, #0
 8008436:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008438:	2300      	movs	r3, #0
 800843a:	73fb      	strb	r3, [r7, #15]
 800843c:	e00f      	b.n	800845e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800843e:	7bfb      	ldrb	r3, [r7, #15]
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	33e0      	adds	r3, #224	; 0xe0
 8008444:	009b      	lsls	r3, r3, #2
 8008446:	4413      	add	r3, r2
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800844e:	2b00      	cmp	r3, #0
 8008450:	d102      	bne.n	8008458 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008452:	7bfb      	ldrb	r3, [r7, #15]
 8008454:	b29b      	uxth	r3, r3
 8008456:	e007      	b.n	8008468 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008458:	7bfb      	ldrb	r3, [r7, #15]
 800845a:	3301      	adds	r3, #1
 800845c:	73fb      	strb	r3, [r7, #15]
 800845e:	7bfb      	ldrb	r3, [r7, #15]
 8008460:	2b0f      	cmp	r3, #15
 8008462:	d9ec      	bls.n	800843e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008464:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008468:	4618      	mov	r0, r3
 800846a:	3714      	adds	r7, #20
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr

08008474 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008478:	2201      	movs	r2, #1
 800847a:	490e      	ldr	r1, [pc, #56]	; (80084b4 <MX_USB_HOST_Init+0x40>)
 800847c:	480e      	ldr	r0, [pc, #56]	; (80084b8 <MX_USB_HOST_Init+0x44>)
 800847e:	f7ff fb37 	bl	8007af0 <USBH_Init>
 8008482:	4603      	mov	r3, r0
 8008484:	2b00      	cmp	r3, #0
 8008486:	d001      	beq.n	800848c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008488:	f7f8 fac0 	bl	8000a0c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800848c:	490b      	ldr	r1, [pc, #44]	; (80084bc <MX_USB_HOST_Init+0x48>)
 800848e:	480a      	ldr	r0, [pc, #40]	; (80084b8 <MX_USB_HOST_Init+0x44>)
 8008490:	f7ff fbbc 	bl	8007c0c <USBH_RegisterClass>
 8008494:	4603      	mov	r3, r0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d001      	beq.n	800849e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800849a:	f7f8 fab7 	bl	8000a0c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800849e:	4806      	ldr	r0, [pc, #24]	; (80084b8 <MX_USB_HOST_Init+0x44>)
 80084a0:	f7ff fc40 	bl	8007d24 <USBH_Start>
 80084a4:	4603      	mov	r3, r0
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d001      	beq.n	80084ae <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80084aa:	f7f8 faaf 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80084ae:	bf00      	nop
 80084b0:	bd80      	pop	{r7, pc}
 80084b2:	bf00      	nop
 80084b4:	080084c1 	.word	0x080084c1
 80084b8:	2000026c 	.word	0x2000026c
 80084bc:	20000014 	.word	0x20000014

080084c0 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b083      	sub	sp, #12
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	460b      	mov	r3, r1
 80084ca:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80084cc:	78fb      	ldrb	r3, [r7, #3]
 80084ce:	3b01      	subs	r3, #1
 80084d0:	2b04      	cmp	r3, #4
 80084d2:	d819      	bhi.n	8008508 <USBH_UserProcess+0x48>
 80084d4:	a201      	add	r2, pc, #4	; (adr r2, 80084dc <USBH_UserProcess+0x1c>)
 80084d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084da:	bf00      	nop
 80084dc:	08008509 	.word	0x08008509
 80084e0:	080084f9 	.word	0x080084f9
 80084e4:	08008509 	.word	0x08008509
 80084e8:	08008501 	.word	0x08008501
 80084ec:	080084f1 	.word	0x080084f1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80084f0:	4b09      	ldr	r3, [pc, #36]	; (8008518 <USBH_UserProcess+0x58>)
 80084f2:	2203      	movs	r2, #3
 80084f4:	701a      	strb	r2, [r3, #0]
  break;
 80084f6:	e008      	b.n	800850a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80084f8:	4b07      	ldr	r3, [pc, #28]	; (8008518 <USBH_UserProcess+0x58>)
 80084fa:	2202      	movs	r2, #2
 80084fc:	701a      	strb	r2, [r3, #0]
  break;
 80084fe:	e004      	b.n	800850a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008500:	4b05      	ldr	r3, [pc, #20]	; (8008518 <USBH_UserProcess+0x58>)
 8008502:	2201      	movs	r2, #1
 8008504:	701a      	strb	r2, [r3, #0]
  break;
 8008506:	e000      	b.n	800850a <USBH_UserProcess+0x4a>

  default:
  break;
 8008508:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800850a:	bf00      	nop
 800850c:	370c      	adds	r7, #12
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr
 8008516:	bf00      	nop
 8008518:	20000644 	.word	0x20000644

0800851c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b08a      	sub	sp, #40	; 0x28
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008524:	f107 0314 	add.w	r3, r7, #20
 8008528:	2200      	movs	r2, #0
 800852a:	601a      	str	r2, [r3, #0]
 800852c:	605a      	str	r2, [r3, #4]
 800852e:	609a      	str	r2, [r3, #8]
 8008530:	60da      	str	r2, [r3, #12]
 8008532:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800853c:	d147      	bne.n	80085ce <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800853e:	2300      	movs	r3, #0
 8008540:	613b      	str	r3, [r7, #16]
 8008542:	4b25      	ldr	r3, [pc, #148]	; (80085d8 <HAL_HCD_MspInit+0xbc>)
 8008544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008546:	4a24      	ldr	r2, [pc, #144]	; (80085d8 <HAL_HCD_MspInit+0xbc>)
 8008548:	f043 0301 	orr.w	r3, r3, #1
 800854c:	6313      	str	r3, [r2, #48]	; 0x30
 800854e:	4b22      	ldr	r3, [pc, #136]	; (80085d8 <HAL_HCD_MspInit+0xbc>)
 8008550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008552:	f003 0301 	and.w	r3, r3, #1
 8008556:	613b      	str	r3, [r7, #16]
 8008558:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800855a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800855e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008560:	2300      	movs	r3, #0
 8008562:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008564:	2300      	movs	r3, #0
 8008566:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008568:	f107 0314 	add.w	r3, r7, #20
 800856c:	4619      	mov	r1, r3
 800856e:	481b      	ldr	r0, [pc, #108]	; (80085dc <HAL_HCD_MspInit+0xc0>)
 8008570:	f7f9 f84a 	bl	8001608 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008574:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800857a:	2302      	movs	r3, #2
 800857c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800857e:	2300      	movs	r3, #0
 8008580:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008582:	2300      	movs	r3, #0
 8008584:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008586:	230a      	movs	r3, #10
 8008588:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800858a:	f107 0314 	add.w	r3, r7, #20
 800858e:	4619      	mov	r1, r3
 8008590:	4812      	ldr	r0, [pc, #72]	; (80085dc <HAL_HCD_MspInit+0xc0>)
 8008592:	f7f9 f839 	bl	8001608 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008596:	4b10      	ldr	r3, [pc, #64]	; (80085d8 <HAL_HCD_MspInit+0xbc>)
 8008598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800859a:	4a0f      	ldr	r2, [pc, #60]	; (80085d8 <HAL_HCD_MspInit+0xbc>)
 800859c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085a0:	6353      	str	r3, [r2, #52]	; 0x34
 80085a2:	2300      	movs	r3, #0
 80085a4:	60fb      	str	r3, [r7, #12]
 80085a6:	4b0c      	ldr	r3, [pc, #48]	; (80085d8 <HAL_HCD_MspInit+0xbc>)
 80085a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085aa:	4a0b      	ldr	r2, [pc, #44]	; (80085d8 <HAL_HCD_MspInit+0xbc>)
 80085ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80085b0:	6453      	str	r3, [r2, #68]	; 0x44
 80085b2:	4b09      	ldr	r3, [pc, #36]	; (80085d8 <HAL_HCD_MspInit+0xbc>)
 80085b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085ba:	60fb      	str	r3, [r7, #12]
 80085bc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80085be:	2200      	movs	r2, #0
 80085c0:	2100      	movs	r1, #0
 80085c2:	2043      	movs	r0, #67	; 0x43
 80085c4:	f7f8 ff57 	bl	8001476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80085c8:	2043      	movs	r0, #67	; 0x43
 80085ca:	f7f8 ff70 	bl	80014ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80085ce:	bf00      	nop
 80085d0:	3728      	adds	r7, #40	; 0x28
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
 80085d6:	bf00      	nop
 80085d8:	40023800 	.word	0x40023800
 80085dc:	40020000 	.word	0x40020000

080085e0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b082      	sub	sp, #8
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80085ee:	4618      	mov	r0, r3
 80085f0:	f7ff fbb7 	bl	8007d62 <USBH_LL_IncTimer>
}
 80085f4:	bf00      	nop
 80085f6:	3708      	adds	r7, #8
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800860a:	4618      	mov	r0, r3
 800860c:	f7ff fbef 	bl	8007dee <USBH_LL_Connect>
}
 8008610:	bf00      	nop
 8008612:	3708      	adds	r7, #8
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b082      	sub	sp, #8
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008626:	4618      	mov	r0, r3
 8008628:	f7ff fbf8 	bl	8007e1c <USBH_LL_Disconnect>
}
 800862c:	bf00      	nop
 800862e:	3708      	adds	r7, #8
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008634:	b480      	push	{r7}
 8008636:	b083      	sub	sp, #12
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	460b      	mov	r3, r1
 800863e:	70fb      	strb	r3, [r7, #3]
 8008640:	4613      	mov	r3, r2
 8008642:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008644:	bf00      	nop
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b082      	sub	sp, #8
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800865e:	4618      	mov	r0, r3
 8008660:	f7ff fba9 	bl	8007db6 <USBH_LL_PortEnabled>
}
 8008664:	bf00      	nop
 8008666:	3708      	adds	r7, #8
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b082      	sub	sp, #8
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800867a:	4618      	mov	r0, r3
 800867c:	f7ff fba9 	bl	8007dd2 <USBH_LL_PortDisabled>
}
 8008680:	bf00      	nop
 8008682:	3708      	adds	r7, #8
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008696:	2b01      	cmp	r3, #1
 8008698:	d12a      	bne.n	80086f0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800869a:	4a18      	ldr	r2, [pc, #96]	; (80086fc <USBH_LL_Init+0x74>)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	4a15      	ldr	r2, [pc, #84]	; (80086fc <USBH_LL_Init+0x74>)
 80086a6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80086aa:	4b14      	ldr	r3, [pc, #80]	; (80086fc <USBH_LL_Init+0x74>)
 80086ac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80086b0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80086b2:	4b12      	ldr	r3, [pc, #72]	; (80086fc <USBH_LL_Init+0x74>)
 80086b4:	2208      	movs	r2, #8
 80086b6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80086b8:	4b10      	ldr	r3, [pc, #64]	; (80086fc <USBH_LL_Init+0x74>)
 80086ba:	2201      	movs	r2, #1
 80086bc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80086be:	4b0f      	ldr	r3, [pc, #60]	; (80086fc <USBH_LL_Init+0x74>)
 80086c0:	2200      	movs	r2, #0
 80086c2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80086c4:	4b0d      	ldr	r3, [pc, #52]	; (80086fc <USBH_LL_Init+0x74>)
 80086c6:	2202      	movs	r2, #2
 80086c8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80086ca:	4b0c      	ldr	r3, [pc, #48]	; (80086fc <USBH_LL_Init+0x74>)
 80086cc:	2200      	movs	r2, #0
 80086ce:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80086d0:	480a      	ldr	r0, [pc, #40]	; (80086fc <USBH_LL_Init+0x74>)
 80086d2:	f7f9 f94e 	bl	8001972 <HAL_HCD_Init>
 80086d6:	4603      	mov	r3, r0
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d001      	beq.n	80086e0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80086dc:	f7f8 f996 	bl	8000a0c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80086e0:	4806      	ldr	r0, [pc, #24]	; (80086fc <USBH_LL_Init+0x74>)
 80086e2:	f7f9 fd24 	bl	800212e <HAL_HCD_GetCurrentFrame>
 80086e6:	4603      	mov	r3, r0
 80086e8:	4619      	mov	r1, r3
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f7ff fb2a 	bl	8007d44 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80086f0:	2300      	movs	r3, #0
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3708      	adds	r7, #8
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
 80086fa:	bf00      	nop
 80086fc:	20000648 	.word	0x20000648

08008700 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b084      	sub	sp, #16
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008708:	2300      	movs	r3, #0
 800870a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800870c:	2300      	movs	r3, #0
 800870e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008716:	4618      	mov	r0, r3
 8008718:	f7f9 fca1 	bl	800205e <HAL_HCD_Start>
 800871c:	4603      	mov	r3, r0
 800871e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008720:	7bfb      	ldrb	r3, [r7, #15]
 8008722:	4618      	mov	r0, r3
 8008724:	f000 f90e 	bl	8008944 <USBH_Get_USB_Status>
 8008728:	4603      	mov	r3, r0
 800872a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800872c:	7bbb      	ldrb	r3, [r7, #14]
}
 800872e:	4618      	mov	r0, r3
 8008730:	3710      	adds	r7, #16
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}

08008736 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008736:	b580      	push	{r7, lr}
 8008738:	b084      	sub	sp, #16
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800873e:	2300      	movs	r3, #0
 8008740:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008742:	2300      	movs	r3, #0
 8008744:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800874c:	4618      	mov	r0, r3
 800874e:	f7f9 fca9 	bl	80020a4 <HAL_HCD_Stop>
 8008752:	4603      	mov	r3, r0
 8008754:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008756:	7bfb      	ldrb	r3, [r7, #15]
 8008758:	4618      	mov	r0, r3
 800875a:	f000 f8f3 	bl	8008944 <USBH_Get_USB_Status>
 800875e:	4603      	mov	r3, r0
 8008760:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008762:	7bbb      	ldrb	r3, [r7, #14]
}
 8008764:	4618      	mov	r0, r3
 8008766:	3710      	adds	r7, #16
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	460b      	mov	r3, r1
 8008776:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800877e:	78fa      	ldrb	r2, [r7, #3]
 8008780:	4611      	mov	r1, r2
 8008782:	4618      	mov	r0, r3
 8008784:	f7f9 fcbf 	bl	8002106 <HAL_HCD_HC_GetXferCount>
 8008788:	4603      	mov	r3, r0
}
 800878a:	4618      	mov	r0, r3
 800878c:	3708      	adds	r7, #8
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}

08008792 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008792:	b590      	push	{r4, r7, lr}
 8008794:	b089      	sub	sp, #36	; 0x24
 8008796:	af04      	add	r7, sp, #16
 8008798:	6078      	str	r0, [r7, #4]
 800879a:	4608      	mov	r0, r1
 800879c:	4611      	mov	r1, r2
 800879e:	461a      	mov	r2, r3
 80087a0:	4603      	mov	r3, r0
 80087a2:	70fb      	strb	r3, [r7, #3]
 80087a4:	460b      	mov	r3, r1
 80087a6:	70bb      	strb	r3, [r7, #2]
 80087a8:	4613      	mov	r3, r2
 80087aa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087ac:	2300      	movs	r3, #0
 80087ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80087b0:	2300      	movs	r3, #0
 80087b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80087ba:	787c      	ldrb	r4, [r7, #1]
 80087bc:	78ba      	ldrb	r2, [r7, #2]
 80087be:	78f9      	ldrb	r1, [r7, #3]
 80087c0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80087c2:	9302      	str	r3, [sp, #8]
 80087c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80087c8:	9301      	str	r3, [sp, #4]
 80087ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80087ce:	9300      	str	r3, [sp, #0]
 80087d0:	4623      	mov	r3, r4
 80087d2:	f7f9 f930 	bl	8001a36 <HAL_HCD_HC_Init>
 80087d6:	4603      	mov	r3, r0
 80087d8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80087da:	7bfb      	ldrb	r3, [r7, #15]
 80087dc:	4618      	mov	r0, r3
 80087de:	f000 f8b1 	bl	8008944 <USBH_Get_USB_Status>
 80087e2:	4603      	mov	r3, r0
 80087e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3714      	adds	r7, #20
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd90      	pop	{r4, r7, pc}

080087f0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	460b      	mov	r3, r1
 80087fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087fc:	2300      	movs	r3, #0
 80087fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008800:	2300      	movs	r3, #0
 8008802:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800880a:	78fa      	ldrb	r2, [r7, #3]
 800880c:	4611      	mov	r1, r2
 800880e:	4618      	mov	r0, r3
 8008810:	f7f9 f9a0 	bl	8001b54 <HAL_HCD_HC_Halt>
 8008814:	4603      	mov	r3, r0
 8008816:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008818:	7bfb      	ldrb	r3, [r7, #15]
 800881a:	4618      	mov	r0, r3
 800881c:	f000 f892 	bl	8008944 <USBH_Get_USB_Status>
 8008820:	4603      	mov	r3, r0
 8008822:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008824:	7bbb      	ldrb	r3, [r7, #14]
}
 8008826:	4618      	mov	r0, r3
 8008828:	3710      	adds	r7, #16
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}

0800882e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800882e:	b590      	push	{r4, r7, lr}
 8008830:	b089      	sub	sp, #36	; 0x24
 8008832:	af04      	add	r7, sp, #16
 8008834:	6078      	str	r0, [r7, #4]
 8008836:	4608      	mov	r0, r1
 8008838:	4611      	mov	r1, r2
 800883a:	461a      	mov	r2, r3
 800883c:	4603      	mov	r3, r0
 800883e:	70fb      	strb	r3, [r7, #3]
 8008840:	460b      	mov	r3, r1
 8008842:	70bb      	strb	r3, [r7, #2]
 8008844:	4613      	mov	r3, r2
 8008846:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008848:	2300      	movs	r3, #0
 800884a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800884c:	2300      	movs	r3, #0
 800884e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008856:	787c      	ldrb	r4, [r7, #1]
 8008858:	78ba      	ldrb	r2, [r7, #2]
 800885a:	78f9      	ldrb	r1, [r7, #3]
 800885c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008860:	9303      	str	r3, [sp, #12]
 8008862:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008864:	9302      	str	r3, [sp, #8]
 8008866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008868:	9301      	str	r3, [sp, #4]
 800886a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800886e:	9300      	str	r3, [sp, #0]
 8008870:	4623      	mov	r3, r4
 8008872:	f7f9 f993 	bl	8001b9c <HAL_HCD_HC_SubmitRequest>
 8008876:	4603      	mov	r3, r0
 8008878:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800887a:	7bfb      	ldrb	r3, [r7, #15]
 800887c:	4618      	mov	r0, r3
 800887e:	f000 f861 	bl	8008944 <USBH_Get_USB_Status>
 8008882:	4603      	mov	r3, r0
 8008884:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008886:	7bbb      	ldrb	r3, [r7, #14]
}
 8008888:	4618      	mov	r0, r3
 800888a:	3714      	adds	r7, #20
 800888c:	46bd      	mov	sp, r7
 800888e:	bd90      	pop	{r4, r7, pc}

08008890 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	460b      	mov	r3, r1
 800889a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80088a2:	78fa      	ldrb	r2, [r7, #3]
 80088a4:	4611      	mov	r1, r2
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7f9 fc19 	bl	80020de <HAL_HCD_HC_GetURBState>
 80088ac:	4603      	mov	r3, r0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3708      	adds	r7, #8
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b082      	sub	sp, #8
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
 80088be:	460b      	mov	r3, r1
 80088c0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d103      	bne.n	80088d4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80088cc:	78fb      	ldrb	r3, [r7, #3]
 80088ce:	4618      	mov	r0, r3
 80088d0:	f000 f864 	bl	800899c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80088d4:	20c8      	movs	r0, #200	; 0xc8
 80088d6:	f7f8 fccf 	bl	8001278 <HAL_Delay>
  return USBH_OK;
 80088da:	2300      	movs	r3, #0
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3708      	adds	r7, #8
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b085      	sub	sp, #20
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	460b      	mov	r3, r1
 80088ee:	70fb      	strb	r3, [r7, #3]
 80088f0:	4613      	mov	r3, r2
 80088f2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80088fa:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80088fc:	78fb      	ldrb	r3, [r7, #3]
 80088fe:	68fa      	ldr	r2, [r7, #12]
 8008900:	212c      	movs	r1, #44	; 0x2c
 8008902:	fb01 f303 	mul.w	r3, r1, r3
 8008906:	4413      	add	r3, r2
 8008908:	333b      	adds	r3, #59	; 0x3b
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d009      	beq.n	8008924 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008910:	78fb      	ldrb	r3, [r7, #3]
 8008912:	68fa      	ldr	r2, [r7, #12]
 8008914:	212c      	movs	r1, #44	; 0x2c
 8008916:	fb01 f303 	mul.w	r3, r1, r3
 800891a:	4413      	add	r3, r2
 800891c:	3354      	adds	r3, #84	; 0x54
 800891e:	78ba      	ldrb	r2, [r7, #2]
 8008920:	701a      	strb	r2, [r3, #0]
 8008922:	e008      	b.n	8008936 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008924:	78fb      	ldrb	r3, [r7, #3]
 8008926:	68fa      	ldr	r2, [r7, #12]
 8008928:	212c      	movs	r1, #44	; 0x2c
 800892a:	fb01 f303 	mul.w	r3, r1, r3
 800892e:	4413      	add	r3, r2
 8008930:	3355      	adds	r3, #85	; 0x55
 8008932:	78ba      	ldrb	r2, [r7, #2]
 8008934:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008936:	2300      	movs	r3, #0
}
 8008938:	4618      	mov	r0, r3
 800893a:	3714      	adds	r7, #20
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr

08008944 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008944:	b480      	push	{r7}
 8008946:	b085      	sub	sp, #20
 8008948:	af00      	add	r7, sp, #0
 800894a:	4603      	mov	r3, r0
 800894c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800894e:	2300      	movs	r3, #0
 8008950:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008952:	79fb      	ldrb	r3, [r7, #7]
 8008954:	2b03      	cmp	r3, #3
 8008956:	d817      	bhi.n	8008988 <USBH_Get_USB_Status+0x44>
 8008958:	a201      	add	r2, pc, #4	; (adr r2, 8008960 <USBH_Get_USB_Status+0x1c>)
 800895a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800895e:	bf00      	nop
 8008960:	08008971 	.word	0x08008971
 8008964:	08008977 	.word	0x08008977
 8008968:	0800897d 	.word	0x0800897d
 800896c:	08008983 	.word	0x08008983
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008970:	2300      	movs	r3, #0
 8008972:	73fb      	strb	r3, [r7, #15]
    break;
 8008974:	e00b      	b.n	800898e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008976:	2302      	movs	r3, #2
 8008978:	73fb      	strb	r3, [r7, #15]
    break;
 800897a:	e008      	b.n	800898e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800897c:	2301      	movs	r3, #1
 800897e:	73fb      	strb	r3, [r7, #15]
    break;
 8008980:	e005      	b.n	800898e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008982:	2302      	movs	r3, #2
 8008984:	73fb      	strb	r3, [r7, #15]
    break;
 8008986:	e002      	b.n	800898e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008988:	2302      	movs	r3, #2
 800898a:	73fb      	strb	r3, [r7, #15]
    break;
 800898c:	bf00      	nop
  }
  return usb_status;
 800898e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008990:	4618      	mov	r0, r3
 8008992:	3714      	adds	r7, #20
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr

0800899c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	4603      	mov	r3, r0
 80089a4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80089a6:	79fb      	ldrb	r3, [r7, #7]
 80089a8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80089aa:	79fb      	ldrb	r3, [r7, #7]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d102      	bne.n	80089b6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80089b0:	2300      	movs	r3, #0
 80089b2:	73fb      	strb	r3, [r7, #15]
 80089b4:	e001      	b.n	80089ba <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80089b6:	2301      	movs	r3, #1
 80089b8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80089ba:	7bfb      	ldrb	r3, [r7, #15]
 80089bc:	461a      	mov	r2, r3
 80089be:	2101      	movs	r1, #1
 80089c0:	4803      	ldr	r0, [pc, #12]	; (80089d0 <MX_DriverVbusFS+0x34>)
 80089c2:	f7f8 ffbd 	bl	8001940 <HAL_GPIO_WritePin>
}
 80089c6:	bf00      	nop
 80089c8:	3710      	adds	r7, #16
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
 80089ce:	bf00      	nop
 80089d0:	40020800 	.word	0x40020800

080089d4 <__errno>:
 80089d4:	4b01      	ldr	r3, [pc, #4]	; (80089dc <__errno+0x8>)
 80089d6:	6818      	ldr	r0, [r3, #0]
 80089d8:	4770      	bx	lr
 80089da:	bf00      	nop
 80089dc:	20000034 	.word	0x20000034

080089e0 <__libc_init_array>:
 80089e0:	b570      	push	{r4, r5, r6, lr}
 80089e2:	4d0d      	ldr	r5, [pc, #52]	; (8008a18 <__libc_init_array+0x38>)
 80089e4:	4c0d      	ldr	r4, [pc, #52]	; (8008a1c <__libc_init_array+0x3c>)
 80089e6:	1b64      	subs	r4, r4, r5
 80089e8:	10a4      	asrs	r4, r4, #2
 80089ea:	2600      	movs	r6, #0
 80089ec:	42a6      	cmp	r6, r4
 80089ee:	d109      	bne.n	8008a04 <__libc_init_array+0x24>
 80089f0:	4d0b      	ldr	r5, [pc, #44]	; (8008a20 <__libc_init_array+0x40>)
 80089f2:	4c0c      	ldr	r4, [pc, #48]	; (8008a24 <__libc_init_array+0x44>)
 80089f4:	f000 f92e 	bl	8008c54 <_init>
 80089f8:	1b64      	subs	r4, r4, r5
 80089fa:	10a4      	asrs	r4, r4, #2
 80089fc:	2600      	movs	r6, #0
 80089fe:	42a6      	cmp	r6, r4
 8008a00:	d105      	bne.n	8008a0e <__libc_init_array+0x2e>
 8008a02:	bd70      	pop	{r4, r5, r6, pc}
 8008a04:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a08:	4798      	blx	r3
 8008a0a:	3601      	adds	r6, #1
 8008a0c:	e7ee      	b.n	80089ec <__libc_init_array+0xc>
 8008a0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a12:	4798      	blx	r3
 8008a14:	3601      	adds	r6, #1
 8008a16:	e7f2      	b.n	80089fe <__libc_init_array+0x1e>
 8008a18:	08008c90 	.word	0x08008c90
 8008a1c:	08008c90 	.word	0x08008c90
 8008a20:	08008c90 	.word	0x08008c90
 8008a24:	08008c94 	.word	0x08008c94

08008a28 <malloc>:
 8008a28:	4b02      	ldr	r3, [pc, #8]	; (8008a34 <malloc+0xc>)
 8008a2a:	4601      	mov	r1, r0
 8008a2c:	6818      	ldr	r0, [r3, #0]
 8008a2e:	f000 b87f 	b.w	8008b30 <_malloc_r>
 8008a32:	bf00      	nop
 8008a34:	20000034 	.word	0x20000034

08008a38 <free>:
 8008a38:	4b02      	ldr	r3, [pc, #8]	; (8008a44 <free+0xc>)
 8008a3a:	4601      	mov	r1, r0
 8008a3c:	6818      	ldr	r0, [r3, #0]
 8008a3e:	f000 b80b 	b.w	8008a58 <_free_r>
 8008a42:	bf00      	nop
 8008a44:	20000034 	.word	0x20000034

08008a48 <memset>:
 8008a48:	4402      	add	r2, r0
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d100      	bne.n	8008a52 <memset+0xa>
 8008a50:	4770      	bx	lr
 8008a52:	f803 1b01 	strb.w	r1, [r3], #1
 8008a56:	e7f9      	b.n	8008a4c <memset+0x4>

08008a58 <_free_r>:
 8008a58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a5a:	2900      	cmp	r1, #0
 8008a5c:	d044      	beq.n	8008ae8 <_free_r+0x90>
 8008a5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a62:	9001      	str	r0, [sp, #4]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	f1a1 0404 	sub.w	r4, r1, #4
 8008a6a:	bfb8      	it	lt
 8008a6c:	18e4      	addlt	r4, r4, r3
 8008a6e:	f000 f8e3 	bl	8008c38 <__malloc_lock>
 8008a72:	4a1e      	ldr	r2, [pc, #120]	; (8008aec <_free_r+0x94>)
 8008a74:	9801      	ldr	r0, [sp, #4]
 8008a76:	6813      	ldr	r3, [r2, #0]
 8008a78:	b933      	cbnz	r3, 8008a88 <_free_r+0x30>
 8008a7a:	6063      	str	r3, [r4, #4]
 8008a7c:	6014      	str	r4, [r2, #0]
 8008a7e:	b003      	add	sp, #12
 8008a80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a84:	f000 b8de 	b.w	8008c44 <__malloc_unlock>
 8008a88:	42a3      	cmp	r3, r4
 8008a8a:	d908      	bls.n	8008a9e <_free_r+0x46>
 8008a8c:	6825      	ldr	r5, [r4, #0]
 8008a8e:	1961      	adds	r1, r4, r5
 8008a90:	428b      	cmp	r3, r1
 8008a92:	bf01      	itttt	eq
 8008a94:	6819      	ldreq	r1, [r3, #0]
 8008a96:	685b      	ldreq	r3, [r3, #4]
 8008a98:	1949      	addeq	r1, r1, r5
 8008a9a:	6021      	streq	r1, [r4, #0]
 8008a9c:	e7ed      	b.n	8008a7a <_free_r+0x22>
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	b10b      	cbz	r3, 8008aa8 <_free_r+0x50>
 8008aa4:	42a3      	cmp	r3, r4
 8008aa6:	d9fa      	bls.n	8008a9e <_free_r+0x46>
 8008aa8:	6811      	ldr	r1, [r2, #0]
 8008aaa:	1855      	adds	r5, r2, r1
 8008aac:	42a5      	cmp	r5, r4
 8008aae:	d10b      	bne.n	8008ac8 <_free_r+0x70>
 8008ab0:	6824      	ldr	r4, [r4, #0]
 8008ab2:	4421      	add	r1, r4
 8008ab4:	1854      	adds	r4, r2, r1
 8008ab6:	42a3      	cmp	r3, r4
 8008ab8:	6011      	str	r1, [r2, #0]
 8008aba:	d1e0      	bne.n	8008a7e <_free_r+0x26>
 8008abc:	681c      	ldr	r4, [r3, #0]
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	6053      	str	r3, [r2, #4]
 8008ac2:	4421      	add	r1, r4
 8008ac4:	6011      	str	r1, [r2, #0]
 8008ac6:	e7da      	b.n	8008a7e <_free_r+0x26>
 8008ac8:	d902      	bls.n	8008ad0 <_free_r+0x78>
 8008aca:	230c      	movs	r3, #12
 8008acc:	6003      	str	r3, [r0, #0]
 8008ace:	e7d6      	b.n	8008a7e <_free_r+0x26>
 8008ad0:	6825      	ldr	r5, [r4, #0]
 8008ad2:	1961      	adds	r1, r4, r5
 8008ad4:	428b      	cmp	r3, r1
 8008ad6:	bf04      	itt	eq
 8008ad8:	6819      	ldreq	r1, [r3, #0]
 8008ada:	685b      	ldreq	r3, [r3, #4]
 8008adc:	6063      	str	r3, [r4, #4]
 8008ade:	bf04      	itt	eq
 8008ae0:	1949      	addeq	r1, r1, r5
 8008ae2:	6021      	streq	r1, [r4, #0]
 8008ae4:	6054      	str	r4, [r2, #4]
 8008ae6:	e7ca      	b.n	8008a7e <_free_r+0x26>
 8008ae8:	b003      	add	sp, #12
 8008aea:	bd30      	pop	{r4, r5, pc}
 8008aec:	2000094c 	.word	0x2000094c

08008af0 <sbrk_aligned>:
 8008af0:	b570      	push	{r4, r5, r6, lr}
 8008af2:	4e0e      	ldr	r6, [pc, #56]	; (8008b2c <sbrk_aligned+0x3c>)
 8008af4:	460c      	mov	r4, r1
 8008af6:	6831      	ldr	r1, [r6, #0]
 8008af8:	4605      	mov	r5, r0
 8008afa:	b911      	cbnz	r1, 8008b02 <sbrk_aligned+0x12>
 8008afc:	f000 f88c 	bl	8008c18 <_sbrk_r>
 8008b00:	6030      	str	r0, [r6, #0]
 8008b02:	4621      	mov	r1, r4
 8008b04:	4628      	mov	r0, r5
 8008b06:	f000 f887 	bl	8008c18 <_sbrk_r>
 8008b0a:	1c43      	adds	r3, r0, #1
 8008b0c:	d00a      	beq.n	8008b24 <sbrk_aligned+0x34>
 8008b0e:	1cc4      	adds	r4, r0, #3
 8008b10:	f024 0403 	bic.w	r4, r4, #3
 8008b14:	42a0      	cmp	r0, r4
 8008b16:	d007      	beq.n	8008b28 <sbrk_aligned+0x38>
 8008b18:	1a21      	subs	r1, r4, r0
 8008b1a:	4628      	mov	r0, r5
 8008b1c:	f000 f87c 	bl	8008c18 <_sbrk_r>
 8008b20:	3001      	adds	r0, #1
 8008b22:	d101      	bne.n	8008b28 <sbrk_aligned+0x38>
 8008b24:	f04f 34ff 	mov.w	r4, #4294967295
 8008b28:	4620      	mov	r0, r4
 8008b2a:	bd70      	pop	{r4, r5, r6, pc}
 8008b2c:	20000950 	.word	0x20000950

08008b30 <_malloc_r>:
 8008b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b34:	1ccd      	adds	r5, r1, #3
 8008b36:	f025 0503 	bic.w	r5, r5, #3
 8008b3a:	3508      	adds	r5, #8
 8008b3c:	2d0c      	cmp	r5, #12
 8008b3e:	bf38      	it	cc
 8008b40:	250c      	movcc	r5, #12
 8008b42:	2d00      	cmp	r5, #0
 8008b44:	4607      	mov	r7, r0
 8008b46:	db01      	blt.n	8008b4c <_malloc_r+0x1c>
 8008b48:	42a9      	cmp	r1, r5
 8008b4a:	d905      	bls.n	8008b58 <_malloc_r+0x28>
 8008b4c:	230c      	movs	r3, #12
 8008b4e:	603b      	str	r3, [r7, #0]
 8008b50:	2600      	movs	r6, #0
 8008b52:	4630      	mov	r0, r6
 8008b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b58:	4e2e      	ldr	r6, [pc, #184]	; (8008c14 <_malloc_r+0xe4>)
 8008b5a:	f000 f86d 	bl	8008c38 <__malloc_lock>
 8008b5e:	6833      	ldr	r3, [r6, #0]
 8008b60:	461c      	mov	r4, r3
 8008b62:	bb34      	cbnz	r4, 8008bb2 <_malloc_r+0x82>
 8008b64:	4629      	mov	r1, r5
 8008b66:	4638      	mov	r0, r7
 8008b68:	f7ff ffc2 	bl	8008af0 <sbrk_aligned>
 8008b6c:	1c43      	adds	r3, r0, #1
 8008b6e:	4604      	mov	r4, r0
 8008b70:	d14d      	bne.n	8008c0e <_malloc_r+0xde>
 8008b72:	6834      	ldr	r4, [r6, #0]
 8008b74:	4626      	mov	r6, r4
 8008b76:	2e00      	cmp	r6, #0
 8008b78:	d140      	bne.n	8008bfc <_malloc_r+0xcc>
 8008b7a:	6823      	ldr	r3, [r4, #0]
 8008b7c:	4631      	mov	r1, r6
 8008b7e:	4638      	mov	r0, r7
 8008b80:	eb04 0803 	add.w	r8, r4, r3
 8008b84:	f000 f848 	bl	8008c18 <_sbrk_r>
 8008b88:	4580      	cmp	r8, r0
 8008b8a:	d13a      	bne.n	8008c02 <_malloc_r+0xd2>
 8008b8c:	6821      	ldr	r1, [r4, #0]
 8008b8e:	3503      	adds	r5, #3
 8008b90:	1a6d      	subs	r5, r5, r1
 8008b92:	f025 0503 	bic.w	r5, r5, #3
 8008b96:	3508      	adds	r5, #8
 8008b98:	2d0c      	cmp	r5, #12
 8008b9a:	bf38      	it	cc
 8008b9c:	250c      	movcc	r5, #12
 8008b9e:	4629      	mov	r1, r5
 8008ba0:	4638      	mov	r0, r7
 8008ba2:	f7ff ffa5 	bl	8008af0 <sbrk_aligned>
 8008ba6:	3001      	adds	r0, #1
 8008ba8:	d02b      	beq.n	8008c02 <_malloc_r+0xd2>
 8008baa:	6823      	ldr	r3, [r4, #0]
 8008bac:	442b      	add	r3, r5
 8008bae:	6023      	str	r3, [r4, #0]
 8008bb0:	e00e      	b.n	8008bd0 <_malloc_r+0xa0>
 8008bb2:	6822      	ldr	r2, [r4, #0]
 8008bb4:	1b52      	subs	r2, r2, r5
 8008bb6:	d41e      	bmi.n	8008bf6 <_malloc_r+0xc6>
 8008bb8:	2a0b      	cmp	r2, #11
 8008bba:	d916      	bls.n	8008bea <_malloc_r+0xba>
 8008bbc:	1961      	adds	r1, r4, r5
 8008bbe:	42a3      	cmp	r3, r4
 8008bc0:	6025      	str	r5, [r4, #0]
 8008bc2:	bf18      	it	ne
 8008bc4:	6059      	strne	r1, [r3, #4]
 8008bc6:	6863      	ldr	r3, [r4, #4]
 8008bc8:	bf08      	it	eq
 8008bca:	6031      	streq	r1, [r6, #0]
 8008bcc:	5162      	str	r2, [r4, r5]
 8008bce:	604b      	str	r3, [r1, #4]
 8008bd0:	4638      	mov	r0, r7
 8008bd2:	f104 060b 	add.w	r6, r4, #11
 8008bd6:	f000 f835 	bl	8008c44 <__malloc_unlock>
 8008bda:	f026 0607 	bic.w	r6, r6, #7
 8008bde:	1d23      	adds	r3, r4, #4
 8008be0:	1af2      	subs	r2, r6, r3
 8008be2:	d0b6      	beq.n	8008b52 <_malloc_r+0x22>
 8008be4:	1b9b      	subs	r3, r3, r6
 8008be6:	50a3      	str	r3, [r4, r2]
 8008be8:	e7b3      	b.n	8008b52 <_malloc_r+0x22>
 8008bea:	6862      	ldr	r2, [r4, #4]
 8008bec:	42a3      	cmp	r3, r4
 8008bee:	bf0c      	ite	eq
 8008bf0:	6032      	streq	r2, [r6, #0]
 8008bf2:	605a      	strne	r2, [r3, #4]
 8008bf4:	e7ec      	b.n	8008bd0 <_malloc_r+0xa0>
 8008bf6:	4623      	mov	r3, r4
 8008bf8:	6864      	ldr	r4, [r4, #4]
 8008bfa:	e7b2      	b.n	8008b62 <_malloc_r+0x32>
 8008bfc:	4634      	mov	r4, r6
 8008bfe:	6876      	ldr	r6, [r6, #4]
 8008c00:	e7b9      	b.n	8008b76 <_malloc_r+0x46>
 8008c02:	230c      	movs	r3, #12
 8008c04:	603b      	str	r3, [r7, #0]
 8008c06:	4638      	mov	r0, r7
 8008c08:	f000 f81c 	bl	8008c44 <__malloc_unlock>
 8008c0c:	e7a1      	b.n	8008b52 <_malloc_r+0x22>
 8008c0e:	6025      	str	r5, [r4, #0]
 8008c10:	e7de      	b.n	8008bd0 <_malloc_r+0xa0>
 8008c12:	bf00      	nop
 8008c14:	2000094c 	.word	0x2000094c

08008c18 <_sbrk_r>:
 8008c18:	b538      	push	{r3, r4, r5, lr}
 8008c1a:	4d06      	ldr	r5, [pc, #24]	; (8008c34 <_sbrk_r+0x1c>)
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	4604      	mov	r4, r0
 8008c20:	4608      	mov	r0, r1
 8008c22:	602b      	str	r3, [r5, #0]
 8008c24:	f7f8 fa44 	bl	80010b0 <_sbrk>
 8008c28:	1c43      	adds	r3, r0, #1
 8008c2a:	d102      	bne.n	8008c32 <_sbrk_r+0x1a>
 8008c2c:	682b      	ldr	r3, [r5, #0]
 8008c2e:	b103      	cbz	r3, 8008c32 <_sbrk_r+0x1a>
 8008c30:	6023      	str	r3, [r4, #0]
 8008c32:	bd38      	pop	{r3, r4, r5, pc}
 8008c34:	20000954 	.word	0x20000954

08008c38 <__malloc_lock>:
 8008c38:	4801      	ldr	r0, [pc, #4]	; (8008c40 <__malloc_lock+0x8>)
 8008c3a:	f000 b809 	b.w	8008c50 <__retarget_lock_acquire_recursive>
 8008c3e:	bf00      	nop
 8008c40:	20000958 	.word	0x20000958

08008c44 <__malloc_unlock>:
 8008c44:	4801      	ldr	r0, [pc, #4]	; (8008c4c <__malloc_unlock+0x8>)
 8008c46:	f000 b804 	b.w	8008c52 <__retarget_lock_release_recursive>
 8008c4a:	bf00      	nop
 8008c4c:	20000958 	.word	0x20000958

08008c50 <__retarget_lock_acquire_recursive>:
 8008c50:	4770      	bx	lr

08008c52 <__retarget_lock_release_recursive>:
 8008c52:	4770      	bx	lr

08008c54 <_init>:
 8008c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c56:	bf00      	nop
 8008c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c5a:	bc08      	pop	{r3}
 8008c5c:	469e      	mov	lr, r3
 8008c5e:	4770      	bx	lr

08008c60 <_fini>:
 8008c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c62:	bf00      	nop
 8008c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c66:	bc08      	pop	{r3}
 8008c68:	469e      	mov	lr, r3
 8008c6a:	4770      	bx	lr
