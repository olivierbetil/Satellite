
Turbo_Sat_CSB_Fonctionnel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008864  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080089ec  080089ec  000189ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a08  08008a08  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08008a08  08008a08  00018a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a10  08008a10  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a10  08008a10  00018a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a14  08008a14  00018a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08008a18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020098  2**0
                  CONTENTS
 10 .bss          000008c8  20000098  20000098  00020098  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000960  20000960  00020098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018b83  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e41  00000000  00000000  00038c4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013d8  00000000  00000000  0003ca90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001238  00000000  00000000  0003de68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024105  00000000  00000000  0003f0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a6ab  00000000  00000000  000631a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd885  00000000  00000000  0007d850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014b0d5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000547c  00000000  00000000  0014b128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000098 	.word	0x20000098
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080089d4 	.word	0x080089d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000009c 	.word	0x2000009c
 80001c4:	080089d4 	.word	0x080089d4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fea8 	bl	8001224 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f814 	bl	8000500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f972 	bl	80007c0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004dc:	f000 f87a 	bl	80005d4 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004e0:	f000 f8a6 	bl	8000630 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e4:	f000 f8d4 	bl	8000690 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e8:	f007 fe84 	bl	80081f4 <MX_USB_HOST_Init>
  MX_SPI2_Init();
 80004ec:	f000 f906 	bl	80006fc <MX_SPI2_Init>
  MX_USART2_Init();
 80004f0:	f000 f93a 	bl	8000768 <MX_USART2_Init>
  /* USER CODE BEGIN 2 */
   nrf24_Init();
 80004f4:	f000 fb64 	bl	8000bc0 <nrf24_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  stateMachine();
 80004f8:	f000 fa74 	bl	80009e4 <stateMachine>
 80004fc:	e7fc      	b.n	80004f8 <main+0x2c>
	...

08000500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b094      	sub	sp, #80	; 0x50
 8000504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000506:	f107 0320 	add.w	r3, r7, #32
 800050a:	2230      	movs	r2, #48	; 0x30
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f008 f95a 	bl	80087c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000514:	f107 030c 	add.w	r3, r7, #12
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000524:	2300      	movs	r3, #0
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	4b28      	ldr	r3, [pc, #160]	; (80005cc <SystemClock_Config+0xcc>)
 800052a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052c:	4a27      	ldr	r2, [pc, #156]	; (80005cc <SystemClock_Config+0xcc>)
 800052e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000532:	6413      	str	r3, [r2, #64]	; 0x40
 8000534:	4b25      	ldr	r3, [pc, #148]	; (80005cc <SystemClock_Config+0xcc>)
 8000536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000540:	2300      	movs	r3, #0
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	4b22      	ldr	r3, [pc, #136]	; (80005d0 <SystemClock_Config+0xd0>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a21      	ldr	r2, [pc, #132]	; (80005d0 <SystemClock_Config+0xd0>)
 800054a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800054e:	6013      	str	r3, [r2, #0]
 8000550:	4b1f      	ldr	r3, [pc, #124]	; (80005d0 <SystemClock_Config+0xd0>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000558:	607b      	str	r3, [r7, #4]
 800055a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800055c:	2301      	movs	r3, #1
 800055e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000560:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000564:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000566:	2302      	movs	r3, #2
 8000568:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800056a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800056e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000570:	2308      	movs	r3, #8
 8000572:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000574:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000578:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800057a:	2302      	movs	r3, #2
 800057c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800057e:	2307      	movs	r3, #7
 8000580:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000582:	f107 0320 	add.w	r3, r7, #32
 8000586:	4618      	mov	r0, r3
 8000588:	f003 fb9e 	bl	8003cc8 <HAL_RCC_OscConfig>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000592:	f000 fa63 	bl	8000a5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000596:	230f      	movs	r3, #15
 8000598:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059a:	2302      	movs	r3, #2
 800059c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ae:	f107 030c 	add.w	r3, r7, #12
 80005b2:	2105      	movs	r1, #5
 80005b4:	4618      	mov	r0, r3
 80005b6:	f003 fdff 	bl	80041b8 <HAL_RCC_ClockConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005c0:	f000 fa4c 	bl	8000a5c <Error_Handler>
  }
}
 80005c4:	bf00      	nop
 80005c6:	3750      	adds	r7, #80	; 0x50
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40023800 	.word	0x40023800
 80005d0:	40007000 	.word	0x40007000

080005d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005d8:	4b12      	ldr	r3, [pc, #72]	; (8000624 <MX_I2C1_Init+0x50>)
 80005da:	4a13      	ldr	r2, [pc, #76]	; (8000628 <MX_I2C1_Init+0x54>)
 80005dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005de:	4b11      	ldr	r3, [pc, #68]	; (8000624 <MX_I2C1_Init+0x50>)
 80005e0:	4a12      	ldr	r2, [pc, #72]	; (800062c <MX_I2C1_Init+0x58>)
 80005e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005e4:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <MX_I2C1_Init+0x50>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <MX_I2C1_Init+0x50>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005f0:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <MX_I2C1_Init+0x50>)
 80005f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005f8:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <MX_I2C1_Init+0x50>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005fe:	4b09      	ldr	r3, [pc, #36]	; (8000624 <MX_I2C1_Init+0x50>)
 8000600:	2200      	movs	r2, #0
 8000602:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000604:	4b07      	ldr	r3, [pc, #28]	; (8000624 <MX_I2C1_Init+0x50>)
 8000606:	2200      	movs	r2, #0
 8000608:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800060a:	4b06      	ldr	r3, [pc, #24]	; (8000624 <MX_I2C1_Init+0x50>)
 800060c:	2200      	movs	r2, #0
 800060e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000610:	4804      	ldr	r0, [pc, #16]	; (8000624 <MX_I2C1_Init+0x50>)
 8000612:	f002 fd75 	bl	8003100 <HAL_I2C_Init>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800061c:	f000 fa1e 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}
 8000624:	200000b4 	.word	0x200000b4
 8000628:	40005400 	.word	0x40005400
 800062c:	000186a0 	.word	0x000186a0

08000630 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000634:	4b13      	ldr	r3, [pc, #76]	; (8000684 <MX_I2S3_Init+0x54>)
 8000636:	4a14      	ldr	r2, [pc, #80]	; (8000688 <MX_I2S3_Init+0x58>)
 8000638:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800063a:	4b12      	ldr	r3, [pc, #72]	; (8000684 <MX_I2S3_Init+0x54>)
 800063c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000640:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000642:	4b10      	ldr	r3, [pc, #64]	; (8000684 <MX_I2S3_Init+0x54>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000648:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <MX_I2S3_Init+0x54>)
 800064a:	2200      	movs	r2, #0
 800064c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800064e:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <MX_I2S3_Init+0x54>)
 8000650:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000654:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000656:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <MX_I2S3_Init+0x54>)
 8000658:	4a0c      	ldr	r2, [pc, #48]	; (800068c <MX_I2S3_Init+0x5c>)
 800065a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800065c:	4b09      	ldr	r3, [pc, #36]	; (8000684 <MX_I2S3_Init+0x54>)
 800065e:	2200      	movs	r2, #0
 8000660:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000662:	4b08      	ldr	r3, [pc, #32]	; (8000684 <MX_I2S3_Init+0x54>)
 8000664:	2200      	movs	r2, #0
 8000666:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <MX_I2S3_Init+0x54>)
 800066a:	2200      	movs	r2, #0
 800066c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800066e:	4805      	ldr	r0, [pc, #20]	; (8000684 <MX_I2S3_Init+0x54>)
 8000670:	f002 fe8a 	bl	8003388 <HAL_I2S_Init>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800067a:	f000 f9ef 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000108 	.word	0x20000108
 8000688:	40003c00 	.word	0x40003c00
 800068c:	00017700 	.word	0x00017700

08000690 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000694:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <MX_SPI1_Init+0x64>)
 8000696:	4a18      	ldr	r2, [pc, #96]	; (80006f8 <MX_SPI1_Init+0x68>)
 8000698:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800069a:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <MX_SPI1_Init+0x64>)
 800069c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006a2:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006a8:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006c2:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006dc:	220a      	movs	r2, #10
 80006de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006e2:	f004 f8c9 	bl	8004878 <HAL_SPI_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006ec:	f000 f9b6 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000150 	.word	0x20000150
 80006f8:	40013000 	.word	0x40013000

080006fc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000700:	4b17      	ldr	r3, [pc, #92]	; (8000760 <MX_SPI2_Init+0x64>)
 8000702:	4a18      	ldr	r2, [pc, #96]	; (8000764 <MX_SPI2_Init+0x68>)
 8000704:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000706:	4b16      	ldr	r3, [pc, #88]	; (8000760 <MX_SPI2_Init+0x64>)
 8000708:	f44f 7282 	mov.w	r2, #260	; 0x104
 800070c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800070e:	4b14      	ldr	r3, [pc, #80]	; (8000760 <MX_SPI2_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <MX_SPI2_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800071a:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_SPI2_Init+0x64>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000720:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <MX_SPI2_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_SPI2_Init+0x64>)
 8000728:	f44f 7200 	mov.w	r2, #512	; 0x200
 800072c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_SPI2_Init+0x64>)
 8000730:	2218      	movs	r2, #24
 8000732:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000734:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <MX_SPI2_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_SPI2_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000740:	4b07      	ldr	r3, [pc, #28]	; (8000760 <MX_SPI2_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_SPI2_Init+0x64>)
 8000748:	220a      	movs	r2, #10
 800074a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800074c:	4804      	ldr	r0, [pc, #16]	; (8000760 <MX_SPI2_Init+0x64>)
 800074e:	f004 f893 	bl	8004878 <HAL_SPI_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000758:	f000 f980 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	200001a8 	.word	0x200001a8
 8000764:	40003800 	.word	0x40003800

08000768 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <MX_USART2_Init+0x50>)
 800076e:	4a13      	ldr	r2, [pc, #76]	; (80007bc <MX_USART2_Init+0x54>)
 8000770:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 9600;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_USART2_Init+0x50>)
 8000774:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000778:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 800077a:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <MX_USART2_Init+0x50>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 8000780:	4b0d      	ldr	r3, [pc, #52]	; (80007b8 <MX_USART2_Init+0x50>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 8000786:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <MX_USART2_Init+0x50>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 800078c:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <MX_USART2_Init+0x50>)
 800078e:	220c      	movs	r2, #12
 8000790:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_USART2_Init+0x50>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8000798:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <MX_USART2_Init+0x50>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_USART2_Init+0x50>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 80007a4:	4804      	ldr	r0, [pc, #16]	; (80007b8 <MX_USART2_Init+0x50>)
 80007a6:	f004 fe0f 	bl	80053c8 <HAL_USART_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 80007b0:	f000 f954 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000200 	.word	0x20000200
 80007bc:	40004400 	.word	0x40004400

080007c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08c      	sub	sp, #48	; 0x30
 80007c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c6:	f107 031c 	add.w	r3, r7, #28
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
 80007d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	61bb      	str	r3, [r7, #24]
 80007da:	4b7c      	ldr	r3, [pc, #496]	; (80009cc <MX_GPIO_Init+0x20c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a7b      	ldr	r2, [pc, #492]	; (80009cc <MX_GPIO_Init+0x20c>)
 80007e0:	f043 0310 	orr.w	r3, r3, #16
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b79      	ldr	r3, [pc, #484]	; (80009cc <MX_GPIO_Init+0x20c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0310 	and.w	r3, r3, #16
 80007ee:	61bb      	str	r3, [r7, #24]
 80007f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
 80007f6:	4b75      	ldr	r3, [pc, #468]	; (80009cc <MX_GPIO_Init+0x20c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a74      	ldr	r2, [pc, #464]	; (80009cc <MX_GPIO_Init+0x20c>)
 80007fc:	f043 0304 	orr.w	r3, r3, #4
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b72      	ldr	r3, [pc, #456]	; (80009cc <MX_GPIO_Init+0x20c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0304 	and.w	r3, r3, #4
 800080a:	617b      	str	r3, [r7, #20]
 800080c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
 8000812:	4b6e      	ldr	r3, [pc, #440]	; (80009cc <MX_GPIO_Init+0x20c>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a6d      	ldr	r2, [pc, #436]	; (80009cc <MX_GPIO_Init+0x20c>)
 8000818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b6b      	ldr	r3, [pc, #428]	; (80009cc <MX_GPIO_Init+0x20c>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	4b67      	ldr	r3, [pc, #412]	; (80009cc <MX_GPIO_Init+0x20c>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a66      	ldr	r2, [pc, #408]	; (80009cc <MX_GPIO_Init+0x20c>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b64      	ldr	r3, [pc, #400]	; (80009cc <MX_GPIO_Init+0x20c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	4b60      	ldr	r3, [pc, #384]	; (80009cc <MX_GPIO_Init+0x20c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a5f      	ldr	r2, [pc, #380]	; (80009cc <MX_GPIO_Init+0x20c>)
 8000850:	f043 0302 	orr.w	r3, r3, #2
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b5d      	ldr	r3, [pc, #372]	; (80009cc <MX_GPIO_Init+0x20c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0302 	and.w	r3, r3, #2
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	4b59      	ldr	r3, [pc, #356]	; (80009cc <MX_GPIO_Init+0x20c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a58      	ldr	r2, [pc, #352]	; (80009cc <MX_GPIO_Init+0x20c>)
 800086c:	f043 0308 	orr.w	r3, r3, #8
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b56      	ldr	r3, [pc, #344]	; (80009cc <MX_GPIO_Init+0x20c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0308 	and.w	r3, r3, #8
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2108      	movs	r1, #8
 8000882:	4853      	ldr	r0, [pc, #332]	; (80009d0 <MX_GPIO_Init+0x210>)
 8000884:	f001 f834 	bl	80018f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000888:	2201      	movs	r2, #1
 800088a:	2101      	movs	r1, #1
 800088c:	4851      	ldr	r0, [pc, #324]	; (80009d4 <MX_GPIO_Init+0x214>)
 800088e:	f001 f82f 	bl	80018f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000898:	484f      	ldr	r0, [pc, #316]	; (80009d8 <MX_GPIO_Init+0x218>)
 800089a:	f001 f829 	bl	80018f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800089e:	2200      	movs	r2, #0
 80008a0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008a4:	484d      	ldr	r0, [pc, #308]	; (80009dc <MX_GPIO_Init+0x21c>)
 80008a6:	f001 f823 	bl	80018f0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008aa:	2308      	movs	r3, #8
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ae:	2301      	movs	r3, #1
 80008b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	4843      	ldr	r0, [pc, #268]	; (80009d0 <MX_GPIO_Init+0x210>)
 80008c2:	f000 fe79 	bl	80015b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008c6:	2301      	movs	r3, #1
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ca:	2301      	movs	r3, #1
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	483d      	ldr	r0, [pc, #244]	; (80009d4 <MX_GPIO_Init+0x214>)
 80008de:	f000 fe6b 	bl	80015b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008e2:	2308      	movs	r3, #8
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	2302      	movs	r3, #2
 80008e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008f2:	2305      	movs	r3, #5
 80008f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	4835      	ldr	r0, [pc, #212]	; (80009d4 <MX_GPIO_Init+0x214>)
 80008fe:	f000 fe5b 	bl	80015b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000902:	2301      	movs	r3, #1
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000906:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800090a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	4619      	mov	r1, r3
 8000916:	4832      	ldr	r0, [pc, #200]	; (80009e0 <MX_GPIO_Init+0x220>)
 8000918:	f000 fe4e 	bl	80015b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800091c:	2304      	movs	r3, #4
 800091e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000920:	2300      	movs	r3, #0
 8000922:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000928:	f107 031c 	add.w	r3, r7, #28
 800092c:	4619      	mov	r1, r3
 800092e:	482a      	ldr	r0, [pc, #168]	; (80009d8 <MX_GPIO_Init+0x218>)
 8000930:	f000 fe42 	bl	80015b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000934:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093a:	2302      	movs	r3, #2
 800093c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000946:	2305      	movs	r3, #5
 8000948:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	4619      	mov	r1, r3
 8000950:	4821      	ldr	r0, [pc, #132]	; (80009d8 <MX_GPIO_Init+0x218>)
 8000952:	f000 fe31 	bl	80015b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000956:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800095a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095c:	2301      	movs	r3, #1
 800095e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	2300      	movs	r3, #0
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4619      	mov	r1, r3
 800096e:	481a      	ldr	r0, [pc, #104]	; (80009d8 <MX_GPIO_Init+0x218>)
 8000970:	f000 fe22 	bl	80015b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000974:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000978:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097a:	2301      	movs	r3, #1
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	4813      	ldr	r0, [pc, #76]	; (80009dc <MX_GPIO_Init+0x21c>)
 800098e:	f000 fe13 	bl	80015b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000992:	2320      	movs	r3, #32
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000996:	2300      	movs	r3, #0
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4619      	mov	r1, r3
 80009a4:	480d      	ldr	r0, [pc, #52]	; (80009dc <MX_GPIO_Init+0x21c>)
 80009a6:	f000 fe07 	bl	80015b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009aa:	2302      	movs	r3, #2
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009ae:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f107 031c 	add.w	r3, r7, #28
 80009bc:	4619      	mov	r1, r3
 80009be:	4804      	ldr	r0, [pc, #16]	; (80009d0 <MX_GPIO_Init+0x210>)
 80009c0:	f000 fdfa 	bl	80015b8 <HAL_GPIO_Init>

}
 80009c4:	bf00      	nop
 80009c6:	3730      	adds	r7, #48	; 0x30
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40023800 	.word	0x40023800
 80009d0:	40021000 	.word	0x40021000
 80009d4:	40020800 	.word	0x40020800
 80009d8:	40020400 	.word	0x40020400
 80009dc:	40020c00 	.word	0x40020c00
 80009e0:	40020000 	.word	0x40020000

080009e4 <stateMachine>:

/* USER CODE BEGIN 4 */
void stateMachine(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
	switch(SPI_Mode)
 80009e8:	4b17      	ldr	r3, [pc, #92]	; (8000a48 <stateMachine+0x64>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d002      	beq.n	80009f6 <stateMachine+0x12>
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d01b      	beq.n	8000a2c <stateMachine+0x48>
		//	init = 1;
		//}
		break;

	default:
		break;
 80009f4:	e025      	b.n	8000a42 <stateMachine+0x5e>
		if(init==1)
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <stateMachine+0x68>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d106      	bne.n	8000a0c <stateMachine+0x28>
			nrf24_RxMode(Address, 10);
 80009fe:	210a      	movs	r1, #10
 8000a00:	4813      	ldr	r0, [pc, #76]	; (8000a50 <stateMachine+0x6c>)
 8000a02:	f000 f901 	bl	8000c08 <nrf24_RxMode>
			init=0;
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <stateMachine+0x68>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	701a      	strb	r2, [r3, #0]
		if(isDataAvailable(1))
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	f000 f933 	bl	8000c78 <isDataAvailable>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d011      	beq.n	8000a3c <stateMachine+0x58>
			nrf24_Receive(buffer);
 8000a18:	480e      	ldr	r0, [pc, #56]	; (8000a54 <stateMachine+0x70>)
 8000a1a:	f000 f94d 	bl	8000cb8 <nrf24_Receive>
			HAL_USART_Transmit(&husart2, buffer, 32, 100);
 8000a1e:	2364      	movs	r3, #100	; 0x64
 8000a20:	2220      	movs	r2, #32
 8000a22:	490c      	ldr	r1, [pc, #48]	; (8000a54 <stateMachine+0x70>)
 8000a24:	480c      	ldr	r0, [pc, #48]	; (8000a58 <stateMachine+0x74>)
 8000a26:	f004 fd10 	bl	800544a <HAL_USART_Transmit>
		break;
 8000a2a:	e007      	b.n	8000a3c <stateMachine+0x58>
		if(init==1)
 8000a2c:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <stateMachine+0x68>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d105      	bne.n	8000a40 <stateMachine+0x5c>
			init=0;
 8000a34:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <stateMachine+0x68>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	701a      	strb	r2, [r3, #0]
		break;
 8000a3a:	e001      	b.n	8000a40 <stateMachine+0x5c>
		break;
 8000a3c:	bf00      	nop
 8000a3e:	e000      	b.n	8000a42 <stateMachine+0x5e>
		break;
 8000a40:	bf00      	nop
	}
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000264 	.word	0x20000264
 8000a4c:	20000005 	.word	0x20000005
 8000a50:	20000000 	.word	0x20000000
 8000a54:	20000244 	.word	0x20000244
 8000a58:	20000200 	.word	0x20000200

08000a5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a60:	b672      	cpsid	i
}
 8000a62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <Error_Handler+0x8>
	...

08000a68 <selectCS>:
#define SPI_CS_PIN			GPIO_PIN_12

/**
 * @brief met le pin CS a 0
 */
void selectCS(void){
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI_CS_GPIO, SPI_CS_PIN, GPIO_PIN_RESET);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a72:	4802      	ldr	r0, [pc, #8]	; (8000a7c <selectCS+0x14>)
 8000a74:	f000 ff3c 	bl	80018f0 <HAL_GPIO_WritePin>
}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40020400 	.word	0x40020400

08000a80 <unselectCS>:

/**
 * @brief met le pin CS a 1
 */
void unselectCS(void){
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI_CS_GPIO, SPI_CS_PIN, GPIO_PIN_SET);
 8000a84:	2201      	movs	r2, #1
 8000a86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a8a:	4802      	ldr	r0, [pc, #8]	; (8000a94 <unselectCS+0x14>)
 8000a8c:	f000 ff30 	bl	80018f0 <HAL_GPIO_WritePin>
}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40020400 	.word	0x40020400

08000a98 <enableCE>:

/**
 * @brief met le pin CE a 1
 */
void enableCE(void){
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI_CE_GPIO, SPI_CE_PIN, GPIO_PIN_SET);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aa2:	4802      	ldr	r0, [pc, #8]	; (8000aac <enableCE+0x14>)
 8000aa4:	f000 ff24 	bl	80018f0 <HAL_GPIO_WritePin>
}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40020400 	.word	0x40020400

08000ab0 <disableCE>:

/**
 * @brief met le pin CE a 0
 */
void disableCE(void){
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI_CE_GPIO, SPI_CE_PIN, GPIO_PIN_RESET);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aba:	4802      	ldr	r0, [pc, #8]	; (8000ac4 <disableCE+0x14>)
 8000abc:	f000 ff18 	bl	80018f0 <HAL_GPIO_WritePin>
}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40020400 	.word	0x40020400

08000ac8 <nrf24_WriteReg>:
 * @brief Ecrit une valeur dans un registre du module
 *
 * @param Reg : Registre a modifier
 * @param Data : Donnee a ecrire dans le registre
 */
void nrf24_WriteReg(uint8_t Reg, uint8_t Data){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	460a      	mov	r2, r1
 8000ad2:	71fb      	strb	r3, [r7, #7]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0]=Reg|1<<5;
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	f043 0320 	orr.w	r3, r3, #32
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	733b      	strb	r3, [r7, #12]
	buf[1]=Data;
 8000ae2:	79bb      	ldrb	r3, [r7, #6]
 8000ae4:	737b      	strb	r3, [r7, #13]

	selectCS();
 8000ae6:	f7ff ffbf 	bl	8000a68 <selectCS>
	HAL_SPI_Transmit(SPI_PROTO, buf, 2, 100);
 8000aea:	f107 010c 	add.w	r1, r7, #12
 8000aee:	2364      	movs	r3, #100	; 0x64
 8000af0:	2202      	movs	r2, #2
 8000af2:	4804      	ldr	r0, [pc, #16]	; (8000b04 <nrf24_WriteReg+0x3c>)
 8000af4:	f003 ff49 	bl	800498a <HAL_SPI_Transmit>
	unselectCS();
 8000af8:	f7ff ffc2 	bl	8000a80 <unselectCS>
}
 8000afc:	bf00      	nop
 8000afe:	3710      	adds	r7, #16
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	200001a8 	.word	0x200001a8

08000b08 <nrf24_WriteRegMulti>:
 *
 * @param Reg : Registre a modifier
 * @param Data : Donnee a ecrire dans le registre
 * @param size : Taille de la donnee (en octets)
 */
void nrf24_WriteRegMulti(uint8_t Reg, uint8_t *Data, uint8_t size){
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	6039      	str	r1, [r7, #0]
 8000b12:	71fb      	strb	r3, [r7, #7]
 8000b14:	4613      	mov	r3, r2
 8000b16:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0]=Reg|1<<5;
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	f043 0320 	orr.w	r3, r3, #32
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	733b      	strb	r3, [r7, #12]
	//buf[1]=Data;

	selectCS();
 8000b22:	f7ff ffa1 	bl	8000a68 <selectCS>
	HAL_SPI_Transmit(SPI_PROTO, &buf[0], 1, 100);
 8000b26:	f107 010c 	add.w	r1, r7, #12
 8000b2a:	2364      	movs	r3, #100	; 0x64
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	4808      	ldr	r0, [pc, #32]	; (8000b50 <nrf24_WriteRegMulti+0x48>)
 8000b30:	f003 ff2b 	bl	800498a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI_PROTO, Data, size, 100);
 8000b34:	79bb      	ldrb	r3, [r7, #6]
 8000b36:	b29a      	uxth	r2, r3
 8000b38:	2364      	movs	r3, #100	; 0x64
 8000b3a:	6839      	ldr	r1, [r7, #0]
 8000b3c:	4804      	ldr	r0, [pc, #16]	; (8000b50 <nrf24_WriteRegMulti+0x48>)
 8000b3e:	f003 ff24 	bl	800498a <HAL_SPI_Transmit>

	unselectCS();
 8000b42:	f7ff ff9d 	bl	8000a80 <unselectCS>
}
 8000b46:	bf00      	nop
 8000b48:	3710      	adds	r7, #16
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	200001a8 	.word	0x200001a8

08000b54 <nrf24_ReadReg>:
 * @brief lit la valeur d'un registre du module
 *
 * @param Reg : Registre ou l'on veut lire la valeur
 * @return la valeur du registre
 */
uint8_t nrf24_ReadReg(uint8_t Reg){
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	73fb      	strb	r3, [r7, #15]
	selectCS();
 8000b62:	f7ff ff81 	bl	8000a68 <selectCS>
	HAL_SPI_Transmit(SPI_PROTO, &Reg, 1, 100);
 8000b66:	1df9      	adds	r1, r7, #7
 8000b68:	2364      	movs	r3, #100	; 0x64
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	4808      	ldr	r0, [pc, #32]	; (8000b90 <nrf24_ReadReg+0x3c>)
 8000b6e:	f003 ff0c 	bl	800498a <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI_PROTO, &data, 1, 100);
 8000b72:	f107 010f 	add.w	r1, r7, #15
 8000b76:	2364      	movs	r3, #100	; 0x64
 8000b78:	2201      	movs	r2, #1
 8000b7a:	4805      	ldr	r0, [pc, #20]	; (8000b90 <nrf24_ReadReg+0x3c>)
 8000b7c:	f004 f841 	bl	8004c02 <HAL_SPI_Receive>
	unselectCS();
 8000b80:	f7ff ff7e 	bl	8000a80 <unselectCS>
	return data;
 8000b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	200001a8 	.word	0x200001a8

08000b94 <nrfsendcmd>:
/**
 * @brief Envoie une commande au module
 *
 * @param cmd : Commande a envoyer (voir datasheet module pour liste des commandes)
 */
void nrfsendcmd(uint8_t cmd){
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	71fb      	strb	r3, [r7, #7]
	selectCS();
 8000b9e:	f7ff ff63 	bl	8000a68 <selectCS>
	HAL_SPI_Transmit(SPI_PROTO, &cmd, 1, 100);
 8000ba2:	1df9      	adds	r1, r7, #7
 8000ba4:	2364      	movs	r3, #100	; 0x64
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	4804      	ldr	r0, [pc, #16]	; (8000bbc <nrfsendcmd+0x28>)
 8000baa:	f003 feee 	bl	800498a <HAL_SPI_Transmit>
	unselectCS();
 8000bae:	f7ff ff67 	bl	8000a80 <unselectCS>
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	200001a8 	.word	0x200001a8

08000bc0 <nrf24_Init>:

/**
 * @brief Initialise les diff�rents registre du module
 */
void nrf24_Init(void){
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
	disableCE();
 8000bc4:	f7ff ff74 	bl	8000ab0 <disableCE>
	nrf24_WriteReg(CONFIG, 0);
 8000bc8:	2100      	movs	r1, #0
 8000bca:	2000      	movs	r0, #0
 8000bcc:	f7ff ff7c 	bl	8000ac8 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0);
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	f7ff ff78 	bl	8000ac8 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0);
 8000bd8:	2100      	movs	r1, #0
 8000bda:	2002      	movs	r0, #2
 8000bdc:	f7ff ff74 	bl	8000ac8 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 8000be0:	2103      	movs	r1, #3
 8000be2:	2003      	movs	r0, #3
 8000be4:	f7ff ff70 	bl	8000ac8 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0);
 8000be8:	2100      	movs	r1, #0
 8000bea:	2004      	movs	r0, #4
 8000bec:	f7ff ff6c 	bl	8000ac8 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0);
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	2005      	movs	r0, #5
 8000bf4:	f7ff ff68 	bl	8000ac8 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 8000bf8:	210e      	movs	r1, #14
 8000bfa:	2006      	movs	r0, #6
 8000bfc:	f7ff ff64 	bl	8000ac8 <nrf24_WriteReg>
	enableCE();
 8000c00:	f7ff ff4a 	bl	8000a98 <enableCE>
}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <nrf24_RxMode>:
 * @brief initialise le module en mode Rx (reception de donnees)
 *
 * @param Address : l'adresse du module
 * @param channel : chaine du module (mettre 10)
 */
void nrf24_RxMode(uint8_t *Address, uint8_t channel){
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	460b      	mov	r3, r1
 8000c12:	70fb      	strb	r3, [r7, #3]
	disableCE();
 8000c14:	f7ff ff4c 	bl	8000ab0 <disableCE>
	nrf24_WriteReg(RF_CH, channel);
 8000c18:	78fb      	ldrb	r3, [r7, #3]
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	2005      	movs	r0, #5
 8000c1e:	f7ff ff53 	bl	8000ac8 <nrf24_WriteReg>

	uint8_t en_rxaddr=nrf24_ReadReg(EN_RXADDR);
 8000c22:	2002      	movs	r0, #2
 8000c24:	f7ff ff96 	bl	8000b54 <nrf24_ReadReg>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	73fb      	strb	r3, [r7, #15]
	en_rxaddr=en_rxaddr | (1<<1);
 8000c2c:	7bfb      	ldrb	r3, [r7, #15]
 8000c2e:	f043 0302 	orr.w	r3, r3, #2
 8000c32:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg(EN_RXADDR, en_rxaddr);
 8000c34:	7bfb      	ldrb	r3, [r7, #15]
 8000c36:	4619      	mov	r1, r3
 8000c38:	2002      	movs	r0, #2
 8000c3a:	f7ff ff45 	bl	8000ac8 <nrf24_WriteReg>
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);
 8000c3e:	2205      	movs	r2, #5
 8000c40:	6879      	ldr	r1, [r7, #4]
 8000c42:	200b      	movs	r0, #11
 8000c44:	f7ff ff60 	bl	8000b08 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P1, 32); //Set up la taille maximale de la donnee a recuperer
 8000c48:	2120      	movs	r1, #32
 8000c4a:	2012      	movs	r0, #18
 8000c4c:	f7ff ff3c 	bl	8000ac8 <nrf24_WriteReg>

	//power up the device in RX mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 8000c50:	2000      	movs	r0, #0
 8000c52:	f7ff ff7f 	bl	8000b54 <nrf24_ReadReg>
 8000c56:	4603      	mov	r3, r0
 8000c58:	73bb      	strb	r3, [r7, #14]
	config=config | (1<<1) | (1<<0);
 8000c5a:	7bbb      	ldrb	r3, [r7, #14]
 8000c5c:	f043 0303 	orr.w	r3, r3, #3
 8000c60:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg(CONFIG, config);
 8000c62:	7bbb      	ldrb	r3, [r7, #14]
 8000c64:	4619      	mov	r1, r3
 8000c66:	2000      	movs	r0, #0
 8000c68:	f7ff ff2e 	bl	8000ac8 <nrf24_WriteReg>
	enableCE();
 8000c6c:	f7ff ff14 	bl	8000a98 <enableCE>
}
 8000c70:	bf00      	nop
 8000c72:	3710      	adds	r7, #16
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <isDataAvailable>:
 * @brief observe si une donnee est arrivee dans la pipe
 *
 * @param pipenum : pipe a scuter
 * @return true : donnee disponible; false : pas de donnee
 */
uint8_t isDataAvailable(uint8_t pipenum){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	71fb      	strb	r3, [r7, #7]
	uint8_t status = nrf24_ReadReg(STATUS);
 8000c82:	2007      	movs	r0, #7
 8000c84:	f7ff ff66 	bl	8000b54 <nrf24_ReadReg>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	73fb      	strb	r3, [r7, #15]

	//uint8_t check = nrf24_ReadReg(RF_SETUP);

	if((status&(1<<6)) && (status&(pipenum<<1))){
 8000c8c:	7bfb      	ldrb	r3, [r7, #15]
 8000c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d00b      	beq.n	8000cae <isDataAvailable+0x36>
 8000c96:	7bfa      	ldrb	r2, [r7, #15]
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d005      	beq.n	8000cae <isDataAvailable+0x36>
		nrf24_WriteReg(STATUS, (1<<6));
 8000ca2:	2140      	movs	r1, #64	; 0x40
 8000ca4:	2007      	movs	r0, #7
 8000ca6:	f7ff ff0f 	bl	8000ac8 <nrf24_WriteReg>
		return 1;
 8000caa:	2301      	movs	r3, #1
 8000cac:	e000      	b.n	8000cb0 <isDataAvailable+0x38>
	}
	else
		return 0;
 8000cae:	2300      	movs	r3, #0
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3710      	adds	r7, #16
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <nrf24_Receive>:
/**
 * @brief recupere la donnee dans la pipe 1
 *
 * @param data pointeur vers la ou l'on veut stocker la donnee (32 bits)
 */
void nrf24_Receive(uint8_t *data){
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	73fb      	strb	r3, [r7, #15]
	selectCS();
 8000cc4:	f7ff fed0 	bl	8000a68 <selectCS>

	cmdtosend=R_RX_PAYLOAD;
 8000cc8:	2361      	movs	r3, #97	; 0x61
 8000cca:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(SPI_PROTO, &cmdtosend, 1, 100);
 8000ccc:	f107 010f 	add.w	r1, r7, #15
 8000cd0:	2364      	movs	r3, #100	; 0x64
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	480b      	ldr	r0, [pc, #44]	; (8000d04 <nrf24_Receive+0x4c>)
 8000cd6:	f003 fe58 	bl	800498a <HAL_SPI_Transmit>

	HAL_SPI_Receive(SPI_PROTO, data, 32, 100);
 8000cda:	2364      	movs	r3, #100	; 0x64
 8000cdc:	2220      	movs	r2, #32
 8000cde:	6879      	ldr	r1, [r7, #4]
 8000ce0:	4808      	ldr	r0, [pc, #32]	; (8000d04 <nrf24_Receive+0x4c>)
 8000ce2:	f003 ff8e 	bl	8004c02 <HAL_SPI_Receive>

	unselectCS();
 8000ce6:	f7ff fecb 	bl	8000a80 <unselectCS>

	HAL_Delay(1);
 8000cea:	2001      	movs	r0, #1
 8000cec:	f000 fb0c 	bl	8001308 <HAL_Delay>

	cmdtosend=FLUSH_RX;
 8000cf0:	23e2      	movs	r3, #226	; 0xe2
 8000cf2:	73fb      	strb	r3, [r7, #15]
	nrfsendcmd(cmdtosend);
 8000cf4:	7bfb      	ldrb	r3, [r7, #15]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff ff4c 	bl	8000b94 <nrfsendcmd>
}
 8000cfc:	bf00      	nop
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	200001a8 	.word	0x200001a8

08000d08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d16:	4a0f      	ldr	r2, [pc, #60]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1e:	4b0d      	ldr	r3, [pc, #52]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	603b      	str	r3, [r7, #0]
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	4a08      	ldr	r2, [pc, #32]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d38:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d46:	2007      	movs	r0, #7
 8000d48:	f000 fbd2 	bl	80014f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40023800 	.word	0x40023800

08000d58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08a      	sub	sp, #40	; 0x28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a19      	ldr	r2, [pc, #100]	; (8000ddc <HAL_I2C_MspInit+0x84>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d12c      	bne.n	8000dd4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <HAL_I2C_MspInit+0x88>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a17      	ldr	r2, [pc, #92]	; (8000de0 <HAL_I2C_MspInit+0x88>)
 8000d84:	f043 0302 	orr.w	r3, r3, #2
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <HAL_I2C_MspInit+0x88>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d96:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d9c:	2312      	movs	r3, #18
 8000d9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da0:	2301      	movs	r3, #1
 8000da2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da4:	2300      	movs	r3, #0
 8000da6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000da8:	2304      	movs	r3, #4
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	4619      	mov	r1, r3
 8000db2:	480c      	ldr	r0, [pc, #48]	; (8000de4 <HAL_I2C_MspInit+0x8c>)
 8000db4:	f000 fc00 	bl	80015b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000db8:	2300      	movs	r3, #0
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <HAL_I2C_MspInit+0x88>)
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc0:	4a07      	ldr	r2, [pc, #28]	; (8000de0 <HAL_I2C_MspInit+0x88>)
 8000dc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc8:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <HAL_I2C_MspInit+0x88>)
 8000dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000dd4:	bf00      	nop
 8000dd6:	3728      	adds	r7, #40	; 0x28
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40005400 	.word	0x40005400
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40020400 	.word	0x40020400

08000de8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08e      	sub	sp, #56	; 0x38
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a31      	ldr	r2, [pc, #196]	; (8000ed8 <HAL_I2S_MspInit+0xf0>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d15a      	bne.n	8000ece <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000e1c:	23c0      	movs	r3, #192	; 0xc0
 8000e1e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000e20:	2302      	movs	r3, #2
 8000e22:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f003 fbe5 	bl	80045f8 <HAL_RCCEx_PeriphCLKConfig>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000e34:	f7ff fe12 	bl	8000a5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e38:	2300      	movs	r3, #0
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	4b27      	ldr	r3, [pc, #156]	; (8000edc <HAL_I2S_MspInit+0xf4>)
 8000e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e40:	4a26      	ldr	r2, [pc, #152]	; (8000edc <HAL_I2S_MspInit+0xf4>)
 8000e42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e46:	6413      	str	r3, [r2, #64]	; 0x40
 8000e48:	4b24      	ldr	r3, [pc, #144]	; (8000edc <HAL_I2S_MspInit+0xf4>)
 8000e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e50:	613b      	str	r3, [r7, #16]
 8000e52:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e54:	2300      	movs	r3, #0
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	4b20      	ldr	r3, [pc, #128]	; (8000edc <HAL_I2S_MspInit+0xf4>)
 8000e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5c:	4a1f      	ldr	r2, [pc, #124]	; (8000edc <HAL_I2S_MspInit+0xf4>)
 8000e5e:	f043 0301 	orr.w	r3, r3, #1
 8000e62:	6313      	str	r3, [r2, #48]	; 0x30
 8000e64:	4b1d      	ldr	r3, [pc, #116]	; (8000edc <HAL_I2S_MspInit+0xf4>)
 8000e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e70:	2300      	movs	r3, #0
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	4b19      	ldr	r3, [pc, #100]	; (8000edc <HAL_I2S_MspInit+0xf4>)
 8000e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e78:	4a18      	ldr	r2, [pc, #96]	; (8000edc <HAL_I2S_MspInit+0xf4>)
 8000e7a:	f043 0304 	orr.w	r3, r3, #4
 8000e7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e80:	4b16      	ldr	r3, [pc, #88]	; (8000edc <HAL_I2S_MspInit+0xf4>)
 8000e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e84:	f003 0304 	and.w	r3, r3, #4
 8000e88:	60bb      	str	r3, [r7, #8]
 8000e8a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000e8c:	2310      	movs	r3, #16
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e9c:	2306      	movs	r3, #6
 8000e9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ea0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	480e      	ldr	r0, [pc, #56]	; (8000ee0 <HAL_I2S_MspInit+0xf8>)
 8000ea8:	f000 fb86 	bl	80015b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000eac:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ebe:	2306      	movs	r3, #6
 8000ec0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4806      	ldr	r0, [pc, #24]	; (8000ee4 <HAL_I2S_MspInit+0xfc>)
 8000eca:	f000 fb75 	bl	80015b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ece:	bf00      	nop
 8000ed0:	3738      	adds	r7, #56	; 0x38
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40003c00 	.word	0x40003c00
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40020000 	.word	0x40020000
 8000ee4:	40020800 	.word	0x40020800

08000ee8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08c      	sub	sp, #48	; 0x30
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef0:	f107 031c 	add.w	r3, r7, #28
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a32      	ldr	r2, [pc, #200]	; (8000fd0 <HAL_SPI_MspInit+0xe8>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d12c      	bne.n	8000f64 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61bb      	str	r3, [r7, #24]
 8000f0e:	4b31      	ldr	r3, [pc, #196]	; (8000fd4 <HAL_SPI_MspInit+0xec>)
 8000f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f12:	4a30      	ldr	r2, [pc, #192]	; (8000fd4 <HAL_SPI_MspInit+0xec>)
 8000f14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f18:	6453      	str	r3, [r2, #68]	; 0x44
 8000f1a:	4b2e      	ldr	r3, [pc, #184]	; (8000fd4 <HAL_SPI_MspInit+0xec>)
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f22:	61bb      	str	r3, [r7, #24]
 8000f24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
 8000f2a:	4b2a      	ldr	r3, [pc, #168]	; (8000fd4 <HAL_SPI_MspInit+0xec>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a29      	ldr	r2, [pc, #164]	; (8000fd4 <HAL_SPI_MspInit+0xec>)
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b27      	ldr	r3, [pc, #156]	; (8000fd4 <HAL_SPI_MspInit+0xec>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	617b      	str	r3, [r7, #20]
 8000f40:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000f42:	23e0      	movs	r3, #224	; 0xe0
 8000f44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f52:	2305      	movs	r3, #5
 8000f54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f56:	f107 031c 	add.w	r3, r7, #28
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	481e      	ldr	r0, [pc, #120]	; (8000fd8 <HAL_SPI_MspInit+0xf0>)
 8000f5e:	f000 fb2b 	bl	80015b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000f62:	e031      	b.n	8000fc8 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a1c      	ldr	r2, [pc, #112]	; (8000fdc <HAL_SPI_MspInit+0xf4>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d12c      	bne.n	8000fc8 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	613b      	str	r3, [r7, #16]
 8000f72:	4b18      	ldr	r3, [pc, #96]	; (8000fd4 <HAL_SPI_MspInit+0xec>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	4a17      	ldr	r2, [pc, #92]	; (8000fd4 <HAL_SPI_MspInit+0xec>)
 8000f78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7e:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <HAL_SPI_MspInit+0xec>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <HAL_SPI_MspInit+0xec>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a10      	ldr	r2, [pc, #64]	; (8000fd4 <HAL_SPI_MspInit+0xec>)
 8000f94:	f043 0302 	orr.w	r3, r3, #2
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <HAL_SPI_MspInit+0xec>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000fa6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000faa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fac:	2302      	movs	r3, #2
 8000fae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fb8:	2305      	movs	r3, #5
 8000fba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fbc:	f107 031c 	add.w	r3, r7, #28
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4807      	ldr	r0, [pc, #28]	; (8000fe0 <HAL_SPI_MspInit+0xf8>)
 8000fc4:	f000 faf8 	bl	80015b8 <HAL_GPIO_Init>
}
 8000fc8:	bf00      	nop
 8000fca:	3730      	adds	r7, #48	; 0x30
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40013000 	.word	0x40013000
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40020000 	.word	0x40020000
 8000fdc:	40003800 	.word	0x40003800
 8000fe0:	40020400 	.word	0x40020400

08000fe4 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08a      	sub	sp, #40	; 0x28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART2)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a2c      	ldr	r2, [pc, #176]	; (80010b4 <HAL_USART_MspInit+0xd0>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d151      	bne.n	80010aa <HAL_USART_MspInit+0xc6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	613b      	str	r3, [r7, #16]
 800100a:	4b2b      	ldr	r3, [pc, #172]	; (80010b8 <HAL_USART_MspInit+0xd4>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	4a2a      	ldr	r2, [pc, #168]	; (80010b8 <HAL_USART_MspInit+0xd4>)
 8001010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001014:	6413      	str	r3, [r2, #64]	; 0x40
 8001016:	4b28      	ldr	r3, [pc, #160]	; (80010b8 <HAL_USART_MspInit+0xd4>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101e:	613b      	str	r3, [r7, #16]
 8001020:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	4b24      	ldr	r3, [pc, #144]	; (80010b8 <HAL_USART_MspInit+0xd4>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a23      	ldr	r2, [pc, #140]	; (80010b8 <HAL_USART_MspInit+0xd4>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b21      	ldr	r3, [pc, #132]	; (80010b8 <HAL_USART_MspInit+0xd4>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	60bb      	str	r3, [r7, #8]
 8001042:	4b1d      	ldr	r3, [pc, #116]	; (80010b8 <HAL_USART_MspInit+0xd4>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a1c      	ldr	r2, [pc, #112]	; (80010b8 <HAL_USART_MspInit+0xd4>)
 8001048:	f043 0308 	orr.w	r3, r3, #8
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b1a      	ldr	r3, [pc, #104]	; (80010b8 <HAL_USART_MspInit+0xd4>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0308 	and.w	r3, r3, #8
 8001056:	60bb      	str	r3, [r7, #8]
 8001058:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PD7     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800105a:	230c      	movs	r3, #12
 800105c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001062:	2301      	movs	r3, #1
 8001064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001066:	2303      	movs	r3, #3
 8001068:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800106a:	2307      	movs	r3, #7
 800106c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106e:	f107 0314 	add.w	r3, r7, #20
 8001072:	4619      	mov	r1, r3
 8001074:	4811      	ldr	r0, [pc, #68]	; (80010bc <HAL_USART_MspInit+0xd8>)
 8001076:	f000 fa9f 	bl	80015b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800107a:	2380      	movs	r3, #128	; 0x80
 800107c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107e:	2302      	movs	r3, #2
 8001080:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001086:	2303      	movs	r3, #3
 8001088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800108a:	2307      	movs	r3, #7
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	4619      	mov	r1, r3
 8001094:	480a      	ldr	r0, [pc, #40]	; (80010c0 <HAL_USART_MspInit+0xdc>)
 8001096:	f000 fa8f 	bl	80015b8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	2100      	movs	r1, #0
 800109e:	2026      	movs	r0, #38	; 0x26
 80010a0:	f000 fa31 	bl	8001506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010a4:	2026      	movs	r0, #38	; 0x26
 80010a6:	f000 fa4a 	bl	800153e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010aa:	bf00      	nop
 80010ac:	3728      	adds	r7, #40	; 0x28
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40004400 	.word	0x40004400
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40020000 	.word	0x40020000
 80010c0:	40020c00 	.word	0x40020c00

080010c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <NMI_Handler+0x4>

080010ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ce:	e7fe      	b.n	80010ce <HardFault_Handler+0x4>

080010d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <MemManage_Handler+0x4>

080010d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010da:	e7fe      	b.n	80010da <BusFault_Handler+0x4>

080010dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <UsageFault_Handler+0x4>

080010e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001110:	f000 f8da 	bl	80012c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}

08001118 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_USART_IRQHandler(&husart2);
 800111c:	4802      	ldr	r0, [pc, #8]	; (8001128 <USART2_IRQHandler+0x10>)
 800111e:	f004 fa25 	bl	800556c <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000200 	.word	0x20000200

0800112c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001130:	4802      	ldr	r0, [pc, #8]	; (800113c <OTG_FS_IRQHandler+0x10>)
 8001132:	f000 fe61 	bl	8001df8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	2000064c 	.word	0x2000064c

08001140 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001148:	4a14      	ldr	r2, [pc, #80]	; (800119c <_sbrk+0x5c>)
 800114a:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <_sbrk+0x60>)
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001154:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <_sbrk+0x64>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d102      	bne.n	8001162 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800115c:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <_sbrk+0x64>)
 800115e:	4a12      	ldr	r2, [pc, #72]	; (80011a8 <_sbrk+0x68>)
 8001160:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <_sbrk+0x64>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4413      	add	r3, r2
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	429a      	cmp	r2, r3
 800116e:	d207      	bcs.n	8001180 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001170:	f007 faf0 	bl	8008754 <__errno>
 8001174:	4603      	mov	r3, r0
 8001176:	220c      	movs	r2, #12
 8001178:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800117a:	f04f 33ff 	mov.w	r3, #4294967295
 800117e:	e009      	b.n	8001194 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001180:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <_sbrk+0x64>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001186:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <_sbrk+0x64>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4413      	add	r3, r2
 800118e:	4a05      	ldr	r2, [pc, #20]	; (80011a4 <_sbrk+0x64>)
 8001190:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001192:	68fb      	ldr	r3, [r7, #12]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3718      	adds	r7, #24
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20020000 	.word	0x20020000
 80011a0:	00000400 	.word	0x00000400
 80011a4:	20000268 	.word	0x20000268
 80011a8:	20000960 	.word	0x20000960

080011ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <SystemInit+0x20>)
 80011b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011b6:	4a05      	ldr	r2, [pc, #20]	; (80011cc <SystemInit+0x20>)
 80011b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001208 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011d4:	480d      	ldr	r0, [pc, #52]	; (800120c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011d6:	490e      	ldr	r1, [pc, #56]	; (8001210 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011d8:	4a0e      	ldr	r2, [pc, #56]	; (8001214 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011dc:	e002      	b.n	80011e4 <LoopCopyDataInit>

080011de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011e2:	3304      	adds	r3, #4

080011e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e8:	d3f9      	bcc.n	80011de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ea:	4a0b      	ldr	r2, [pc, #44]	; (8001218 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011ec:	4c0b      	ldr	r4, [pc, #44]	; (800121c <LoopFillZerobss+0x26>)
  movs r3, #0
 80011ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f0:	e001      	b.n	80011f6 <LoopFillZerobss>

080011f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f4:	3204      	adds	r2, #4

080011f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f8:	d3fb      	bcc.n	80011f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011fa:	f7ff ffd7 	bl	80011ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011fe:	f007 faaf 	bl	8008760 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001202:	f7ff f963 	bl	80004cc <main>
  bx  lr    
 8001206:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001208:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800120c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001210:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001214:	08008a18 	.word	0x08008a18
  ldr r2, =_sbss
 8001218:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 800121c:	20000960 	.word	0x20000960

08001220 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001220:	e7fe      	b.n	8001220 <ADC_IRQHandler>
	...

08001224 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001228:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <HAL_Init+0x40>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a0d      	ldr	r2, [pc, #52]	; (8001264 <HAL_Init+0x40>)
 800122e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001232:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001234:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <HAL_Init+0x40>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a0a      	ldr	r2, [pc, #40]	; (8001264 <HAL_Init+0x40>)
 800123a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800123e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001240:	4b08      	ldr	r3, [pc, #32]	; (8001264 <HAL_Init+0x40>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a07      	ldr	r2, [pc, #28]	; (8001264 <HAL_Init+0x40>)
 8001246:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800124a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800124c:	2003      	movs	r0, #3
 800124e:	f000 f94f 	bl	80014f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001252:	2000      	movs	r0, #0
 8001254:	f000 f808 	bl	8001268 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001258:	f7ff fd56 	bl	8000d08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40023c00 	.word	0x40023c00

08001268 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001270:	4b12      	ldr	r3, [pc, #72]	; (80012bc <HAL_InitTick+0x54>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <HAL_InitTick+0x58>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	4619      	mov	r1, r3
 800127a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800127e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001282:	fbb2 f3f3 	udiv	r3, r2, r3
 8001286:	4618      	mov	r0, r3
 8001288:	f000 f967 	bl	800155a <HAL_SYSTICK_Config>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e00e      	b.n	80012b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2b0f      	cmp	r3, #15
 800129a:	d80a      	bhi.n	80012b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800129c:	2200      	movs	r2, #0
 800129e:	6879      	ldr	r1, [r7, #4]
 80012a0:	f04f 30ff 	mov.w	r0, #4294967295
 80012a4:	f000 f92f 	bl	8001506 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a8:	4a06      	ldr	r2, [pc, #24]	; (80012c4 <HAL_InitTick+0x5c>)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ae:	2300      	movs	r3, #0
 80012b0:	e000      	b.n	80012b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000008 	.word	0x20000008
 80012c0:	20000010 	.word	0x20000010
 80012c4:	2000000c 	.word	0x2000000c

080012c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <HAL_IncTick+0x20>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	461a      	mov	r2, r3
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_IncTick+0x24>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4413      	add	r3, r2
 80012d8:	4a04      	ldr	r2, [pc, #16]	; (80012ec <HAL_IncTick+0x24>)
 80012da:	6013      	str	r3, [r2, #0]
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	20000010 	.word	0x20000010
 80012ec:	2000026c 	.word	0x2000026c

080012f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  return uwTick;
 80012f4:	4b03      	ldr	r3, [pc, #12]	; (8001304 <HAL_GetTick+0x14>)
 80012f6:	681b      	ldr	r3, [r3, #0]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	2000026c 	.word	0x2000026c

08001308 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001310:	f7ff ffee 	bl	80012f0 <HAL_GetTick>
 8001314:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001320:	d005      	beq.n	800132e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001322:	4b0a      	ldr	r3, [pc, #40]	; (800134c <HAL_Delay+0x44>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	461a      	mov	r2, r3
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	4413      	add	r3, r2
 800132c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800132e:	bf00      	nop
 8001330:	f7ff ffde 	bl	80012f0 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	429a      	cmp	r2, r3
 800133e:	d8f7      	bhi.n	8001330 <HAL_Delay+0x28>
  {
  }
}
 8001340:	bf00      	nop
 8001342:	bf00      	nop
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000010 	.word	0x20000010

08001350 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001360:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <__NVIC_SetPriorityGrouping+0x44>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001366:	68ba      	ldr	r2, [r7, #8]
 8001368:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800136c:	4013      	ands	r3, r2
 800136e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001378:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800137c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001380:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001382:	4a04      	ldr	r2, [pc, #16]	; (8001394 <__NVIC_SetPriorityGrouping+0x44>)
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	60d3      	str	r3, [r2, #12]
}
 8001388:	bf00      	nop
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800139c:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <__NVIC_GetPriorityGrouping+0x18>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	0a1b      	lsrs	r3, r3, #8
 80013a2:	f003 0307 	and.w	r3, r3, #7
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	db0b      	blt.n	80013de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	f003 021f 	and.w	r2, r3, #31
 80013cc:	4907      	ldr	r1, [pc, #28]	; (80013ec <__NVIC_EnableIRQ+0x38>)
 80013ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d2:	095b      	lsrs	r3, r3, #5
 80013d4:	2001      	movs	r0, #1
 80013d6:	fa00 f202 	lsl.w	r2, r0, r2
 80013da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	e000e100 	.word	0xe000e100

080013f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	6039      	str	r1, [r7, #0]
 80013fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001400:	2b00      	cmp	r3, #0
 8001402:	db0a      	blt.n	800141a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	b2da      	uxtb	r2, r3
 8001408:	490c      	ldr	r1, [pc, #48]	; (800143c <__NVIC_SetPriority+0x4c>)
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	0112      	lsls	r2, r2, #4
 8001410:	b2d2      	uxtb	r2, r2
 8001412:	440b      	add	r3, r1
 8001414:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001418:	e00a      	b.n	8001430 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	b2da      	uxtb	r2, r3
 800141e:	4908      	ldr	r1, [pc, #32]	; (8001440 <__NVIC_SetPriority+0x50>)
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	f003 030f 	and.w	r3, r3, #15
 8001426:	3b04      	subs	r3, #4
 8001428:	0112      	lsls	r2, r2, #4
 800142a:	b2d2      	uxtb	r2, r2
 800142c:	440b      	add	r3, r1
 800142e:	761a      	strb	r2, [r3, #24]
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	e000e100 	.word	0xe000e100
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001444:	b480      	push	{r7}
 8001446:	b089      	sub	sp, #36	; 0x24
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	f1c3 0307 	rsb	r3, r3, #7
 800145e:	2b04      	cmp	r3, #4
 8001460:	bf28      	it	cs
 8001462:	2304      	movcs	r3, #4
 8001464:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	3304      	adds	r3, #4
 800146a:	2b06      	cmp	r3, #6
 800146c:	d902      	bls.n	8001474 <NVIC_EncodePriority+0x30>
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	3b03      	subs	r3, #3
 8001472:	e000      	b.n	8001476 <NVIC_EncodePriority+0x32>
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001478:	f04f 32ff 	mov.w	r2, #4294967295
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43da      	mvns	r2, r3
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	401a      	ands	r2, r3
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800148c:	f04f 31ff 	mov.w	r1, #4294967295
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	fa01 f303 	lsl.w	r3, r1, r3
 8001496:	43d9      	mvns	r1, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800149c:	4313      	orrs	r3, r2
         );
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3724      	adds	r7, #36	; 0x24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
	...

080014ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014bc:	d301      	bcc.n	80014c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014be:	2301      	movs	r3, #1
 80014c0:	e00f      	b.n	80014e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014c2:	4a0a      	ldr	r2, [pc, #40]	; (80014ec <SysTick_Config+0x40>)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3b01      	subs	r3, #1
 80014c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ca:	210f      	movs	r1, #15
 80014cc:	f04f 30ff 	mov.w	r0, #4294967295
 80014d0:	f7ff ff8e 	bl	80013f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d4:	4b05      	ldr	r3, [pc, #20]	; (80014ec <SysTick_Config+0x40>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014da:	4b04      	ldr	r3, [pc, #16]	; (80014ec <SysTick_Config+0x40>)
 80014dc:	2207      	movs	r2, #7
 80014de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	e000e010 	.word	0xe000e010

080014f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f7ff ff29 	bl	8001350 <__NVIC_SetPriorityGrouping>
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001506:	b580      	push	{r7, lr}
 8001508:	b086      	sub	sp, #24
 800150a:	af00      	add	r7, sp, #0
 800150c:	4603      	mov	r3, r0
 800150e:	60b9      	str	r1, [r7, #8]
 8001510:	607a      	str	r2, [r7, #4]
 8001512:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001518:	f7ff ff3e 	bl	8001398 <__NVIC_GetPriorityGrouping>
 800151c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	68b9      	ldr	r1, [r7, #8]
 8001522:	6978      	ldr	r0, [r7, #20]
 8001524:	f7ff ff8e 	bl	8001444 <NVIC_EncodePriority>
 8001528:	4602      	mov	r2, r0
 800152a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800152e:	4611      	mov	r1, r2
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff ff5d 	bl	80013f0 <__NVIC_SetPriority>
}
 8001536:	bf00      	nop
 8001538:	3718      	adds	r7, #24
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b082      	sub	sp, #8
 8001542:	af00      	add	r7, sp, #0
 8001544:	4603      	mov	r3, r0
 8001546:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff ff31 	bl	80013b4 <__NVIC_EnableIRQ>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff ffa2 	bl	80014ac <SysTick_Config>
 8001568:	4603      	mov	r3, r0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001572:	b480      	push	{r7}
 8001574:	b083      	sub	sp, #12
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d004      	beq.n	8001590 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2280      	movs	r2, #128	; 0x80
 800158a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e00c      	b.n	80015aa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2205      	movs	r2, #5
 8001594:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f022 0201 	bic.w	r2, r2, #1
 80015a6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
	...

080015b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b089      	sub	sp, #36	; 0x24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
 80015d2:	e16b      	b.n	80018ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015d4:	2201      	movs	r2, #1
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	4013      	ands	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	f040 815a 	bne.w	80018a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f003 0303 	and.w	r3, r3, #3
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d005      	beq.n	800160a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001606:	2b02      	cmp	r3, #2
 8001608:	d130      	bne.n	800166c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	2203      	movs	r2, #3
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43db      	mvns	r3, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4013      	ands	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	68da      	ldr	r2, [r3, #12]
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4313      	orrs	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001640:	2201      	movs	r2, #1
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	43db      	mvns	r3, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4013      	ands	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	091b      	lsrs	r3, r3, #4
 8001656:	f003 0201 	and.w	r2, r3, #1
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4313      	orrs	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f003 0303 	and.w	r3, r3, #3
 8001674:	2b03      	cmp	r3, #3
 8001676:	d017      	beq.n	80016a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	2203      	movs	r2, #3
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	43db      	mvns	r3, r3
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4013      	ands	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	689a      	ldr	r2, [r3, #8]
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4313      	orrs	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 0303 	and.w	r3, r3, #3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d123      	bne.n	80016fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	08da      	lsrs	r2, r3, #3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3208      	adds	r2, #8
 80016bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	f003 0307 	and.w	r3, r3, #7
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	220f      	movs	r2, #15
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	43db      	mvns	r3, r3
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4013      	ands	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	691a      	ldr	r2, [r3, #16]
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	08da      	lsrs	r2, r3, #3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	3208      	adds	r2, #8
 80016f6:	69b9      	ldr	r1, [r7, #24]
 80016f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	2203      	movs	r2, #3
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4013      	ands	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 0203 	and.w	r2, r3, #3
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4313      	orrs	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001738:	2b00      	cmp	r3, #0
 800173a:	f000 80b4 	beq.w	80018a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	4b60      	ldr	r3, [pc, #384]	; (80018c4 <HAL_GPIO_Init+0x30c>)
 8001744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001746:	4a5f      	ldr	r2, [pc, #380]	; (80018c4 <HAL_GPIO_Init+0x30c>)
 8001748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800174c:	6453      	str	r3, [r2, #68]	; 0x44
 800174e:	4b5d      	ldr	r3, [pc, #372]	; (80018c4 <HAL_GPIO_Init+0x30c>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800175a:	4a5b      	ldr	r2, [pc, #364]	; (80018c8 <HAL_GPIO_Init+0x310>)
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	089b      	lsrs	r3, r3, #2
 8001760:	3302      	adds	r3, #2
 8001762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001766:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	f003 0303 	and.w	r3, r3, #3
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	220f      	movs	r2, #15
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43db      	mvns	r3, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4013      	ands	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a52      	ldr	r2, [pc, #328]	; (80018cc <HAL_GPIO_Init+0x314>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d02b      	beq.n	80017de <HAL_GPIO_Init+0x226>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a51      	ldr	r2, [pc, #324]	; (80018d0 <HAL_GPIO_Init+0x318>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d025      	beq.n	80017da <HAL_GPIO_Init+0x222>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a50      	ldr	r2, [pc, #320]	; (80018d4 <HAL_GPIO_Init+0x31c>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d01f      	beq.n	80017d6 <HAL_GPIO_Init+0x21e>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a4f      	ldr	r2, [pc, #316]	; (80018d8 <HAL_GPIO_Init+0x320>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d019      	beq.n	80017d2 <HAL_GPIO_Init+0x21a>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a4e      	ldr	r2, [pc, #312]	; (80018dc <HAL_GPIO_Init+0x324>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d013      	beq.n	80017ce <HAL_GPIO_Init+0x216>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a4d      	ldr	r2, [pc, #308]	; (80018e0 <HAL_GPIO_Init+0x328>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d00d      	beq.n	80017ca <HAL_GPIO_Init+0x212>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a4c      	ldr	r2, [pc, #304]	; (80018e4 <HAL_GPIO_Init+0x32c>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d007      	beq.n	80017c6 <HAL_GPIO_Init+0x20e>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a4b      	ldr	r2, [pc, #300]	; (80018e8 <HAL_GPIO_Init+0x330>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d101      	bne.n	80017c2 <HAL_GPIO_Init+0x20a>
 80017be:	2307      	movs	r3, #7
 80017c0:	e00e      	b.n	80017e0 <HAL_GPIO_Init+0x228>
 80017c2:	2308      	movs	r3, #8
 80017c4:	e00c      	b.n	80017e0 <HAL_GPIO_Init+0x228>
 80017c6:	2306      	movs	r3, #6
 80017c8:	e00a      	b.n	80017e0 <HAL_GPIO_Init+0x228>
 80017ca:	2305      	movs	r3, #5
 80017cc:	e008      	b.n	80017e0 <HAL_GPIO_Init+0x228>
 80017ce:	2304      	movs	r3, #4
 80017d0:	e006      	b.n	80017e0 <HAL_GPIO_Init+0x228>
 80017d2:	2303      	movs	r3, #3
 80017d4:	e004      	b.n	80017e0 <HAL_GPIO_Init+0x228>
 80017d6:	2302      	movs	r3, #2
 80017d8:	e002      	b.n	80017e0 <HAL_GPIO_Init+0x228>
 80017da:	2301      	movs	r3, #1
 80017dc:	e000      	b.n	80017e0 <HAL_GPIO_Init+0x228>
 80017de:	2300      	movs	r3, #0
 80017e0:	69fa      	ldr	r2, [r7, #28]
 80017e2:	f002 0203 	and.w	r2, r2, #3
 80017e6:	0092      	lsls	r2, r2, #2
 80017e8:	4093      	lsls	r3, r2
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017f0:	4935      	ldr	r1, [pc, #212]	; (80018c8 <HAL_GPIO_Init+0x310>)
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	089b      	lsrs	r3, r3, #2
 80017f6:	3302      	adds	r3, #2
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017fe:	4b3b      	ldr	r3, [pc, #236]	; (80018ec <HAL_GPIO_Init+0x334>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	43db      	mvns	r3, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4013      	ands	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d003      	beq.n	8001822 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	4313      	orrs	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001822:	4a32      	ldr	r2, [pc, #200]	; (80018ec <HAL_GPIO_Init+0x334>)
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001828:	4b30      	ldr	r3, [pc, #192]	; (80018ec <HAL_GPIO_Init+0x334>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	43db      	mvns	r3, r3
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4013      	ands	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d003      	beq.n	800184c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	4313      	orrs	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800184c:	4a27      	ldr	r2, [pc, #156]	; (80018ec <HAL_GPIO_Init+0x334>)
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001852:	4b26      	ldr	r3, [pc, #152]	; (80018ec <HAL_GPIO_Init+0x334>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	43db      	mvns	r3, r3
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	4013      	ands	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	4313      	orrs	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001876:	4a1d      	ldr	r2, [pc, #116]	; (80018ec <HAL_GPIO_Init+0x334>)
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800187c:	4b1b      	ldr	r3, [pc, #108]	; (80018ec <HAL_GPIO_Init+0x334>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	43db      	mvns	r3, r3
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4013      	ands	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d003      	beq.n	80018a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	4313      	orrs	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018a0:	4a12      	ldr	r2, [pc, #72]	; (80018ec <HAL_GPIO_Init+0x334>)
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3301      	adds	r3, #1
 80018aa:	61fb      	str	r3, [r7, #28]
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	2b0f      	cmp	r3, #15
 80018b0:	f67f ae90 	bls.w	80015d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018b4:	bf00      	nop
 80018b6:	bf00      	nop
 80018b8:	3724      	adds	r7, #36	; 0x24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	40023800 	.word	0x40023800
 80018c8:	40013800 	.word	0x40013800
 80018cc:	40020000 	.word	0x40020000
 80018d0:	40020400 	.word	0x40020400
 80018d4:	40020800 	.word	0x40020800
 80018d8:	40020c00 	.word	0x40020c00
 80018dc:	40021000 	.word	0x40021000
 80018e0:	40021400 	.word	0x40021400
 80018e4:	40021800 	.word	0x40021800
 80018e8:	40021c00 	.word	0x40021c00
 80018ec:	40013c00 	.word	0x40013c00

080018f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	807b      	strh	r3, [r7, #2]
 80018fc:	4613      	mov	r3, r2
 80018fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001900:	787b      	ldrb	r3, [r7, #1]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d003      	beq.n	800190e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001906:	887a      	ldrh	r2, [r7, #2]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800190c:	e003      	b.n	8001916 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800190e:	887b      	ldrh	r3, [r7, #2]
 8001910:	041a      	lsls	r2, r3, #16
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	619a      	str	r2, [r3, #24]
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001922:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001924:	b08f      	sub	sp, #60	; 0x3c
 8001926:	af0a      	add	r7, sp, #40	; 0x28
 8001928:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d101      	bne.n	8001934 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e054      	b.n	80019de <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	d106      	bne.n	8001954 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f006 fca4 	bl	800829c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2203      	movs	r2, #3
 8001958:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001964:	2b00      	cmp	r3, #0
 8001966:	d102      	bne.n	800196e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f004 fc96 	bl	80062a4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	603b      	str	r3, [r7, #0]
 800197e:	687e      	ldr	r6, [r7, #4]
 8001980:	466d      	mov	r5, sp
 8001982:	f106 0410 	add.w	r4, r6, #16
 8001986:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001988:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800198a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800198c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800198e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001992:	e885 0003 	stmia.w	r5, {r0, r1}
 8001996:	1d33      	adds	r3, r6, #4
 8001998:	cb0e      	ldmia	r3, {r1, r2, r3}
 800199a:	6838      	ldr	r0, [r7, #0]
 800199c:	f004 fc10 	bl	80061c0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2101      	movs	r1, #1
 80019a6:	4618      	mov	r0, r3
 80019a8:	f004 fc8d 	bl	80062c6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	603b      	str	r3, [r7, #0]
 80019b2:	687e      	ldr	r6, [r7, #4]
 80019b4:	466d      	mov	r5, sp
 80019b6:	f106 0410 	add.w	r4, r6, #16
 80019ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80019ca:	1d33      	adds	r3, r6, #4
 80019cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019ce:	6838      	ldr	r0, [r7, #0]
 80019d0:	f004 fe16 	bl	8006600 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019e6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80019e6:	b590      	push	{r4, r7, lr}
 80019e8:	b089      	sub	sp, #36	; 0x24
 80019ea:	af04      	add	r7, sp, #16
 80019ec:	6078      	str	r0, [r7, #4]
 80019ee:	4608      	mov	r0, r1
 80019f0:	4611      	mov	r1, r2
 80019f2:	461a      	mov	r2, r3
 80019f4:	4603      	mov	r3, r0
 80019f6:	70fb      	strb	r3, [r7, #3]
 80019f8:	460b      	mov	r3, r1
 80019fa:	70bb      	strb	r3, [r7, #2]
 80019fc:	4613      	mov	r3, r2
 80019fe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d101      	bne.n	8001a0e <HAL_HCD_HC_Init+0x28>
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	e076      	b.n	8001afc <HAL_HCD_HC_Init+0x116>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2201      	movs	r2, #1
 8001a12:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001a16:	78fb      	ldrb	r3, [r7, #3]
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	212c      	movs	r1, #44	; 0x2c
 8001a1c:	fb01 f303 	mul.w	r3, r1, r3
 8001a20:	4413      	add	r3, r2
 8001a22:	333d      	adds	r3, #61	; 0x3d
 8001a24:	2200      	movs	r2, #0
 8001a26:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001a28:	78fb      	ldrb	r3, [r7, #3]
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	212c      	movs	r1, #44	; 0x2c
 8001a2e:	fb01 f303 	mul.w	r3, r1, r3
 8001a32:	4413      	add	r3, r2
 8001a34:	3338      	adds	r3, #56	; 0x38
 8001a36:	787a      	ldrb	r2, [r7, #1]
 8001a38:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001a3a:	78fb      	ldrb	r3, [r7, #3]
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	212c      	movs	r1, #44	; 0x2c
 8001a40:	fb01 f303 	mul.w	r3, r1, r3
 8001a44:	4413      	add	r3, r2
 8001a46:	3340      	adds	r3, #64	; 0x40
 8001a48:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001a4a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a4c:	78fb      	ldrb	r3, [r7, #3]
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	212c      	movs	r1, #44	; 0x2c
 8001a52:	fb01 f303 	mul.w	r3, r1, r3
 8001a56:	4413      	add	r3, r2
 8001a58:	3339      	adds	r3, #57	; 0x39
 8001a5a:	78fa      	ldrb	r2, [r7, #3]
 8001a5c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001a5e:	78fb      	ldrb	r3, [r7, #3]
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	212c      	movs	r1, #44	; 0x2c
 8001a64:	fb01 f303 	mul.w	r3, r1, r3
 8001a68:	4413      	add	r3, r2
 8001a6a:	333f      	adds	r3, #63	; 0x3f
 8001a6c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001a70:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001a72:	78fb      	ldrb	r3, [r7, #3]
 8001a74:	78ba      	ldrb	r2, [r7, #2]
 8001a76:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a7a:	b2d0      	uxtb	r0, r2
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	212c      	movs	r1, #44	; 0x2c
 8001a80:	fb01 f303 	mul.w	r3, r1, r3
 8001a84:	4413      	add	r3, r2
 8001a86:	333a      	adds	r3, #58	; 0x3a
 8001a88:	4602      	mov	r2, r0
 8001a8a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001a8c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	da09      	bge.n	8001aa8 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001a94:	78fb      	ldrb	r3, [r7, #3]
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	212c      	movs	r1, #44	; 0x2c
 8001a9a:	fb01 f303 	mul.w	r3, r1, r3
 8001a9e:	4413      	add	r3, r2
 8001aa0:	333b      	adds	r3, #59	; 0x3b
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	701a      	strb	r2, [r3, #0]
 8001aa6:	e008      	b.n	8001aba <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001aa8:	78fb      	ldrb	r3, [r7, #3]
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	212c      	movs	r1, #44	; 0x2c
 8001aae:	fb01 f303 	mul.w	r3, r1, r3
 8001ab2:	4413      	add	r3, r2
 8001ab4:	333b      	adds	r3, #59	; 0x3b
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001aba:	78fb      	ldrb	r3, [r7, #3]
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	212c      	movs	r1, #44	; 0x2c
 8001ac0:	fb01 f303 	mul.w	r3, r1, r3
 8001ac4:	4413      	add	r3, r2
 8001ac6:	333c      	adds	r3, #60	; 0x3c
 8001ac8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001acc:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6818      	ldr	r0, [r3, #0]
 8001ad2:	787c      	ldrb	r4, [r7, #1]
 8001ad4:	78ba      	ldrb	r2, [r7, #2]
 8001ad6:	78f9      	ldrb	r1, [r7, #3]
 8001ad8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001ada:	9302      	str	r3, [sp, #8]
 8001adc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001ae0:	9301      	str	r3, [sp, #4]
 8001ae2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ae6:	9300      	str	r3, [sp, #0]
 8001ae8:	4623      	mov	r3, r4
 8001aea:	f004 fee5 	bl	80068b8 <USB_HC_Init>
 8001aee:	4603      	mov	r3, r0
 8001af0:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3714      	adds	r7, #20
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd90      	pop	{r4, r7, pc}

08001b04 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001b10:	2300      	movs	r3, #0
 8001b12:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d101      	bne.n	8001b22 <HAL_HCD_HC_Halt+0x1e>
 8001b1e:	2302      	movs	r3, #2
 8001b20:	e00f      	b.n	8001b42 <HAL_HCD_HC_Halt+0x3e>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2201      	movs	r2, #1
 8001b26:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	78fa      	ldrb	r2, [r7, #3]
 8001b30:	4611      	mov	r1, r2
 8001b32:	4618      	mov	r0, r3
 8001b34:	f005 f935 	bl	8006da2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	4608      	mov	r0, r1
 8001b56:	4611      	mov	r1, r2
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	70fb      	strb	r3, [r7, #3]
 8001b5e:	460b      	mov	r3, r1
 8001b60:	70bb      	strb	r3, [r7, #2]
 8001b62:	4613      	mov	r3, r2
 8001b64:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001b66:	78fb      	ldrb	r3, [r7, #3]
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	212c      	movs	r1, #44	; 0x2c
 8001b6c:	fb01 f303 	mul.w	r3, r1, r3
 8001b70:	4413      	add	r3, r2
 8001b72:	333b      	adds	r3, #59	; 0x3b
 8001b74:	78ba      	ldrb	r2, [r7, #2]
 8001b76:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001b78:	78fb      	ldrb	r3, [r7, #3]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	212c      	movs	r1, #44	; 0x2c
 8001b7e:	fb01 f303 	mul.w	r3, r1, r3
 8001b82:	4413      	add	r3, r2
 8001b84:	333f      	adds	r3, #63	; 0x3f
 8001b86:	787a      	ldrb	r2, [r7, #1]
 8001b88:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001b8a:	7c3b      	ldrb	r3, [r7, #16]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d112      	bne.n	8001bb6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001b90:	78fb      	ldrb	r3, [r7, #3]
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	212c      	movs	r1, #44	; 0x2c
 8001b96:	fb01 f303 	mul.w	r3, r1, r3
 8001b9a:	4413      	add	r3, r2
 8001b9c:	3342      	adds	r3, #66	; 0x42
 8001b9e:	2203      	movs	r2, #3
 8001ba0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001ba2:	78fb      	ldrb	r3, [r7, #3]
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	212c      	movs	r1, #44	; 0x2c
 8001ba8:	fb01 f303 	mul.w	r3, r1, r3
 8001bac:	4413      	add	r3, r2
 8001bae:	333d      	adds	r3, #61	; 0x3d
 8001bb0:	7f3a      	ldrb	r2, [r7, #28]
 8001bb2:	701a      	strb	r2, [r3, #0]
 8001bb4:	e008      	b.n	8001bc8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bb6:	78fb      	ldrb	r3, [r7, #3]
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	212c      	movs	r1, #44	; 0x2c
 8001bbc:	fb01 f303 	mul.w	r3, r1, r3
 8001bc0:	4413      	add	r3, r2
 8001bc2:	3342      	adds	r3, #66	; 0x42
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001bc8:	787b      	ldrb	r3, [r7, #1]
 8001bca:	2b03      	cmp	r3, #3
 8001bcc:	f200 80c6 	bhi.w	8001d5c <HAL_HCD_HC_SubmitRequest+0x210>
 8001bd0:	a201      	add	r2, pc, #4	; (adr r2, 8001bd8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bd6:	bf00      	nop
 8001bd8:	08001be9 	.word	0x08001be9
 8001bdc:	08001d49 	.word	0x08001d49
 8001be0:	08001c4d 	.word	0x08001c4d
 8001be4:	08001ccb 	.word	0x08001ccb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001be8:	7c3b      	ldrb	r3, [r7, #16]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	f040 80b8 	bne.w	8001d60 <HAL_HCD_HC_SubmitRequest+0x214>
 8001bf0:	78bb      	ldrb	r3, [r7, #2]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f040 80b4 	bne.w	8001d60 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001bf8:	8b3b      	ldrh	r3, [r7, #24]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d108      	bne.n	8001c10 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001bfe:	78fb      	ldrb	r3, [r7, #3]
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	212c      	movs	r1, #44	; 0x2c
 8001c04:	fb01 f303 	mul.w	r3, r1, r3
 8001c08:	4413      	add	r3, r2
 8001c0a:	3355      	adds	r3, #85	; 0x55
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c10:	78fb      	ldrb	r3, [r7, #3]
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	212c      	movs	r1, #44	; 0x2c
 8001c16:	fb01 f303 	mul.w	r3, r1, r3
 8001c1a:	4413      	add	r3, r2
 8001c1c:	3355      	adds	r3, #85	; 0x55
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d109      	bne.n	8001c38 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c24:	78fb      	ldrb	r3, [r7, #3]
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	212c      	movs	r1, #44	; 0x2c
 8001c2a:	fb01 f303 	mul.w	r3, r1, r3
 8001c2e:	4413      	add	r3, r2
 8001c30:	3342      	adds	r3, #66	; 0x42
 8001c32:	2200      	movs	r2, #0
 8001c34:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001c36:	e093      	b.n	8001d60 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c38:	78fb      	ldrb	r3, [r7, #3]
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	212c      	movs	r1, #44	; 0x2c
 8001c3e:	fb01 f303 	mul.w	r3, r1, r3
 8001c42:	4413      	add	r3, r2
 8001c44:	3342      	adds	r3, #66	; 0x42
 8001c46:	2202      	movs	r2, #2
 8001c48:	701a      	strb	r2, [r3, #0]
      break;
 8001c4a:	e089      	b.n	8001d60 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001c4c:	78bb      	ldrb	r3, [r7, #2]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d11d      	bne.n	8001c8e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c52:	78fb      	ldrb	r3, [r7, #3]
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	212c      	movs	r1, #44	; 0x2c
 8001c58:	fb01 f303 	mul.w	r3, r1, r3
 8001c5c:	4413      	add	r3, r2
 8001c5e:	3355      	adds	r3, #85	; 0x55
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d109      	bne.n	8001c7a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c66:	78fb      	ldrb	r3, [r7, #3]
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	212c      	movs	r1, #44	; 0x2c
 8001c6c:	fb01 f303 	mul.w	r3, r1, r3
 8001c70:	4413      	add	r3, r2
 8001c72:	3342      	adds	r3, #66	; 0x42
 8001c74:	2200      	movs	r2, #0
 8001c76:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001c78:	e073      	b.n	8001d62 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c7a:	78fb      	ldrb	r3, [r7, #3]
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	212c      	movs	r1, #44	; 0x2c
 8001c80:	fb01 f303 	mul.w	r3, r1, r3
 8001c84:	4413      	add	r3, r2
 8001c86:	3342      	adds	r3, #66	; 0x42
 8001c88:	2202      	movs	r2, #2
 8001c8a:	701a      	strb	r2, [r3, #0]
      break;
 8001c8c:	e069      	b.n	8001d62 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c8e:	78fb      	ldrb	r3, [r7, #3]
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	212c      	movs	r1, #44	; 0x2c
 8001c94:	fb01 f303 	mul.w	r3, r1, r3
 8001c98:	4413      	add	r3, r2
 8001c9a:	3354      	adds	r3, #84	; 0x54
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d109      	bne.n	8001cb6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ca2:	78fb      	ldrb	r3, [r7, #3]
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	212c      	movs	r1, #44	; 0x2c
 8001ca8:	fb01 f303 	mul.w	r3, r1, r3
 8001cac:	4413      	add	r3, r2
 8001cae:	3342      	adds	r3, #66	; 0x42
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	701a      	strb	r2, [r3, #0]
      break;
 8001cb4:	e055      	b.n	8001d62 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cb6:	78fb      	ldrb	r3, [r7, #3]
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	212c      	movs	r1, #44	; 0x2c
 8001cbc:	fb01 f303 	mul.w	r3, r1, r3
 8001cc0:	4413      	add	r3, r2
 8001cc2:	3342      	adds	r3, #66	; 0x42
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	701a      	strb	r2, [r3, #0]
      break;
 8001cc8:	e04b      	b.n	8001d62 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001cca:	78bb      	ldrb	r3, [r7, #2]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d11d      	bne.n	8001d0c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001cd0:	78fb      	ldrb	r3, [r7, #3]
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	212c      	movs	r1, #44	; 0x2c
 8001cd6:	fb01 f303 	mul.w	r3, r1, r3
 8001cda:	4413      	add	r3, r2
 8001cdc:	3355      	adds	r3, #85	; 0x55
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d109      	bne.n	8001cf8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ce4:	78fb      	ldrb	r3, [r7, #3]
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	212c      	movs	r1, #44	; 0x2c
 8001cea:	fb01 f303 	mul.w	r3, r1, r3
 8001cee:	4413      	add	r3, r2
 8001cf0:	3342      	adds	r3, #66	; 0x42
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001cf6:	e034      	b.n	8001d62 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cf8:	78fb      	ldrb	r3, [r7, #3]
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	212c      	movs	r1, #44	; 0x2c
 8001cfe:	fb01 f303 	mul.w	r3, r1, r3
 8001d02:	4413      	add	r3, r2
 8001d04:	3342      	adds	r3, #66	; 0x42
 8001d06:	2202      	movs	r2, #2
 8001d08:	701a      	strb	r2, [r3, #0]
      break;
 8001d0a:	e02a      	b.n	8001d62 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001d0c:	78fb      	ldrb	r3, [r7, #3]
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	212c      	movs	r1, #44	; 0x2c
 8001d12:	fb01 f303 	mul.w	r3, r1, r3
 8001d16:	4413      	add	r3, r2
 8001d18:	3354      	adds	r3, #84	; 0x54
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d109      	bne.n	8001d34 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d20:	78fb      	ldrb	r3, [r7, #3]
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	212c      	movs	r1, #44	; 0x2c
 8001d26:	fb01 f303 	mul.w	r3, r1, r3
 8001d2a:	4413      	add	r3, r2
 8001d2c:	3342      	adds	r3, #66	; 0x42
 8001d2e:	2200      	movs	r2, #0
 8001d30:	701a      	strb	r2, [r3, #0]
      break;
 8001d32:	e016      	b.n	8001d62 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d34:	78fb      	ldrb	r3, [r7, #3]
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	212c      	movs	r1, #44	; 0x2c
 8001d3a:	fb01 f303 	mul.w	r3, r1, r3
 8001d3e:	4413      	add	r3, r2
 8001d40:	3342      	adds	r3, #66	; 0x42
 8001d42:	2202      	movs	r2, #2
 8001d44:	701a      	strb	r2, [r3, #0]
      break;
 8001d46:	e00c      	b.n	8001d62 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d48:	78fb      	ldrb	r3, [r7, #3]
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	212c      	movs	r1, #44	; 0x2c
 8001d4e:	fb01 f303 	mul.w	r3, r1, r3
 8001d52:	4413      	add	r3, r2
 8001d54:	3342      	adds	r3, #66	; 0x42
 8001d56:	2200      	movs	r2, #0
 8001d58:	701a      	strb	r2, [r3, #0]
      break;
 8001d5a:	e002      	b.n	8001d62 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001d5c:	bf00      	nop
 8001d5e:	e000      	b.n	8001d62 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001d60:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001d62:	78fb      	ldrb	r3, [r7, #3]
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	212c      	movs	r1, #44	; 0x2c
 8001d68:	fb01 f303 	mul.w	r3, r1, r3
 8001d6c:	4413      	add	r3, r2
 8001d6e:	3344      	adds	r3, #68	; 0x44
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001d74:	78fb      	ldrb	r3, [r7, #3]
 8001d76:	8b3a      	ldrh	r2, [r7, #24]
 8001d78:	6879      	ldr	r1, [r7, #4]
 8001d7a:	202c      	movs	r0, #44	; 0x2c
 8001d7c:	fb00 f303 	mul.w	r3, r0, r3
 8001d80:	440b      	add	r3, r1
 8001d82:	334c      	adds	r3, #76	; 0x4c
 8001d84:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001d86:	78fb      	ldrb	r3, [r7, #3]
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	212c      	movs	r1, #44	; 0x2c
 8001d8c:	fb01 f303 	mul.w	r3, r1, r3
 8001d90:	4413      	add	r3, r2
 8001d92:	3360      	adds	r3, #96	; 0x60
 8001d94:	2200      	movs	r2, #0
 8001d96:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001d98:	78fb      	ldrb	r3, [r7, #3]
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	212c      	movs	r1, #44	; 0x2c
 8001d9e:	fb01 f303 	mul.w	r3, r1, r3
 8001da2:	4413      	add	r3, r2
 8001da4:	3350      	adds	r3, #80	; 0x50
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001daa:	78fb      	ldrb	r3, [r7, #3]
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	212c      	movs	r1, #44	; 0x2c
 8001db0:	fb01 f303 	mul.w	r3, r1, r3
 8001db4:	4413      	add	r3, r2
 8001db6:	3339      	adds	r3, #57	; 0x39
 8001db8:	78fa      	ldrb	r2, [r7, #3]
 8001dba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001dbc:	78fb      	ldrb	r3, [r7, #3]
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	212c      	movs	r1, #44	; 0x2c
 8001dc2:	fb01 f303 	mul.w	r3, r1, r3
 8001dc6:	4413      	add	r3, r2
 8001dc8:	3361      	adds	r3, #97	; 0x61
 8001dca:	2200      	movs	r2, #0
 8001dcc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6818      	ldr	r0, [r3, #0]
 8001dd2:	78fb      	ldrb	r3, [r7, #3]
 8001dd4:	222c      	movs	r2, #44	; 0x2c
 8001dd6:	fb02 f303 	mul.w	r3, r2, r3
 8001dda:	3338      	adds	r3, #56	; 0x38
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	18d1      	adds	r1, r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	461a      	mov	r2, r3
 8001de8:	f004 fe88 	bl	8006afc <USB_HC_StartXfer>
 8001dec:	4603      	mov	r3, r0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop

08001df8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f004 fbb3 	bl	800657a <USB_GetMode>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	f040 80f6 	bne.w	8002008 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f004 fb97 	bl	8006554 <USB_ReadInterrupts>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 80ec 	beq.w	8002006 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f004 fb8e 	bl	8006554 <USB_ReadInterrupts>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e42:	d104      	bne.n	8001e4e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001e4c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f004 fb7e 	bl	8006554 <USB_ReadInterrupts>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e62:	d104      	bne.n	8001e6e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e6c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f004 fb6e 	bl	8006554 <USB_ReadInterrupts>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e82:	d104      	bne.n	8001e8e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e8c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f004 fb5e 	bl	8006554 <USB_ReadInterrupts>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d103      	bne.n	8001eaa <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f004 fb50 	bl	8006554 <USB_ReadInterrupts>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001eba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ebe:	d11c      	bne.n	8001efa <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001ec8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d10f      	bne.n	8001efa <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001eda:	2110      	movs	r1, #16
 8001edc:	6938      	ldr	r0, [r7, #16]
 8001ede:	f004 fa3f 	bl	8006360 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001ee2:	6938      	ldr	r0, [r7, #16]
 8001ee4:	f004 fa70 	bl	80063c8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2101      	movs	r1, #1
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f004 fc46 	bl	8006780 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f006 fa4f 	bl	8008398 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f004 fb28 	bl	8006554 <USB_ReadInterrupts>
 8001f04:	4603      	mov	r3, r0
 8001f06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f0a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f0e:	d102      	bne.n	8001f16 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f001 f882 	bl	800301a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f004 fb1a 	bl	8006554 <USB_ReadInterrupts>
 8001f20:	4603      	mov	r3, r0
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	2b08      	cmp	r3, #8
 8001f28:	d106      	bne.n	8001f38 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f006 fa18 	bl	8008360 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2208      	movs	r2, #8
 8001f36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f004 fb09 	bl	8006554 <USB_ReadInterrupts>
 8001f42:	4603      	mov	r3, r0
 8001f44:	f003 0310 	and.w	r3, r3, #16
 8001f48:	2b10      	cmp	r3, #16
 8001f4a:	d101      	bne.n	8001f50 <HAL_HCD_IRQHandler+0x158>
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e000      	b.n	8001f52 <HAL_HCD_IRQHandler+0x15a>
 8001f50:	2300      	movs	r3, #0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d012      	beq.n	8001f7c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	699a      	ldr	r2, [r3, #24]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 0210 	bic.w	r2, r2, #16
 8001f64:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 ff85 	bl	8002e76 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	699a      	ldr	r2, [r3, #24]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f042 0210 	orr.w	r2, r2, #16
 8001f7a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f004 fae7 	bl	8006554 <USB_ReadInterrupts>
 8001f86:	4603      	mov	r3, r0
 8001f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f90:	d13a      	bne.n	8002008 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f004 fef2 	bl	8006d80 <USB_HC_ReadInterrupt>
 8001f9c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	617b      	str	r3, [r7, #20]
 8001fa2:	e025      	b.n	8001ff0 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	f003 030f 	and.w	r3, r3, #15
 8001faa:	68ba      	ldr	r2, [r7, #8]
 8001fac:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d018      	beq.n	8001fea <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	015a      	lsls	r2, r3, #5
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fce:	d106      	bne.n	8001fde <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 f88f 	bl	80020fa <HCD_HC_IN_IRQHandler>
 8001fdc:	e005      	b.n	8001fea <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 fbdd 	bl	80027a4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	3301      	adds	r3, #1
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d3d4      	bcc.n	8001fa4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002002:	615a      	str	r2, [r3, #20]
 8002004:	e000      	b.n	8002008 <HAL_HCD_IRQHandler+0x210>
      return;
 8002006:	bf00      	nop
    }
  }
}
 8002008:	3718      	adds	r7, #24
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800201c:	2b01      	cmp	r3, #1
 800201e:	d101      	bne.n	8002024 <HAL_HCD_Start+0x16>
 8002020:	2302      	movs	r3, #2
 8002022:	e013      	b.n	800204c <HAL_HCD_Start+0x3e>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2101      	movs	r1, #1
 8002032:	4618      	mov	r0, r3
 8002034:	f004 fbde 	bl	80067f4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	f004 f920 	bl	8006282 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002062:	2b01      	cmp	r3, #1
 8002064:	d101      	bne.n	800206a <HAL_HCD_Stop+0x16>
 8002066:	2302      	movs	r3, #2
 8002068:	e00d      	b.n	8002086 <HAL_HCD_Stop+0x32>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f004 ffcc 	bl	8007014 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800208e:	b480      	push	{r7}
 8002090:	b083      	sub	sp, #12
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
 8002096:	460b      	mov	r3, r1
 8002098:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800209a:	78fb      	ldrb	r3, [r7, #3]
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	212c      	movs	r1, #44	; 0x2c
 80020a0:	fb01 f303 	mul.w	r3, r1, r3
 80020a4:	4413      	add	r3, r2
 80020a6:	3360      	adds	r3, #96	; 0x60
 80020a8:	781b      	ldrb	r3, [r3, #0]
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
 80020be:	460b      	mov	r3, r1
 80020c0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80020c2:	78fb      	ldrb	r3, [r7, #3]
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	212c      	movs	r1, #44	; 0x2c
 80020c8:	fb01 f303 	mul.w	r3, r1, r3
 80020cc:	4413      	add	r3, r2
 80020ce:	3350      	adds	r3, #80	; 0x50
 80020d0:	681b      	ldr	r3, [r3, #0]
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b082      	sub	sp, #8
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f004 fbd2 	bl	8006894 <USB_GetCurrentFrame>
 80020f0:	4603      	mov	r3, r0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b086      	sub	sp, #24
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
 8002102:	460b      	mov	r3, r1
 8002104:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002110:	78fb      	ldrb	r3, [r7, #3]
 8002112:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	015a      	lsls	r2, r3, #5
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	4413      	add	r3, r2
 800211c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 0304 	and.w	r3, r3, #4
 8002126:	2b04      	cmp	r3, #4
 8002128:	d11a      	bne.n	8002160 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	015a      	lsls	r2, r3, #5
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	4413      	add	r3, r2
 8002132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002136:	461a      	mov	r2, r3
 8002138:	2304      	movs	r3, #4
 800213a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	212c      	movs	r1, #44	; 0x2c
 8002142:	fb01 f303 	mul.w	r3, r1, r3
 8002146:	4413      	add	r3, r2
 8002148:	3361      	adds	r3, #97	; 0x61
 800214a:	2206      	movs	r2, #6
 800214c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	b2d2      	uxtb	r2, r2
 8002156:	4611      	mov	r1, r2
 8002158:	4618      	mov	r0, r3
 800215a:	f004 fe22 	bl	8006da2 <USB_HC_Halt>
 800215e:	e0af      	b.n	80022c0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	015a      	lsls	r2, r3, #5
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	4413      	add	r3, r2
 8002168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002172:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002176:	d11b      	bne.n	80021b0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	015a      	lsls	r2, r3, #5
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	4413      	add	r3, r2
 8002180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002184:	461a      	mov	r2, r3
 8002186:	f44f 7380 	mov.w	r3, #256	; 0x100
 800218a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	212c      	movs	r1, #44	; 0x2c
 8002192:	fb01 f303 	mul.w	r3, r1, r3
 8002196:	4413      	add	r3, r2
 8002198:	3361      	adds	r3, #97	; 0x61
 800219a:	2207      	movs	r2, #7
 800219c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	b2d2      	uxtb	r2, r2
 80021a6:	4611      	mov	r1, r2
 80021a8:	4618      	mov	r0, r3
 80021aa:	f004 fdfa 	bl	8006da2 <USB_HC_Halt>
 80021ae:	e087      	b.n	80022c0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	015a      	lsls	r2, r3, #5
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	4413      	add	r3, r2
 80021b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 0320 	and.w	r3, r3, #32
 80021c2:	2b20      	cmp	r3, #32
 80021c4:	d109      	bne.n	80021da <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	015a      	lsls	r2, r3, #5
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	4413      	add	r3, r2
 80021ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d2:	461a      	mov	r2, r3
 80021d4:	2320      	movs	r3, #32
 80021d6:	6093      	str	r3, [r2, #8]
 80021d8:	e072      	b.n	80022c0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	015a      	lsls	r2, r3, #5
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	4413      	add	r3, r2
 80021e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 0308 	and.w	r3, r3, #8
 80021ec:	2b08      	cmp	r3, #8
 80021ee:	d11a      	bne.n	8002226 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	015a      	lsls	r2, r3, #5
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	4413      	add	r3, r2
 80021f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021fc:	461a      	mov	r2, r3
 80021fe:	2308      	movs	r3, #8
 8002200:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	212c      	movs	r1, #44	; 0x2c
 8002208:	fb01 f303 	mul.w	r3, r1, r3
 800220c:	4413      	add	r3, r2
 800220e:	3361      	adds	r3, #97	; 0x61
 8002210:	2205      	movs	r2, #5
 8002212:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	b2d2      	uxtb	r2, r2
 800221c:	4611      	mov	r1, r2
 800221e:	4618      	mov	r0, r3
 8002220:	f004 fdbf 	bl	8006da2 <USB_HC_Halt>
 8002224:	e04c      	b.n	80022c0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	015a      	lsls	r2, r3, #5
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	4413      	add	r3, r2
 800222e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800223c:	d11b      	bne.n	8002276 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	015a      	lsls	r2, r3, #5
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	4413      	add	r3, r2
 8002246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800224a:	461a      	mov	r2, r3
 800224c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002250:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	212c      	movs	r1, #44	; 0x2c
 8002258:	fb01 f303 	mul.w	r3, r1, r3
 800225c:	4413      	add	r3, r2
 800225e:	3361      	adds	r3, #97	; 0x61
 8002260:	2208      	movs	r2, #8
 8002262:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	b2d2      	uxtb	r2, r2
 800226c:	4611      	mov	r1, r2
 800226e:	4618      	mov	r0, r3
 8002270:	f004 fd97 	bl	8006da2 <USB_HC_Halt>
 8002274:	e024      	b.n	80022c0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	015a      	lsls	r2, r3, #5
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	4413      	add	r3, r2
 800227e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002288:	2b80      	cmp	r3, #128	; 0x80
 800228a:	d119      	bne.n	80022c0 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	015a      	lsls	r2, r3, #5
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4413      	add	r3, r2
 8002294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002298:	461a      	mov	r2, r3
 800229a:	2380      	movs	r3, #128	; 0x80
 800229c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	212c      	movs	r1, #44	; 0x2c
 80022a4:	fb01 f303 	mul.w	r3, r1, r3
 80022a8:	4413      	add	r3, r2
 80022aa:	3361      	adds	r3, #97	; 0x61
 80022ac:	2206      	movs	r2, #6
 80022ae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	b2d2      	uxtb	r2, r2
 80022b8:	4611      	mov	r1, r2
 80022ba:	4618      	mov	r0, r3
 80022bc:	f004 fd71 	bl	8006da2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	015a      	lsls	r2, r3, #5
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	4413      	add	r3, r2
 80022c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022d6:	d112      	bne.n	80022fe <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	4611      	mov	r1, r2
 80022e2:	4618      	mov	r0, r3
 80022e4:	f004 fd5d 	bl	8006da2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	015a      	lsls	r2, r3, #5
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	4413      	add	r3, r2
 80022f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f4:	461a      	mov	r2, r3
 80022f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022fa:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80022fc:	e24e      	b.n	800279c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	015a      	lsls	r2, r3, #5
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	4413      	add	r3, r2
 8002306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	2b01      	cmp	r3, #1
 8002312:	f040 80df 	bne.w	80024d4 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d019      	beq.n	8002352 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	212c      	movs	r1, #44	; 0x2c
 8002324:	fb01 f303 	mul.w	r3, r1, r3
 8002328:	4413      	add	r3, r2
 800232a:	3348      	adds	r3, #72	; 0x48
 800232c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	0159      	lsls	r1, r3, #5
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	440b      	add	r3, r1
 8002336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002340:	1ad2      	subs	r2, r2, r3
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	202c      	movs	r0, #44	; 0x2c
 8002348:	fb00 f303 	mul.w	r3, r0, r3
 800234c:	440b      	add	r3, r1
 800234e:	3350      	adds	r3, #80	; 0x50
 8002350:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	212c      	movs	r1, #44	; 0x2c
 8002358:	fb01 f303 	mul.w	r3, r1, r3
 800235c:	4413      	add	r3, r2
 800235e:	3361      	adds	r3, #97	; 0x61
 8002360:	2201      	movs	r2, #1
 8002362:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	212c      	movs	r1, #44	; 0x2c
 800236a:	fb01 f303 	mul.w	r3, r1, r3
 800236e:	4413      	add	r3, r2
 8002370:	335c      	adds	r3, #92	; 0x5c
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	015a      	lsls	r2, r3, #5
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	4413      	add	r3, r2
 800237e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002382:	461a      	mov	r2, r3
 8002384:	2301      	movs	r3, #1
 8002386:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	212c      	movs	r1, #44	; 0x2c
 800238e:	fb01 f303 	mul.w	r3, r1, r3
 8002392:	4413      	add	r3, r2
 8002394:	333f      	adds	r3, #63	; 0x3f
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d009      	beq.n	80023b0 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	212c      	movs	r1, #44	; 0x2c
 80023a2:	fb01 f303 	mul.w	r3, r1, r3
 80023a6:	4413      	add	r3, r2
 80023a8:	333f      	adds	r3, #63	; 0x3f
 80023aa:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d111      	bne.n	80023d4 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	b2d2      	uxtb	r2, r2
 80023b8:	4611      	mov	r1, r2
 80023ba:	4618      	mov	r0, r3
 80023bc:	f004 fcf1 	bl	8006da2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	015a      	lsls	r2, r3, #5
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	4413      	add	r3, r2
 80023c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023cc:	461a      	mov	r2, r3
 80023ce:	2310      	movs	r3, #16
 80023d0:	6093      	str	r3, [r2, #8]
 80023d2:	e03a      	b.n	800244a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	212c      	movs	r1, #44	; 0x2c
 80023da:	fb01 f303 	mul.w	r3, r1, r3
 80023de:	4413      	add	r3, r2
 80023e0:	333f      	adds	r3, #63	; 0x3f
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b03      	cmp	r3, #3
 80023e6:	d009      	beq.n	80023fc <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	212c      	movs	r1, #44	; 0x2c
 80023ee:	fb01 f303 	mul.w	r3, r1, r3
 80023f2:	4413      	add	r3, r2
 80023f4:	333f      	adds	r3, #63	; 0x3f
 80023f6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d126      	bne.n	800244a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	015a      	lsls	r2, r3, #5
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	4413      	add	r3, r2
 8002404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	0151      	lsls	r1, r2, #5
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	440a      	add	r2, r1
 8002412:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002416:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800241a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	212c      	movs	r1, #44	; 0x2c
 8002422:	fb01 f303 	mul.w	r3, r1, r3
 8002426:	4413      	add	r3, r2
 8002428:	3360      	adds	r3, #96	; 0x60
 800242a:	2201      	movs	r2, #1
 800242c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	b2d9      	uxtb	r1, r3
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	202c      	movs	r0, #44	; 0x2c
 8002438:	fb00 f303 	mul.w	r3, r0, r3
 800243c:	4413      	add	r3, r2
 800243e:	3360      	adds	r3, #96	; 0x60
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	461a      	mov	r2, r3
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f005 ffb5 	bl	80083b4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d12b      	bne.n	80024aa <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	212c      	movs	r1, #44	; 0x2c
 8002458:	fb01 f303 	mul.w	r3, r1, r3
 800245c:	4413      	add	r3, r2
 800245e:	3348      	adds	r3, #72	; 0x48
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	202c      	movs	r0, #44	; 0x2c
 8002468:	fb00 f202 	mul.w	r2, r0, r2
 800246c:	440a      	add	r2, r1
 800246e:	3240      	adds	r2, #64	; 0x40
 8002470:	8812      	ldrh	r2, [r2, #0]
 8002472:	fbb3 f3f2 	udiv	r3, r3, r2
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b00      	cmp	r3, #0
 800247c:	f000 818e 	beq.w	800279c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	212c      	movs	r1, #44	; 0x2c
 8002486:	fb01 f303 	mul.w	r3, r1, r3
 800248a:	4413      	add	r3, r2
 800248c:	3354      	adds	r3, #84	; 0x54
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	f083 0301 	eor.w	r3, r3, #1
 8002494:	b2d8      	uxtb	r0, r3
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	212c      	movs	r1, #44	; 0x2c
 800249c:	fb01 f303 	mul.w	r3, r1, r3
 80024a0:	4413      	add	r3, r2
 80024a2:	3354      	adds	r3, #84	; 0x54
 80024a4:	4602      	mov	r2, r0
 80024a6:	701a      	strb	r2, [r3, #0]
}
 80024a8:	e178      	b.n	800279c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	212c      	movs	r1, #44	; 0x2c
 80024b0:	fb01 f303 	mul.w	r3, r1, r3
 80024b4:	4413      	add	r3, r2
 80024b6:	3354      	adds	r3, #84	; 0x54
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	f083 0301 	eor.w	r3, r3, #1
 80024be:	b2d8      	uxtb	r0, r3
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	212c      	movs	r1, #44	; 0x2c
 80024c6:	fb01 f303 	mul.w	r3, r1, r3
 80024ca:	4413      	add	r3, r2
 80024cc:	3354      	adds	r3, #84	; 0x54
 80024ce:	4602      	mov	r2, r0
 80024d0:	701a      	strb	r2, [r3, #0]
}
 80024d2:	e163      	b.n	800279c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	015a      	lsls	r2, r3, #5
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	4413      	add	r3, r2
 80024dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	f040 80f6 	bne.w	80026d8 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	212c      	movs	r1, #44	; 0x2c
 80024f2:	fb01 f303 	mul.w	r3, r1, r3
 80024f6:	4413      	add	r3, r2
 80024f8:	3361      	adds	r3, #97	; 0x61
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d109      	bne.n	8002514 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	212c      	movs	r1, #44	; 0x2c
 8002506:	fb01 f303 	mul.w	r3, r1, r3
 800250a:	4413      	add	r3, r2
 800250c:	3360      	adds	r3, #96	; 0x60
 800250e:	2201      	movs	r2, #1
 8002510:	701a      	strb	r2, [r3, #0]
 8002512:	e0c9      	b.n	80026a8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	212c      	movs	r1, #44	; 0x2c
 800251a:	fb01 f303 	mul.w	r3, r1, r3
 800251e:	4413      	add	r3, r2
 8002520:	3361      	adds	r3, #97	; 0x61
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b05      	cmp	r3, #5
 8002526:	d109      	bne.n	800253c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	212c      	movs	r1, #44	; 0x2c
 800252e:	fb01 f303 	mul.w	r3, r1, r3
 8002532:	4413      	add	r3, r2
 8002534:	3360      	adds	r3, #96	; 0x60
 8002536:	2205      	movs	r2, #5
 8002538:	701a      	strb	r2, [r3, #0]
 800253a:	e0b5      	b.n	80026a8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	212c      	movs	r1, #44	; 0x2c
 8002542:	fb01 f303 	mul.w	r3, r1, r3
 8002546:	4413      	add	r3, r2
 8002548:	3361      	adds	r3, #97	; 0x61
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2b06      	cmp	r3, #6
 800254e:	d009      	beq.n	8002564 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	212c      	movs	r1, #44	; 0x2c
 8002556:	fb01 f303 	mul.w	r3, r1, r3
 800255a:	4413      	add	r3, r2
 800255c:	3361      	adds	r3, #97	; 0x61
 800255e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002560:	2b08      	cmp	r3, #8
 8002562:	d150      	bne.n	8002606 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	212c      	movs	r1, #44	; 0x2c
 800256a:	fb01 f303 	mul.w	r3, r1, r3
 800256e:	4413      	add	r3, r2
 8002570:	335c      	adds	r3, #92	; 0x5c
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	1c5a      	adds	r2, r3, #1
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	202c      	movs	r0, #44	; 0x2c
 800257c:	fb00 f303 	mul.w	r3, r0, r3
 8002580:	440b      	add	r3, r1
 8002582:	335c      	adds	r3, #92	; 0x5c
 8002584:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	212c      	movs	r1, #44	; 0x2c
 800258c:	fb01 f303 	mul.w	r3, r1, r3
 8002590:	4413      	add	r3, r2
 8002592:	335c      	adds	r3, #92	; 0x5c
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2b02      	cmp	r3, #2
 8002598:	d912      	bls.n	80025c0 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	212c      	movs	r1, #44	; 0x2c
 80025a0:	fb01 f303 	mul.w	r3, r1, r3
 80025a4:	4413      	add	r3, r2
 80025a6:	335c      	adds	r3, #92	; 0x5c
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	212c      	movs	r1, #44	; 0x2c
 80025b2:	fb01 f303 	mul.w	r3, r1, r3
 80025b6:	4413      	add	r3, r2
 80025b8:	3360      	adds	r3, #96	; 0x60
 80025ba:	2204      	movs	r2, #4
 80025bc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80025be:	e073      	b.n	80026a8 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	212c      	movs	r1, #44	; 0x2c
 80025c6:	fb01 f303 	mul.w	r3, r1, r3
 80025ca:	4413      	add	r3, r2
 80025cc:	3360      	adds	r3, #96	; 0x60
 80025ce:	2202      	movs	r2, #2
 80025d0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	015a      	lsls	r2, r3, #5
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	4413      	add	r3, r2
 80025da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025e8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025f0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	015a      	lsls	r2, r3, #5
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	4413      	add	r3, r2
 80025fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025fe:	461a      	mov	r2, r3
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002604:	e050      	b.n	80026a8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	212c      	movs	r1, #44	; 0x2c
 800260c:	fb01 f303 	mul.w	r3, r1, r3
 8002610:	4413      	add	r3, r2
 8002612:	3361      	adds	r3, #97	; 0x61
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	2b03      	cmp	r3, #3
 8002618:	d122      	bne.n	8002660 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	212c      	movs	r1, #44	; 0x2c
 8002620:	fb01 f303 	mul.w	r3, r1, r3
 8002624:	4413      	add	r3, r2
 8002626:	3360      	adds	r3, #96	; 0x60
 8002628:	2202      	movs	r2, #2
 800262a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	015a      	lsls	r2, r3, #5
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	4413      	add	r3, r2
 8002634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002642:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800264a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	015a      	lsls	r2, r3, #5
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	4413      	add	r3, r2
 8002654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002658:	461a      	mov	r2, r3
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	6013      	str	r3, [r2, #0]
 800265e:	e023      	b.n	80026a8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	212c      	movs	r1, #44	; 0x2c
 8002666:	fb01 f303 	mul.w	r3, r1, r3
 800266a:	4413      	add	r3, r2
 800266c:	3361      	adds	r3, #97	; 0x61
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	2b07      	cmp	r3, #7
 8002672:	d119      	bne.n	80026a8 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	212c      	movs	r1, #44	; 0x2c
 800267a:	fb01 f303 	mul.w	r3, r1, r3
 800267e:	4413      	add	r3, r2
 8002680:	335c      	adds	r3, #92	; 0x5c
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	1c5a      	adds	r2, r3, #1
 8002686:	6879      	ldr	r1, [r7, #4]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	202c      	movs	r0, #44	; 0x2c
 800268c:	fb00 f303 	mul.w	r3, r0, r3
 8002690:	440b      	add	r3, r1
 8002692:	335c      	adds	r3, #92	; 0x5c
 8002694:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	212c      	movs	r1, #44	; 0x2c
 800269c:	fb01 f303 	mul.w	r3, r1, r3
 80026a0:	4413      	add	r3, r2
 80026a2:	3360      	adds	r3, #96	; 0x60
 80026a4:	2204      	movs	r2, #4
 80026a6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	015a      	lsls	r2, r3, #5
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	4413      	add	r3, r2
 80026b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b4:	461a      	mov	r2, r3
 80026b6:	2302      	movs	r3, #2
 80026b8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	b2d9      	uxtb	r1, r3
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	202c      	movs	r0, #44	; 0x2c
 80026c4:	fb00 f303 	mul.w	r3, r0, r3
 80026c8:	4413      	add	r3, r2
 80026ca:	3360      	adds	r3, #96	; 0x60
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	461a      	mov	r2, r3
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f005 fe6f 	bl	80083b4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80026d6:	e061      	b.n	800279c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	015a      	lsls	r2, r3, #5
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	4413      	add	r3, r2
 80026e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 0310 	and.w	r3, r3, #16
 80026ea:	2b10      	cmp	r3, #16
 80026ec:	d156      	bne.n	800279c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	212c      	movs	r1, #44	; 0x2c
 80026f4:	fb01 f303 	mul.w	r3, r1, r3
 80026f8:	4413      	add	r3, r2
 80026fa:	333f      	adds	r3, #63	; 0x3f
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b03      	cmp	r3, #3
 8002700:	d111      	bne.n	8002726 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	212c      	movs	r1, #44	; 0x2c
 8002708:	fb01 f303 	mul.w	r3, r1, r3
 800270c:	4413      	add	r3, r2
 800270e:	335c      	adds	r3, #92	; 0x5c
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	4611      	mov	r1, r2
 800271e:	4618      	mov	r0, r3
 8002720:	f004 fb3f 	bl	8006da2 <USB_HC_Halt>
 8002724:	e031      	b.n	800278a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	212c      	movs	r1, #44	; 0x2c
 800272c:	fb01 f303 	mul.w	r3, r1, r3
 8002730:	4413      	add	r3, r2
 8002732:	333f      	adds	r3, #63	; 0x3f
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d009      	beq.n	800274e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	212c      	movs	r1, #44	; 0x2c
 8002740:	fb01 f303 	mul.w	r3, r1, r3
 8002744:	4413      	add	r3, r2
 8002746:	333f      	adds	r3, #63	; 0x3f
 8002748:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800274a:	2b02      	cmp	r3, #2
 800274c:	d11d      	bne.n	800278a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	212c      	movs	r1, #44	; 0x2c
 8002754:	fb01 f303 	mul.w	r3, r1, r3
 8002758:	4413      	add	r3, r2
 800275a:	335c      	adds	r3, #92	; 0x5c
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d110      	bne.n	800278a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	212c      	movs	r1, #44	; 0x2c
 800276e:	fb01 f303 	mul.w	r3, r1, r3
 8002772:	4413      	add	r3, r2
 8002774:	3361      	adds	r3, #97	; 0x61
 8002776:	2203      	movs	r2, #3
 8002778:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	4611      	mov	r1, r2
 8002784:	4618      	mov	r0, r3
 8002786:	f004 fb0c 	bl	8006da2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	015a      	lsls	r2, r3, #5
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	4413      	add	r3, r2
 8002792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002796:	461a      	mov	r2, r3
 8002798:	2310      	movs	r3, #16
 800279a:	6093      	str	r3, [r2, #8]
}
 800279c:	bf00      	nop
 800279e:	3718      	adds	r7, #24
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b088      	sub	sp, #32
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	460b      	mov	r3, r1
 80027ae:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80027ba:	78fb      	ldrb	r3, [r7, #3]
 80027bc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	015a      	lsls	r2, r3, #5
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	4413      	add	r3, r2
 80027c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f003 0304 	and.w	r3, r3, #4
 80027d0:	2b04      	cmp	r3, #4
 80027d2:	d11a      	bne.n	800280a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	015a      	lsls	r2, r3, #5
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	4413      	add	r3, r2
 80027dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e0:	461a      	mov	r2, r3
 80027e2:	2304      	movs	r3, #4
 80027e4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	212c      	movs	r1, #44	; 0x2c
 80027ec:	fb01 f303 	mul.w	r3, r1, r3
 80027f0:	4413      	add	r3, r2
 80027f2:	3361      	adds	r3, #97	; 0x61
 80027f4:	2206      	movs	r2, #6
 80027f6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	4611      	mov	r1, r2
 8002802:	4618      	mov	r0, r3
 8002804:	f004 facd 	bl	8006da2 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002808:	e331      	b.n	8002e6e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	015a      	lsls	r2, r3, #5
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	4413      	add	r3, r2
 8002812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f003 0320 	and.w	r3, r3, #32
 800281c:	2b20      	cmp	r3, #32
 800281e:	d12e      	bne.n	800287e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	015a      	lsls	r2, r3, #5
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	4413      	add	r3, r2
 8002828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800282c:	461a      	mov	r2, r3
 800282e:	2320      	movs	r3, #32
 8002830:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	212c      	movs	r1, #44	; 0x2c
 8002838:	fb01 f303 	mul.w	r3, r1, r3
 800283c:	4413      	add	r3, r2
 800283e:	333d      	adds	r3, #61	; 0x3d
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	2b01      	cmp	r3, #1
 8002844:	f040 8313 	bne.w	8002e6e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	212c      	movs	r1, #44	; 0x2c
 800284e:	fb01 f303 	mul.w	r3, r1, r3
 8002852:	4413      	add	r3, r2
 8002854:	333d      	adds	r3, #61	; 0x3d
 8002856:	2200      	movs	r2, #0
 8002858:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	212c      	movs	r1, #44	; 0x2c
 8002860:	fb01 f303 	mul.w	r3, r1, r3
 8002864:	4413      	add	r3, r2
 8002866:	3360      	adds	r3, #96	; 0x60
 8002868:	2202      	movs	r2, #2
 800286a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	4611      	mov	r1, r2
 8002876:	4618      	mov	r0, r3
 8002878:	f004 fa93 	bl	8006da2 <USB_HC_Halt>
}
 800287c:	e2f7      	b.n	8002e6e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	015a      	lsls	r2, r3, #5
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	4413      	add	r3, r2
 8002886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002890:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002894:	d112      	bne.n	80028bc <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	015a      	lsls	r2, r3, #5
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	4413      	add	r3, r2
 800289e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a2:	461a      	mov	r2, r3
 80028a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028a8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	b2d2      	uxtb	r2, r2
 80028b2:	4611      	mov	r1, r2
 80028b4:	4618      	mov	r0, r3
 80028b6:	f004 fa74 	bl	8006da2 <USB_HC_Halt>
}
 80028ba:	e2d8      	b.n	8002e6e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	015a      	lsls	r2, r3, #5
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	4413      	add	r3, r2
 80028c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d140      	bne.n	8002954 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	212c      	movs	r1, #44	; 0x2c
 80028d8:	fb01 f303 	mul.w	r3, r1, r3
 80028dc:	4413      	add	r3, r2
 80028de:	335c      	adds	r3, #92	; 0x5c
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	015a      	lsls	r2, r3, #5
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	4413      	add	r3, r2
 80028ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f6:	2b40      	cmp	r3, #64	; 0x40
 80028f8:	d111      	bne.n	800291e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	212c      	movs	r1, #44	; 0x2c
 8002900:	fb01 f303 	mul.w	r3, r1, r3
 8002904:	4413      	add	r3, r2
 8002906:	333d      	adds	r3, #61	; 0x3d
 8002908:	2201      	movs	r2, #1
 800290a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	015a      	lsls	r2, r3, #5
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	4413      	add	r3, r2
 8002914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002918:	461a      	mov	r2, r3
 800291a:	2340      	movs	r3, #64	; 0x40
 800291c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	015a      	lsls	r2, r3, #5
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	4413      	add	r3, r2
 8002926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800292a:	461a      	mov	r2, r3
 800292c:	2301      	movs	r3, #1
 800292e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	212c      	movs	r1, #44	; 0x2c
 8002936:	fb01 f303 	mul.w	r3, r1, r3
 800293a:	4413      	add	r3, r2
 800293c:	3361      	adds	r3, #97	; 0x61
 800293e:	2201      	movs	r2, #1
 8002940:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	b2d2      	uxtb	r2, r2
 800294a:	4611      	mov	r1, r2
 800294c:	4618      	mov	r0, r3
 800294e:	f004 fa28 	bl	8006da2 <USB_HC_Halt>
}
 8002952:	e28c      	b.n	8002e6e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	015a      	lsls	r2, r3, #5
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	4413      	add	r3, r2
 800295c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002966:	2b40      	cmp	r3, #64	; 0x40
 8002968:	d12c      	bne.n	80029c4 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	212c      	movs	r1, #44	; 0x2c
 8002970:	fb01 f303 	mul.w	r3, r1, r3
 8002974:	4413      	add	r3, r2
 8002976:	3361      	adds	r3, #97	; 0x61
 8002978:	2204      	movs	r2, #4
 800297a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	212c      	movs	r1, #44	; 0x2c
 8002982:	fb01 f303 	mul.w	r3, r1, r3
 8002986:	4413      	add	r3, r2
 8002988:	333d      	adds	r3, #61	; 0x3d
 800298a:	2201      	movs	r2, #1
 800298c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	212c      	movs	r1, #44	; 0x2c
 8002994:	fb01 f303 	mul.w	r3, r1, r3
 8002998:	4413      	add	r3, r2
 800299a:	335c      	adds	r3, #92	; 0x5c
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	4611      	mov	r1, r2
 80029aa:	4618      	mov	r0, r3
 80029ac:	f004 f9f9 	bl	8006da2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	015a      	lsls	r2, r3, #5
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	4413      	add	r3, r2
 80029b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029bc:	461a      	mov	r2, r3
 80029be:	2340      	movs	r3, #64	; 0x40
 80029c0:	6093      	str	r3, [r2, #8]
}
 80029c2:	e254      	b.n	8002e6e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	015a      	lsls	r2, r3, #5
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	4413      	add	r3, r2
 80029cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 0308 	and.w	r3, r3, #8
 80029d6:	2b08      	cmp	r3, #8
 80029d8:	d11a      	bne.n	8002a10 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	015a      	lsls	r2, r3, #5
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	4413      	add	r3, r2
 80029e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e6:	461a      	mov	r2, r3
 80029e8:	2308      	movs	r3, #8
 80029ea:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	212c      	movs	r1, #44	; 0x2c
 80029f2:	fb01 f303 	mul.w	r3, r1, r3
 80029f6:	4413      	add	r3, r2
 80029f8:	3361      	adds	r3, #97	; 0x61
 80029fa:	2205      	movs	r2, #5
 80029fc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	b2d2      	uxtb	r2, r2
 8002a06:	4611      	mov	r1, r2
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f004 f9ca 	bl	8006da2 <USB_HC_Halt>
}
 8002a0e:	e22e      	b.n	8002e6e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	015a      	lsls	r2, r3, #5
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	4413      	add	r3, r2
 8002a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 0310 	and.w	r3, r3, #16
 8002a22:	2b10      	cmp	r3, #16
 8002a24:	d140      	bne.n	8002aa8 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	212c      	movs	r1, #44	; 0x2c
 8002a2c:	fb01 f303 	mul.w	r3, r1, r3
 8002a30:	4413      	add	r3, r2
 8002a32:	335c      	adds	r3, #92	; 0x5c
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	212c      	movs	r1, #44	; 0x2c
 8002a3e:	fb01 f303 	mul.w	r3, r1, r3
 8002a42:	4413      	add	r3, r2
 8002a44:	3361      	adds	r3, #97	; 0x61
 8002a46:	2203      	movs	r2, #3
 8002a48:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	212c      	movs	r1, #44	; 0x2c
 8002a50:	fb01 f303 	mul.w	r3, r1, r3
 8002a54:	4413      	add	r3, r2
 8002a56:	333d      	adds	r3, #61	; 0x3d
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d112      	bne.n	8002a84 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	212c      	movs	r1, #44	; 0x2c
 8002a64:	fb01 f303 	mul.w	r3, r1, r3
 8002a68:	4413      	add	r3, r2
 8002a6a:	333c      	adds	r3, #60	; 0x3c
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d108      	bne.n	8002a84 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	212c      	movs	r1, #44	; 0x2c
 8002a78:	fb01 f303 	mul.w	r3, r1, r3
 8002a7c:	4413      	add	r3, r2
 8002a7e:	333d      	adds	r3, #61	; 0x3d
 8002a80:	2201      	movs	r2, #1
 8002a82:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	b2d2      	uxtb	r2, r2
 8002a8c:	4611      	mov	r1, r2
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f004 f987 	bl	8006da2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	015a      	lsls	r2, r3, #5
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	2310      	movs	r3, #16
 8002aa4:	6093      	str	r3, [r2, #8]
}
 8002aa6:	e1e2      	b.n	8002e6e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	015a      	lsls	r2, r3, #5
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	4413      	add	r3, r2
 8002ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aba:	2b80      	cmp	r3, #128	; 0x80
 8002abc:	d164      	bne.n	8002b88 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d111      	bne.n	8002aea <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	212c      	movs	r1, #44	; 0x2c
 8002acc:	fb01 f303 	mul.w	r3, r1, r3
 8002ad0:	4413      	add	r3, r2
 8002ad2:	3361      	adds	r3, #97	; 0x61
 8002ad4:	2206      	movs	r2, #6
 8002ad6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	b2d2      	uxtb	r2, r2
 8002ae0:	4611      	mov	r1, r2
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f004 f95d 	bl	8006da2 <USB_HC_Halt>
 8002ae8:	e044      	b.n	8002b74 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	212c      	movs	r1, #44	; 0x2c
 8002af0:	fb01 f303 	mul.w	r3, r1, r3
 8002af4:	4413      	add	r3, r2
 8002af6:	335c      	adds	r3, #92	; 0x5c
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	1c5a      	adds	r2, r3, #1
 8002afc:	6879      	ldr	r1, [r7, #4]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	202c      	movs	r0, #44	; 0x2c
 8002b02:	fb00 f303 	mul.w	r3, r0, r3
 8002b06:	440b      	add	r3, r1
 8002b08:	335c      	adds	r3, #92	; 0x5c
 8002b0a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	212c      	movs	r1, #44	; 0x2c
 8002b12:	fb01 f303 	mul.w	r3, r1, r3
 8002b16:	4413      	add	r3, r2
 8002b18:	335c      	adds	r3, #92	; 0x5c
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d920      	bls.n	8002b62 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	212c      	movs	r1, #44	; 0x2c
 8002b26:	fb01 f303 	mul.w	r3, r1, r3
 8002b2a:	4413      	add	r3, r2
 8002b2c:	335c      	adds	r3, #92	; 0x5c
 8002b2e:	2200      	movs	r2, #0
 8002b30:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	212c      	movs	r1, #44	; 0x2c
 8002b38:	fb01 f303 	mul.w	r3, r1, r3
 8002b3c:	4413      	add	r3, r2
 8002b3e:	3360      	adds	r3, #96	; 0x60
 8002b40:	2204      	movs	r2, #4
 8002b42:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	b2d9      	uxtb	r1, r3
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	202c      	movs	r0, #44	; 0x2c
 8002b4e:	fb00 f303 	mul.w	r3, r0, r3
 8002b52:	4413      	add	r3, r2
 8002b54:	3360      	adds	r3, #96	; 0x60
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	461a      	mov	r2, r3
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f005 fc2a 	bl	80083b4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002b60:	e008      	b.n	8002b74 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	212c      	movs	r1, #44	; 0x2c
 8002b68:	fb01 f303 	mul.w	r3, r1, r3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	3360      	adds	r3, #96	; 0x60
 8002b70:	2202      	movs	r2, #2
 8002b72:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	015a      	lsls	r2, r3, #5
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b80:	461a      	mov	r2, r3
 8002b82:	2380      	movs	r3, #128	; 0x80
 8002b84:	6093      	str	r3, [r2, #8]
}
 8002b86:	e172      	b.n	8002e6e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	015a      	lsls	r2, r3, #5
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	4413      	add	r3, r2
 8002b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b9e:	d11b      	bne.n	8002bd8 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	212c      	movs	r1, #44	; 0x2c
 8002ba6:	fb01 f303 	mul.w	r3, r1, r3
 8002baa:	4413      	add	r3, r2
 8002bac:	3361      	adds	r3, #97	; 0x61
 8002bae:	2208      	movs	r2, #8
 8002bb0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	b2d2      	uxtb	r2, r2
 8002bba:	4611      	mov	r1, r2
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f004 f8f0 	bl	8006da2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	015a      	lsls	r2, r3, #5
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	4413      	add	r3, r2
 8002bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bce:	461a      	mov	r2, r3
 8002bd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bd4:	6093      	str	r3, [r2, #8]
}
 8002bd6:	e14a      	b.n	8002e6e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	015a      	lsls	r2, r3, #5
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	4413      	add	r3, r2
 8002be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	f040 813f 	bne.w	8002e6e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	212c      	movs	r1, #44	; 0x2c
 8002bf6:	fb01 f303 	mul.w	r3, r1, r3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3361      	adds	r3, #97	; 0x61
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d17d      	bne.n	8002d00 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	212c      	movs	r1, #44	; 0x2c
 8002c0a:	fb01 f303 	mul.w	r3, r1, r3
 8002c0e:	4413      	add	r3, r2
 8002c10:	3360      	adds	r3, #96	; 0x60
 8002c12:	2201      	movs	r2, #1
 8002c14:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	212c      	movs	r1, #44	; 0x2c
 8002c1c:	fb01 f303 	mul.w	r3, r1, r3
 8002c20:	4413      	add	r3, r2
 8002c22:	333f      	adds	r3, #63	; 0x3f
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d00a      	beq.n	8002c40 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	212c      	movs	r1, #44	; 0x2c
 8002c30:	fb01 f303 	mul.w	r3, r1, r3
 8002c34:	4413      	add	r3, r2
 8002c36:	333f      	adds	r3, #63	; 0x3f
 8002c38:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002c3a:	2b03      	cmp	r3, #3
 8002c3c:	f040 8100 	bne.w	8002e40 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d113      	bne.n	8002c70 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	212c      	movs	r1, #44	; 0x2c
 8002c4e:	fb01 f303 	mul.w	r3, r1, r3
 8002c52:	4413      	add	r3, r2
 8002c54:	3355      	adds	r3, #85	; 0x55
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	f083 0301 	eor.w	r3, r3, #1
 8002c5c:	b2d8      	uxtb	r0, r3
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	212c      	movs	r1, #44	; 0x2c
 8002c64:	fb01 f303 	mul.w	r3, r1, r3
 8002c68:	4413      	add	r3, r2
 8002c6a:	3355      	adds	r3, #85	; 0x55
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	f040 80e3 	bne.w	8002e40 <HCD_HC_OUT_IRQHandler+0x69c>
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	212c      	movs	r1, #44	; 0x2c
 8002c80:	fb01 f303 	mul.w	r3, r1, r3
 8002c84:	4413      	add	r3, r2
 8002c86:	334c      	adds	r3, #76	; 0x4c
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f000 80d8 	beq.w	8002e40 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	212c      	movs	r1, #44	; 0x2c
 8002c96:	fb01 f303 	mul.w	r3, r1, r3
 8002c9a:	4413      	add	r3, r2
 8002c9c:	334c      	adds	r3, #76	; 0x4c
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	202c      	movs	r0, #44	; 0x2c
 8002ca6:	fb00 f202 	mul.w	r2, r0, r2
 8002caa:	440a      	add	r2, r1
 8002cac:	3240      	adds	r2, #64	; 0x40
 8002cae:	8812      	ldrh	r2, [r2, #0]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	202c      	movs	r0, #44	; 0x2c
 8002cba:	fb00 f202 	mul.w	r2, r0, r2
 8002cbe:	440a      	add	r2, r1
 8002cc0:	3240      	adds	r2, #64	; 0x40
 8002cc2:	8812      	ldrh	r2, [r2, #0]
 8002cc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8002cc8:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 80b5 	beq.w	8002e40 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	212c      	movs	r1, #44	; 0x2c
 8002cdc:	fb01 f303 	mul.w	r3, r1, r3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	3355      	adds	r3, #85	; 0x55
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	f083 0301 	eor.w	r3, r3, #1
 8002cea:	b2d8      	uxtb	r0, r3
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	212c      	movs	r1, #44	; 0x2c
 8002cf2:	fb01 f303 	mul.w	r3, r1, r3
 8002cf6:	4413      	add	r3, r2
 8002cf8:	3355      	adds	r3, #85	; 0x55
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	701a      	strb	r2, [r3, #0]
 8002cfe:	e09f      	b.n	8002e40 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	212c      	movs	r1, #44	; 0x2c
 8002d06:	fb01 f303 	mul.w	r3, r1, r3
 8002d0a:	4413      	add	r3, r2
 8002d0c:	3361      	adds	r3, #97	; 0x61
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b03      	cmp	r3, #3
 8002d12:	d109      	bne.n	8002d28 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	212c      	movs	r1, #44	; 0x2c
 8002d1a:	fb01 f303 	mul.w	r3, r1, r3
 8002d1e:	4413      	add	r3, r2
 8002d20:	3360      	adds	r3, #96	; 0x60
 8002d22:	2202      	movs	r2, #2
 8002d24:	701a      	strb	r2, [r3, #0]
 8002d26:	e08b      	b.n	8002e40 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	212c      	movs	r1, #44	; 0x2c
 8002d2e:	fb01 f303 	mul.w	r3, r1, r3
 8002d32:	4413      	add	r3, r2
 8002d34:	3361      	adds	r3, #97	; 0x61
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	2b04      	cmp	r3, #4
 8002d3a:	d109      	bne.n	8002d50 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	212c      	movs	r1, #44	; 0x2c
 8002d42:	fb01 f303 	mul.w	r3, r1, r3
 8002d46:	4413      	add	r3, r2
 8002d48:	3360      	adds	r3, #96	; 0x60
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	701a      	strb	r2, [r3, #0]
 8002d4e:	e077      	b.n	8002e40 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	212c      	movs	r1, #44	; 0x2c
 8002d56:	fb01 f303 	mul.w	r3, r1, r3
 8002d5a:	4413      	add	r3, r2
 8002d5c:	3361      	adds	r3, #97	; 0x61
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b05      	cmp	r3, #5
 8002d62:	d109      	bne.n	8002d78 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	212c      	movs	r1, #44	; 0x2c
 8002d6a:	fb01 f303 	mul.w	r3, r1, r3
 8002d6e:	4413      	add	r3, r2
 8002d70:	3360      	adds	r3, #96	; 0x60
 8002d72:	2205      	movs	r2, #5
 8002d74:	701a      	strb	r2, [r3, #0]
 8002d76:	e063      	b.n	8002e40 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	212c      	movs	r1, #44	; 0x2c
 8002d7e:	fb01 f303 	mul.w	r3, r1, r3
 8002d82:	4413      	add	r3, r2
 8002d84:	3361      	adds	r3, #97	; 0x61
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	2b06      	cmp	r3, #6
 8002d8a:	d009      	beq.n	8002da0 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	212c      	movs	r1, #44	; 0x2c
 8002d92:	fb01 f303 	mul.w	r3, r1, r3
 8002d96:	4413      	add	r3, r2
 8002d98:	3361      	adds	r3, #97	; 0x61
 8002d9a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d9c:	2b08      	cmp	r3, #8
 8002d9e:	d14f      	bne.n	8002e40 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	212c      	movs	r1, #44	; 0x2c
 8002da6:	fb01 f303 	mul.w	r3, r1, r3
 8002daa:	4413      	add	r3, r2
 8002dac:	335c      	adds	r3, #92	; 0x5c
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	1c5a      	adds	r2, r3, #1
 8002db2:	6879      	ldr	r1, [r7, #4]
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	202c      	movs	r0, #44	; 0x2c
 8002db8:	fb00 f303 	mul.w	r3, r0, r3
 8002dbc:	440b      	add	r3, r1
 8002dbe:	335c      	adds	r3, #92	; 0x5c
 8002dc0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	212c      	movs	r1, #44	; 0x2c
 8002dc8:	fb01 f303 	mul.w	r3, r1, r3
 8002dcc:	4413      	add	r3, r2
 8002dce:	335c      	adds	r3, #92	; 0x5c
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d912      	bls.n	8002dfc <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	212c      	movs	r1, #44	; 0x2c
 8002ddc:	fb01 f303 	mul.w	r3, r1, r3
 8002de0:	4413      	add	r3, r2
 8002de2:	335c      	adds	r3, #92	; 0x5c
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	212c      	movs	r1, #44	; 0x2c
 8002dee:	fb01 f303 	mul.w	r3, r1, r3
 8002df2:	4413      	add	r3, r2
 8002df4:	3360      	adds	r3, #96	; 0x60
 8002df6:	2204      	movs	r2, #4
 8002df8:	701a      	strb	r2, [r3, #0]
 8002dfa:	e021      	b.n	8002e40 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	212c      	movs	r1, #44	; 0x2c
 8002e02:	fb01 f303 	mul.w	r3, r1, r3
 8002e06:	4413      	add	r3, r2
 8002e08:	3360      	adds	r3, #96	; 0x60
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	015a      	lsls	r2, r3, #5
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	4413      	add	r3, r2
 8002e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e24:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e2c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	015a      	lsls	r2, r3, #5
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	4413      	add	r3, r2
 8002e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	015a      	lsls	r2, r3, #5
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	4413      	add	r3, r2
 8002e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	2302      	movs	r3, #2
 8002e50:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	b2d9      	uxtb	r1, r3
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	202c      	movs	r0, #44	; 0x2c
 8002e5c:	fb00 f303 	mul.w	r3, r0, r3
 8002e60:	4413      	add	r3, r2
 8002e62:	3360      	adds	r3, #96	; 0x60
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	461a      	mov	r2, r3
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f005 faa3 	bl	80083b4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002e6e:	bf00      	nop
 8002e70:	3720      	adds	r7, #32
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b08a      	sub	sp, #40	; 0x28
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e86:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	f003 030f 	and.w	r3, r3, #15
 8002e96:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	0c5b      	lsrs	r3, r3, #17
 8002e9c:	f003 030f 	and.w	r3, r3, #15
 8002ea0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	091b      	lsrs	r3, r3, #4
 8002ea6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002eaa:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d004      	beq.n	8002ebc <HCD_RXQLVL_IRQHandler+0x46>
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	2b05      	cmp	r3, #5
 8002eb6:	f000 80a9 	beq.w	800300c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002eba:	e0aa      	b.n	8003012 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f000 80a6 	beq.w	8003010 <HCD_RXQLVL_IRQHandler+0x19a>
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	212c      	movs	r1, #44	; 0x2c
 8002eca:	fb01 f303 	mul.w	r3, r1, r3
 8002ece:	4413      	add	r3, r2
 8002ed0:	3344      	adds	r3, #68	; 0x44
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f000 809b 	beq.w	8003010 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	212c      	movs	r1, #44	; 0x2c
 8002ee0:	fb01 f303 	mul.w	r3, r1, r3
 8002ee4:	4413      	add	r3, r2
 8002ee6:	3350      	adds	r3, #80	; 0x50
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	441a      	add	r2, r3
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	202c      	movs	r0, #44	; 0x2c
 8002ef4:	fb00 f303 	mul.w	r3, r0, r3
 8002ef8:	440b      	add	r3, r1
 8002efa:	334c      	adds	r3, #76	; 0x4c
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d87a      	bhi.n	8002ff8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6818      	ldr	r0, [r3, #0]
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	212c      	movs	r1, #44	; 0x2c
 8002f0c:	fb01 f303 	mul.w	r3, r1, r3
 8002f10:	4413      	add	r3, r2
 8002f12:	3344      	adds	r3, #68	; 0x44
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	b292      	uxth	r2, r2
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	f003 fac2 	bl	80064a4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	212c      	movs	r1, #44	; 0x2c
 8002f26:	fb01 f303 	mul.w	r3, r1, r3
 8002f2a:	4413      	add	r3, r2
 8002f2c:	3344      	adds	r3, #68	; 0x44
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	441a      	add	r2, r3
 8002f34:	6879      	ldr	r1, [r7, #4]
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	202c      	movs	r0, #44	; 0x2c
 8002f3a:	fb00 f303 	mul.w	r3, r0, r3
 8002f3e:	440b      	add	r3, r1
 8002f40:	3344      	adds	r3, #68	; 0x44
 8002f42:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	212c      	movs	r1, #44	; 0x2c
 8002f4a:	fb01 f303 	mul.w	r3, r1, r3
 8002f4e:	4413      	add	r3, r2
 8002f50:	3350      	adds	r3, #80	; 0x50
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	441a      	add	r2, r3
 8002f58:	6879      	ldr	r1, [r7, #4]
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	202c      	movs	r0, #44	; 0x2c
 8002f5e:	fb00 f303 	mul.w	r3, r0, r3
 8002f62:	440b      	add	r3, r1
 8002f64:	3350      	adds	r3, #80	; 0x50
 8002f66:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	015a      	lsls	r2, r3, #5
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
 8002f6e:	4413      	add	r3, r2
 8002f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	0cdb      	lsrs	r3, r3, #19
 8002f78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f7c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	212c      	movs	r1, #44	; 0x2c
 8002f84:	fb01 f303 	mul.w	r3, r1, r3
 8002f88:	4413      	add	r3, r2
 8002f8a:	3340      	adds	r3, #64	; 0x40
 8002f8c:	881b      	ldrh	r3, [r3, #0]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d13c      	bne.n	8003010 <HCD_RXQLVL_IRQHandler+0x19a>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d039      	beq.n	8003010 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	015a      	lsls	r2, r3, #5
 8002fa0:	6a3b      	ldr	r3, [r7, #32]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002fb2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002fba:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	015a      	lsls	r2, r3, #5
 8002fc0:	6a3b      	ldr	r3, [r7, #32]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc8:	461a      	mov	r2, r3
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	212c      	movs	r1, #44	; 0x2c
 8002fd4:	fb01 f303 	mul.w	r3, r1, r3
 8002fd8:	4413      	add	r3, r2
 8002fda:	3354      	adds	r3, #84	; 0x54
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	f083 0301 	eor.w	r3, r3, #1
 8002fe2:	b2d8      	uxtb	r0, r3
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	212c      	movs	r1, #44	; 0x2c
 8002fea:	fb01 f303 	mul.w	r3, r1, r3
 8002fee:	4413      	add	r3, r2
 8002ff0:	3354      	adds	r3, #84	; 0x54
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	701a      	strb	r2, [r3, #0]
      break;
 8002ff6:	e00b      	b.n	8003010 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	212c      	movs	r1, #44	; 0x2c
 8002ffe:	fb01 f303 	mul.w	r3, r1, r3
 8003002:	4413      	add	r3, r2
 8003004:	3360      	adds	r3, #96	; 0x60
 8003006:	2204      	movs	r2, #4
 8003008:	701a      	strb	r2, [r3, #0]
      break;
 800300a:	e001      	b.n	8003010 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800300c:	bf00      	nop
 800300e:	e000      	b.n	8003012 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003010:	bf00      	nop
  }
}
 8003012:	bf00      	nop
 8003014:	3728      	adds	r7, #40	; 0x28
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b086      	sub	sp, #24
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003046:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b02      	cmp	r3, #2
 8003050:	d10b      	bne.n	800306a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	2b01      	cmp	r3, #1
 800305a:	d102      	bne.n	8003062 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f005 f98d 	bl	800837c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	f043 0302 	orr.w	r3, r3, #2
 8003068:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f003 0308 	and.w	r3, r3, #8
 8003070:	2b08      	cmp	r3, #8
 8003072:	d132      	bne.n	80030da <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	f043 0308 	orr.w	r3, r3, #8
 800307a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f003 0304 	and.w	r3, r3, #4
 8003082:	2b04      	cmp	r3, #4
 8003084:	d126      	bne.n	80030d4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	2b02      	cmp	r3, #2
 800308c:	d113      	bne.n	80030b6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003094:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003098:	d106      	bne.n	80030a8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2102      	movs	r1, #2
 80030a0:	4618      	mov	r0, r3
 80030a2:	f003 fb6d 	bl	8006780 <USB_InitFSLSPClkSel>
 80030a6:	e011      	b.n	80030cc <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2101      	movs	r1, #1
 80030ae:	4618      	mov	r0, r3
 80030b0:	f003 fb66 	bl	8006780 <USB_InitFSLSPClkSel>
 80030b4:	e00a      	b.n	80030cc <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d106      	bne.n	80030cc <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030c4:	461a      	mov	r2, r3
 80030c6:	f64e 2360 	movw	r3, #60000	; 0xea60
 80030ca:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f005 f97f 	bl	80083d0 <HAL_HCD_PortEnabled_Callback>
 80030d2:	e002      	b.n	80030da <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f005 f989 	bl	80083ec <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f003 0320 	and.w	r3, r3, #32
 80030e0:	2b20      	cmp	r3, #32
 80030e2:	d103      	bne.n	80030ec <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	f043 0320 	orr.w	r3, r3, #32
 80030ea:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80030f2:	461a      	mov	r2, r3
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	6013      	str	r3, [r2, #0]
}
 80030f8:	bf00      	nop
 80030fa:	3718      	adds	r7, #24
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e12b      	b.n	800336a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d106      	bne.n	800312c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7fd fe16 	bl	8000d58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2224      	movs	r2, #36	; 0x24
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 0201 	bic.w	r2, r2, #1
 8003142:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003152:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003162:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003164:	f001 fa20 	bl	80045a8 <HAL_RCC_GetPCLK1Freq>
 8003168:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	4a81      	ldr	r2, [pc, #516]	; (8003374 <HAL_I2C_Init+0x274>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d807      	bhi.n	8003184 <HAL_I2C_Init+0x84>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4a80      	ldr	r2, [pc, #512]	; (8003378 <HAL_I2C_Init+0x278>)
 8003178:	4293      	cmp	r3, r2
 800317a:	bf94      	ite	ls
 800317c:	2301      	movls	r3, #1
 800317e:	2300      	movhi	r3, #0
 8003180:	b2db      	uxtb	r3, r3
 8003182:	e006      	b.n	8003192 <HAL_I2C_Init+0x92>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4a7d      	ldr	r2, [pc, #500]	; (800337c <HAL_I2C_Init+0x27c>)
 8003188:	4293      	cmp	r3, r2
 800318a:	bf94      	ite	ls
 800318c:	2301      	movls	r3, #1
 800318e:	2300      	movhi	r3, #0
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e0e7      	b.n	800336a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	4a78      	ldr	r2, [pc, #480]	; (8003380 <HAL_I2C_Init+0x280>)
 800319e:	fba2 2303 	umull	r2, r3, r2, r3
 80031a2:	0c9b      	lsrs	r3, r3, #18
 80031a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6a1b      	ldr	r3, [r3, #32]
 80031c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	4a6a      	ldr	r2, [pc, #424]	; (8003374 <HAL_I2C_Init+0x274>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d802      	bhi.n	80031d4 <HAL_I2C_Init+0xd4>
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	3301      	adds	r3, #1
 80031d2:	e009      	b.n	80031e8 <HAL_I2C_Init+0xe8>
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031da:	fb02 f303 	mul.w	r3, r2, r3
 80031de:	4a69      	ldr	r2, [pc, #420]	; (8003384 <HAL_I2C_Init+0x284>)
 80031e0:	fba2 2303 	umull	r2, r3, r2, r3
 80031e4:	099b      	lsrs	r3, r3, #6
 80031e6:	3301      	adds	r3, #1
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	6812      	ldr	r2, [r2, #0]
 80031ec:	430b      	orrs	r3, r1
 80031ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	69db      	ldr	r3, [r3, #28]
 80031f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	495c      	ldr	r1, [pc, #368]	; (8003374 <HAL_I2C_Init+0x274>)
 8003204:	428b      	cmp	r3, r1
 8003206:	d819      	bhi.n	800323c <HAL_I2C_Init+0x13c>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	1e59      	subs	r1, r3, #1
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	fbb1 f3f3 	udiv	r3, r1, r3
 8003216:	1c59      	adds	r1, r3, #1
 8003218:	f640 73fc 	movw	r3, #4092	; 0xffc
 800321c:	400b      	ands	r3, r1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00a      	beq.n	8003238 <HAL_I2C_Init+0x138>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	1e59      	subs	r1, r3, #1
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003230:	3301      	adds	r3, #1
 8003232:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003236:	e051      	b.n	80032dc <HAL_I2C_Init+0x1dc>
 8003238:	2304      	movs	r3, #4
 800323a:	e04f      	b.n	80032dc <HAL_I2C_Init+0x1dc>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d111      	bne.n	8003268 <HAL_I2C_Init+0x168>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	1e58      	subs	r0, r3, #1
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6859      	ldr	r1, [r3, #4]
 800324c:	460b      	mov	r3, r1
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	440b      	add	r3, r1
 8003252:	fbb0 f3f3 	udiv	r3, r0, r3
 8003256:	3301      	adds	r3, #1
 8003258:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800325c:	2b00      	cmp	r3, #0
 800325e:	bf0c      	ite	eq
 8003260:	2301      	moveq	r3, #1
 8003262:	2300      	movne	r3, #0
 8003264:	b2db      	uxtb	r3, r3
 8003266:	e012      	b.n	800328e <HAL_I2C_Init+0x18e>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	1e58      	subs	r0, r3, #1
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6859      	ldr	r1, [r3, #4]
 8003270:	460b      	mov	r3, r1
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	440b      	add	r3, r1
 8003276:	0099      	lsls	r1, r3, #2
 8003278:	440b      	add	r3, r1
 800327a:	fbb0 f3f3 	udiv	r3, r0, r3
 800327e:	3301      	adds	r3, #1
 8003280:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003284:	2b00      	cmp	r3, #0
 8003286:	bf0c      	ite	eq
 8003288:	2301      	moveq	r3, #1
 800328a:	2300      	movne	r3, #0
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <HAL_I2C_Init+0x196>
 8003292:	2301      	movs	r3, #1
 8003294:	e022      	b.n	80032dc <HAL_I2C_Init+0x1dc>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d10e      	bne.n	80032bc <HAL_I2C_Init+0x1bc>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	1e58      	subs	r0, r3, #1
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6859      	ldr	r1, [r3, #4]
 80032a6:	460b      	mov	r3, r1
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	440b      	add	r3, r1
 80032ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80032b0:	3301      	adds	r3, #1
 80032b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032ba:	e00f      	b.n	80032dc <HAL_I2C_Init+0x1dc>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	1e58      	subs	r0, r3, #1
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6859      	ldr	r1, [r3, #4]
 80032c4:	460b      	mov	r3, r1
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	0099      	lsls	r1, r3, #2
 80032cc:	440b      	add	r3, r1
 80032ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80032d2:	3301      	adds	r3, #1
 80032d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032dc:	6879      	ldr	r1, [r7, #4]
 80032de:	6809      	ldr	r1, [r1, #0]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	69da      	ldr	r2, [r3, #28]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	431a      	orrs	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800330a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6911      	ldr	r1, [r2, #16]
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	68d2      	ldr	r2, [r2, #12]
 8003316:	4311      	orrs	r1, r2
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	6812      	ldr	r2, [r2, #0]
 800331c:	430b      	orrs	r3, r1
 800331e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	695a      	ldr	r2, [r3, #20]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	431a      	orrs	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	430a      	orrs	r2, r1
 800333a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f042 0201 	orr.w	r2, r2, #1
 800334a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2220      	movs	r2, #32
 8003356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	000186a0 	.word	0x000186a0
 8003378:	001e847f 	.word	0x001e847f
 800337c:	003d08ff 	.word	0x003d08ff
 8003380:	431bde83 	.word	0x431bde83
 8003384:	10624dd3 	.word	0x10624dd3

08003388 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b088      	sub	sp, #32
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e128      	b.n	80035ec <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d109      	bne.n	80033ba <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a90      	ldr	r2, [pc, #576]	; (80035f4 <HAL_I2S_Init+0x26c>)
 80033b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f7fd fd17 	bl	8000de8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2202      	movs	r2, #2
 80033be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	69db      	ldr	r3, [r3, #28]
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	6812      	ldr	r2, [r2, #0]
 80033cc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80033d0:	f023 030f 	bic.w	r3, r3, #15
 80033d4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2202      	movs	r2, #2
 80033dc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d060      	beq.n	80034a8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d102      	bne.n	80033f4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80033ee:	2310      	movs	r3, #16
 80033f0:	617b      	str	r3, [r7, #20]
 80033f2:	e001      	b.n	80033f8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80033f4:	2320      	movs	r3, #32
 80033f6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	2b20      	cmp	r3, #32
 80033fe:	d802      	bhi.n	8003406 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003406:	2001      	movs	r0, #1
 8003408:	f001 f9d8 	bl	80047bc <HAL_RCCEx_GetPeriphCLKFreq>
 800340c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003416:	d125      	bne.n	8003464 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d010      	beq.n	8003442 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	fbb2 f2f3 	udiv	r2, r2, r3
 800342a:	4613      	mov	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	4413      	add	r3, r2
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	461a      	mov	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	fbb2 f3f3 	udiv	r3, r2, r3
 800343c:	3305      	adds	r3, #5
 800343e:	613b      	str	r3, [r7, #16]
 8003440:	e01f      	b.n	8003482 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	fbb2 f2f3 	udiv	r2, r2, r3
 800344c:	4613      	mov	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	4413      	add	r3, r2
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	461a      	mov	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	fbb2 f3f3 	udiv	r3, r2, r3
 800345e:	3305      	adds	r3, #5
 8003460:	613b      	str	r3, [r7, #16]
 8003462:	e00e      	b.n	8003482 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	fbb2 f2f3 	udiv	r2, r2, r3
 800346c:	4613      	mov	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4413      	add	r3, r2
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	461a      	mov	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	fbb2 f3f3 	udiv	r3, r2, r3
 800347e:	3305      	adds	r3, #5
 8003480:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	4a5c      	ldr	r2, [pc, #368]	; (80035f8 <HAL_I2S_Init+0x270>)
 8003486:	fba2 2303 	umull	r2, r3, r2, r3
 800348a:	08db      	lsrs	r3, r3, #3
 800348c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	085b      	lsrs	r3, r3, #1
 800349e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	021b      	lsls	r3, r3, #8
 80034a4:	61bb      	str	r3, [r7, #24]
 80034a6:	e003      	b.n	80034b0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80034a8:	2302      	movs	r3, #2
 80034aa:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80034ac:	2300      	movs	r3, #0
 80034ae:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d902      	bls.n	80034bc <HAL_I2S_Init+0x134>
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	2bff      	cmp	r3, #255	; 0xff
 80034ba:	d907      	bls.n	80034cc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c0:	f043 0210 	orr.w	r2, r3, #16
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e08f      	b.n	80035ec <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	691a      	ldr	r2, [r3, #16]
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	ea42 0103 	orr.w	r1, r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	69fa      	ldr	r2, [r7, #28]
 80034dc:	430a      	orrs	r2, r1
 80034de:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80034ea:	f023 030f 	bic.w	r3, r3, #15
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	6851      	ldr	r1, [r2, #4]
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	6892      	ldr	r2, [r2, #8]
 80034f6:	4311      	orrs	r1, r2
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	68d2      	ldr	r2, [r2, #12]
 80034fc:	4311      	orrs	r1, r2
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	6992      	ldr	r2, [r2, #24]
 8003502:	430a      	orrs	r2, r1
 8003504:	431a      	orrs	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800350e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d161      	bne.n	80035dc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a38      	ldr	r2, [pc, #224]	; (80035fc <HAL_I2S_Init+0x274>)
 800351c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a37      	ldr	r2, [pc, #220]	; (8003600 <HAL_I2S_Init+0x278>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d101      	bne.n	800352c <HAL_I2S_Init+0x1a4>
 8003528:	4b36      	ldr	r3, [pc, #216]	; (8003604 <HAL_I2S_Init+0x27c>)
 800352a:	e001      	b.n	8003530 <HAL_I2S_Init+0x1a8>
 800352c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003530:	69db      	ldr	r3, [r3, #28]
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	6812      	ldr	r2, [r2, #0]
 8003536:	4932      	ldr	r1, [pc, #200]	; (8003600 <HAL_I2S_Init+0x278>)
 8003538:	428a      	cmp	r2, r1
 800353a:	d101      	bne.n	8003540 <HAL_I2S_Init+0x1b8>
 800353c:	4a31      	ldr	r2, [pc, #196]	; (8003604 <HAL_I2S_Init+0x27c>)
 800353e:	e001      	b.n	8003544 <HAL_I2S_Init+0x1bc>
 8003540:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003544:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003548:	f023 030f 	bic.w	r3, r3, #15
 800354c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a2b      	ldr	r2, [pc, #172]	; (8003600 <HAL_I2S_Init+0x278>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d101      	bne.n	800355c <HAL_I2S_Init+0x1d4>
 8003558:	4b2a      	ldr	r3, [pc, #168]	; (8003604 <HAL_I2S_Init+0x27c>)
 800355a:	e001      	b.n	8003560 <HAL_I2S_Init+0x1d8>
 800355c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003560:	2202      	movs	r2, #2
 8003562:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a25      	ldr	r2, [pc, #148]	; (8003600 <HAL_I2S_Init+0x278>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d101      	bne.n	8003572 <HAL_I2S_Init+0x1ea>
 800356e:	4b25      	ldr	r3, [pc, #148]	; (8003604 <HAL_I2S_Init+0x27c>)
 8003570:	e001      	b.n	8003576 <HAL_I2S_Init+0x1ee>
 8003572:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003576:	69db      	ldr	r3, [r3, #28]
 8003578:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003582:	d003      	beq.n	800358c <HAL_I2S_Init+0x204>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d103      	bne.n	8003594 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800358c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003590:	613b      	str	r3, [r7, #16]
 8003592:	e001      	b.n	8003598 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003594:	2300      	movs	r3, #0
 8003596:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80035a2:	4313      	orrs	r3, r2
 80035a4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80035ac:	4313      	orrs	r3, r2
 80035ae:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80035b6:	4313      	orrs	r3, r2
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	897b      	ldrh	r3, [r7, #10]
 80035bc:	4313      	orrs	r3, r2
 80035be:	b29b      	uxth	r3, r3
 80035c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80035c4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a0d      	ldr	r2, [pc, #52]	; (8003600 <HAL_I2S_Init+0x278>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d101      	bne.n	80035d4 <HAL_I2S_Init+0x24c>
 80035d0:	4b0c      	ldr	r3, [pc, #48]	; (8003604 <HAL_I2S_Init+0x27c>)
 80035d2:	e001      	b.n	80035d8 <HAL_I2S_Init+0x250>
 80035d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035d8:	897a      	ldrh	r2, [r7, #10]
 80035da:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3720      	adds	r7, #32
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	080036ff 	.word	0x080036ff
 80035f8:	cccccccd 	.word	0xcccccccd
 80035fc:	08003815 	.word	0x08003815
 8003600:	40003800 	.word	0x40003800
 8003604:	40003400 	.word	0x40003400

08003608 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003650:	881a      	ldrh	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365c:	1c9a      	adds	r2, r3, #2
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003666:	b29b      	uxth	r3, r3
 8003668:	3b01      	subs	r3, #1
 800366a:	b29a      	uxth	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003674:	b29b      	uxth	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10e      	bne.n	8003698 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003688:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7ff ffb8 	bl	8003608 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003698:	bf00      	nop
 800369a:	3708      	adds	r7, #8
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68da      	ldr	r2, [r3, #12]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b2:	b292      	uxth	r2, r2
 80036b4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ba:	1c9a      	adds	r2, r3, #2
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	3b01      	subs	r3, #1
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d10e      	bne.n	80036f6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036e6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f7ff ff93 	bl	800361c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80036f6:	bf00      	nop
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b086      	sub	sp, #24
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b04      	cmp	r3, #4
 8003718:	d13a      	bne.n	8003790 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b01      	cmp	r3, #1
 8003722:	d109      	bne.n	8003738 <I2S_IRQHandler+0x3a>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800372e:	2b40      	cmp	r3, #64	; 0x40
 8003730:	d102      	bne.n	8003738 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7ff ffb4 	bl	80036a0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373e:	2b40      	cmp	r3, #64	; 0x40
 8003740:	d126      	bne.n	8003790 <I2S_IRQHandler+0x92>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f003 0320 	and.w	r3, r3, #32
 800374c:	2b20      	cmp	r3, #32
 800374e:	d11f      	bne.n	8003790 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685a      	ldr	r2, [r3, #4]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800375e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003760:	2300      	movs	r3, #0
 8003762:	613b      	str	r3, [r7, #16]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	613b      	str	r3, [r7, #16]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	613b      	str	r3, [r7, #16]
 8003774:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003782:	f043 0202 	orr.w	r2, r3, #2
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7ff ff50 	bl	8003630 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003796:	b2db      	uxtb	r3, r3
 8003798:	2b03      	cmp	r3, #3
 800379a:	d136      	bne.n	800380a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d109      	bne.n	80037ba <I2S_IRQHandler+0xbc>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b0:	2b80      	cmp	r3, #128	; 0x80
 80037b2:	d102      	bne.n	80037ba <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f7ff ff45 	bl	8003644 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f003 0308 	and.w	r3, r3, #8
 80037c0:	2b08      	cmp	r3, #8
 80037c2:	d122      	bne.n	800380a <I2S_IRQHandler+0x10c>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f003 0320 	and.w	r3, r3, #32
 80037ce:	2b20      	cmp	r3, #32
 80037d0:	d11b      	bne.n	800380a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	685a      	ldr	r2, [r3, #4]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037e0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80037e2:	2300      	movs	r3, #0
 80037e4:	60fb      	str	r3, [r7, #12]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	60fb      	str	r3, [r7, #12]
 80037ee:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fc:	f043 0204 	orr.w	r2, r3, #4
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f7ff ff13 	bl	8003630 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800380a:	bf00      	nop
 800380c:	3718      	adds	r7, #24
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
	...

08003814 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b088      	sub	sp, #32
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a92      	ldr	r2, [pc, #584]	; (8003a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d101      	bne.n	8003832 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800382e:	4b92      	ldr	r3, [pc, #584]	; (8003a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003830:	e001      	b.n	8003836 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003832:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a8b      	ldr	r2, [pc, #556]	; (8003a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d101      	bne.n	8003850 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800384c:	4b8a      	ldr	r3, [pc, #552]	; (8003a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800384e:	e001      	b.n	8003854 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003850:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003860:	d004      	beq.n	800386c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	f040 8099 	bne.w	800399e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b02      	cmp	r3, #2
 8003874:	d107      	bne.n	8003886 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800387c:	2b00      	cmp	r3, #0
 800387e:	d002      	beq.n	8003886 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 f925 	bl	8003ad0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	2b01      	cmp	r3, #1
 800388e:	d107      	bne.n	80038a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003896:	2b00      	cmp	r3, #0
 8003898:	d002      	beq.n	80038a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f9c8 	bl	8003c30 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a6:	2b40      	cmp	r3, #64	; 0x40
 80038a8:	d13a      	bne.n	8003920 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	f003 0320 	and.w	r3, r3, #32
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d035      	beq.n	8003920 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a6e      	ldr	r2, [pc, #440]	; (8003a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d101      	bne.n	80038c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80038be:	4b6e      	ldr	r3, [pc, #440]	; (8003a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038c0:	e001      	b.n	80038c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80038c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4969      	ldr	r1, [pc, #420]	; (8003a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038ce:	428b      	cmp	r3, r1
 80038d0:	d101      	bne.n	80038d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80038d2:	4b69      	ldr	r3, [pc, #420]	; (8003a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038d4:	e001      	b.n	80038da <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80038d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038de:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	685a      	ldr	r2, [r3, #4]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038ee:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80038f0:	2300      	movs	r3, #0
 80038f2:	60fb      	str	r3, [r7, #12]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	60fb      	str	r3, [r7, #12]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	60fb      	str	r3, [r7, #12]
 8003904:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003912:	f043 0202 	orr.w	r2, r3, #2
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7ff fe88 	bl	8003630 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	f003 0308 	and.w	r3, r3, #8
 8003926:	2b08      	cmp	r3, #8
 8003928:	f040 80c3 	bne.w	8003ab2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	f003 0320 	and.w	r3, r3, #32
 8003932:	2b00      	cmp	r3, #0
 8003934:	f000 80bd 	beq.w	8003ab2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003946:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a49      	ldr	r2, [pc, #292]	; (8003a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d101      	bne.n	8003956 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003952:	4b49      	ldr	r3, [pc, #292]	; (8003a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003954:	e001      	b.n	800395a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003956:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4944      	ldr	r1, [pc, #272]	; (8003a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003962:	428b      	cmp	r3, r1
 8003964:	d101      	bne.n	800396a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003966:	4b44      	ldr	r3, [pc, #272]	; (8003a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003968:	e001      	b.n	800396e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800396a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800396e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003972:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003974:	2300      	movs	r3, #0
 8003976:	60bb      	str	r3, [r7, #8]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	60bb      	str	r3, [r7, #8]
 8003980:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398e:	f043 0204 	orr.w	r2, r3, #4
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7ff fe4a 	bl	8003630 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800399c:	e089      	b.n	8003ab2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d107      	bne.n	80039b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d002      	beq.n	80039b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f8be 	bl	8003b34 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d107      	bne.n	80039d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d002      	beq.n	80039d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 f8fd 	bl	8003bcc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d8:	2b40      	cmp	r3, #64	; 0x40
 80039da:	d12f      	bne.n	8003a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	f003 0320 	and.w	r3, r3, #32
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d02a      	beq.n	8003a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039f4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a1e      	ldr	r2, [pc, #120]	; (8003a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d101      	bne.n	8003a04 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003a00:	4b1d      	ldr	r3, [pc, #116]	; (8003a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a02:	e001      	b.n	8003a08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003a04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a08:	685a      	ldr	r2, [r3, #4]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4919      	ldr	r1, [pc, #100]	; (8003a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a10:	428b      	cmp	r3, r1
 8003a12:	d101      	bne.n	8003a18 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003a14:	4b18      	ldr	r3, [pc, #96]	; (8003a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a16:	e001      	b.n	8003a1c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003a18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a1c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a20:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2e:	f043 0202 	orr.w	r2, r3, #2
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f7ff fdfa 	bl	8003630 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	f003 0308 	and.w	r3, r3, #8
 8003a42:	2b08      	cmp	r3, #8
 8003a44:	d136      	bne.n	8003ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	f003 0320 	and.w	r3, r3, #32
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d031      	beq.n	8003ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a07      	ldr	r2, [pc, #28]	; (8003a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d101      	bne.n	8003a5e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003a5a:	4b07      	ldr	r3, [pc, #28]	; (8003a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a5c:	e001      	b.n	8003a62 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003a5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4902      	ldr	r1, [pc, #8]	; (8003a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a6a:	428b      	cmp	r3, r1
 8003a6c:	d106      	bne.n	8003a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003a6e:	4b02      	ldr	r3, [pc, #8]	; (8003a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a70:	e006      	b.n	8003a80 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003a72:	bf00      	nop
 8003a74:	40003800 	.word	0x40003800
 8003a78:	40003400 	.word	0x40003400
 8003a7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a80:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a84:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a94:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa2:	f043 0204 	orr.w	r2, r3, #4
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7ff fdc0 	bl	8003630 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ab0:	e000      	b.n	8003ab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ab2:	bf00      	nop
}
 8003ab4:	bf00      	nop
 8003ab6:	3720      	adds	r7, #32
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003adc:	1c99      	adds	r1, r3, #2
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	6251      	str	r1, [r2, #36]	; 0x24
 8003ae2:	881a      	ldrh	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d113      	bne.n	8003b2a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b10:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d106      	bne.n	8003b2a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f7ff ffc9 	bl	8003abc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b2a:	bf00      	nop
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
	...

08003b34 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b40:	1c99      	adds	r1, r3, #2
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	6251      	str	r1, [r2, #36]	; 0x24
 8003b46:	8819      	ldrh	r1, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a1d      	ldr	r2, [pc, #116]	; (8003bc4 <I2SEx_TxISR_I2SExt+0x90>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d101      	bne.n	8003b56 <I2SEx_TxISR_I2SExt+0x22>
 8003b52:	4b1d      	ldr	r3, [pc, #116]	; (8003bc8 <I2SEx_TxISR_I2SExt+0x94>)
 8003b54:	e001      	b.n	8003b5a <I2SEx_TxISR_I2SExt+0x26>
 8003b56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b5a:	460a      	mov	r2, r1
 8003b5c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	3b01      	subs	r3, #1
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d121      	bne.n	8003bba <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a12      	ldr	r2, [pc, #72]	; (8003bc4 <I2SEx_TxISR_I2SExt+0x90>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d101      	bne.n	8003b84 <I2SEx_TxISR_I2SExt+0x50>
 8003b80:	4b11      	ldr	r3, [pc, #68]	; (8003bc8 <I2SEx_TxISR_I2SExt+0x94>)
 8003b82:	e001      	b.n	8003b88 <I2SEx_TxISR_I2SExt+0x54>
 8003b84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	490d      	ldr	r1, [pc, #52]	; (8003bc4 <I2SEx_TxISR_I2SExt+0x90>)
 8003b90:	428b      	cmp	r3, r1
 8003b92:	d101      	bne.n	8003b98 <I2SEx_TxISR_I2SExt+0x64>
 8003b94:	4b0c      	ldr	r3, [pc, #48]	; (8003bc8 <I2SEx_TxISR_I2SExt+0x94>)
 8003b96:	e001      	b.n	8003b9c <I2SEx_TxISR_I2SExt+0x68>
 8003b98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b9c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ba0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d106      	bne.n	8003bba <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f7ff ff81 	bl	8003abc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bba:	bf00      	nop
 8003bbc:	3708      	adds	r7, #8
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	40003800 	.word	0x40003800
 8003bc8:	40003400 	.word	0x40003400

08003bcc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68d8      	ldr	r0, [r3, #12]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bde:	1c99      	adds	r1, r3, #2
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003be4:	b282      	uxth	r2, r0
 8003be6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d113      	bne.n	8003c28 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c0e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d106      	bne.n	8003c28 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7ff ff4a 	bl	8003abc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c28:	bf00      	nop
 8003c2a:	3708      	adds	r7, #8
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a20      	ldr	r2, [pc, #128]	; (8003cc0 <I2SEx_RxISR_I2SExt+0x90>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d101      	bne.n	8003c46 <I2SEx_RxISR_I2SExt+0x16>
 8003c42:	4b20      	ldr	r3, [pc, #128]	; (8003cc4 <I2SEx_RxISR_I2SExt+0x94>)
 8003c44:	e001      	b.n	8003c4a <I2SEx_RxISR_I2SExt+0x1a>
 8003c46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c4a:	68d8      	ldr	r0, [r3, #12]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c50:	1c99      	adds	r1, r3, #2
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003c56:	b282      	uxth	r2, r0
 8003c58:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	3b01      	subs	r3, #1
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d121      	bne.n	8003cb6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a12      	ldr	r2, [pc, #72]	; (8003cc0 <I2SEx_RxISR_I2SExt+0x90>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d101      	bne.n	8003c80 <I2SEx_RxISR_I2SExt+0x50>
 8003c7c:	4b11      	ldr	r3, [pc, #68]	; (8003cc4 <I2SEx_RxISR_I2SExt+0x94>)
 8003c7e:	e001      	b.n	8003c84 <I2SEx_RxISR_I2SExt+0x54>
 8003c80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c84:	685a      	ldr	r2, [r3, #4]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	490d      	ldr	r1, [pc, #52]	; (8003cc0 <I2SEx_RxISR_I2SExt+0x90>)
 8003c8c:	428b      	cmp	r3, r1
 8003c8e:	d101      	bne.n	8003c94 <I2SEx_RxISR_I2SExt+0x64>
 8003c90:	4b0c      	ldr	r3, [pc, #48]	; (8003cc4 <I2SEx_RxISR_I2SExt+0x94>)
 8003c92:	e001      	b.n	8003c98 <I2SEx_RxISR_I2SExt+0x68>
 8003c94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c98:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c9c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d106      	bne.n	8003cb6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f7ff ff03 	bl	8003abc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003cb6:	bf00      	nop
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	40003800 	.word	0x40003800
 8003cc4:	40003400 	.word	0x40003400

08003cc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e267      	b.n	80041aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d075      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ce6:	4b88      	ldr	r3, [pc, #544]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f003 030c 	and.w	r3, r3, #12
 8003cee:	2b04      	cmp	r3, #4
 8003cf0:	d00c      	beq.n	8003d0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cf2:	4b85      	ldr	r3, [pc, #532]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cfa:	2b08      	cmp	r3, #8
 8003cfc:	d112      	bne.n	8003d24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cfe:	4b82      	ldr	r3, [pc, #520]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d0a:	d10b      	bne.n	8003d24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d0c:	4b7e      	ldr	r3, [pc, #504]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d05b      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x108>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d157      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e242      	b.n	80041aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d2c:	d106      	bne.n	8003d3c <HAL_RCC_OscConfig+0x74>
 8003d2e:	4b76      	ldr	r3, [pc, #472]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a75      	ldr	r2, [pc, #468]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d38:	6013      	str	r3, [r2, #0]
 8003d3a:	e01d      	b.n	8003d78 <HAL_RCC_OscConfig+0xb0>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d44:	d10c      	bne.n	8003d60 <HAL_RCC_OscConfig+0x98>
 8003d46:	4b70      	ldr	r3, [pc, #448]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a6f      	ldr	r2, [pc, #444]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003d4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d50:	6013      	str	r3, [r2, #0]
 8003d52:	4b6d      	ldr	r3, [pc, #436]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a6c      	ldr	r2, [pc, #432]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d5c:	6013      	str	r3, [r2, #0]
 8003d5e:	e00b      	b.n	8003d78 <HAL_RCC_OscConfig+0xb0>
 8003d60:	4b69      	ldr	r3, [pc, #420]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a68      	ldr	r2, [pc, #416]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003d66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d6a:	6013      	str	r3, [r2, #0]
 8003d6c:	4b66      	ldr	r3, [pc, #408]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a65      	ldr	r2, [pc, #404]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003d72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d013      	beq.n	8003da8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d80:	f7fd fab6 	bl	80012f0 <HAL_GetTick>
 8003d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d86:	e008      	b.n	8003d9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d88:	f7fd fab2 	bl	80012f0 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b64      	cmp	r3, #100	; 0x64
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e207      	b.n	80041aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d9a:	4b5b      	ldr	r3, [pc, #364]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d0f0      	beq.n	8003d88 <HAL_RCC_OscConfig+0xc0>
 8003da6:	e014      	b.n	8003dd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da8:	f7fd faa2 	bl	80012f0 <HAL_GetTick>
 8003dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dae:	e008      	b.n	8003dc2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003db0:	f7fd fa9e 	bl	80012f0 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b64      	cmp	r3, #100	; 0x64
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e1f3      	b.n	80041aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dc2:	4b51      	ldr	r3, [pc, #324]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1f0      	bne.n	8003db0 <HAL_RCC_OscConfig+0xe8>
 8003dce:	e000      	b.n	8003dd2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d063      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dde:	4b4a      	ldr	r3, [pc, #296]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f003 030c 	and.w	r3, r3, #12
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00b      	beq.n	8003e02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dea:	4b47      	ldr	r3, [pc, #284]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003df2:	2b08      	cmp	r3, #8
 8003df4:	d11c      	bne.n	8003e30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003df6:	4b44      	ldr	r3, [pc, #272]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d116      	bne.n	8003e30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e02:	4b41      	ldr	r3, [pc, #260]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d005      	beq.n	8003e1a <HAL_RCC_OscConfig+0x152>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d001      	beq.n	8003e1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e1c7      	b.n	80041aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e1a:	4b3b      	ldr	r3, [pc, #236]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	4937      	ldr	r1, [pc, #220]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e2e:	e03a      	b.n	8003ea6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d020      	beq.n	8003e7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e38:	4b34      	ldr	r3, [pc, #208]	; (8003f0c <HAL_RCC_OscConfig+0x244>)
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3e:	f7fd fa57 	bl	80012f0 <HAL_GetTick>
 8003e42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e44:	e008      	b.n	8003e58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e46:	f7fd fa53 	bl	80012f0 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d901      	bls.n	8003e58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e1a8      	b.n	80041aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e58:	4b2b      	ldr	r3, [pc, #172]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d0f0      	beq.n	8003e46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e64:	4b28      	ldr	r3, [pc, #160]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	00db      	lsls	r3, r3, #3
 8003e72:	4925      	ldr	r1, [pc, #148]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	600b      	str	r3, [r1, #0]
 8003e78:	e015      	b.n	8003ea6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e7a:	4b24      	ldr	r3, [pc, #144]	; (8003f0c <HAL_RCC_OscConfig+0x244>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e80:	f7fd fa36 	bl	80012f0 <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e88:	f7fd fa32 	bl	80012f0 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e187      	b.n	80041aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e9a:	4b1b      	ldr	r3, [pc, #108]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1f0      	bne.n	8003e88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0308 	and.w	r3, r3, #8
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d036      	beq.n	8003f20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d016      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eba:	4b15      	ldr	r3, [pc, #84]	; (8003f10 <HAL_RCC_OscConfig+0x248>)
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec0:	f7fd fa16 	bl	80012f0 <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ec8:	f7fd fa12 	bl	80012f0 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e167      	b.n	80041aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eda:	4b0b      	ldr	r3, [pc, #44]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003edc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d0f0      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x200>
 8003ee6:	e01b      	b.n	8003f20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ee8:	4b09      	ldr	r3, [pc, #36]	; (8003f10 <HAL_RCC_OscConfig+0x248>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eee:	f7fd f9ff 	bl	80012f0 <HAL_GetTick>
 8003ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ef4:	e00e      	b.n	8003f14 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ef6:	f7fd f9fb 	bl	80012f0 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d907      	bls.n	8003f14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e150      	b.n	80041aa <HAL_RCC_OscConfig+0x4e2>
 8003f08:	40023800 	.word	0x40023800
 8003f0c:	42470000 	.word	0x42470000
 8003f10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f14:	4b88      	ldr	r3, [pc, #544]	; (8004138 <HAL_RCC_OscConfig+0x470>)
 8003f16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1ea      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0304 	and.w	r3, r3, #4
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f000 8097 	beq.w	800405c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f32:	4b81      	ldr	r3, [pc, #516]	; (8004138 <HAL_RCC_OscConfig+0x470>)
 8003f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10f      	bne.n	8003f5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60bb      	str	r3, [r7, #8]
 8003f42:	4b7d      	ldr	r3, [pc, #500]	; (8004138 <HAL_RCC_OscConfig+0x470>)
 8003f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f46:	4a7c      	ldr	r2, [pc, #496]	; (8004138 <HAL_RCC_OscConfig+0x470>)
 8003f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f4c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f4e:	4b7a      	ldr	r3, [pc, #488]	; (8004138 <HAL_RCC_OscConfig+0x470>)
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f56:	60bb      	str	r3, [r7, #8]
 8003f58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f5e:	4b77      	ldr	r3, [pc, #476]	; (800413c <HAL_RCC_OscConfig+0x474>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d118      	bne.n	8003f9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f6a:	4b74      	ldr	r3, [pc, #464]	; (800413c <HAL_RCC_OscConfig+0x474>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a73      	ldr	r2, [pc, #460]	; (800413c <HAL_RCC_OscConfig+0x474>)
 8003f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f76:	f7fd f9bb 	bl	80012f0 <HAL_GetTick>
 8003f7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f7c:	e008      	b.n	8003f90 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f7e:	f7fd f9b7 	bl	80012f0 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e10c      	b.n	80041aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f90:	4b6a      	ldr	r3, [pc, #424]	; (800413c <HAL_RCC_OscConfig+0x474>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d0f0      	beq.n	8003f7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d106      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x2ea>
 8003fa4:	4b64      	ldr	r3, [pc, #400]	; (8004138 <HAL_RCC_OscConfig+0x470>)
 8003fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa8:	4a63      	ldr	r2, [pc, #396]	; (8004138 <HAL_RCC_OscConfig+0x470>)
 8003faa:	f043 0301 	orr.w	r3, r3, #1
 8003fae:	6713      	str	r3, [r2, #112]	; 0x70
 8003fb0:	e01c      	b.n	8003fec <HAL_RCC_OscConfig+0x324>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	2b05      	cmp	r3, #5
 8003fb8:	d10c      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x30c>
 8003fba:	4b5f      	ldr	r3, [pc, #380]	; (8004138 <HAL_RCC_OscConfig+0x470>)
 8003fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fbe:	4a5e      	ldr	r2, [pc, #376]	; (8004138 <HAL_RCC_OscConfig+0x470>)
 8003fc0:	f043 0304 	orr.w	r3, r3, #4
 8003fc4:	6713      	str	r3, [r2, #112]	; 0x70
 8003fc6:	4b5c      	ldr	r3, [pc, #368]	; (8004138 <HAL_RCC_OscConfig+0x470>)
 8003fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fca:	4a5b      	ldr	r2, [pc, #364]	; (8004138 <HAL_RCC_OscConfig+0x470>)
 8003fcc:	f043 0301 	orr.w	r3, r3, #1
 8003fd0:	6713      	str	r3, [r2, #112]	; 0x70
 8003fd2:	e00b      	b.n	8003fec <HAL_RCC_OscConfig+0x324>
 8003fd4:	4b58      	ldr	r3, [pc, #352]	; (8004138 <HAL_RCC_OscConfig+0x470>)
 8003fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd8:	4a57      	ldr	r2, [pc, #348]	; (8004138 <HAL_RCC_OscConfig+0x470>)
 8003fda:	f023 0301 	bic.w	r3, r3, #1
 8003fde:	6713      	str	r3, [r2, #112]	; 0x70
 8003fe0:	4b55      	ldr	r3, [pc, #340]	; (8004138 <HAL_RCC_OscConfig+0x470>)
 8003fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe4:	4a54      	ldr	r2, [pc, #336]	; (8004138 <HAL_RCC_OscConfig+0x470>)
 8003fe6:	f023 0304 	bic.w	r3, r3, #4
 8003fea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d015      	beq.n	8004020 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff4:	f7fd f97c 	bl	80012f0 <HAL_GetTick>
 8003ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ffa:	e00a      	b.n	8004012 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ffc:	f7fd f978 	bl	80012f0 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	f241 3288 	movw	r2, #5000	; 0x1388
 800400a:	4293      	cmp	r3, r2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e0cb      	b.n	80041aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004012:	4b49      	ldr	r3, [pc, #292]	; (8004138 <HAL_RCC_OscConfig+0x470>)
 8004014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0ee      	beq.n	8003ffc <HAL_RCC_OscConfig+0x334>
 800401e:	e014      	b.n	800404a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004020:	f7fd f966 	bl	80012f0 <HAL_GetTick>
 8004024:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004026:	e00a      	b.n	800403e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004028:	f7fd f962 	bl	80012f0 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	f241 3288 	movw	r2, #5000	; 0x1388
 8004036:	4293      	cmp	r3, r2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e0b5      	b.n	80041aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800403e:	4b3e      	ldr	r3, [pc, #248]	; (8004138 <HAL_RCC_OscConfig+0x470>)
 8004040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1ee      	bne.n	8004028 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800404a:	7dfb      	ldrb	r3, [r7, #23]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d105      	bne.n	800405c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004050:	4b39      	ldr	r3, [pc, #228]	; (8004138 <HAL_RCC_OscConfig+0x470>)
 8004052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004054:	4a38      	ldr	r2, [pc, #224]	; (8004138 <HAL_RCC_OscConfig+0x470>)
 8004056:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800405a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 80a1 	beq.w	80041a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004066:	4b34      	ldr	r3, [pc, #208]	; (8004138 <HAL_RCC_OscConfig+0x470>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f003 030c 	and.w	r3, r3, #12
 800406e:	2b08      	cmp	r3, #8
 8004070:	d05c      	beq.n	800412c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	2b02      	cmp	r3, #2
 8004078:	d141      	bne.n	80040fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800407a:	4b31      	ldr	r3, [pc, #196]	; (8004140 <HAL_RCC_OscConfig+0x478>)
 800407c:	2200      	movs	r2, #0
 800407e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004080:	f7fd f936 	bl	80012f0 <HAL_GetTick>
 8004084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004086:	e008      	b.n	800409a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004088:	f7fd f932 	bl	80012f0 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b02      	cmp	r3, #2
 8004094:	d901      	bls.n	800409a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e087      	b.n	80041aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800409a:	4b27      	ldr	r3, [pc, #156]	; (8004138 <HAL_RCC_OscConfig+0x470>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1f0      	bne.n	8004088 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	69da      	ldr	r2, [r3, #28]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	431a      	orrs	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b4:	019b      	lsls	r3, r3, #6
 80040b6:	431a      	orrs	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040bc:	085b      	lsrs	r3, r3, #1
 80040be:	3b01      	subs	r3, #1
 80040c0:	041b      	lsls	r3, r3, #16
 80040c2:	431a      	orrs	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c8:	061b      	lsls	r3, r3, #24
 80040ca:	491b      	ldr	r1, [pc, #108]	; (8004138 <HAL_RCC_OscConfig+0x470>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040d0:	4b1b      	ldr	r3, [pc, #108]	; (8004140 <HAL_RCC_OscConfig+0x478>)
 80040d2:	2201      	movs	r2, #1
 80040d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d6:	f7fd f90b 	bl	80012f0 <HAL_GetTick>
 80040da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040dc:	e008      	b.n	80040f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040de:	f7fd f907 	bl	80012f0 <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d901      	bls.n	80040f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e05c      	b.n	80041aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040f0:	4b11      	ldr	r3, [pc, #68]	; (8004138 <HAL_RCC_OscConfig+0x470>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d0f0      	beq.n	80040de <HAL_RCC_OscConfig+0x416>
 80040fc:	e054      	b.n	80041a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040fe:	4b10      	ldr	r3, [pc, #64]	; (8004140 <HAL_RCC_OscConfig+0x478>)
 8004100:	2200      	movs	r2, #0
 8004102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004104:	f7fd f8f4 	bl	80012f0 <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800410c:	f7fd f8f0 	bl	80012f0 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e045      	b.n	80041aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800411e:	4b06      	ldr	r3, [pc, #24]	; (8004138 <HAL_RCC_OscConfig+0x470>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1f0      	bne.n	800410c <HAL_RCC_OscConfig+0x444>
 800412a:	e03d      	b.n	80041a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d107      	bne.n	8004144 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e038      	b.n	80041aa <HAL_RCC_OscConfig+0x4e2>
 8004138:	40023800 	.word	0x40023800
 800413c:	40007000 	.word	0x40007000
 8004140:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004144:	4b1b      	ldr	r3, [pc, #108]	; (80041b4 <HAL_RCC_OscConfig+0x4ec>)
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d028      	beq.n	80041a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800415c:	429a      	cmp	r2, r3
 800415e:	d121      	bne.n	80041a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800416a:	429a      	cmp	r2, r3
 800416c:	d11a      	bne.n	80041a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004174:	4013      	ands	r3, r2
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800417a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800417c:	4293      	cmp	r3, r2
 800417e:	d111      	bne.n	80041a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418a:	085b      	lsrs	r3, r3, #1
 800418c:	3b01      	subs	r3, #1
 800418e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004190:	429a      	cmp	r2, r3
 8004192:	d107      	bne.n	80041a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d001      	beq.n	80041a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e000      	b.n	80041aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3718      	adds	r7, #24
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	40023800 	.word	0x40023800

080041b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d101      	bne.n	80041cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e0cc      	b.n	8004366 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041cc:	4b68      	ldr	r3, [pc, #416]	; (8004370 <HAL_RCC_ClockConfig+0x1b8>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0307 	and.w	r3, r3, #7
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d90c      	bls.n	80041f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041da:	4b65      	ldr	r3, [pc, #404]	; (8004370 <HAL_RCC_ClockConfig+0x1b8>)
 80041dc:	683a      	ldr	r2, [r7, #0]
 80041de:	b2d2      	uxtb	r2, r2
 80041e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041e2:	4b63      	ldr	r3, [pc, #396]	; (8004370 <HAL_RCC_ClockConfig+0x1b8>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0307 	and.w	r3, r3, #7
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d001      	beq.n	80041f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e0b8      	b.n	8004366 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d020      	beq.n	8004242 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0304 	and.w	r3, r3, #4
 8004208:	2b00      	cmp	r3, #0
 800420a:	d005      	beq.n	8004218 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800420c:	4b59      	ldr	r3, [pc, #356]	; (8004374 <HAL_RCC_ClockConfig+0x1bc>)
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	4a58      	ldr	r2, [pc, #352]	; (8004374 <HAL_RCC_ClockConfig+0x1bc>)
 8004212:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004216:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0308 	and.w	r3, r3, #8
 8004220:	2b00      	cmp	r3, #0
 8004222:	d005      	beq.n	8004230 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004224:	4b53      	ldr	r3, [pc, #332]	; (8004374 <HAL_RCC_ClockConfig+0x1bc>)
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	4a52      	ldr	r2, [pc, #328]	; (8004374 <HAL_RCC_ClockConfig+0x1bc>)
 800422a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800422e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004230:	4b50      	ldr	r3, [pc, #320]	; (8004374 <HAL_RCC_ClockConfig+0x1bc>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	494d      	ldr	r1, [pc, #308]	; (8004374 <HAL_RCC_ClockConfig+0x1bc>)
 800423e:	4313      	orrs	r3, r2
 8004240:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	d044      	beq.n	80042d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d107      	bne.n	8004266 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004256:	4b47      	ldr	r3, [pc, #284]	; (8004374 <HAL_RCC_ClockConfig+0x1bc>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d119      	bne.n	8004296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e07f      	b.n	8004366 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	2b02      	cmp	r3, #2
 800426c:	d003      	beq.n	8004276 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004272:	2b03      	cmp	r3, #3
 8004274:	d107      	bne.n	8004286 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004276:	4b3f      	ldr	r3, [pc, #252]	; (8004374 <HAL_RCC_ClockConfig+0x1bc>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d109      	bne.n	8004296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e06f      	b.n	8004366 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004286:	4b3b      	ldr	r3, [pc, #236]	; (8004374 <HAL_RCC_ClockConfig+0x1bc>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0302 	and.w	r3, r3, #2
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e067      	b.n	8004366 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004296:	4b37      	ldr	r3, [pc, #220]	; (8004374 <HAL_RCC_ClockConfig+0x1bc>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f023 0203 	bic.w	r2, r3, #3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	4934      	ldr	r1, [pc, #208]	; (8004374 <HAL_RCC_ClockConfig+0x1bc>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042a8:	f7fd f822 	bl	80012f0 <HAL_GetTick>
 80042ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ae:	e00a      	b.n	80042c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042b0:	f7fd f81e 	bl	80012f0 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80042be:	4293      	cmp	r3, r2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e04f      	b.n	8004366 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042c6:	4b2b      	ldr	r3, [pc, #172]	; (8004374 <HAL_RCC_ClockConfig+0x1bc>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 020c 	and.w	r2, r3, #12
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d1eb      	bne.n	80042b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042d8:	4b25      	ldr	r3, [pc, #148]	; (8004370 <HAL_RCC_ClockConfig+0x1b8>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0307 	and.w	r3, r3, #7
 80042e0:	683a      	ldr	r2, [r7, #0]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d20c      	bcs.n	8004300 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042e6:	4b22      	ldr	r3, [pc, #136]	; (8004370 <HAL_RCC_ClockConfig+0x1b8>)
 80042e8:	683a      	ldr	r2, [r7, #0]
 80042ea:	b2d2      	uxtb	r2, r2
 80042ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ee:	4b20      	ldr	r3, [pc, #128]	; (8004370 <HAL_RCC_ClockConfig+0x1b8>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0307 	and.w	r3, r3, #7
 80042f6:	683a      	ldr	r2, [r7, #0]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d001      	beq.n	8004300 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e032      	b.n	8004366 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	2b00      	cmp	r3, #0
 800430a:	d008      	beq.n	800431e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800430c:	4b19      	ldr	r3, [pc, #100]	; (8004374 <HAL_RCC_ClockConfig+0x1bc>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	4916      	ldr	r1, [pc, #88]	; (8004374 <HAL_RCC_ClockConfig+0x1bc>)
 800431a:	4313      	orrs	r3, r2
 800431c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0308 	and.w	r3, r3, #8
 8004326:	2b00      	cmp	r3, #0
 8004328:	d009      	beq.n	800433e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800432a:	4b12      	ldr	r3, [pc, #72]	; (8004374 <HAL_RCC_ClockConfig+0x1bc>)
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	490e      	ldr	r1, [pc, #56]	; (8004374 <HAL_RCC_ClockConfig+0x1bc>)
 800433a:	4313      	orrs	r3, r2
 800433c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800433e:	f000 f821 	bl	8004384 <HAL_RCC_GetSysClockFreq>
 8004342:	4602      	mov	r2, r0
 8004344:	4b0b      	ldr	r3, [pc, #44]	; (8004374 <HAL_RCC_ClockConfig+0x1bc>)
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	091b      	lsrs	r3, r3, #4
 800434a:	f003 030f 	and.w	r3, r3, #15
 800434e:	490a      	ldr	r1, [pc, #40]	; (8004378 <HAL_RCC_ClockConfig+0x1c0>)
 8004350:	5ccb      	ldrb	r3, [r1, r3]
 8004352:	fa22 f303 	lsr.w	r3, r2, r3
 8004356:	4a09      	ldr	r2, [pc, #36]	; (800437c <HAL_RCC_ClockConfig+0x1c4>)
 8004358:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800435a:	4b09      	ldr	r3, [pc, #36]	; (8004380 <HAL_RCC_ClockConfig+0x1c8>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4618      	mov	r0, r3
 8004360:	f7fc ff82 	bl	8001268 <HAL_InitTick>

  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	40023c00 	.word	0x40023c00
 8004374:	40023800 	.word	0x40023800
 8004378:	080089f0 	.word	0x080089f0
 800437c:	20000008 	.word	0x20000008
 8004380:	2000000c 	.word	0x2000000c

08004384 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004384:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004388:	b094      	sub	sp, #80	; 0x50
 800438a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800438c:	2300      	movs	r3, #0
 800438e:	647b      	str	r3, [r7, #68]	; 0x44
 8004390:	2300      	movs	r3, #0
 8004392:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004394:	2300      	movs	r3, #0
 8004396:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004398:	2300      	movs	r3, #0
 800439a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800439c:	4b79      	ldr	r3, [pc, #484]	; (8004584 <HAL_RCC_GetSysClockFreq+0x200>)
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f003 030c 	and.w	r3, r3, #12
 80043a4:	2b08      	cmp	r3, #8
 80043a6:	d00d      	beq.n	80043c4 <HAL_RCC_GetSysClockFreq+0x40>
 80043a8:	2b08      	cmp	r3, #8
 80043aa:	f200 80e1 	bhi.w	8004570 <HAL_RCC_GetSysClockFreq+0x1ec>
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d002      	beq.n	80043b8 <HAL_RCC_GetSysClockFreq+0x34>
 80043b2:	2b04      	cmp	r3, #4
 80043b4:	d003      	beq.n	80043be <HAL_RCC_GetSysClockFreq+0x3a>
 80043b6:	e0db      	b.n	8004570 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043b8:	4b73      	ldr	r3, [pc, #460]	; (8004588 <HAL_RCC_GetSysClockFreq+0x204>)
 80043ba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80043bc:	e0db      	b.n	8004576 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043be:	4b73      	ldr	r3, [pc, #460]	; (800458c <HAL_RCC_GetSysClockFreq+0x208>)
 80043c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043c2:	e0d8      	b.n	8004576 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043c4:	4b6f      	ldr	r3, [pc, #444]	; (8004584 <HAL_RCC_GetSysClockFreq+0x200>)
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043cc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043ce:	4b6d      	ldr	r3, [pc, #436]	; (8004584 <HAL_RCC_GetSysClockFreq+0x200>)
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d063      	beq.n	80044a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043da:	4b6a      	ldr	r3, [pc, #424]	; (8004584 <HAL_RCC_GetSysClockFreq+0x200>)
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	099b      	lsrs	r3, r3, #6
 80043e0:	2200      	movs	r2, #0
 80043e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80043e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80043e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ec:	633b      	str	r3, [r7, #48]	; 0x30
 80043ee:	2300      	movs	r3, #0
 80043f0:	637b      	str	r3, [r7, #52]	; 0x34
 80043f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80043f6:	4622      	mov	r2, r4
 80043f8:	462b      	mov	r3, r5
 80043fa:	f04f 0000 	mov.w	r0, #0
 80043fe:	f04f 0100 	mov.w	r1, #0
 8004402:	0159      	lsls	r1, r3, #5
 8004404:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004408:	0150      	lsls	r0, r2, #5
 800440a:	4602      	mov	r2, r0
 800440c:	460b      	mov	r3, r1
 800440e:	4621      	mov	r1, r4
 8004410:	1a51      	subs	r1, r2, r1
 8004412:	6139      	str	r1, [r7, #16]
 8004414:	4629      	mov	r1, r5
 8004416:	eb63 0301 	sbc.w	r3, r3, r1
 800441a:	617b      	str	r3, [r7, #20]
 800441c:	f04f 0200 	mov.w	r2, #0
 8004420:	f04f 0300 	mov.w	r3, #0
 8004424:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004428:	4659      	mov	r1, fp
 800442a:	018b      	lsls	r3, r1, #6
 800442c:	4651      	mov	r1, sl
 800442e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004432:	4651      	mov	r1, sl
 8004434:	018a      	lsls	r2, r1, #6
 8004436:	4651      	mov	r1, sl
 8004438:	ebb2 0801 	subs.w	r8, r2, r1
 800443c:	4659      	mov	r1, fp
 800443e:	eb63 0901 	sbc.w	r9, r3, r1
 8004442:	f04f 0200 	mov.w	r2, #0
 8004446:	f04f 0300 	mov.w	r3, #0
 800444a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800444e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004452:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004456:	4690      	mov	r8, r2
 8004458:	4699      	mov	r9, r3
 800445a:	4623      	mov	r3, r4
 800445c:	eb18 0303 	adds.w	r3, r8, r3
 8004460:	60bb      	str	r3, [r7, #8]
 8004462:	462b      	mov	r3, r5
 8004464:	eb49 0303 	adc.w	r3, r9, r3
 8004468:	60fb      	str	r3, [r7, #12]
 800446a:	f04f 0200 	mov.w	r2, #0
 800446e:	f04f 0300 	mov.w	r3, #0
 8004472:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004476:	4629      	mov	r1, r5
 8004478:	024b      	lsls	r3, r1, #9
 800447a:	4621      	mov	r1, r4
 800447c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004480:	4621      	mov	r1, r4
 8004482:	024a      	lsls	r2, r1, #9
 8004484:	4610      	mov	r0, r2
 8004486:	4619      	mov	r1, r3
 8004488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800448a:	2200      	movs	r2, #0
 800448c:	62bb      	str	r3, [r7, #40]	; 0x28
 800448e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004490:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004494:	f7fb fe98 	bl	80001c8 <__aeabi_uldivmod>
 8004498:	4602      	mov	r2, r0
 800449a:	460b      	mov	r3, r1
 800449c:	4613      	mov	r3, r2
 800449e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044a0:	e058      	b.n	8004554 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044a2:	4b38      	ldr	r3, [pc, #224]	; (8004584 <HAL_RCC_GetSysClockFreq+0x200>)
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	099b      	lsrs	r3, r3, #6
 80044a8:	2200      	movs	r2, #0
 80044aa:	4618      	mov	r0, r3
 80044ac:	4611      	mov	r1, r2
 80044ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80044b2:	623b      	str	r3, [r7, #32]
 80044b4:	2300      	movs	r3, #0
 80044b6:	627b      	str	r3, [r7, #36]	; 0x24
 80044b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80044bc:	4642      	mov	r2, r8
 80044be:	464b      	mov	r3, r9
 80044c0:	f04f 0000 	mov.w	r0, #0
 80044c4:	f04f 0100 	mov.w	r1, #0
 80044c8:	0159      	lsls	r1, r3, #5
 80044ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044ce:	0150      	lsls	r0, r2, #5
 80044d0:	4602      	mov	r2, r0
 80044d2:	460b      	mov	r3, r1
 80044d4:	4641      	mov	r1, r8
 80044d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80044da:	4649      	mov	r1, r9
 80044dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80044e0:	f04f 0200 	mov.w	r2, #0
 80044e4:	f04f 0300 	mov.w	r3, #0
 80044e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80044ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80044f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80044f4:	ebb2 040a 	subs.w	r4, r2, sl
 80044f8:	eb63 050b 	sbc.w	r5, r3, fp
 80044fc:	f04f 0200 	mov.w	r2, #0
 8004500:	f04f 0300 	mov.w	r3, #0
 8004504:	00eb      	lsls	r3, r5, #3
 8004506:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800450a:	00e2      	lsls	r2, r4, #3
 800450c:	4614      	mov	r4, r2
 800450e:	461d      	mov	r5, r3
 8004510:	4643      	mov	r3, r8
 8004512:	18e3      	adds	r3, r4, r3
 8004514:	603b      	str	r3, [r7, #0]
 8004516:	464b      	mov	r3, r9
 8004518:	eb45 0303 	adc.w	r3, r5, r3
 800451c:	607b      	str	r3, [r7, #4]
 800451e:	f04f 0200 	mov.w	r2, #0
 8004522:	f04f 0300 	mov.w	r3, #0
 8004526:	e9d7 4500 	ldrd	r4, r5, [r7]
 800452a:	4629      	mov	r1, r5
 800452c:	028b      	lsls	r3, r1, #10
 800452e:	4621      	mov	r1, r4
 8004530:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004534:	4621      	mov	r1, r4
 8004536:	028a      	lsls	r2, r1, #10
 8004538:	4610      	mov	r0, r2
 800453a:	4619      	mov	r1, r3
 800453c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800453e:	2200      	movs	r2, #0
 8004540:	61bb      	str	r3, [r7, #24]
 8004542:	61fa      	str	r2, [r7, #28]
 8004544:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004548:	f7fb fe3e 	bl	80001c8 <__aeabi_uldivmod>
 800454c:	4602      	mov	r2, r0
 800454e:	460b      	mov	r3, r1
 8004550:	4613      	mov	r3, r2
 8004552:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004554:	4b0b      	ldr	r3, [pc, #44]	; (8004584 <HAL_RCC_GetSysClockFreq+0x200>)
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	0c1b      	lsrs	r3, r3, #16
 800455a:	f003 0303 	and.w	r3, r3, #3
 800455e:	3301      	adds	r3, #1
 8004560:	005b      	lsls	r3, r3, #1
 8004562:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004564:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004566:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004568:	fbb2 f3f3 	udiv	r3, r2, r3
 800456c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800456e:	e002      	b.n	8004576 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004570:	4b05      	ldr	r3, [pc, #20]	; (8004588 <HAL_RCC_GetSysClockFreq+0x204>)
 8004572:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004574:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004576:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004578:	4618      	mov	r0, r3
 800457a:	3750      	adds	r7, #80	; 0x50
 800457c:	46bd      	mov	sp, r7
 800457e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004582:	bf00      	nop
 8004584:	40023800 	.word	0x40023800
 8004588:	00f42400 	.word	0x00f42400
 800458c:	007a1200 	.word	0x007a1200

08004590 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004590:	b480      	push	{r7}
 8004592:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004594:	4b03      	ldr	r3, [pc, #12]	; (80045a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004596:	681b      	ldr	r3, [r3, #0]
}
 8004598:	4618      	mov	r0, r3
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	20000008 	.word	0x20000008

080045a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045ac:	f7ff fff0 	bl	8004590 <HAL_RCC_GetHCLKFreq>
 80045b0:	4602      	mov	r2, r0
 80045b2:	4b05      	ldr	r3, [pc, #20]	; (80045c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	0a9b      	lsrs	r3, r3, #10
 80045b8:	f003 0307 	and.w	r3, r3, #7
 80045bc:	4903      	ldr	r1, [pc, #12]	; (80045cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80045be:	5ccb      	ldrb	r3, [r1, r3]
 80045c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	40023800 	.word	0x40023800
 80045cc:	08008a00 	.word	0x08008a00

080045d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80045d4:	f7ff ffdc 	bl	8004590 <HAL_RCC_GetHCLKFreq>
 80045d8:	4602      	mov	r2, r0
 80045da:	4b05      	ldr	r3, [pc, #20]	; (80045f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	0b5b      	lsrs	r3, r3, #13
 80045e0:	f003 0307 	and.w	r3, r3, #7
 80045e4:	4903      	ldr	r1, [pc, #12]	; (80045f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045e6:	5ccb      	ldrb	r3, [r1, r3]
 80045e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	40023800 	.word	0x40023800
 80045f4:	08008a00 	.word	0x08008a00

080045f8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004600:	2300      	movs	r3, #0
 8004602:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004604:	2300      	movs	r3, #0
 8004606:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	2b00      	cmp	r3, #0
 8004612:	d105      	bne.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800461c:	2b00      	cmp	r3, #0
 800461e:	d035      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004620:	4b62      	ldr	r3, [pc, #392]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004622:	2200      	movs	r2, #0
 8004624:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004626:	f7fc fe63 	bl	80012f0 <HAL_GetTick>
 800462a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800462c:	e008      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800462e:	f7fc fe5f 	bl	80012f0 <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	2b02      	cmp	r3, #2
 800463a:	d901      	bls.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e0b0      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004640:	4b5b      	ldr	r3, [pc, #364]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1f0      	bne.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	019a      	lsls	r2, r3, #6
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	071b      	lsls	r3, r3, #28
 8004658:	4955      	ldr	r1, [pc, #340]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800465a:	4313      	orrs	r3, r2
 800465c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004660:	4b52      	ldr	r3, [pc, #328]	; (80047ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004662:	2201      	movs	r2, #1
 8004664:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004666:	f7fc fe43 	bl	80012f0 <HAL_GetTick>
 800466a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800466c:	e008      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800466e:	f7fc fe3f 	bl	80012f0 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d901      	bls.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e090      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004680:	4b4b      	ldr	r3, [pc, #300]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d0f0      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0302 	and.w	r3, r3, #2
 8004694:	2b00      	cmp	r3, #0
 8004696:	f000 8083 	beq.w	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800469a:	2300      	movs	r3, #0
 800469c:	60fb      	str	r3, [r7, #12]
 800469e:	4b44      	ldr	r3, [pc, #272]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a2:	4a43      	ldr	r2, [pc, #268]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046a8:	6413      	str	r3, [r2, #64]	; 0x40
 80046aa:	4b41      	ldr	r3, [pc, #260]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b2:	60fb      	str	r3, [r7, #12]
 80046b4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80046b6:	4b3f      	ldr	r3, [pc, #252]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a3e      	ldr	r2, [pc, #248]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046c0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80046c2:	f7fc fe15 	bl	80012f0 <HAL_GetTick>
 80046c6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80046c8:	e008      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80046ca:	f7fc fe11 	bl	80012f0 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d901      	bls.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e062      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80046dc:	4b35      	ldr	r3, [pc, #212]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d0f0      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046e8:	4b31      	ldr	r3, [pc, #196]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046f0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d02f      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	429a      	cmp	r2, r3
 8004704:	d028      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004706:	4b2a      	ldr	r3, [pc, #168]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800470e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004710:	4b29      	ldr	r3, [pc, #164]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004712:	2201      	movs	r2, #1
 8004714:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004716:	4b28      	ldr	r3, [pc, #160]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004718:	2200      	movs	r2, #0
 800471a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800471c:	4a24      	ldr	r2, [pc, #144]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004722:	4b23      	ldr	r3, [pc, #140]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b01      	cmp	r3, #1
 800472c:	d114      	bne.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800472e:	f7fc fddf 	bl	80012f0 <HAL_GetTick>
 8004732:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004734:	e00a      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004736:	f7fc fddb 	bl	80012f0 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	f241 3288 	movw	r2, #5000	; 0x1388
 8004744:	4293      	cmp	r3, r2
 8004746:	d901      	bls.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e02a      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800474c:	4b18      	ldr	r3, [pc, #96]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800474e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	2b00      	cmp	r3, #0
 8004756:	d0ee      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004760:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004764:	d10d      	bne.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004766:	4b12      	ldr	r3, [pc, #72]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004776:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800477a:	490d      	ldr	r1, [pc, #52]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800477c:	4313      	orrs	r3, r2
 800477e:	608b      	str	r3, [r1, #8]
 8004780:	e005      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004782:	4b0b      	ldr	r3, [pc, #44]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	4a0a      	ldr	r2, [pc, #40]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004788:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800478c:	6093      	str	r3, [r2, #8]
 800478e:	4b08      	ldr	r3, [pc, #32]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004790:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800479a:	4905      	ldr	r1, [pc, #20]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800479c:	4313      	orrs	r3, r2
 800479e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3718      	adds	r7, #24
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	42470068 	.word	0x42470068
 80047b0:	40023800 	.word	0x40023800
 80047b4:	40007000 	.word	0x40007000
 80047b8:	42470e40 	.word	0x42470e40

080047bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80047bc:	b480      	push	{r7}
 80047be:	b087      	sub	sp, #28
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80047c4:	2300      	movs	r3, #0
 80047c6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80047c8:	2300      	movs	r3, #0
 80047ca:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80047cc:	2300      	movs	r3, #0
 80047ce:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80047d0:	2300      	movs	r3, #0
 80047d2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d13e      	bne.n	8004858 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80047da:	4b23      	ldr	r3, [pc, #140]	; (8004868 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047e2:	60fb      	str	r3, [r7, #12]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d005      	beq.n	80047f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d12f      	bne.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80047f0:	4b1e      	ldr	r3, [pc, #120]	; (800486c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80047f2:	617b      	str	r3, [r7, #20]
          break;
 80047f4:	e02f      	b.n	8004856 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80047f6:	4b1c      	ldr	r3, [pc, #112]	; (8004868 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004802:	d108      	bne.n	8004816 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004804:	4b18      	ldr	r3, [pc, #96]	; (8004868 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800480c:	4a18      	ldr	r2, [pc, #96]	; (8004870 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800480e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004812:	613b      	str	r3, [r7, #16]
 8004814:	e007      	b.n	8004826 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004816:	4b14      	ldr	r3, [pc, #80]	; (8004868 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800481e:	4a15      	ldr	r2, [pc, #84]	; (8004874 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004820:	fbb2 f3f3 	udiv	r3, r2, r3
 8004824:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004826:	4b10      	ldr	r3, [pc, #64]	; (8004868 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004828:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800482c:	099b      	lsrs	r3, r3, #6
 800482e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	fb02 f303 	mul.w	r3, r2, r3
 8004838:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800483a:	4b0b      	ldr	r3, [pc, #44]	; (8004868 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800483c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004840:	0f1b      	lsrs	r3, r3, #28
 8004842:	f003 0307 	and.w	r3, r3, #7
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	fbb2 f3f3 	udiv	r3, r2, r3
 800484c:	617b      	str	r3, [r7, #20]
          break;
 800484e:	e002      	b.n	8004856 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004850:	2300      	movs	r3, #0
 8004852:	617b      	str	r3, [r7, #20]
          break;
 8004854:	bf00      	nop
        }
      }
      break;
 8004856:	bf00      	nop
    }
  }
  return frequency;
 8004858:	697b      	ldr	r3, [r7, #20]
}
 800485a:	4618      	mov	r0, r3
 800485c:	371c      	adds	r7, #28
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	40023800 	.word	0x40023800
 800486c:	00bb8000 	.word	0x00bb8000
 8004870:	007a1200 	.word	0x007a1200
 8004874:	00f42400 	.word	0x00f42400

08004878 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e07b      	b.n	8004982 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488e:	2b00      	cmp	r3, #0
 8004890:	d108      	bne.n	80048a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800489a:	d009      	beq.n	80048b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	61da      	str	r2, [r3, #28]
 80048a2:	e005      	b.n	80048b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d106      	bne.n	80048d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f7fc fb0c 	bl	8000ee8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2202      	movs	r2, #2
 80048d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80048f8:	431a      	orrs	r2, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004902:	431a      	orrs	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	f003 0302 	and.w	r3, r3, #2
 800490c:	431a      	orrs	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	431a      	orrs	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004920:	431a      	orrs	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	69db      	ldr	r3, [r3, #28]
 8004926:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800492a:	431a      	orrs	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a1b      	ldr	r3, [r3, #32]
 8004930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004934:	ea42 0103 	orr.w	r1, r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	430a      	orrs	r2, r1
 8004946:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	0c1b      	lsrs	r3, r3, #16
 800494e:	f003 0104 	and.w	r1, r3, #4
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004956:	f003 0210 	and.w	r2, r3, #16
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	430a      	orrs	r2, r1
 8004960:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	69da      	ldr	r2, [r3, #28]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004970:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b088      	sub	sp, #32
 800498e:	af00      	add	r7, sp, #0
 8004990:	60f8      	str	r0, [r7, #12]
 8004992:	60b9      	str	r1, [r7, #8]
 8004994:	603b      	str	r3, [r7, #0]
 8004996:	4613      	mov	r3, r2
 8004998:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800499a:	2300      	movs	r3, #0
 800499c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d101      	bne.n	80049ac <HAL_SPI_Transmit+0x22>
 80049a8:	2302      	movs	r3, #2
 80049aa:	e126      	b.n	8004bfa <HAL_SPI_Transmit+0x270>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049b4:	f7fc fc9c 	bl	80012f0 <HAL_GetTick>
 80049b8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80049ba:	88fb      	ldrh	r3, [r7, #6]
 80049bc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d002      	beq.n	80049d0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80049ca:	2302      	movs	r3, #2
 80049cc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049ce:	e10b      	b.n	8004be8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d002      	beq.n	80049dc <HAL_SPI_Transmit+0x52>
 80049d6:	88fb      	ldrh	r3, [r7, #6]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d102      	bne.n	80049e2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049e0:	e102      	b.n	8004be8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2203      	movs	r2, #3
 80049e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	88fa      	ldrh	r2, [r7, #6]
 80049fa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	88fa      	ldrh	r2, [r7, #6]
 8004a00:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a28:	d10f      	bne.n	8004a4a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a38:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a48:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a54:	2b40      	cmp	r3, #64	; 0x40
 8004a56:	d007      	beq.n	8004a68 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a66:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a70:	d14b      	bne.n	8004b0a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d002      	beq.n	8004a80 <HAL_SPI_Transmit+0xf6>
 8004a7a:	8afb      	ldrh	r3, [r7, #22]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d13e      	bne.n	8004afe <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a84:	881a      	ldrh	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a90:	1c9a      	adds	r2, r3, #2
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004aa4:	e02b      	b.n	8004afe <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d112      	bne.n	8004ada <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab8:	881a      	ldrh	r2, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac4:	1c9a      	adds	r2, r3, #2
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	86da      	strh	r2, [r3, #54]	; 0x36
 8004ad8:	e011      	b.n	8004afe <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ada:	f7fc fc09 	bl	80012f0 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	683a      	ldr	r2, [r7, #0]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d803      	bhi.n	8004af2 <HAL_SPI_Transmit+0x168>
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af0:	d102      	bne.n	8004af8 <HAL_SPI_Transmit+0x16e>
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d102      	bne.n	8004afe <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004afc:	e074      	b.n	8004be8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1ce      	bne.n	8004aa6 <HAL_SPI_Transmit+0x11c>
 8004b08:	e04c      	b.n	8004ba4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d002      	beq.n	8004b18 <HAL_SPI_Transmit+0x18e>
 8004b12:	8afb      	ldrh	r3, [r7, #22]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d140      	bne.n	8004b9a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	330c      	adds	r3, #12
 8004b22:	7812      	ldrb	r2, [r2, #0]
 8004b24:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2a:	1c5a      	adds	r2, r3, #1
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	3b01      	subs	r3, #1
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004b3e:	e02c      	b.n	8004b9a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f003 0302 	and.w	r3, r3, #2
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d113      	bne.n	8004b76 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	330c      	adds	r3, #12
 8004b58:	7812      	ldrb	r2, [r2, #0]
 8004b5a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b60:	1c5a      	adds	r2, r3, #1
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b74:	e011      	b.n	8004b9a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b76:	f7fc fbbb 	bl	80012f0 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	683a      	ldr	r2, [r7, #0]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d803      	bhi.n	8004b8e <HAL_SPI_Transmit+0x204>
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b8c:	d102      	bne.n	8004b94 <HAL_SPI_Transmit+0x20a>
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d102      	bne.n	8004b9a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b98:	e026      	b.n	8004be8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1cd      	bne.n	8004b40 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	6839      	ldr	r1, [r7, #0]
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f000 fbcb 	bl	8005344 <SPI_EndRxTxTransaction>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d002      	beq.n	8004bba <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10a      	bne.n	8004bd8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	613b      	str	r3, [r7, #16]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	613b      	str	r3, [r7, #16]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	613b      	str	r3, [r7, #16]
 8004bd6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d002      	beq.n	8004be6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	77fb      	strb	r3, [r7, #31]
 8004be4:	e000      	b.n	8004be8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004be6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004bf8:	7ffb      	ldrb	r3, [r7, #31]
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3720      	adds	r7, #32
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b088      	sub	sp, #32
 8004c06:	af02      	add	r7, sp, #8
 8004c08:	60f8      	str	r0, [r7, #12]
 8004c0a:	60b9      	str	r1, [r7, #8]
 8004c0c:	603b      	str	r3, [r7, #0]
 8004c0e:	4613      	mov	r3, r2
 8004c10:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c12:	2300      	movs	r3, #0
 8004c14:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c1e:	d112      	bne.n	8004c46 <HAL_SPI_Receive+0x44>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10e      	bne.n	8004c46 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2204      	movs	r2, #4
 8004c2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004c30:	88fa      	ldrh	r2, [r7, #6]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	9300      	str	r3, [sp, #0]
 8004c36:	4613      	mov	r3, r2
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	68b9      	ldr	r1, [r7, #8]
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f000 f8f1 	bl	8004e24 <HAL_SPI_TransmitReceive>
 8004c42:	4603      	mov	r3, r0
 8004c44:	e0ea      	b.n	8004e1c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d101      	bne.n	8004c54 <HAL_SPI_Receive+0x52>
 8004c50:	2302      	movs	r3, #2
 8004c52:	e0e3      	b.n	8004e1c <HAL_SPI_Receive+0x21a>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c5c:	f7fc fb48 	bl	80012f0 <HAL_GetTick>
 8004c60:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d002      	beq.n	8004c74 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004c6e:	2302      	movs	r3, #2
 8004c70:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004c72:	e0ca      	b.n	8004e0a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d002      	beq.n	8004c80 <HAL_SPI_Receive+0x7e>
 8004c7a:	88fb      	ldrh	r3, [r7, #6]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d102      	bne.n	8004c86 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004c84:	e0c1      	b.n	8004e0a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2204      	movs	r2, #4
 8004c8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	68ba      	ldr	r2, [r7, #8]
 8004c98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	88fa      	ldrh	r2, [r7, #6]
 8004c9e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	88fa      	ldrh	r2, [r7, #6]
 8004ca4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ccc:	d10f      	bne.n	8004cee <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cdc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004cec:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf8:	2b40      	cmp	r3, #64	; 0x40
 8004cfa:	d007      	beq.n	8004d0c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d0a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d162      	bne.n	8004dda <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004d14:	e02e      	b.n	8004d74 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f003 0301 	and.w	r3, r3, #1
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d115      	bne.n	8004d50 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f103 020c 	add.w	r2, r3, #12
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d30:	7812      	ldrb	r2, [r2, #0]
 8004d32:	b2d2      	uxtb	r2, r2
 8004d34:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3a:	1c5a      	adds	r2, r3, #1
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	3b01      	subs	r3, #1
 8004d48:	b29a      	uxth	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d4e:	e011      	b.n	8004d74 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d50:	f7fc face 	bl	80012f0 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	683a      	ldr	r2, [r7, #0]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d803      	bhi.n	8004d68 <HAL_SPI_Receive+0x166>
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d66:	d102      	bne.n	8004d6e <HAL_SPI_Receive+0x16c>
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d102      	bne.n	8004d74 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004d72:	e04a      	b.n	8004e0a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1cb      	bne.n	8004d16 <HAL_SPI_Receive+0x114>
 8004d7e:	e031      	b.n	8004de4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d113      	bne.n	8004db6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68da      	ldr	r2, [r3, #12]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d98:	b292      	uxth	r2, r2
 8004d9a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da0:	1c9a      	adds	r2, r3, #2
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	3b01      	subs	r3, #1
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004db4:	e011      	b.n	8004dda <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004db6:	f7fc fa9b 	bl	80012f0 <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	683a      	ldr	r2, [r7, #0]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d803      	bhi.n	8004dce <HAL_SPI_Receive+0x1cc>
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dcc:	d102      	bne.n	8004dd4 <HAL_SPI_Receive+0x1d2>
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d102      	bne.n	8004dda <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004dd8:	e017      	b.n	8004e0a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1cd      	bne.n	8004d80 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	6839      	ldr	r1, [r7, #0]
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f000 fa45 	bl	8005278 <SPI_EndRxTransaction>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d002      	beq.n	8004dfa <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2220      	movs	r2, #32
 8004df8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d002      	beq.n	8004e08 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	75fb      	strb	r3, [r7, #23]
 8004e06:	e000      	b.n	8004e0a <HAL_SPI_Receive+0x208>
  }

error :
 8004e08:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3718      	adds	r7, #24
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b08c      	sub	sp, #48	; 0x30
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]
 8004e30:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004e32:	2301      	movs	r3, #1
 8004e34:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004e36:	2300      	movs	r3, #0
 8004e38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d101      	bne.n	8004e4a <HAL_SPI_TransmitReceive+0x26>
 8004e46:	2302      	movs	r3, #2
 8004e48:	e18a      	b.n	8005160 <HAL_SPI_TransmitReceive+0x33c>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e52:	f7fc fa4d 	bl	80012f0 <HAL_GetTick>
 8004e56:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004e68:	887b      	ldrh	r3, [r7, #2]
 8004e6a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004e6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d00f      	beq.n	8004e94 <HAL_SPI_TransmitReceive+0x70>
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e7a:	d107      	bne.n	8004e8c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d103      	bne.n	8004e8c <HAL_SPI_TransmitReceive+0x68>
 8004e84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e88:	2b04      	cmp	r3, #4
 8004e8a:	d003      	beq.n	8004e94 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004e92:	e15b      	b.n	800514c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d005      	beq.n	8004ea6 <HAL_SPI_TransmitReceive+0x82>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d002      	beq.n	8004ea6 <HAL_SPI_TransmitReceive+0x82>
 8004ea0:	887b      	ldrh	r3, [r7, #2]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d103      	bne.n	8004eae <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004eac:	e14e      	b.n	800514c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b04      	cmp	r3, #4
 8004eb8:	d003      	beq.n	8004ec2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2205      	movs	r2, #5
 8004ebe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	887a      	ldrh	r2, [r7, #2]
 8004ed2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	887a      	ldrh	r2, [r7, #2]
 8004ed8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	887a      	ldrh	r2, [r7, #2]
 8004ee4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	887a      	ldrh	r2, [r7, #2]
 8004eea:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f02:	2b40      	cmp	r3, #64	; 0x40
 8004f04:	d007      	beq.n	8004f16 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f14:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f1e:	d178      	bne.n	8005012 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d002      	beq.n	8004f2e <HAL_SPI_TransmitReceive+0x10a>
 8004f28:	8b7b      	ldrh	r3, [r7, #26]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d166      	bne.n	8004ffc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f32:	881a      	ldrh	r2, [r3, #0]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3e:	1c9a      	adds	r2, r3, #2
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f52:	e053      	b.n	8004ffc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d11b      	bne.n	8004f9a <HAL_SPI_TransmitReceive+0x176>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d016      	beq.n	8004f9a <HAL_SPI_TransmitReceive+0x176>
 8004f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d113      	bne.n	8004f9a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f76:	881a      	ldrh	r2, [r3, #0]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f82:	1c9a      	adds	r2, r3, #2
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f96:	2300      	movs	r3, #0
 8004f98:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f003 0301 	and.w	r3, r3, #1
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d119      	bne.n	8004fdc <HAL_SPI_TransmitReceive+0x1b8>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d014      	beq.n	8004fdc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68da      	ldr	r2, [r3, #12]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fbc:	b292      	uxth	r2, r2
 8004fbe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc4:	1c9a      	adds	r2, r3, #2
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004fdc:	f7fc f988 	bl	80012f0 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d807      	bhi.n	8004ffc <HAL_SPI_TransmitReceive+0x1d8>
 8004fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff2:	d003      	beq.n	8004ffc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004ffa:	e0a7      	b.n	800514c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005000:	b29b      	uxth	r3, r3
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1a6      	bne.n	8004f54 <HAL_SPI_TransmitReceive+0x130>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800500a:	b29b      	uxth	r3, r3
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1a1      	bne.n	8004f54 <HAL_SPI_TransmitReceive+0x130>
 8005010:	e07c      	b.n	800510c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d002      	beq.n	8005020 <HAL_SPI_TransmitReceive+0x1fc>
 800501a:	8b7b      	ldrh	r3, [r7, #26]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d16b      	bne.n	80050f8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	330c      	adds	r3, #12
 800502a:	7812      	ldrb	r2, [r2, #0]
 800502c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005032:	1c5a      	adds	r2, r3, #1
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800503c:	b29b      	uxth	r3, r3
 800503e:	3b01      	subs	r3, #1
 8005040:	b29a      	uxth	r2, r3
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005046:	e057      	b.n	80050f8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b02      	cmp	r3, #2
 8005054:	d11c      	bne.n	8005090 <HAL_SPI_TransmitReceive+0x26c>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800505a:	b29b      	uxth	r3, r3
 800505c:	2b00      	cmp	r3, #0
 800505e:	d017      	beq.n	8005090 <HAL_SPI_TransmitReceive+0x26c>
 8005060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005062:	2b01      	cmp	r3, #1
 8005064:	d114      	bne.n	8005090 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	330c      	adds	r3, #12
 8005070:	7812      	ldrb	r2, [r2, #0]
 8005072:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005078:	1c5a      	adds	r2, r3, #1
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005082:	b29b      	uxth	r3, r3
 8005084:	3b01      	subs	r3, #1
 8005086:	b29a      	uxth	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800508c:	2300      	movs	r3, #0
 800508e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	2b01      	cmp	r3, #1
 800509c:	d119      	bne.n	80050d2 <HAL_SPI_TransmitReceive+0x2ae>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d014      	beq.n	80050d2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68da      	ldr	r2, [r3, #12]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b2:	b2d2      	uxtb	r2, r2
 80050b4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ba:	1c5a      	adds	r2, r3, #1
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	3b01      	subs	r3, #1
 80050c8:	b29a      	uxth	r2, r3
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050ce:	2301      	movs	r3, #1
 80050d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80050d2:	f7fc f90d 	bl	80012f0 <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050de:	429a      	cmp	r2, r3
 80050e0:	d803      	bhi.n	80050ea <HAL_SPI_TransmitReceive+0x2c6>
 80050e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e8:	d102      	bne.n	80050f0 <HAL_SPI_TransmitReceive+0x2cc>
 80050ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d103      	bne.n	80050f8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80050f6:	e029      	b.n	800514c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1a2      	bne.n	8005048 <HAL_SPI_TransmitReceive+0x224>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005106:	b29b      	uxth	r3, r3
 8005108:	2b00      	cmp	r3, #0
 800510a:	d19d      	bne.n	8005048 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800510c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800510e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f000 f917 	bl	8005344 <SPI_EndRxTxTransaction>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d006      	beq.n	800512a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2220      	movs	r2, #32
 8005126:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005128:	e010      	b.n	800514c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d10b      	bne.n	800514a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005132:	2300      	movs	r3, #0
 8005134:	617b      	str	r3, [r7, #20]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	617b      	str	r3, [r7, #20]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	617b      	str	r3, [r7, #20]
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	e000      	b.n	800514c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800514a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800515c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005160:	4618      	mov	r0, r3
 8005162:	3730      	adds	r7, #48	; 0x30
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b088      	sub	sp, #32
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	603b      	str	r3, [r7, #0]
 8005174:	4613      	mov	r3, r2
 8005176:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005178:	f7fc f8ba 	bl	80012f0 <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005180:	1a9b      	subs	r3, r3, r2
 8005182:	683a      	ldr	r2, [r7, #0]
 8005184:	4413      	add	r3, r2
 8005186:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005188:	f7fc f8b2 	bl	80012f0 <HAL_GetTick>
 800518c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800518e:	4b39      	ldr	r3, [pc, #228]	; (8005274 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	015b      	lsls	r3, r3, #5
 8005194:	0d1b      	lsrs	r3, r3, #20
 8005196:	69fa      	ldr	r2, [r7, #28]
 8005198:	fb02 f303 	mul.w	r3, r2, r3
 800519c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800519e:	e054      	b.n	800524a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a6:	d050      	beq.n	800524a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051a8:	f7fc f8a2 	bl	80012f0 <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	69fa      	ldr	r2, [r7, #28]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d902      	bls.n	80051be <SPI_WaitFlagStateUntilTimeout+0x56>
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d13d      	bne.n	800523a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	685a      	ldr	r2, [r3, #4]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80051cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051d6:	d111      	bne.n	80051fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051e0:	d004      	beq.n	80051ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051ea:	d107      	bne.n	80051fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005200:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005204:	d10f      	bne.n	8005226 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005214:	601a      	str	r2, [r3, #0]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005224:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e017      	b.n	800526a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d101      	bne.n	8005244 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005240:	2300      	movs	r3, #0
 8005242:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	3b01      	subs	r3, #1
 8005248:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	689a      	ldr	r2, [r3, #8]
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	4013      	ands	r3, r2
 8005254:	68ba      	ldr	r2, [r7, #8]
 8005256:	429a      	cmp	r2, r3
 8005258:	bf0c      	ite	eq
 800525a:	2301      	moveq	r3, #1
 800525c:	2300      	movne	r3, #0
 800525e:	b2db      	uxtb	r3, r3
 8005260:	461a      	mov	r2, r3
 8005262:	79fb      	ldrb	r3, [r7, #7]
 8005264:	429a      	cmp	r2, r3
 8005266:	d19b      	bne.n	80051a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3720      	adds	r7, #32
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	20000008 	.word	0x20000008

08005278 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b086      	sub	sp, #24
 800527c:	af02      	add	r7, sp, #8
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800528c:	d111      	bne.n	80052b2 <SPI_EndRxTransaction+0x3a>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005296:	d004      	beq.n	80052a2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052a0:	d107      	bne.n	80052b2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052b0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052ba:	d12a      	bne.n	8005312 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052c4:	d012      	beq.n	80052ec <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	9300      	str	r3, [sp, #0]
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	2200      	movs	r2, #0
 80052ce:	2180      	movs	r1, #128	; 0x80
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	f7ff ff49 	bl	8005168 <SPI_WaitFlagStateUntilTimeout>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d02d      	beq.n	8005338 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e0:	f043 0220 	orr.w	r2, r3, #32
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80052e8:	2303      	movs	r3, #3
 80052ea:	e026      	b.n	800533a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	9300      	str	r3, [sp, #0]
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	2200      	movs	r2, #0
 80052f4:	2101      	movs	r1, #1
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f7ff ff36 	bl	8005168 <SPI_WaitFlagStateUntilTimeout>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d01a      	beq.n	8005338 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005306:	f043 0220 	orr.w	r2, r3, #32
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e013      	b.n	800533a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	9300      	str	r3, [sp, #0]
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	2200      	movs	r2, #0
 800531a:	2101      	movs	r1, #1
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	f7ff ff23 	bl	8005168 <SPI_WaitFlagStateUntilTimeout>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d007      	beq.n	8005338 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800532c:	f043 0220 	orr.w	r2, r3, #32
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e000      	b.n	800533a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
	...

08005344 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b088      	sub	sp, #32
 8005348:	af02      	add	r7, sp, #8
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005350:	4b1b      	ldr	r3, [pc, #108]	; (80053c0 <SPI_EndRxTxTransaction+0x7c>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a1b      	ldr	r2, [pc, #108]	; (80053c4 <SPI_EndRxTxTransaction+0x80>)
 8005356:	fba2 2303 	umull	r2, r3, r2, r3
 800535a:	0d5b      	lsrs	r3, r3, #21
 800535c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005360:	fb02 f303 	mul.w	r3, r2, r3
 8005364:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800536e:	d112      	bne.n	8005396 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	9300      	str	r3, [sp, #0]
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	2200      	movs	r2, #0
 8005378:	2180      	movs	r1, #128	; 0x80
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f7ff fef4 	bl	8005168 <SPI_WaitFlagStateUntilTimeout>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d016      	beq.n	80053b4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800538a:	f043 0220 	orr.w	r2, r3, #32
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e00f      	b.n	80053b6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d00a      	beq.n	80053b2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	3b01      	subs	r3, #1
 80053a0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ac:	2b80      	cmp	r3, #128	; 0x80
 80053ae:	d0f2      	beq.n	8005396 <SPI_EndRxTxTransaction+0x52>
 80053b0:	e000      	b.n	80053b4 <SPI_EndRxTxTransaction+0x70>
        break;
 80053b2:	bf00      	nop
  }

  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3718      	adds	r7, #24
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	20000008 	.word	0x20000008
 80053c4:	165e9f81 	.word	0x165e9f81

080053c8 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d101      	bne.n	80053da <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e033      	b.n	8005442 <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d106      	bne.n	80053f4 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f7fb fdf8 	bl	8000fe4 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2202      	movs	r2, #2
 80053f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 fc47 	bl	8005c90 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	691a      	ldr	r2, [r3, #16]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005410:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	695a      	ldr	r2, [r3, #20]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005420:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68da      	ldr	r2, [r3, #12]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005430:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	641a      	str	r2, [r3, #64]	; 0x40
  husart->State = HAL_USART_STATE_READY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3708      	adds	r7, #8
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <HAL_USART_Transmit>:
  * @param  Size    Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b08a      	sub	sp, #40	; 0x28
 800544e:	af02      	add	r7, sp, #8
 8005450:	60f8      	str	r0, [r7, #12]
 8005452:	60b9      	str	r1, [r7, #8]
 8005454:	603b      	str	r3, [r7, #0]
 8005456:	4613      	mov	r3, r2
 8005458:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b01      	cmp	r3, #1
 8005464:	d17c      	bne.n	8005560 <HAL_USART_Transmit+0x116>
  {
    if ((pTxData == NULL) || (Size == 0))
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d002      	beq.n	8005472 <HAL_USART_Transmit+0x28>
 800546c:	88fb      	ldrh	r3, [r7, #6]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d101      	bne.n	8005476 <HAL_USART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e075      	b.n	8005562 <HAL_USART_Transmit+0x118>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800547c:	2b01      	cmp	r3, #1
 800547e:	d101      	bne.n	8005484 <HAL_USART_Transmit+0x3a>
 8005480:	2302      	movs	r3, #2
 8005482:	e06e      	b.n	8005562 <HAL_USART_Transmit+0x118>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	641a      	str	r2, [r3, #64]	; 0x40
    husart->State = HAL_USART_STATE_BUSY_TX;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2212      	movs	r2, #18
 8005496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800549a:	f7fb ff29 	bl	80012f0 <HAL_GetTick>
 800549e:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	88fa      	ldrh	r2, [r7, #6]
 80054a4:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	88fa      	ldrh	r2, [r7, #6]
 80054aa:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054b4:	d108      	bne.n	80054c8 <HAL_USART_Transmit+0x7e>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d104      	bne.n	80054c8 <HAL_USART_Transmit+0x7e>
    {
      ptxdata8bits  = NULL;
 80054be:	2300      	movs	r3, #0
 80054c0:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	61bb      	str	r3, [r7, #24]
 80054c6:	e003      	b.n	80054d0 <HAL_USART_Transmit+0x86>
    }
    else
    {
      ptxdata8bits  = pTxData;
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 80054cc:	2300      	movs	r3, #0
 80054ce:	61bb      	str	r3, [r7, #24]
    }

    while (husart->TxXferCount > 0U)
 80054d0:	e02a      	b.n	8005528 <HAL_USART_Transmit+0xde>
    {
      /* Wait for TXE flag in order to write data in DR */
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	9300      	str	r3, [sp, #0]
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	2200      	movs	r2, #0
 80054da:	2180      	movs	r1, #128	; 0x80
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f000 f98b 	bl	80057f8 <USART_WaitOnFlagUntilTimeout>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d001      	beq.n	80054ec <HAL_USART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	e03a      	b.n	8005562 <HAL_USART_Transmit+0x118>
      }
      if (ptxdata8bits == NULL)
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d10b      	bne.n	800550a <HAL_USART_Transmit+0xc0>
      {
        husart->Instance->DR = (uint16_t)(*ptxdata16bits & (uint16_t)0x01FF);
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	881b      	ldrh	r3, [r3, #0]
 80054f6:	461a      	mov	r2, r3
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005500:	605a      	str	r2, [r3, #4]
        ptxdata16bits++;
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	3302      	adds	r3, #2
 8005506:	61bb      	str	r3, [r7, #24]
 8005508:	e007      	b.n	800551a <HAL_USART_Transmit+0xd0>
      }
      else
      {
        husart->Instance->DR = (uint8_t)(*ptxdata8bits & (uint8_t)0xFF);
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	781a      	ldrb	r2, [r3, #0]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	605a      	str	r2, [r3, #4]
        ptxdata8bits++;
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	3301      	adds	r3, #1
 8005518:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800551e:	b29b      	uxth	r3, r3
 8005520:	3b01      	subs	r3, #1
 8005522:	b29a      	uxth	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800552c:	b29b      	uxth	r3, r3
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1cf      	bne.n	80054d2 <HAL_USART_Transmit+0x88>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	9300      	str	r3, [sp, #0]
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	2200      	movs	r2, #0
 800553a:	2140      	movs	r1, #64	; 0x40
 800553c:	68f8      	ldr	r0, [r7, #12]
 800553e:	f000 f95b 	bl	80057f8 <USART_WaitOnFlagUntilTimeout>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d001      	beq.n	800554c <HAL_USART_Transmit+0x102>
    {
      return HAL_TIMEOUT;
 8005548:	2303      	movs	r3, #3
 800554a:	e00a      	b.n	8005562 <HAL_USART_Transmit+0x118>
    }

    husart->State = HAL_USART_STATE_READY;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800555c:	2300      	movs	r3, #0
 800555e:	e000      	b.n	8005562 <HAL_USART_Transmit+0x118>
  }
  else
  {
    return HAL_BUSY;
 8005560:	2302      	movs	r3, #2
  }
}
 8005562:	4618      	mov	r0, r3
 8005564:	3720      	adds	r7, #32
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
	...

0800556c <HAL_USART_IRQHandler>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b088      	sub	sp, #32
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(husart->Instance->SR);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its   = READ_REG(husart->Instance->CR1);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its   = READ_REG(husart->Instance->CR3);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800558c:	2300      	movs	r3, #0
 800558e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005590:	2300      	movs	r3, #0
 8005592:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	f003 030f 	and.w	r3, r3, #15
 800559a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d117      	bne.n	80055d2 <HAL_USART_IRQHandler+0x66>
  {
    /* USART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	f003 0320 	and.w	r3, r3, #32
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d012      	beq.n	80055d2 <HAL_USART_IRQHandler+0x66>
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	f003 0320 	and.w	r3, r3, #32
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00d      	beq.n	80055d2 <HAL_USART_IRQHandler+0x66>
    {
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b22      	cmp	r3, #34	; 0x22
 80055c0:	d103      	bne.n	80055ca <HAL_USART_IRQHandler+0x5e>
      {
        USART_Receive_IT(husart);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 fa10 	bl	80059e8 <USART_Receive_IT>
      }
      else
      {
        USART_TransmitReceive_IT(husart);
      }
      return;
 80055c8:	e0e9      	b.n	800579e <HAL_USART_IRQHandler+0x232>
        USART_TransmitReceive_IT(husart);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 fa92 	bl	8005af4 <USART_TransmitReceive_IT>
      return;
 80055d0:	e0e5      	b.n	800579e <HAL_USART_IRQHandler+0x232>
    }
  }
  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f000 80bb 	beq.w	8005750 <HAL_USART_IRQHandler+0x1e4>
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f003 0301 	and.w	r3, r3, #1
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d105      	bne.n	80055f0 <HAL_USART_IRQHandler+0x84>
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	f000 80b0 	beq.w	8005750 <HAL_USART_IRQHandler+0x1e4>
  {
    /* USART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	f003 0301 	and.w	r3, r3, #1
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00a      	beq.n	8005610 <HAL_USART_IRQHandler+0xa4>
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005600:	2b00      	cmp	r3, #0
 8005602:	d005      	beq.n	8005610 <HAL_USART_IRQHandler+0xa4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_PE;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005608:	f043 0201 	orr.w	r2, r3, #1
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* USART noise error interrupt occurred --------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	f003 0304 	and.w	r3, r3, #4
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00a      	beq.n	8005630 <HAL_USART_IRQHandler+0xc4>
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	f003 0301 	and.w	r3, r3, #1
 8005620:	2b00      	cmp	r3, #0
 8005622:	d005      	beq.n	8005630 <HAL_USART_IRQHandler+0xc4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_NE;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005628:	f043 0202 	orr.w	r2, r3, #2
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* USART frame error interrupt occurred --------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	f003 0302 	and.w	r3, r3, #2
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00a      	beq.n	8005650 <HAL_USART_IRQHandler+0xe4>
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	f003 0301 	and.w	r3, r3, #1
 8005640:	2b00      	cmp	r3, #0
 8005642:	d005      	beq.n	8005650 <HAL_USART_IRQHandler+0xe4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_FE;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005648:	f043 0204 	orr.w	r2, r3, #4
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* USART Over-Run interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	f003 0308 	and.w	r3, r3, #8
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00f      	beq.n	800567a <HAL_USART_IRQHandler+0x10e>
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	f003 0320 	and.w	r3, r3, #32
 8005660:	2b00      	cmp	r3, #0
 8005662:	d104      	bne.n	800566e <HAL_USART_IRQHandler+0x102>
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	2b00      	cmp	r3, #0
 800566c:	d005      	beq.n	800567a <HAL_USART_IRQHandler+0x10e>
    {
      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005672:	f043 0208 	orr.w	r2, r3, #8
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	641a      	str	r2, [r3, #64]	; 0x40
    }

    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567e:	2b00      	cmp	r3, #0
 8005680:	f000 808c 	beq.w	800579c <HAL_USART_IRQHandler+0x230>
    {
      /* USART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	f003 0320 	and.w	r3, r3, #32
 800568a:	2b00      	cmp	r3, #0
 800568c:	d011      	beq.n	80056b2 <HAL_USART_IRQHandler+0x146>
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	f003 0320 	and.w	r3, r3, #32
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00c      	beq.n	80056b2 <HAL_USART_IRQHandler+0x146>
      {
        if (husart->State == HAL_USART_STATE_BUSY_RX)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	2b22      	cmp	r3, #34	; 0x22
 80056a2:	d103      	bne.n	80056ac <HAL_USART_IRQHandler+0x140>
        {
          USART_Receive_IT(husart);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 f99f 	bl	80059e8 <USART_Receive_IT>
 80056aa:	e002      	b.n	80056b2 <HAL_USART_IRQHandler+0x146>
        }
        else
        {
          USART_TransmitReceive_IT(husart);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 fa21 	bl	8005af4 <USART_TransmitReceive_IT>
        }
      }
      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
      consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	695b      	ldr	r3, [r3, #20]
 80056b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056bc:	2b40      	cmp	r3, #64	; 0x40
 80056be:	bf0c      	ite	eq
 80056c0:	2301      	moveq	r3, #1
 80056c2:	2300      	movne	r3, #0
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	60fb      	str	r3, [r7, #12]
      if (((husart->ErrorCode & HAL_USART_ERROR_ORE) != RESET) || dmarequest)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056cc:	f003 0308 	and.w	r3, r3, #8
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d102      	bne.n	80056da <HAL_USART_IRQHandler+0x16e>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d031      	beq.n	800573e <HAL_USART_IRQHandler+0x1d2>
      {
        /* Set the USART state ready to be able to start again the process,
        Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        USART_EndRxTransfer(husart);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f8e2 	bl	80058a4 <USART_EndRxTransfer>

        /* Disable the USART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	695b      	ldr	r3, [r3, #20]
 80056e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ea:	2b40      	cmp	r3, #64	; 0x40
 80056ec:	d123      	bne.n	8005736 <HAL_USART_IRQHandler+0x1ca>
        {
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	695a      	ldr	r2, [r3, #20]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056fc:	615a      	str	r2, [r3, #20]

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005702:	2b00      	cmp	r3, #0
 8005704:	d013      	beq.n	800572e <HAL_USART_IRQHandler+0x1c2>
          {
            /* Set the USART DMA Abort callback :
            will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570a:	4a26      	ldr	r2, [pc, #152]	; (80057a4 <HAL_USART_IRQHandler+0x238>)
 800570c:	651a      	str	r2, [r3, #80]	; 0x50

            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005712:	4618      	mov	r0, r3
 8005714:	f7fb ff2d 	bl	8001572 <HAL_DMA_Abort_IT>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d016      	beq.n	800574c <HAL_USART_IRQHandler+0x1e0>
            {
              /* Call Directly XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005728:	4610      	mov	r0, r2
 800572a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800572c:	e00e      	b.n	800574c <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 f858 	bl	80057e4 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8005734:	e00a      	b.n	800574c <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f854 	bl	80057e4 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800573c:	e006      	b.n	800574c <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 f850 	bl	80057e4 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800574a:	e027      	b.n	800579c <HAL_USART_IRQHandler+0x230>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800574c:	bf00      	nop
    return;
 800574e:	e025      	b.n	800579c <HAL_USART_IRQHandler+0x230>
  }

  /* USART in mode Transmitter -----------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005756:	2b00      	cmp	r3, #0
 8005758:	d012      	beq.n	8005780 <HAL_USART_IRQHandler+0x214>
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00d      	beq.n	8005780 <HAL_USART_IRQHandler+0x214>
  {
    if (husart->State == HAL_USART_STATE_BUSY_TX)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800576a:	b2db      	uxtb	r3, r3
 800576c:	2b12      	cmp	r3, #18
 800576e:	d103      	bne.n	8005778 <HAL_USART_IRQHandler+0x20c>
    {
      USART_Transmit_IT(husart);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 f8c9 	bl	8005908 <USART_Transmit_IT>
    }
    else
    {
      USART_TransmitReceive_IT(husart);
    }
    return;
 8005776:	e012      	b.n	800579e <HAL_USART_IRQHandler+0x232>
      USART_TransmitReceive_IT(husart);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 f9bb 	bl	8005af4 <USART_TransmitReceive_IT>
    return;
 800577e:	e00e      	b.n	800579e <HAL_USART_IRQHandler+0x232>
  }

  /* USART in mode Transmitter (transmission end) ----------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005786:	2b00      	cmp	r3, #0
 8005788:	d009      	beq.n	800579e <HAL_USART_IRQHandler+0x232>
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005790:	2b00      	cmp	r3, #0
 8005792:	d004      	beq.n	800579e <HAL_USART_IRQHandler+0x232>
  {
    USART_EndTransmit_IT(husart);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 f907 	bl	80059a8 <USART_EndTransmit_IT>
    return;
 800579a:	e000      	b.n	800579e <HAL_USART_IRQHandler+0x232>
    return;
 800579c:	bf00      	nop
  }
}
 800579e:	3720      	adds	r7, #32
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	080058e1 	.word	0x080058e1

080057a8 <HAL_USART_TxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxCpltCallback could be implemented in the user file
   */
}
 80057b0:	bf00      	nop
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <HAL_USART_RxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_RxCpltCallback(USART_HandleTypeDef *husart)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_RxCpltCallback could be implemented in the user file
   */
}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <HAL_USART_TxRxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxRxCpltCallback could be implemented in the user file
   */
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <HAL_USART_ErrorCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_ErrorCallback could be implemented in the user file
   */
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	603b      	str	r3, [r7, #0]
 8005804:	4613      	mov	r3, r2
 8005806:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8005808:	e038      	b.n	800587c <USART_WaitOnFlagUntilTimeout+0x84>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005810:	d034      	beq.n	800587c <USART_WaitOnFlagUntilTimeout+0x84>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d007      	beq.n	8005828 <USART_WaitOnFlagUntilTimeout+0x30>
 8005818:	f7fb fd6a 	bl	80012f0 <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	69ba      	ldr	r2, [r7, #24]
 8005824:	429a      	cmp	r2, r3
 8005826:	d229      	bcs.n	800587c <USART_WaitOnFlagUntilTimeout+0x84>
      {
        /* Disable the USART Transmit Complete Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68da      	ldr	r2, [r3, #12]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005836:	60da      	str	r2, [r3, #12]

        /* Disable the USART RXNE Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68da      	ldr	r2, [r3, #12]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f022 0220 	bic.w	r2, r2, #32
 8005846:	60da      	str	r2, [r3, #12]

        /* Disable the USART Parity Error Interrupt */
        CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68da      	ldr	r2, [r3, #12]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005856:	60da      	str	r2, [r3, #12]

        /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	695a      	ldr	r2, [r3, #20]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f022 0201 	bic.w	r2, r2, #1
 8005866:	615a      	str	r2, [r3, #20]

        husart->State = HAL_USART_STATE_READY;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e00f      	b.n	800589c <USART_WaitOnFlagUntilTimeout+0xa4>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	4013      	ands	r3, r2
 8005886:	68ba      	ldr	r2, [r7, #8]
 8005888:	429a      	cmp	r2, r3
 800588a:	bf0c      	ite	eq
 800588c:	2301      	moveq	r3, #1
 800588e:	2300      	movne	r3, #0
 8005890:	b2db      	uxtb	r3, r3
 8005892:	461a      	mov	r2, r3
 8005894:	79fb      	ldrb	r3, [r7, #7]
 8005896:	429a      	cmp	r2, r3
 8005898:	d0b7      	beq.n	800580a <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3710      	adds	r7, #16
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <USART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on USART peripheral (following error detection or Reception completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndRxTransfer(USART_HandleTypeDef *husart)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68da      	ldr	r2, [r3, #12]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80058ba:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	695a      	ldr	r2, [r3, #20]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f022 0201 	bic.w	r2, r2, #1
 80058ca:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80058d4:	bf00      	nop
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ec:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0x00U;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	865a      	strh	r2, [r3, #50]	; 0x32
  husart->TxXferCount = 0x00U;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	855a      	strh	r2, [r3, #42]	; 0x2a
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f7ff ff72 	bl	80057e4 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 8005900:	bf00      	nop
 8005902:	3710      	adds	r7, #16
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <USART_Transmit_IT>:
  *                the configuration information for the specified USART module.
  * @retval HAL status
  * @note   The USART errors are not managed to avoid the overrun error.
  */
static HAL_StatusTypeDef USART_Transmit_IT(USART_HandleTypeDef *husart)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005916:	b2db      	uxtb	r3, r3
 8005918:	2b12      	cmp	r3, #18
 800591a:	d13e      	bne.n	800599a <USART_Transmit_IT+0x92>
  {
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005924:	d114      	bne.n	8005950 <USART_Transmit_IT+0x48>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d110      	bne.n	8005950 <USART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) husart->pTxBuffPtr;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005932:	60fb      	str	r3, [r7, #12]
      husart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	881b      	ldrh	r3, [r3, #0]
 8005938:	461a      	mov	r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005942:	605a      	str	r2, [r3, #4]
      husart->pTxBuffPtr += 2U;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005948:	1c9a      	adds	r2, r3, #2
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	625a      	str	r2, [r3, #36]	; 0x24
 800594e:	e008      	b.n	8005962 <USART_Transmit_IT+0x5a>
    }
    else
    {
      husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005954:	1c59      	adds	r1, r3, #1
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	6251      	str	r1, [r2, #36]	; 0x24
 800595a:	781a      	ldrb	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	605a      	str	r2, [r3, #4]
    }

    if (--husart->TxXferCount == 0U)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005966:	b29b      	uxth	r3, r3
 8005968:	3b01      	subs	r3, #1
 800596a:	b29b      	uxth	r3, r3
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	4619      	mov	r1, r3
 8005970:	8551      	strh	r1, [r2, #42]	; 0x2a
 8005972:	2b00      	cmp	r3, #0
 8005974:	d10f      	bne.n	8005996 <USART_Transmit_IT+0x8e>
    {
      /* Disable the USART Transmit data register empty Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68da      	ldr	r2, [r3, #12]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005984:	60da      	str	r2, [r3, #12]

      /* Enable the USART Transmit Complete Interrupt */
      SET_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68da      	ldr	r2, [r3, #12]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005994:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005996:	2300      	movs	r3, #0
 8005998:	e000      	b.n	800599c <USART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800599a:	2302      	movs	r3, #2
  }
}
 800599c:	4618      	mov	r0, r3
 800599e:	3714      	adds	r7, #20
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  CLEAR_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68da      	ldr	r2, [r3, #12]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059be:	60da      	str	r2, [r3, #12]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	695a      	ldr	r2, [r3, #20]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f022 0201 	bic.w	r2, r2, #1
 80059ce:	615a      	str	r2, [r3, #20]

  husart->State = HAL_USART_STATE_READY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Tx Complete Callback */
  husart->TxCpltCallback(husart);
#else
  /* Call legacy weak Tx Complete Callback */
  HAL_USART_TxCpltCallback(husart);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f7ff fee5 	bl	80057a8 <HAL_USART_TxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

  return HAL_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3708      	adds	r7, #8
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <USART_Receive_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_Receive_IT(USART_HandleTypeDef *husart)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  if (husart->State == HAL_USART_STATE_BUSY_RX)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	2b22      	cmp	r3, #34	; 0x22
 80059fa:	d176      	bne.n	8005aea <USART_Receive_IT+0x102>
  {
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a04:	d117      	bne.n	8005a36 <USART_Receive_IT+0x4e>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d113      	bne.n	8005a36 <USART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) husart->pRxBuffPtr;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a16:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	801a      	strh	r2, [r3, #0]
      husart->pRxBuffPtr += 2U;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2e:	1c9a      	adds	r2, r3, #2
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	62da      	str	r2, [r3, #44]	; 0x2c
 8005a34:	e026      	b.n	8005a84 <USART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) husart->pRxBuffPtr;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	60bb      	str	r3, [r7, #8]

      if ((husart->Init.WordLength == USART_WORDLENGTH_9B) || ((husart->Init.WordLength == USART_WORDLENGTH_8B) && (husart->Init.Parity == USART_PARITY_NONE)))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a48:	d007      	beq.n	8005a5a <USART_Receive_IT+0x72>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d10a      	bne.n	8005a68 <USART_Receive_IT+0x80>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d106      	bne.n	8005a68 <USART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	b2da      	uxtb	r2, r3
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	701a      	strb	r2, [r3, #0]
 8005a66:	e008      	b.n	8005a7a <USART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a74:	b2da      	uxtb	r2, r3
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	701a      	strb	r2, [r3, #0]
      }

      husart->pRxBuffPtr += 1U;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7e:	1c5a      	adds	r2, r3, #1
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    husart->RxXferCount--;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	865a      	strh	r2, [r3, #50]	; 0x32

    if (husart->RxXferCount == 0U)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d120      	bne.n	8005ade <USART_Receive_IT+0xf6>
    {
      /* Disable the USART RXNE Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68da      	ldr	r2, [r3, #12]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f022 0220 	bic.w	r2, r2, #32
 8005aaa:	60da      	str	r2, [r3, #12]

      /* Disable the USART Parity Error Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68da      	ldr	r2, [r3, #12]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005aba:	60da      	str	r2, [r3, #12]

      /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	695a      	ldr	r2, [r3, #20]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f022 0201 	bic.w	r2, r2, #1
 8005aca:	615a      	str	r2, [r3, #20]

      husart->State = HAL_USART_STATE_READY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
      /* Call registered Rx Complete Callback */
      husart->RxCpltCallback(husart);
#else
      /* Call legacy weak Rx Complete Callback */
      HAL_USART_RxCpltCallback(husart);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f7ff fe71 	bl	80057bc <HAL_USART_RxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005ada:	2300      	movs	r3, #0
 8005adc:	e006      	b.n	8005aec <USART_Receive_IT+0x104>
    else
    {
      /* Send dummy byte in order to generate the clock for the slave to send the next data.
      * Whatever the frame length (7, 8 or 9-bit long), the same dummy value
      * can be written for all the cases. */
      husart->Instance->DR = (DUMMY_DATA & (uint16_t)0x0FF);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	22ff      	movs	r2, #255	; 0xff
 8005ae4:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	e000      	b.n	8005aec <USART_Receive_IT+0x104>
  }
  else
  {
    return HAL_BUSY;
 8005aea:	2302      	movs	r3, #2
  }
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <USART_TransmitReceive_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_TransmitReceive_IT(USART_HandleTypeDef *husart)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  const uint16_t *pdatatx16bits;
  uint16_t *pdatarx16bits;

  if (husart->State == HAL_USART_STATE_BUSY_TX_RX)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	2b32      	cmp	r3, #50	; 0x32
 8005b06:	f040 80bd 	bne.w	8005c84 <USART_TransmitReceive_IT+0x190>
  {
    if (husart->TxXferCount != 0x00U)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d03d      	beq.n	8005b90 <USART_TransmitReceive_IT+0x9c>
    {
      if (__HAL_USART_GET_FLAG(husart, USART_FLAG_TXE) != RESET)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b1e:	2b80      	cmp	r3, #128	; 0x80
 8005b20:	d136      	bne.n	8005b90 <USART_TransmitReceive_IT+0x9c>
      {
        if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b2a:	d114      	bne.n	8005b56 <USART_TransmitReceive_IT+0x62>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d110      	bne.n	8005b56 <USART_TransmitReceive_IT+0x62>
        {
          pdatatx16bits = (const uint16_t *) husart->pTxBuffPtr;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b38:	60fb      	str	r3, [r7, #12]
          husart->Instance->DR = (uint16_t)(*pdatatx16bits & (uint16_t)0x01FF);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	881b      	ldrh	r3, [r3, #0]
 8005b3e:	461a      	mov	r2, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b48:	605a      	str	r2, [r3, #4]
          husart->pTxBuffPtr += 2U;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4e:	1c9a      	adds	r2, r3, #2
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	625a      	str	r2, [r3, #36]	; 0x24
 8005b54:	e008      	b.n	8005b68 <USART_TransmitReceive_IT+0x74>
        }
        else
        {
          husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5a:	1c59      	adds	r1, r3, #1
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	6251      	str	r1, [r2, #36]	; 0x24
 8005b60:	781a      	ldrb	r2, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	605a      	str	r2, [r3, #4]
        }

        husart->TxXferCount--;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	b29a      	uxth	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Check the latest data transmitted */
        if (husart->TxXferCount == 0U)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d107      	bne.n	8005b90 <USART_TransmitReceive_IT+0x9c>
        {
          CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68da      	ldr	r2, [r3, #12]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b8e:	60da      	str	r2, [r3, #12]
        }
      }
    }

    if (husart->RxXferCount != 0x00U)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d04c      	beq.n	8005c34 <USART_TransmitReceive_IT+0x140>
    {
      if (__HAL_USART_GET_FLAG(husart, USART_FLAG_RXNE) != RESET)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0320 	and.w	r3, r3, #32
 8005ba4:	2b20      	cmp	r3, #32
 8005ba6:	d145      	bne.n	8005c34 <USART_TransmitReceive_IT+0x140>
      {
        if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bb0:	d115      	bne.n	8005bde <USART_TransmitReceive_IT+0xea>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d111      	bne.n	8005bde <USART_TransmitReceive_IT+0xea>
        {
          pdatarx16bits = (uint16_t *) husart->pRxBuffPtr;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bbe:	60bb      	str	r3, [r7, #8]
          *pdatarx16bits = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	801a      	strh	r2, [r3, #0]
          husart->pRxBuffPtr += 2U;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd6:	1c9a      	adds	r2, r3, #2
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	62da      	str	r2, [r3, #44]	; 0x2c
 8005bdc:	e023      	b.n	8005c26 <USART_TransmitReceive_IT+0x132>
        }
        else
        {
          if ((husart->Init.WordLength == USART_WORDLENGTH_9B) || ((husart->Init.WordLength == USART_WORDLENGTH_8B) && (husart->Init.Parity == USART_PARITY_NONE)))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005be6:	d007      	beq.n	8005bf8 <USART_TransmitReceive_IT+0x104>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d10b      	bne.n	8005c08 <USART_TransmitReceive_IT+0x114>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d107      	bne.n	8005c08 <USART_TransmitReceive_IT+0x114>
          {
            *husart->pRxBuffPtr = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	685a      	ldr	r2, [r3, #4]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c02:	b2d2      	uxtb	r2, r2
 8005c04:	701a      	strb	r2, [r3, #0]
 8005c06:	e009      	b.n	8005c1c <USART_TransmitReceive_IT+0x128>
          }
          else
          {
            *husart->pRxBuffPtr = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	b2da      	uxtb	r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c14:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005c18:	b2d2      	uxtb	r2, r2
 8005c1a:	701a      	strb	r2, [r3, #0]
          }
          husart->pRxBuffPtr += 1U;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c20:	1c5a      	adds	r2, r3, #1
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	62da      	str	r2, [r3, #44]	; 0x2c
        }

        husart->RxXferCount--;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	b29a      	uxth	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	865a      	strh	r2, [r3, #50]	; 0x32
      }
    }

    /* Check the latest data received */
    if (husart->RxXferCount == 0U)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d120      	bne.n	8005c80 <USART_TransmitReceive_IT+0x18c>
    {
      /* Disable the USART RXNE Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68da      	ldr	r2, [r3, #12]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f022 0220 	bic.w	r2, r2, #32
 8005c4c:	60da      	str	r2, [r3, #12]

      /* Disable the USART Parity Error Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68da      	ldr	r2, [r3, #12]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c5c:	60da      	str	r2, [r3, #12]

      /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	695a      	ldr	r2, [r3, #20]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f022 0201 	bic.w	r2, r2, #1
 8005c6c:	615a      	str	r2, [r3, #20]

      husart->State = HAL_USART_STATE_READY;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2201      	movs	r2, #1
 8005c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
      /* Call registered Tx Rx Complete Callback */
      husart->TxRxCpltCallback(husart);
#else
      /* Call legacy weak Tx Rx Complete Callback */
      HAL_USART_TxRxCpltCallback(husart);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f7ff fdaa 	bl	80057d0 <HAL_USART_TxRxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	e002      	b.n	8005c86 <USART_TransmitReceive_IT+0x192>
    }

    return HAL_OK;
 8005c80:	2300      	movs	r3, #0
 8005c82:	e000      	b.n	8005c86 <USART_TransmitReceive_IT+0x192>
  }
  else
  {
    return HAL_BUSY;
 8005c84:	2302      	movs	r3, #2
  }
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3710      	adds	r7, #16
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
	...

08005c90 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8005c90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c94:	b0c6      	sub	sp, #280	; 0x118
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg = 0x00U;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8005ca2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68d9      	ldr	r1, [r3, #12]
 8005caa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	f021 030c 	bic.w	r3, r1, #12
 8005cb4:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8005cb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8005cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cc6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005cca:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8005cce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cd2:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8005cd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cd8:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8005cda:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8005cdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ce0:	6a1b      	ldr	r3, [r3, #32]
 8005ce2:	431a      	orrs	r2, r3
 8005ce4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ce8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8005cea:	431a      	orrs	r2, r3
 8005cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005cf6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8005cfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d04:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8005d06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8005d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d16:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005d1a:	f023 030c 	bic.w	r3, r3, #12
 8005d1e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8005d22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d26:	689a      	ldr	r2, [r3, #8]
 8005d28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	431a      	orrs	r2, r3
 8005d30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	431a      	orrs	r2, r3
 8005d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d42:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8005d46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d50:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8005d52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	6959      	ldr	r1, [r3, #20]
 8005d5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	f421 7340 	bic.w	r3, r1, #768	; 0x300
 8005d64:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 8005d66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	4b8b      	ldr	r3, [pc, #556]	; (8005f9c <USART_SetConfig+0x30c>)
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d006      	beq.n	8005d80 <USART_SetConfig+0xf0>
 8005d72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	4b89      	ldr	r3, [pc, #548]	; (8005fa0 <USART_SetConfig+0x310>)
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	f040 8114 	bne.w	8005fa8 <USART_SetConfig+0x318>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005d80:	f7fe fc26 	bl	80045d0 <HAL_RCC_GetPCLK2Freq>
 8005d84:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8005d88:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005d92:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8005d96:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8005d9a:	4622      	mov	r2, r4
 8005d9c:	462b      	mov	r3, r5
 8005d9e:	1891      	adds	r1, r2, r2
 8005da0:	6739      	str	r1, [r7, #112]	; 0x70
 8005da2:	415b      	adcs	r3, r3
 8005da4:	677b      	str	r3, [r7, #116]	; 0x74
 8005da6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005daa:	4621      	mov	r1, r4
 8005dac:	eb12 0801 	adds.w	r8, r2, r1
 8005db0:	4629      	mov	r1, r5
 8005db2:	eb43 0901 	adc.w	r9, r3, r1
 8005db6:	f04f 0200 	mov.w	r2, #0
 8005dba:	f04f 0300 	mov.w	r3, #0
 8005dbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005dc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005dc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005dca:	4690      	mov	r8, r2
 8005dcc:	4699      	mov	r9, r3
 8005dce:	4623      	mov	r3, r4
 8005dd0:	eb18 0303 	adds.w	r3, r8, r3
 8005dd4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005dd8:	462b      	mov	r3, r5
 8005dda:	eb49 0303 	adc.w	r3, r9, r3
 8005dde:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005de2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005dee:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8005df2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005df6:	460b      	mov	r3, r1
 8005df8:	18db      	adds	r3, r3, r3
 8005dfa:	66bb      	str	r3, [r7, #104]	; 0x68
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	eb42 0303 	adc.w	r3, r2, r3
 8005e02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e04:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8005e08:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8005e0c:	f7fa f9dc 	bl	80001c8 <__aeabi_uldivmod>
 8005e10:	4602      	mov	r2, r0
 8005e12:	460b      	mov	r3, r1
 8005e14:	4b63      	ldr	r3, [pc, #396]	; (8005fa4 <USART_SetConfig+0x314>)
 8005e16:	fba3 2302 	umull	r2, r3, r3, r2
 8005e1a:	095b      	lsrs	r3, r3, #5
 8005e1c:	011c      	lsls	r4, r3, #4
 8005e1e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005e22:	2200      	movs	r2, #0
 8005e24:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005e28:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005e2c:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8005e30:	4642      	mov	r2, r8
 8005e32:	464b      	mov	r3, r9
 8005e34:	1891      	adds	r1, r2, r2
 8005e36:	6639      	str	r1, [r7, #96]	; 0x60
 8005e38:	415b      	adcs	r3, r3
 8005e3a:	667b      	str	r3, [r7, #100]	; 0x64
 8005e3c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005e40:	4641      	mov	r1, r8
 8005e42:	1851      	adds	r1, r2, r1
 8005e44:	65b9      	str	r1, [r7, #88]	; 0x58
 8005e46:	4649      	mov	r1, r9
 8005e48:	414b      	adcs	r3, r1
 8005e4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e4c:	f04f 0200 	mov.w	r2, #0
 8005e50:	f04f 0300 	mov.w	r3, #0
 8005e54:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8005e58:	4659      	mov	r1, fp
 8005e5a:	00cb      	lsls	r3, r1, #3
 8005e5c:	4651      	mov	r1, sl
 8005e5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e62:	4651      	mov	r1, sl
 8005e64:	00ca      	lsls	r2, r1, #3
 8005e66:	4610      	mov	r0, r2
 8005e68:	4619      	mov	r1, r3
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	4642      	mov	r2, r8
 8005e6e:	189b      	adds	r3, r3, r2
 8005e70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e74:	464b      	mov	r3, r9
 8005e76:	460a      	mov	r2, r1
 8005e78:	eb42 0303 	adc.w	r3, r2, r3
 8005e7c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e8c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005e90:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005e94:	460b      	mov	r3, r1
 8005e96:	18db      	adds	r3, r3, r3
 8005e98:	653b      	str	r3, [r7, #80]	; 0x50
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	eb42 0303 	adc.w	r3, r2, r3
 8005ea0:	657b      	str	r3, [r7, #84]	; 0x54
 8005ea2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005ea6:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005eaa:	f7fa f98d 	bl	80001c8 <__aeabi_uldivmod>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	4611      	mov	r1, r2
 8005eb4:	4b3b      	ldr	r3, [pc, #236]	; (8005fa4 <USART_SetConfig+0x314>)
 8005eb6:	fba3 2301 	umull	r2, r3, r3, r1
 8005eba:	095b      	lsrs	r3, r3, #5
 8005ebc:	2264      	movs	r2, #100	; 0x64
 8005ebe:	fb02 f303 	mul.w	r3, r2, r3
 8005ec2:	1acb      	subs	r3, r1, r3
 8005ec4:	00db      	lsls	r3, r3, #3
 8005ec6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005eca:	4b36      	ldr	r3, [pc, #216]	; (8005fa4 <USART_SetConfig+0x314>)
 8005ecc:	fba3 2302 	umull	r2, r3, r3, r2
 8005ed0:	095b      	lsrs	r3, r3, #5
 8005ed2:	005b      	lsls	r3, r3, #1
 8005ed4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ed8:	441c      	add	r4, r3
 8005eda:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ee4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005ee8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005eec:	4642      	mov	r2, r8
 8005eee:	464b      	mov	r3, r9
 8005ef0:	1891      	adds	r1, r2, r2
 8005ef2:	64b9      	str	r1, [r7, #72]	; 0x48
 8005ef4:	415b      	adcs	r3, r3
 8005ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ef8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005efc:	4641      	mov	r1, r8
 8005efe:	1851      	adds	r1, r2, r1
 8005f00:	6439      	str	r1, [r7, #64]	; 0x40
 8005f02:	4649      	mov	r1, r9
 8005f04:	414b      	adcs	r3, r1
 8005f06:	647b      	str	r3, [r7, #68]	; 0x44
 8005f08:	f04f 0200 	mov.w	r2, #0
 8005f0c:	f04f 0300 	mov.w	r3, #0
 8005f10:	e9d7 ab10 	ldrd	sl, fp, [r7, #64]	; 0x40
 8005f14:	4659      	mov	r1, fp
 8005f16:	00cb      	lsls	r3, r1, #3
 8005f18:	4651      	mov	r1, sl
 8005f1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f1e:	4651      	mov	r1, sl
 8005f20:	00ca      	lsls	r2, r1, #3
 8005f22:	4610      	mov	r0, r2
 8005f24:	4619      	mov	r1, r3
 8005f26:	4603      	mov	r3, r0
 8005f28:	4642      	mov	r2, r8
 8005f2a:	189b      	adds	r3, r3, r2
 8005f2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f30:	464b      	mov	r3, r9
 8005f32:	460a      	mov	r2, r1
 8005f34:	eb42 0303 	adc.w	r3, r2, r3
 8005f38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f48:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005f4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005f50:	460b      	mov	r3, r1
 8005f52:	18db      	adds	r3, r3, r3
 8005f54:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f56:	4613      	mov	r3, r2
 8005f58:	eb42 0303 	adc.w	r3, r2, r3
 8005f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f5e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005f62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005f66:	f7fa f92f 	bl	80001c8 <__aeabi_uldivmod>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	4b0d      	ldr	r3, [pc, #52]	; (8005fa4 <USART_SetConfig+0x314>)
 8005f70:	fba3 1302 	umull	r1, r3, r3, r2
 8005f74:	095b      	lsrs	r3, r3, #5
 8005f76:	2164      	movs	r1, #100	; 0x64
 8005f78:	fb01 f303 	mul.w	r3, r1, r3
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	00db      	lsls	r3, r3, #3
 8005f80:	3332      	adds	r3, #50	; 0x32
 8005f82:	4a08      	ldr	r2, [pc, #32]	; (8005fa4 <USART_SetConfig+0x314>)
 8005f84:	fba2 2303 	umull	r2, r3, r2, r3
 8005f88:	095b      	lsrs	r3, r3, #5
 8005f8a:	f003 0207 	and.w	r2, r3, #7
 8005f8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4422      	add	r2, r4
 8005f96:	609a      	str	r2, [r3, #8]
 8005f98:	e109      	b.n	80061ae <USART_SetConfig+0x51e>
 8005f9a:	bf00      	nop
 8005f9c:	40011000 	.word	0x40011000
 8005fa0:	40011400 	.word	0x40011400
 8005fa4:	51eb851f 	.word	0x51eb851f
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005fa8:	f7fe fafe 	bl	80045a8 <HAL_RCC_GetPCLK1Freq>
 8005fac:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8005fb0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005fba:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005fbe:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005fc2:	4642      	mov	r2, r8
 8005fc4:	464b      	mov	r3, r9
 8005fc6:	1891      	adds	r1, r2, r2
 8005fc8:	6339      	str	r1, [r7, #48]	; 0x30
 8005fca:	415b      	adcs	r3, r3
 8005fcc:	637b      	str	r3, [r7, #52]	; 0x34
 8005fce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005fd2:	4641      	mov	r1, r8
 8005fd4:	1854      	adds	r4, r2, r1
 8005fd6:	4649      	mov	r1, r9
 8005fd8:	eb43 0501 	adc.w	r5, r3, r1
 8005fdc:	f04f 0200 	mov.w	r2, #0
 8005fe0:	f04f 0300 	mov.w	r3, #0
 8005fe4:	00eb      	lsls	r3, r5, #3
 8005fe6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005fea:	00e2      	lsls	r2, r4, #3
 8005fec:	4614      	mov	r4, r2
 8005fee:	461d      	mov	r5, r3
 8005ff0:	4643      	mov	r3, r8
 8005ff2:	18e3      	adds	r3, r4, r3
 8005ff4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ff8:	464b      	mov	r3, r9
 8005ffa:	eb45 0303 	adc.w	r3, r5, r3
 8005ffe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006002:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800600e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006012:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006016:	460b      	mov	r3, r1
 8006018:	18db      	adds	r3, r3, r3
 800601a:	62bb      	str	r3, [r7, #40]	; 0x28
 800601c:	4613      	mov	r3, r2
 800601e:	eb42 0303 	adc.w	r3, r2, r3
 8006022:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006024:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006028:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800602c:	f7fa f8cc 	bl	80001c8 <__aeabi_uldivmod>
 8006030:	4602      	mov	r2, r0
 8006032:	460b      	mov	r3, r1
 8006034:	4b61      	ldr	r3, [pc, #388]	; (80061bc <USART_SetConfig+0x52c>)
 8006036:	fba3 2302 	umull	r2, r3, r3, r2
 800603a:	095b      	lsrs	r3, r3, #5
 800603c:	011c      	lsls	r4, r3, #4
 800603e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006042:	2200      	movs	r2, #0
 8006044:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006048:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800604c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006050:	4642      	mov	r2, r8
 8006052:	464b      	mov	r3, r9
 8006054:	1891      	adds	r1, r2, r2
 8006056:	6239      	str	r1, [r7, #32]
 8006058:	415b      	adcs	r3, r3
 800605a:	627b      	str	r3, [r7, #36]	; 0x24
 800605c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006060:	4641      	mov	r1, r8
 8006062:	eb12 0a01 	adds.w	sl, r2, r1
 8006066:	4649      	mov	r1, r9
 8006068:	eb43 0b01 	adc.w	fp, r3, r1
 800606c:	f04f 0200 	mov.w	r2, #0
 8006070:	f04f 0300 	mov.w	r3, #0
 8006074:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006078:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800607c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006080:	4692      	mov	sl, r2
 8006082:	469b      	mov	fp, r3
 8006084:	4643      	mov	r3, r8
 8006086:	eb1a 0303 	adds.w	r3, sl, r3
 800608a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800608e:	464b      	mov	r3, r9
 8006090:	eb4b 0303 	adc.w	r3, fp, r3
 8006094:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006098:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80060a4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80060a8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80060ac:	460b      	mov	r3, r1
 80060ae:	18db      	adds	r3, r3, r3
 80060b0:	61bb      	str	r3, [r7, #24]
 80060b2:	4613      	mov	r3, r2
 80060b4:	eb42 0303 	adc.w	r3, r2, r3
 80060b8:	61fb      	str	r3, [r7, #28]
 80060ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060be:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80060c2:	f7fa f881 	bl	80001c8 <__aeabi_uldivmod>
 80060c6:	4602      	mov	r2, r0
 80060c8:	460b      	mov	r3, r1
 80060ca:	4611      	mov	r1, r2
 80060cc:	4b3b      	ldr	r3, [pc, #236]	; (80061bc <USART_SetConfig+0x52c>)
 80060ce:	fba3 2301 	umull	r2, r3, r3, r1
 80060d2:	095b      	lsrs	r3, r3, #5
 80060d4:	2264      	movs	r2, #100	; 0x64
 80060d6:	fb02 f303 	mul.w	r3, r2, r3
 80060da:	1acb      	subs	r3, r1, r3
 80060dc:	00db      	lsls	r3, r3, #3
 80060de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80060e2:	4b36      	ldr	r3, [pc, #216]	; (80061bc <USART_SetConfig+0x52c>)
 80060e4:	fba3 2302 	umull	r2, r3, r3, r2
 80060e8:	095b      	lsrs	r3, r3, #5
 80060ea:	005b      	lsls	r3, r3, #1
 80060ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80060f0:	441c      	add	r4, r3
 80060f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80060f6:	2200      	movs	r2, #0
 80060f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80060fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006100:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006104:	4642      	mov	r2, r8
 8006106:	464b      	mov	r3, r9
 8006108:	1891      	adds	r1, r2, r2
 800610a:	6139      	str	r1, [r7, #16]
 800610c:	415b      	adcs	r3, r3
 800610e:	617b      	str	r3, [r7, #20]
 8006110:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006114:	4641      	mov	r1, r8
 8006116:	1851      	adds	r1, r2, r1
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	4649      	mov	r1, r9
 800611c:	414b      	adcs	r3, r1
 800611e:	60fb      	str	r3, [r7, #12]
 8006120:	f04f 0200 	mov.w	r2, #0
 8006124:	f04f 0300 	mov.w	r3, #0
 8006128:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800612c:	4659      	mov	r1, fp
 800612e:	00cb      	lsls	r3, r1, #3
 8006130:	4651      	mov	r1, sl
 8006132:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006136:	4651      	mov	r1, sl
 8006138:	00ca      	lsls	r2, r1, #3
 800613a:	4610      	mov	r0, r2
 800613c:	4619      	mov	r1, r3
 800613e:	4603      	mov	r3, r0
 8006140:	4642      	mov	r2, r8
 8006142:	189b      	adds	r3, r3, r2
 8006144:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006148:	464b      	mov	r3, r9
 800614a:	460a      	mov	r2, r1
 800614c:	eb42 0303 	adc.w	r3, r2, r3
 8006150:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006154:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	67bb      	str	r3, [r7, #120]	; 0x78
 800615e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006160:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006164:	460b      	mov	r3, r1
 8006166:	18db      	adds	r3, r3, r3
 8006168:	603b      	str	r3, [r7, #0]
 800616a:	4613      	mov	r3, r2
 800616c:	eb42 0303 	adc.w	r3, r2, r3
 8006170:	607b      	str	r3, [r7, #4]
 8006172:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006176:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800617a:	f7fa f825 	bl	80001c8 <__aeabi_uldivmod>
 800617e:	4602      	mov	r2, r0
 8006180:	460b      	mov	r3, r1
 8006182:	4b0e      	ldr	r3, [pc, #56]	; (80061bc <USART_SetConfig+0x52c>)
 8006184:	fba3 1302 	umull	r1, r3, r3, r2
 8006188:	095b      	lsrs	r3, r3, #5
 800618a:	2164      	movs	r1, #100	; 0x64
 800618c:	fb01 f303 	mul.w	r3, r1, r3
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	00db      	lsls	r3, r3, #3
 8006194:	3332      	adds	r3, #50	; 0x32
 8006196:	4a09      	ldr	r2, [pc, #36]	; (80061bc <USART_SetConfig+0x52c>)
 8006198:	fba2 2303 	umull	r2, r3, r2, r3
 800619c:	095b      	lsrs	r3, r3, #5
 800619e:	f003 0207 	and.w	r2, r3, #7
 80061a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4422      	add	r2, r4
 80061aa:	609a      	str	r2, [r3, #8]
  }
}
 80061ac:	bf00      	nop
 80061ae:	bf00      	nop
 80061b0:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80061b4:	46bd      	mov	sp, r7
 80061b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061ba:	bf00      	nop
 80061bc:	51eb851f 	.word	0x51eb851f

080061c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061c0:	b084      	sub	sp, #16
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b084      	sub	sp, #16
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
 80061ca:	f107 001c 	add.w	r0, r7, #28
 80061ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80061d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d122      	bne.n	800621e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80061ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006200:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006202:	2b01      	cmp	r3, #1
 8006204:	d105      	bne.n	8006212 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 f9c0 	bl	8006598 <USB_CoreReset>
 8006218:	4603      	mov	r3, r0
 800621a:	73fb      	strb	r3, [r7, #15]
 800621c:	e01a      	b.n	8006254 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f9b4 	bl	8006598 <USB_CoreReset>
 8006230:	4603      	mov	r3, r0
 8006232:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006236:	2b00      	cmp	r3, #0
 8006238:	d106      	bne.n	8006248 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	639a      	str	r2, [r3, #56]	; 0x38
 8006246:	e005      	b.n	8006254 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006256:	2b01      	cmp	r3, #1
 8006258:	d10b      	bne.n	8006272 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	f043 0206 	orr.w	r2, r3, #6
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	f043 0220 	orr.w	r2, r3, #32
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006272:	7bfb      	ldrb	r3, [r7, #15]
}
 8006274:	4618      	mov	r0, r3
 8006276:	3710      	adds	r7, #16
 8006278:	46bd      	mov	sp, r7
 800627a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800627e:	b004      	add	sp, #16
 8006280:	4770      	bx	lr

08006282 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006282:	b480      	push	{r7}
 8006284:	b083      	sub	sp, #12
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	f043 0201 	orr.w	r2, r3, #1
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	f023 0201 	bic.w	r2, r3, #1
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	370c      	adds	r7, #12
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr

080062c6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b084      	sub	sp, #16
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
 80062ce:	460b      	mov	r3, r1
 80062d0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80062d2:	2300      	movs	r3, #0
 80062d4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80062e2:	78fb      	ldrb	r3, [r7, #3]
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d115      	bne.n	8006314 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80062f4:	2001      	movs	r0, #1
 80062f6:	f7fb f807 	bl	8001308 <HAL_Delay>
      ms++;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	3301      	adds	r3, #1
 80062fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 f93a 	bl	800657a <USB_GetMode>
 8006306:	4603      	mov	r3, r0
 8006308:	2b01      	cmp	r3, #1
 800630a:	d01e      	beq.n	800634a <USB_SetCurrentMode+0x84>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2b31      	cmp	r3, #49	; 0x31
 8006310:	d9f0      	bls.n	80062f4 <USB_SetCurrentMode+0x2e>
 8006312:	e01a      	b.n	800634a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006314:	78fb      	ldrb	r3, [r7, #3]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d115      	bne.n	8006346 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006326:	2001      	movs	r0, #1
 8006328:	f7fa ffee 	bl	8001308 <HAL_Delay>
      ms++;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	3301      	adds	r3, #1
 8006330:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 f921 	bl	800657a <USB_GetMode>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d005      	beq.n	800634a <USB_SetCurrentMode+0x84>
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2b31      	cmp	r3, #49	; 0x31
 8006342:	d9f0      	bls.n	8006326 <USB_SetCurrentMode+0x60>
 8006344:	e001      	b.n	800634a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e005      	b.n	8006356 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2b32      	cmp	r3, #50	; 0x32
 800634e:	d101      	bne.n	8006354 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	e000      	b.n	8006356 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3710      	adds	r7, #16
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
	...

08006360 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800636a:	2300      	movs	r3, #0
 800636c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	3301      	adds	r3, #1
 8006372:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	4a13      	ldr	r2, [pc, #76]	; (80063c4 <USB_FlushTxFifo+0x64>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d901      	bls.n	8006380 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800637c:	2303      	movs	r3, #3
 800637e:	e01b      	b.n	80063b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	2b00      	cmp	r3, #0
 8006386:	daf2      	bge.n	800636e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006388:	2300      	movs	r3, #0
 800638a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	019b      	lsls	r3, r3, #6
 8006390:	f043 0220 	orr.w	r2, r3, #32
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	3301      	adds	r3, #1
 800639c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	4a08      	ldr	r2, [pc, #32]	; (80063c4 <USB_FlushTxFifo+0x64>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d901      	bls.n	80063aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80063a6:	2303      	movs	r3, #3
 80063a8:	e006      	b.n	80063b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	f003 0320 	and.w	r3, r3, #32
 80063b2:	2b20      	cmp	r3, #32
 80063b4:	d0f0      	beq.n	8006398 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3714      	adds	r7, #20
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr
 80063c4:	00030d40 	.word	0x00030d40

080063c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80063d0:	2300      	movs	r3, #0
 80063d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	3301      	adds	r3, #1
 80063d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	4a11      	ldr	r2, [pc, #68]	; (8006424 <USB_FlushRxFifo+0x5c>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d901      	bls.n	80063e6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e018      	b.n	8006418 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	daf2      	bge.n	80063d4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80063ee:	2300      	movs	r3, #0
 80063f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2210      	movs	r2, #16
 80063f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	3301      	adds	r3, #1
 80063fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	4a08      	ldr	r2, [pc, #32]	; (8006424 <USB_FlushRxFifo+0x5c>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d901      	bls.n	800640a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006406:	2303      	movs	r3, #3
 8006408:	e006      	b.n	8006418 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	f003 0310 	and.w	r3, r3, #16
 8006412:	2b10      	cmp	r3, #16
 8006414:	d0f0      	beq.n	80063f8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3714      	adds	r7, #20
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr
 8006424:	00030d40 	.word	0x00030d40

08006428 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006428:	b480      	push	{r7}
 800642a:	b089      	sub	sp, #36	; 0x24
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	4611      	mov	r1, r2
 8006434:	461a      	mov	r2, r3
 8006436:	460b      	mov	r3, r1
 8006438:	71fb      	strb	r3, [r7, #7]
 800643a:	4613      	mov	r3, r2
 800643c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006446:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800644a:	2b00      	cmp	r3, #0
 800644c:	d123      	bne.n	8006496 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800644e:	88bb      	ldrh	r3, [r7, #4]
 8006450:	3303      	adds	r3, #3
 8006452:	089b      	lsrs	r3, r3, #2
 8006454:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006456:	2300      	movs	r3, #0
 8006458:	61bb      	str	r3, [r7, #24]
 800645a:	e018      	b.n	800648e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800645c:	79fb      	ldrb	r3, [r7, #7]
 800645e:	031a      	lsls	r2, r3, #12
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	4413      	add	r3, r2
 8006464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006468:	461a      	mov	r2, r3
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	3301      	adds	r3, #1
 8006474:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	3301      	adds	r3, #1
 800647a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	3301      	adds	r3, #1
 8006480:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	3301      	adds	r3, #1
 8006486:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	3301      	adds	r3, #1
 800648c:	61bb      	str	r3, [r7, #24]
 800648e:	69ba      	ldr	r2, [r7, #24]
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	429a      	cmp	r2, r3
 8006494:	d3e2      	bcc.n	800645c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	3724      	adds	r7, #36	; 0x24
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b08b      	sub	sp, #44	; 0x2c
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	4613      	mov	r3, r2
 80064b0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80064ba:	88fb      	ldrh	r3, [r7, #6]
 80064bc:	089b      	lsrs	r3, r3, #2
 80064be:	b29b      	uxth	r3, r3
 80064c0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80064c2:	88fb      	ldrh	r3, [r7, #6]
 80064c4:	f003 0303 	and.w	r3, r3, #3
 80064c8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80064ca:	2300      	movs	r3, #0
 80064cc:	623b      	str	r3, [r7, #32]
 80064ce:	e014      	b.n	80064fa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064da:	601a      	str	r2, [r3, #0]
    pDest++;
 80064dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064de:	3301      	adds	r3, #1
 80064e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80064e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e4:	3301      	adds	r3, #1
 80064e6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80064e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ea:	3301      	adds	r3, #1
 80064ec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80064ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f0:	3301      	adds	r3, #1
 80064f2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80064f4:	6a3b      	ldr	r3, [r7, #32]
 80064f6:	3301      	adds	r3, #1
 80064f8:	623b      	str	r3, [r7, #32]
 80064fa:	6a3a      	ldr	r2, [r7, #32]
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d3e6      	bcc.n	80064d0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006502:	8bfb      	ldrh	r3, [r7, #30]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d01e      	beq.n	8006546 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006508:	2300      	movs	r3, #0
 800650a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006512:	461a      	mov	r2, r3
 8006514:	f107 0310 	add.w	r3, r7, #16
 8006518:	6812      	ldr	r2, [r2, #0]
 800651a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800651c:	693a      	ldr	r2, [r7, #16]
 800651e:	6a3b      	ldr	r3, [r7, #32]
 8006520:	b2db      	uxtb	r3, r3
 8006522:	00db      	lsls	r3, r3, #3
 8006524:	fa22 f303 	lsr.w	r3, r2, r3
 8006528:	b2da      	uxtb	r2, r3
 800652a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652c:	701a      	strb	r2, [r3, #0]
      i++;
 800652e:	6a3b      	ldr	r3, [r7, #32]
 8006530:	3301      	adds	r3, #1
 8006532:	623b      	str	r3, [r7, #32]
      pDest++;
 8006534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006536:	3301      	adds	r3, #1
 8006538:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800653a:	8bfb      	ldrh	r3, [r7, #30]
 800653c:	3b01      	subs	r3, #1
 800653e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006540:	8bfb      	ldrh	r3, [r7, #30]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1ea      	bne.n	800651c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006548:	4618      	mov	r0, r3
 800654a:	372c      	adds	r7, #44	; 0x2c
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	695b      	ldr	r3, [r3, #20]
 8006560:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	699b      	ldr	r3, [r3, #24]
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	4013      	ands	r3, r2
 800656a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800656c:	68fb      	ldr	r3, [r7, #12]
}
 800656e:	4618      	mov	r0, r3
 8006570:	3714      	adds	r7, #20
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr

0800657a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800657a:	b480      	push	{r7}
 800657c:	b083      	sub	sp, #12
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	f003 0301 	and.w	r3, r3, #1
}
 800658a:	4618      	mov	r0, r3
 800658c:	370c      	adds	r7, #12
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr
	...

08006598 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006598:	b480      	push	{r7}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065a0:	2300      	movs	r3, #0
 80065a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	3301      	adds	r3, #1
 80065a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	4a13      	ldr	r2, [pc, #76]	; (80065fc <USB_CoreReset+0x64>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d901      	bls.n	80065b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	e01b      	b.n	80065ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	daf2      	bge.n	80065a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80065be:	2300      	movs	r3, #0
 80065c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	f043 0201 	orr.w	r2, r3, #1
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	3301      	adds	r3, #1
 80065d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	4a09      	ldr	r2, [pc, #36]	; (80065fc <USB_CoreReset+0x64>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d901      	bls.n	80065e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80065dc:	2303      	movs	r3, #3
 80065de:	e006      	b.n	80065ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	f003 0301 	and.w	r3, r3, #1
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d0f0      	beq.n	80065ce <USB_CoreReset+0x36>

  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3714      	adds	r7, #20
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	00030d40 	.word	0x00030d40

08006600 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006600:	b084      	sub	sp, #16
 8006602:	b580      	push	{r7, lr}
 8006604:	b086      	sub	sp, #24
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
 800660a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800660e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006612:	2300      	movs	r3, #0
 8006614:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006620:	461a      	mov	r2, r3
 8006622:	2300      	movs	r3, #0
 8006624:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800662a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006636:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006642:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800664e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006652:	2b00      	cmp	r3, #0
 8006654:	d018      	beq.n	8006688 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006658:	2b01      	cmp	r3, #1
 800665a:	d10a      	bne.n	8006672 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800666a:	f043 0304 	orr.w	r3, r3, #4
 800666e:	6013      	str	r3, [r2, #0]
 8006670:	e014      	b.n	800669c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006680:	f023 0304 	bic.w	r3, r3, #4
 8006684:	6013      	str	r3, [r2, #0]
 8006686:	e009      	b.n	800669c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006696:	f023 0304 	bic.w	r3, r3, #4
 800669a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800669c:	2110      	movs	r1, #16
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f7ff fe5e 	bl	8006360 <USB_FlushTxFifo>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d001      	beq.n	80066ae <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f7ff fe8a 	bl	80063c8 <USB_FlushRxFifo>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d001      	beq.n	80066be <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80066be:	2300      	movs	r3, #0
 80066c0:	613b      	str	r3, [r7, #16]
 80066c2:	e015      	b.n	80066f0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	015a      	lsls	r2, r3, #5
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	4413      	add	r3, r2
 80066cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066d0:	461a      	mov	r2, r3
 80066d2:	f04f 33ff 	mov.w	r3, #4294967295
 80066d6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	015a      	lsls	r2, r3, #5
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	4413      	add	r3, r2
 80066e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066e4:	461a      	mov	r2, r3
 80066e6:	2300      	movs	r3, #0
 80066e8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	3301      	adds	r3, #1
 80066ee:	613b      	str	r3, [r7, #16]
 80066f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f2:	693a      	ldr	r2, [r7, #16]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d3e5      	bcc.n	80066c4 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f04f 32ff 	mov.w	r2, #4294967295
 8006704:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800670a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00b      	beq.n	800672a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006718:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a13      	ldr	r2, [pc, #76]	; (800676c <USB_HostInit+0x16c>)
 800671e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a13      	ldr	r2, [pc, #76]	; (8006770 <USB_HostInit+0x170>)
 8006724:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006728:	e009      	b.n	800673e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2280      	movs	r2, #128	; 0x80
 800672e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a10      	ldr	r2, [pc, #64]	; (8006774 <USB_HostInit+0x174>)
 8006734:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a0f      	ldr	r2, [pc, #60]	; (8006778 <USB_HostInit+0x178>)
 800673a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800673e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006740:	2b00      	cmp	r3, #0
 8006742:	d105      	bne.n	8006750 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	699b      	ldr	r3, [r3, #24]
 8006748:	f043 0210 	orr.w	r2, r3, #16
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	699a      	ldr	r2, [r3, #24]
 8006754:	4b09      	ldr	r3, [pc, #36]	; (800677c <USB_HostInit+0x17c>)
 8006756:	4313      	orrs	r3, r2
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800675c:	7dfb      	ldrb	r3, [r7, #23]
}
 800675e:	4618      	mov	r0, r3
 8006760:	3718      	adds	r7, #24
 8006762:	46bd      	mov	sp, r7
 8006764:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006768:	b004      	add	sp, #16
 800676a:	4770      	bx	lr
 800676c:	01000200 	.word	0x01000200
 8006770:	00e00300 	.word	0x00e00300
 8006774:	00600080 	.word	0x00600080
 8006778:	004000e0 	.word	0x004000e0
 800677c:	a3200008 	.word	0xa3200008

08006780 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006780:	b480      	push	{r7}
 8006782:	b085      	sub	sp, #20
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	460b      	mov	r3, r1
 800678a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800679e:	f023 0303 	bic.w	r3, r3, #3
 80067a2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	78fb      	ldrb	r3, [r7, #3]
 80067ae:	f003 0303 	and.w	r3, r3, #3
 80067b2:	68f9      	ldr	r1, [r7, #12]
 80067b4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80067b8:	4313      	orrs	r3, r2
 80067ba:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80067bc:	78fb      	ldrb	r3, [r7, #3]
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d107      	bne.n	80067d2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067c8:	461a      	mov	r2, r3
 80067ca:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80067ce:	6053      	str	r3, [r2, #4]
 80067d0:	e009      	b.n	80067e6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80067d2:	78fb      	ldrb	r3, [r7, #3]
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	d106      	bne.n	80067e6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067de:	461a      	mov	r2, r3
 80067e0:	f241 7370 	movw	r3, #6000	; 0x1770
 80067e4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3714      	adds	r7, #20
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b085      	sub	sp, #20
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	460b      	mov	r3, r1
 80067fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006804:	2300      	movs	r3, #0
 8006806:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006818:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006820:	2b00      	cmp	r3, #0
 8006822:	d109      	bne.n	8006838 <USB_DriveVbus+0x44>
 8006824:	78fb      	ldrb	r3, [r7, #3]
 8006826:	2b01      	cmp	r3, #1
 8006828:	d106      	bne.n	8006838 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006832:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006836:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800683e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006842:	d109      	bne.n	8006858 <USB_DriveVbus+0x64>
 8006844:	78fb      	ldrb	r3, [r7, #3]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d106      	bne.n	8006858 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006852:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006856:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3714      	adds	r7, #20
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr

08006866 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006866:	b480      	push	{r7}
 8006868:	b085      	sub	sp, #20
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006872:	2300      	movs	r3, #0
 8006874:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	0c5b      	lsrs	r3, r3, #17
 8006884:	f003 0303 	and.w	r3, r3, #3
}
 8006888:	4618      	mov	r0, r3
 800688a:	3714      	adds	r7, #20
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006894:	b480      	push	{r7}
 8006896:	b085      	sub	sp, #20
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	b29b      	uxth	r3, r3
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3714      	adds	r7, #20
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr
	...

080068b8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b088      	sub	sp, #32
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	4608      	mov	r0, r1
 80068c2:	4611      	mov	r1, r2
 80068c4:	461a      	mov	r2, r3
 80068c6:	4603      	mov	r3, r0
 80068c8:	70fb      	strb	r3, [r7, #3]
 80068ca:	460b      	mov	r3, r1
 80068cc:	70bb      	strb	r3, [r7, #2]
 80068ce:	4613      	mov	r3, r2
 80068d0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80068d2:	2300      	movs	r3, #0
 80068d4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80068da:	78fb      	ldrb	r3, [r7, #3]
 80068dc:	015a      	lsls	r2, r3, #5
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	4413      	add	r3, r2
 80068e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068e6:	461a      	mov	r2, r3
 80068e8:	f04f 33ff 	mov.w	r3, #4294967295
 80068ec:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80068ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80068f2:	2b03      	cmp	r3, #3
 80068f4:	d87e      	bhi.n	80069f4 <USB_HC_Init+0x13c>
 80068f6:	a201      	add	r2, pc, #4	; (adr r2, 80068fc <USB_HC_Init+0x44>)
 80068f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068fc:	0800690d 	.word	0x0800690d
 8006900:	080069b7 	.word	0x080069b7
 8006904:	0800690d 	.word	0x0800690d
 8006908:	08006979 	.word	0x08006979
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800690c:	78fb      	ldrb	r3, [r7, #3]
 800690e:	015a      	lsls	r2, r3, #5
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	4413      	add	r3, r2
 8006914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006918:	461a      	mov	r2, r3
 800691a:	f240 439d 	movw	r3, #1181	; 0x49d
 800691e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006920:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006924:	2b00      	cmp	r3, #0
 8006926:	da10      	bge.n	800694a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006928:	78fb      	ldrb	r3, [r7, #3]
 800692a:	015a      	lsls	r2, r3, #5
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	4413      	add	r3, r2
 8006930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	78fa      	ldrb	r2, [r7, #3]
 8006938:	0151      	lsls	r1, r2, #5
 800693a:	693a      	ldr	r2, [r7, #16]
 800693c:	440a      	add	r2, r1
 800693e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006946:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006948:	e057      	b.n	80069fa <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800694e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006952:	2b00      	cmp	r3, #0
 8006954:	d051      	beq.n	80069fa <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006956:	78fb      	ldrb	r3, [r7, #3]
 8006958:	015a      	lsls	r2, r3, #5
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	4413      	add	r3, r2
 800695e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	78fa      	ldrb	r2, [r7, #3]
 8006966:	0151      	lsls	r1, r2, #5
 8006968:	693a      	ldr	r2, [r7, #16]
 800696a:	440a      	add	r2, r1
 800696c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006970:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006974:	60d3      	str	r3, [r2, #12]
      break;
 8006976:	e040      	b.n	80069fa <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006978:	78fb      	ldrb	r3, [r7, #3]
 800697a:	015a      	lsls	r2, r3, #5
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	4413      	add	r3, r2
 8006980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006984:	461a      	mov	r2, r3
 8006986:	f240 639d 	movw	r3, #1693	; 0x69d
 800698a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800698c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006990:	2b00      	cmp	r3, #0
 8006992:	da34      	bge.n	80069fe <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006994:	78fb      	ldrb	r3, [r7, #3]
 8006996:	015a      	lsls	r2, r3, #5
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	4413      	add	r3, r2
 800699c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	78fa      	ldrb	r2, [r7, #3]
 80069a4:	0151      	lsls	r1, r2, #5
 80069a6:	693a      	ldr	r2, [r7, #16]
 80069a8:	440a      	add	r2, r1
 80069aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069b2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80069b4:	e023      	b.n	80069fe <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80069b6:	78fb      	ldrb	r3, [r7, #3]
 80069b8:	015a      	lsls	r2, r3, #5
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	4413      	add	r3, r2
 80069be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069c2:	461a      	mov	r2, r3
 80069c4:	f240 2325 	movw	r3, #549	; 0x225
 80069c8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80069ca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	da17      	bge.n	8006a02 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80069d2:	78fb      	ldrb	r3, [r7, #3]
 80069d4:	015a      	lsls	r2, r3, #5
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	4413      	add	r3, r2
 80069da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	78fa      	ldrb	r2, [r7, #3]
 80069e2:	0151      	lsls	r1, r2, #5
 80069e4:	693a      	ldr	r2, [r7, #16]
 80069e6:	440a      	add	r2, r1
 80069e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069ec:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80069f0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80069f2:	e006      	b.n	8006a02 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	77fb      	strb	r3, [r7, #31]
      break;
 80069f8:	e004      	b.n	8006a04 <USB_HC_Init+0x14c>
      break;
 80069fa:	bf00      	nop
 80069fc:	e002      	b.n	8006a04 <USB_HC_Init+0x14c>
      break;
 80069fe:	bf00      	nop
 8006a00:	e000      	b.n	8006a04 <USB_HC_Init+0x14c>
      break;
 8006a02:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006a04:	78fb      	ldrb	r3, [r7, #3]
 8006a06:	015a      	lsls	r2, r3, #5
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	78fa      	ldrb	r2, [r7, #3]
 8006a14:	0151      	lsls	r1, r2, #5
 8006a16:	693a      	ldr	r2, [r7, #16]
 8006a18:	440a      	add	r2, r1
 8006a1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a1e:	f043 0302 	orr.w	r3, r3, #2
 8006a22:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a2a:	699a      	ldr	r2, [r3, #24]
 8006a2c:	78fb      	ldrb	r3, [r7, #3]
 8006a2e:	f003 030f 	and.w	r3, r3, #15
 8006a32:	2101      	movs	r1, #1
 8006a34:	fa01 f303 	lsl.w	r3, r1, r3
 8006a38:	6939      	ldr	r1, [r7, #16]
 8006a3a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	699b      	ldr	r3, [r3, #24]
 8006a46:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006a4e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	da03      	bge.n	8006a5e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006a56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a5a:	61bb      	str	r3, [r7, #24]
 8006a5c:	e001      	b.n	8006a62 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f7ff feff 	bl	8006866 <USB_GetHostSpeed>
 8006a68:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006a6a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006a6e:	2b02      	cmp	r3, #2
 8006a70:	d106      	bne.n	8006a80 <USB_HC_Init+0x1c8>
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2b02      	cmp	r3, #2
 8006a76:	d003      	beq.n	8006a80 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006a78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006a7c:	617b      	str	r3, [r7, #20]
 8006a7e:	e001      	b.n	8006a84 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006a80:	2300      	movs	r3, #0
 8006a82:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a84:	787b      	ldrb	r3, [r7, #1]
 8006a86:	059b      	lsls	r3, r3, #22
 8006a88:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006a8c:	78bb      	ldrb	r3, [r7, #2]
 8006a8e:	02db      	lsls	r3, r3, #11
 8006a90:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a94:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006a96:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006a9a:	049b      	lsls	r3, r3, #18
 8006a9c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006aa0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006aa2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006aa4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006aa8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006aae:	78fb      	ldrb	r3, [r7, #3]
 8006ab0:	0159      	lsls	r1, r3, #5
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	440b      	add	r3, r1
 8006ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aba:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006ac0:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006ac2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006ac6:	2b03      	cmp	r3, #3
 8006ac8:	d003      	beq.n	8006ad2 <USB_HC_Init+0x21a>
 8006aca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d10f      	bne.n	8006af2 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006ad2:	78fb      	ldrb	r3, [r7, #3]
 8006ad4:	015a      	lsls	r2, r3, #5
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	4413      	add	r3, r2
 8006ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	78fa      	ldrb	r2, [r7, #3]
 8006ae2:	0151      	lsls	r1, r2, #5
 8006ae4:	693a      	ldr	r2, [r7, #16]
 8006ae6:	440a      	add	r2, r1
 8006ae8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006aec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006af0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006af2:	7ffb      	ldrb	r3, [r7, #31]
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3720      	adds	r7, #32
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b08c      	sub	sp, #48	; 0x30
 8006b00:	af02      	add	r7, sp, #8
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	4613      	mov	r3, r2
 8006b08:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	785b      	ldrb	r3, [r3, #1]
 8006b12:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006b14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b18:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d02d      	beq.n	8006b82 <USB_HC_StartXfer+0x86>
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	791b      	ldrb	r3, [r3, #4]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d129      	bne.n	8006b82 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006b2e:	79fb      	ldrb	r3, [r7, #7]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d117      	bne.n	8006b64 <USB_HC_StartXfer+0x68>
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	79db      	ldrb	r3, [r3, #7]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d003      	beq.n	8006b44 <USB_HC_StartXfer+0x48>
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	79db      	ldrb	r3, [r3, #7]
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	d10f      	bne.n	8006b64 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	015a      	lsls	r2, r3, #5
 8006b48:	6a3b      	ldr	r3, [r7, #32]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	69fa      	ldr	r2, [r7, #28]
 8006b54:	0151      	lsls	r1, r2, #5
 8006b56:	6a3a      	ldr	r2, [r7, #32]
 8006b58:	440a      	add	r2, r1
 8006b5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b62:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006b64:	79fb      	ldrb	r3, [r7, #7]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d10b      	bne.n	8006b82 <USB_HC_StartXfer+0x86>
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	795b      	ldrb	r3, [r3, #5]
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d107      	bne.n	8006b82 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	785b      	ldrb	r3, [r3, #1]
 8006b76:	4619      	mov	r1, r3
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	f000 fa0f 	bl	8006f9c <USB_DoPing>
      return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	e0f8      	b.n	8006d74 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	695b      	ldr	r3, [r3, #20]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d018      	beq.n	8006bbc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	695b      	ldr	r3, [r3, #20]
 8006b8e:	68ba      	ldr	r2, [r7, #8]
 8006b90:	8912      	ldrh	r2, [r2, #8]
 8006b92:	4413      	add	r3, r2
 8006b94:	3b01      	subs	r3, #1
 8006b96:	68ba      	ldr	r2, [r7, #8]
 8006b98:	8912      	ldrh	r2, [r2, #8]
 8006b9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b9e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006ba0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006ba2:	8b7b      	ldrh	r3, [r7, #26]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d90b      	bls.n	8006bc0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006ba8:	8b7b      	ldrh	r3, [r7, #26]
 8006baa:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006bac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006bae:	68ba      	ldr	r2, [r7, #8]
 8006bb0:	8912      	ldrh	r2, [r2, #8]
 8006bb2:	fb03 f202 	mul.w	r2, r3, r2
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	611a      	str	r2, [r3, #16]
 8006bba:	e001      	b.n	8006bc0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	78db      	ldrb	r3, [r3, #3]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d007      	beq.n	8006bd8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006bc8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006bca:	68ba      	ldr	r2, [r7, #8]
 8006bcc:	8912      	ldrh	r2, [r2, #8]
 8006bce:	fb03 f202 	mul.w	r2, r3, r2
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	611a      	str	r2, [r3, #16]
 8006bd6:	e003      	b.n	8006be0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	695a      	ldr	r2, [r3, #20]
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	691b      	ldr	r3, [r3, #16]
 8006be4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006be8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006bea:	04d9      	lsls	r1, r3, #19
 8006bec:	4b63      	ldr	r3, [pc, #396]	; (8006d7c <USB_HC_StartXfer+0x280>)
 8006bee:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006bf0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	7a9b      	ldrb	r3, [r3, #10]
 8006bf6:	075b      	lsls	r3, r3, #29
 8006bf8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006bfc:	69f9      	ldr	r1, [r7, #28]
 8006bfe:	0148      	lsls	r0, r1, #5
 8006c00:	6a39      	ldr	r1, [r7, #32]
 8006c02:	4401      	add	r1, r0
 8006c04:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006c08:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006c0a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006c0c:	79fb      	ldrb	r3, [r7, #7]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d009      	beq.n	8006c26 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	68d9      	ldr	r1, [r3, #12]
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	015a      	lsls	r2, r3, #5
 8006c1a:	6a3b      	ldr	r3, [r7, #32]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c22:	460a      	mov	r2, r1
 8006c24:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006c26:	6a3b      	ldr	r3, [r7, #32]
 8006c28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	f003 0301 	and.w	r3, r3, #1
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	bf0c      	ite	eq
 8006c36:	2301      	moveq	r3, #1
 8006c38:	2300      	movne	r3, #0
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	015a      	lsls	r2, r3, #5
 8006c42:	6a3b      	ldr	r3, [r7, #32]
 8006c44:	4413      	add	r3, r2
 8006c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	69fa      	ldr	r2, [r7, #28]
 8006c4e:	0151      	lsls	r1, r2, #5
 8006c50:	6a3a      	ldr	r2, [r7, #32]
 8006c52:	440a      	add	r2, r1
 8006c54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c58:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006c5c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	015a      	lsls	r2, r3, #5
 8006c62:	6a3b      	ldr	r3, [r7, #32]
 8006c64:	4413      	add	r3, r2
 8006c66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	7e7b      	ldrb	r3, [r7, #25]
 8006c6e:	075b      	lsls	r3, r3, #29
 8006c70:	69f9      	ldr	r1, [r7, #28]
 8006c72:	0148      	lsls	r0, r1, #5
 8006c74:	6a39      	ldr	r1, [r7, #32]
 8006c76:	4401      	add	r1, r0
 8006c78:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	015a      	lsls	r2, r3, #5
 8006c84:	6a3b      	ldr	r3, [r7, #32]
 8006c86:	4413      	add	r3, r2
 8006c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c96:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	78db      	ldrb	r3, [r3, #3]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d004      	beq.n	8006caa <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ca6:	613b      	str	r3, [r7, #16]
 8006ca8:	e003      	b.n	8006cb2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006cb0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006cb8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	015a      	lsls	r2, r3, #5
 8006cbe:	6a3b      	ldr	r3, [r7, #32]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006ccc:	79fb      	ldrb	r3, [r7, #7]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d001      	beq.n	8006cd6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	e04e      	b.n	8006d74 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	78db      	ldrb	r3, [r3, #3]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d149      	bne.n	8006d72 <USB_HC_StartXfer+0x276>
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	695b      	ldr	r3, [r3, #20]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d045      	beq.n	8006d72 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	79db      	ldrb	r3, [r3, #7]
 8006cea:	2b03      	cmp	r3, #3
 8006cec:	d830      	bhi.n	8006d50 <USB_HC_StartXfer+0x254>
 8006cee:	a201      	add	r2, pc, #4	; (adr r2, 8006cf4 <USB_HC_StartXfer+0x1f8>)
 8006cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf4:	08006d05 	.word	0x08006d05
 8006cf8:	08006d29 	.word	0x08006d29
 8006cfc:	08006d05 	.word	0x08006d05
 8006d00:	08006d29 	.word	0x08006d29
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	695b      	ldr	r3, [r3, #20]
 8006d08:	3303      	adds	r3, #3
 8006d0a:	089b      	lsrs	r3, r3, #2
 8006d0c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006d0e:	8afa      	ldrh	r2, [r7, #22]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d91c      	bls.n	8006d54 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	699b      	ldr	r3, [r3, #24]
 8006d1e:	f043 0220 	orr.w	r2, r3, #32
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	619a      	str	r2, [r3, #24]
        }
        break;
 8006d26:	e015      	b.n	8006d54 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	695b      	ldr	r3, [r3, #20]
 8006d2c:	3303      	adds	r3, #3
 8006d2e:	089b      	lsrs	r3, r3, #2
 8006d30:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006d32:	8afa      	ldrh	r2, [r7, #22]
 8006d34:	6a3b      	ldr	r3, [r7, #32]
 8006d36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d90a      	bls.n	8006d58 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	699b      	ldr	r3, [r3, #24]
 8006d46:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	619a      	str	r2, [r3, #24]
        }
        break;
 8006d4e:	e003      	b.n	8006d58 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006d50:	bf00      	nop
 8006d52:	e002      	b.n	8006d5a <USB_HC_StartXfer+0x25e>
        break;
 8006d54:	bf00      	nop
 8006d56:	e000      	b.n	8006d5a <USB_HC_StartXfer+0x25e>
        break;
 8006d58:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	68d9      	ldr	r1, [r3, #12]
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	785a      	ldrb	r2, [r3, #1]
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	695b      	ldr	r3, [r3, #20]
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	2000      	movs	r0, #0
 8006d6a:	9000      	str	r0, [sp, #0]
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f7ff fb5b 	bl	8006428 <USB_WritePacket>
  }

  return HAL_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3728      	adds	r7, #40	; 0x28
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	1ff80000 	.word	0x1ff80000

08006d80 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d92:	695b      	ldr	r3, [r3, #20]
 8006d94:	b29b      	uxth	r3, r3
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3714      	adds	r7, #20
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr

08006da2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006da2:	b480      	push	{r7}
 8006da4:	b089      	sub	sp, #36	; 0x24
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
 8006daa:	460b      	mov	r3, r1
 8006dac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006db2:	78fb      	ldrb	r3, [r7, #3]
 8006db4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006db6:	2300      	movs	r3, #0
 8006db8:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	015a      	lsls	r2, r3, #5
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	0c9b      	lsrs	r3, r3, #18
 8006dca:	f003 0303 	and.w	r3, r3, #3
 8006dce:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	015a      	lsls	r2, r3, #5
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	0fdb      	lsrs	r3, r3, #31
 8006de0:	f003 0301 	and.w	r3, r3, #1
 8006de4:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	f003 0320 	and.w	r3, r3, #32
 8006dee:	2b20      	cmp	r3, #32
 8006df0:	d104      	bne.n	8006dfc <USB_HC_Halt+0x5a>
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d101      	bne.n	8006dfc <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	e0c8      	b.n	8006f8e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d002      	beq.n	8006e08 <USB_HC_Halt+0x66>
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	d163      	bne.n	8006ed0 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	015a      	lsls	r2, r3, #5
 8006e0c:	69fb      	ldr	r3, [r7, #28]
 8006e0e:	4413      	add	r3, r2
 8006e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	69ba      	ldr	r2, [r7, #24]
 8006e18:	0151      	lsls	r1, r2, #5
 8006e1a:	69fa      	ldr	r2, [r7, #28]
 8006e1c:	440a      	add	r2, r1
 8006e1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e26:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	f003 0320 	and.w	r3, r3, #32
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f040 80ab 	bne.w	8006f8c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e3a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d133      	bne.n	8006eaa <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	015a      	lsls	r2, r3, #5
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	4413      	add	r3, r2
 8006e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	69ba      	ldr	r2, [r7, #24]
 8006e52:	0151      	lsls	r1, r2, #5
 8006e54:	69fa      	ldr	r2, [r7, #28]
 8006e56:	440a      	add	r2, r1
 8006e58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e60:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	015a      	lsls	r2, r3, #5
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	4413      	add	r3, r2
 8006e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	69ba      	ldr	r2, [r7, #24]
 8006e72:	0151      	lsls	r1, r2, #5
 8006e74:	69fa      	ldr	r2, [r7, #28]
 8006e76:	440a      	add	r2, r1
 8006e78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e80:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	3301      	adds	r3, #1
 8006e86:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e8e:	d81d      	bhi.n	8006ecc <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	015a      	lsls	r2, r3, #5
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	4413      	add	r3, r2
 8006e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ea2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ea6:	d0ec      	beq.n	8006e82 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006ea8:	e070      	b.n	8006f8c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	015a      	lsls	r2, r3, #5
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	69ba      	ldr	r2, [r7, #24]
 8006eba:	0151      	lsls	r1, r2, #5
 8006ebc:	69fa      	ldr	r2, [r7, #28]
 8006ebe:	440a      	add	r2, r1
 8006ec0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ec4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ec8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006eca:	e05f      	b.n	8006f8c <USB_HC_Halt+0x1ea>
            break;
 8006ecc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006ece:	e05d      	b.n	8006f8c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	015a      	lsls	r2, r3, #5
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	4413      	add	r3, r2
 8006ed8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	69ba      	ldr	r2, [r7, #24]
 8006ee0:	0151      	lsls	r1, r2, #5
 8006ee2:	69fa      	ldr	r2, [r7, #28]
 8006ee4:	440a      	add	r2, r1
 8006ee6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006eea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006eee:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d133      	bne.n	8006f68 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	015a      	lsls	r2, r3, #5
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	4413      	add	r3, r2
 8006f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	69ba      	ldr	r2, [r7, #24]
 8006f10:	0151      	lsls	r1, r2, #5
 8006f12:	69fa      	ldr	r2, [r7, #28]
 8006f14:	440a      	add	r2, r1
 8006f16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f1e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	015a      	lsls	r2, r3, #5
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	4413      	add	r3, r2
 8006f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	69ba      	ldr	r2, [r7, #24]
 8006f30:	0151      	lsls	r1, r2, #5
 8006f32:	69fa      	ldr	r2, [r7, #28]
 8006f34:	440a      	add	r2, r1
 8006f36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f3e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	3301      	adds	r3, #1
 8006f44:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f4c:	d81d      	bhi.n	8006f8a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006f4e:	69bb      	ldr	r3, [r7, #24]
 8006f50:	015a      	lsls	r2, r3, #5
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	4413      	add	r3, r2
 8006f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f64:	d0ec      	beq.n	8006f40 <USB_HC_Halt+0x19e>
 8006f66:	e011      	b.n	8006f8c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	015a      	lsls	r2, r3, #5
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	4413      	add	r3, r2
 8006f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	69ba      	ldr	r2, [r7, #24]
 8006f78:	0151      	lsls	r1, r2, #5
 8006f7a:	69fa      	ldr	r2, [r7, #28]
 8006f7c:	440a      	add	r2, r1
 8006f7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f86:	6013      	str	r3, [r2, #0]
 8006f88:	e000      	b.n	8006f8c <USB_HC_Halt+0x1ea>
          break;
 8006f8a:	bf00      	nop
    }
  }

  return HAL_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3724      	adds	r7, #36	; 0x24
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr
	...

08006f9c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b087      	sub	sp, #28
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006fac:	78fb      	ldrb	r3, [r7, #3]
 8006fae:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	04da      	lsls	r2, r3, #19
 8006fb8:	4b15      	ldr	r3, [pc, #84]	; (8007010 <USB_DoPing+0x74>)
 8006fba:	4013      	ands	r3, r2
 8006fbc:	693a      	ldr	r2, [r7, #16]
 8006fbe:	0151      	lsls	r1, r2, #5
 8006fc0:	697a      	ldr	r2, [r7, #20]
 8006fc2:	440a      	add	r2, r1
 8006fc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006fcc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	015a      	lsls	r2, r3, #5
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006fe4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006fec:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	015a      	lsls	r2, r3, #5
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	4413      	add	r3, r2
 8006ff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007000:	2300      	movs	r3, #0
}
 8007002:	4618      	mov	r0, r3
 8007004:	371c      	adds	r7, #28
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop
 8007010:	1ff80000 	.word	0x1ff80000

08007014 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b088      	sub	sp, #32
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800701c:	2300      	movs	r3, #0
 800701e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007024:	2300      	movs	r3, #0
 8007026:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f7ff f93b 	bl	80062a4 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800702e:	2110      	movs	r1, #16
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f7ff f995 	bl	8006360 <USB_FlushTxFifo>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d001      	beq.n	8007040 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f7ff f9c1 	bl	80063c8 <USB_FlushRxFifo>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d001      	beq.n	8007050 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007050:	2300      	movs	r3, #0
 8007052:	61bb      	str	r3, [r7, #24]
 8007054:	e01f      	b.n	8007096 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	015a      	lsls	r2, r3, #5
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	4413      	add	r3, r2
 800705e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800706c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007074:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800707c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	015a      	lsls	r2, r3, #5
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	4413      	add	r3, r2
 8007086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800708a:	461a      	mov	r2, r3
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	3301      	adds	r3, #1
 8007094:	61bb      	str	r3, [r7, #24]
 8007096:	69bb      	ldr	r3, [r7, #24]
 8007098:	2b0f      	cmp	r3, #15
 800709a:	d9dc      	bls.n	8007056 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800709c:	2300      	movs	r3, #0
 800709e:	61bb      	str	r3, [r7, #24]
 80070a0:	e034      	b.n	800710c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	015a      	lsls	r2, r3, #5
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	4413      	add	r3, r2
 80070aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070b8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80070c0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80070c8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	015a      	lsls	r2, r3, #5
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	4413      	add	r3, r2
 80070d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070d6:	461a      	mov	r2, r3
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	3301      	adds	r3, #1
 80070e0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80070e8:	d80c      	bhi.n	8007104 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	015a      	lsls	r2, r3, #5
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	4413      	add	r3, r2
 80070f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007100:	d0ec      	beq.n	80070dc <USB_StopHost+0xc8>
 8007102:	e000      	b.n	8007106 <USB_StopHost+0xf2>
        break;
 8007104:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	3301      	adds	r3, #1
 800710a:	61bb      	str	r3, [r7, #24]
 800710c:	69bb      	ldr	r3, [r7, #24]
 800710e:	2b0f      	cmp	r3, #15
 8007110:	d9c7      	bls.n	80070a2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007118:	461a      	mov	r2, r3
 800711a:	f04f 33ff 	mov.w	r3, #4294967295
 800711e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f04f 32ff 	mov.w	r2, #4294967295
 8007126:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f7ff f8aa 	bl	8006282 <USB_EnableGlobalInt>

  return ret;
 800712e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007130:	4618      	mov	r0, r3
 8007132:	3720      	adds	r7, #32
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007138:	b590      	push	{r4, r7, lr}
 800713a:	b089      	sub	sp, #36	; 0x24
 800713c:	af04      	add	r7, sp, #16
 800713e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007140:	2301      	movs	r3, #1
 8007142:	2202      	movs	r2, #2
 8007144:	2102      	movs	r1, #2
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 fc66 	bl	8007a18 <USBH_FindInterface>
 800714c:	4603      	mov	r3, r0
 800714e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007150:	7bfb      	ldrb	r3, [r7, #15]
 8007152:	2bff      	cmp	r3, #255	; 0xff
 8007154:	d002      	beq.n	800715c <USBH_CDC_InterfaceInit+0x24>
 8007156:	7bfb      	ldrb	r3, [r7, #15]
 8007158:	2b01      	cmp	r3, #1
 800715a:	d901      	bls.n	8007160 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800715c:	2302      	movs	r3, #2
 800715e:	e13d      	b.n	80073dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007160:	7bfb      	ldrb	r3, [r7, #15]
 8007162:	4619      	mov	r1, r3
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 fc3b 	bl	80079e0 <USBH_SelectInterface>
 800716a:	4603      	mov	r3, r0
 800716c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800716e:	7bbb      	ldrb	r3, [r7, #14]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d001      	beq.n	8007178 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007174:	2302      	movs	r3, #2
 8007176:	e131      	b.n	80073dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800717e:	2050      	movs	r0, #80	; 0x50
 8007180:	f001 fb12 	bl	80087a8 <malloc>
 8007184:	4603      	mov	r3, r0
 8007186:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800718e:	69db      	ldr	r3, [r3, #28]
 8007190:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d101      	bne.n	800719c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007198:	2302      	movs	r3, #2
 800719a:	e11f      	b.n	80073dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800719c:	2250      	movs	r2, #80	; 0x50
 800719e:	2100      	movs	r1, #0
 80071a0:	68b8      	ldr	r0, [r7, #8]
 80071a2:	f001 fb11 	bl	80087c8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80071a6:	7bfb      	ldrb	r3, [r7, #15]
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	211a      	movs	r1, #26
 80071ac:	fb01 f303 	mul.w	r3, r1, r3
 80071b0:	4413      	add	r3, r2
 80071b2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	b25b      	sxtb	r3, r3
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	da15      	bge.n	80071ea <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80071be:	7bfb      	ldrb	r3, [r7, #15]
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	211a      	movs	r1, #26
 80071c4:	fb01 f303 	mul.w	r3, r1, r3
 80071c8:	4413      	add	r3, r2
 80071ca:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80071ce:	781a      	ldrb	r2, [r3, #0]
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80071d4:	7bfb      	ldrb	r3, [r7, #15]
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	211a      	movs	r1, #26
 80071da:	fb01 f303 	mul.w	r3, r1, r3
 80071de:	4413      	add	r3, r2
 80071e0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80071e4:	881a      	ldrh	r2, [r3, #0]
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	785b      	ldrb	r3, [r3, #1]
 80071ee:	4619      	mov	r1, r3
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 ff9c 	bl	800812e <USBH_AllocPipe>
 80071f6:	4603      	mov	r3, r0
 80071f8:	461a      	mov	r2, r3
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	7819      	ldrb	r1, [r3, #0]
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	7858      	ldrb	r0, [r3, #1]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007212:	68ba      	ldr	r2, [r7, #8]
 8007214:	8952      	ldrh	r2, [r2, #10]
 8007216:	9202      	str	r2, [sp, #8]
 8007218:	2203      	movs	r2, #3
 800721a:	9201      	str	r2, [sp, #4]
 800721c:	9300      	str	r3, [sp, #0]
 800721e:	4623      	mov	r3, r4
 8007220:	4602      	mov	r2, r0
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 ff54 	bl	80080d0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	2200      	movs	r2, #0
 800722e:	4619      	mov	r1, r3
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f001 fa17 	bl	8008664 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007236:	2300      	movs	r3, #0
 8007238:	2200      	movs	r2, #0
 800723a:	210a      	movs	r1, #10
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 fbeb 	bl	8007a18 <USBH_FindInterface>
 8007242:	4603      	mov	r3, r0
 8007244:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007246:	7bfb      	ldrb	r3, [r7, #15]
 8007248:	2bff      	cmp	r3, #255	; 0xff
 800724a:	d002      	beq.n	8007252 <USBH_CDC_InterfaceInit+0x11a>
 800724c:	7bfb      	ldrb	r3, [r7, #15]
 800724e:	2b01      	cmp	r3, #1
 8007250:	d901      	bls.n	8007256 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007252:	2302      	movs	r3, #2
 8007254:	e0c2      	b.n	80073dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007256:	7bfb      	ldrb	r3, [r7, #15]
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	211a      	movs	r1, #26
 800725c:	fb01 f303 	mul.w	r3, r1, r3
 8007260:	4413      	add	r3, r2
 8007262:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	b25b      	sxtb	r3, r3
 800726a:	2b00      	cmp	r3, #0
 800726c:	da16      	bge.n	800729c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800726e:	7bfb      	ldrb	r3, [r7, #15]
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	211a      	movs	r1, #26
 8007274:	fb01 f303 	mul.w	r3, r1, r3
 8007278:	4413      	add	r3, r2
 800727a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800727e:	781a      	ldrb	r2, [r3, #0]
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007284:	7bfb      	ldrb	r3, [r7, #15]
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	211a      	movs	r1, #26
 800728a:	fb01 f303 	mul.w	r3, r1, r3
 800728e:	4413      	add	r3, r2
 8007290:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007294:	881a      	ldrh	r2, [r3, #0]
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	835a      	strh	r2, [r3, #26]
 800729a:	e015      	b.n	80072c8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800729c:	7bfb      	ldrb	r3, [r7, #15]
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	211a      	movs	r1, #26
 80072a2:	fb01 f303 	mul.w	r3, r1, r3
 80072a6:	4413      	add	r3, r2
 80072a8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80072ac:	781a      	ldrb	r2, [r3, #0]
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80072b2:	7bfb      	ldrb	r3, [r7, #15]
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	211a      	movs	r1, #26
 80072b8:	fb01 f303 	mul.w	r3, r1, r3
 80072bc:	4413      	add	r3, r2
 80072be:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80072c2:	881a      	ldrh	r2, [r3, #0]
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80072c8:	7bfb      	ldrb	r3, [r7, #15]
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	211a      	movs	r1, #26
 80072ce:	fb01 f303 	mul.w	r3, r1, r3
 80072d2:	4413      	add	r3, r2
 80072d4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	b25b      	sxtb	r3, r3
 80072dc:	2b00      	cmp	r3, #0
 80072de:	da16      	bge.n	800730e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80072e0:	7bfb      	ldrb	r3, [r7, #15]
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	211a      	movs	r1, #26
 80072e6:	fb01 f303 	mul.w	r3, r1, r3
 80072ea:	4413      	add	r3, r2
 80072ec:	f203 3356 	addw	r3, r3, #854	; 0x356
 80072f0:	781a      	ldrb	r2, [r3, #0]
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80072f6:	7bfb      	ldrb	r3, [r7, #15]
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	211a      	movs	r1, #26
 80072fc:	fb01 f303 	mul.w	r3, r1, r3
 8007300:	4413      	add	r3, r2
 8007302:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007306:	881a      	ldrh	r2, [r3, #0]
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	835a      	strh	r2, [r3, #26]
 800730c:	e015      	b.n	800733a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800730e:	7bfb      	ldrb	r3, [r7, #15]
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	211a      	movs	r1, #26
 8007314:	fb01 f303 	mul.w	r3, r1, r3
 8007318:	4413      	add	r3, r2
 800731a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800731e:	781a      	ldrb	r2, [r3, #0]
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007324:	7bfb      	ldrb	r3, [r7, #15]
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	211a      	movs	r1, #26
 800732a:	fb01 f303 	mul.w	r3, r1, r3
 800732e:	4413      	add	r3, r2
 8007330:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007334:	881a      	ldrh	r2, [r3, #0]
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	7b9b      	ldrb	r3, [r3, #14]
 800733e:	4619      	mov	r1, r3
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 fef4 	bl	800812e <USBH_AllocPipe>
 8007346:	4603      	mov	r3, r0
 8007348:	461a      	mov	r2, r3
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	7bdb      	ldrb	r3, [r3, #15]
 8007352:	4619      	mov	r1, r3
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 feea 	bl	800812e <USBH_AllocPipe>
 800735a:	4603      	mov	r3, r0
 800735c:	461a      	mov	r2, r3
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	7b59      	ldrb	r1, [r3, #13]
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	7b98      	ldrb	r0, [r3, #14]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007376:	68ba      	ldr	r2, [r7, #8]
 8007378:	8b12      	ldrh	r2, [r2, #24]
 800737a:	9202      	str	r2, [sp, #8]
 800737c:	2202      	movs	r2, #2
 800737e:	9201      	str	r2, [sp, #4]
 8007380:	9300      	str	r3, [sp, #0]
 8007382:	4623      	mov	r3, r4
 8007384:	4602      	mov	r2, r0
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 fea2 	bl	80080d0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	7b19      	ldrb	r1, [r3, #12]
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	7bd8      	ldrb	r0, [r3, #15]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80073a0:	68ba      	ldr	r2, [r7, #8]
 80073a2:	8b52      	ldrh	r2, [r2, #26]
 80073a4:	9202      	str	r2, [sp, #8]
 80073a6:	2202      	movs	r2, #2
 80073a8:	9201      	str	r2, [sp, #4]
 80073aa:	9300      	str	r3, [sp, #0]
 80073ac:	4623      	mov	r3, r4
 80073ae:	4602      	mov	r2, r0
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 fe8d 	bl	80080d0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	7b5b      	ldrb	r3, [r3, #13]
 80073c2:	2200      	movs	r2, #0
 80073c4:	4619      	mov	r1, r3
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f001 f94c 	bl	8008664 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	7b1b      	ldrb	r3, [r3, #12]
 80073d0:	2200      	movs	r2, #0
 80073d2:	4619      	mov	r1, r3
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f001 f945 	bl	8008664 <USBH_LL_SetToggle>

  return USBH_OK;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3714      	adds	r7, #20
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd90      	pop	{r4, r7, pc}

080073e4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073f2:	69db      	ldr	r3, [r3, #28]
 80073f4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d00e      	beq.n	800741c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	4619      	mov	r1, r3
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 fe82 	bl	800810e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	4619      	mov	r1, r3
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 fead 	bl	8008170 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2200      	movs	r2, #0
 800741a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	7b1b      	ldrb	r3, [r3, #12]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d00e      	beq.n	8007442 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	7b1b      	ldrb	r3, [r3, #12]
 8007428:	4619      	mov	r1, r3
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 fe6f 	bl	800810e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	7b1b      	ldrb	r3, [r3, #12]
 8007434:	4619      	mov	r1, r3
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 fe9a 	bl	8008170 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2200      	movs	r2, #0
 8007440:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	7b5b      	ldrb	r3, [r3, #13]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00e      	beq.n	8007468 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	7b5b      	ldrb	r3, [r3, #13]
 800744e:	4619      	mov	r1, r3
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 fe5c 	bl	800810e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	7b5b      	ldrb	r3, [r3, #13]
 800745a:	4619      	mov	r1, r3
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 fe87 	bl	8008170 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2200      	movs	r2, #0
 8007466:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800746e:	69db      	ldr	r3, [r3, #28]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d00b      	beq.n	800748c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800747a:	69db      	ldr	r3, [r3, #28]
 800747c:	4618      	mov	r0, r3
 800747e:	f001 f99b 	bl	80087b8 <free>
    phost->pActiveClass->pData = 0U;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007488:	2200      	movs	r2, #0
 800748a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800748c:	2300      	movs	r3, #0
}
 800748e:	4618      	mov	r0, r3
 8007490:	3710      	adds	r7, #16
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}

08007496 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007496:	b580      	push	{r7, lr}
 8007498:	b084      	sub	sp, #16
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074a4:	69db      	ldr	r3, [r3, #28]
 80074a6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	3340      	adds	r3, #64	; 0x40
 80074ac:	4619      	mov	r1, r3
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 f8b1 	bl	8007616 <GetLineCoding>
 80074b4:	4603      	mov	r3, r0
 80074b6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80074b8:	7afb      	ldrb	r3, [r7, #11]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d105      	bne.n	80074ca <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074c4:	2102      	movs	r1, #2
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80074ca:	7afb      	ldrb	r3, [r7, #11]
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3710      	adds	r7, #16
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80074dc:	2301      	movs	r3, #1
 80074de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80074e0:	2300      	movs	r3, #0
 80074e2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074ea:	69db      	ldr	r3, [r3, #28]
 80074ec:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80074f4:	2b04      	cmp	r3, #4
 80074f6:	d877      	bhi.n	80075e8 <USBH_CDC_Process+0x114>
 80074f8:	a201      	add	r2, pc, #4	; (adr r2, 8007500 <USBH_CDC_Process+0x2c>)
 80074fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074fe:	bf00      	nop
 8007500:	08007515 	.word	0x08007515
 8007504:	0800751b 	.word	0x0800751b
 8007508:	0800754b 	.word	0x0800754b
 800750c:	080075bf 	.word	0x080075bf
 8007510:	080075cd 	.word	0x080075cd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007514:	2300      	movs	r3, #0
 8007516:	73fb      	strb	r3, [r7, #15]
      break;
 8007518:	e06d      	b.n	80075f6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800751e:	4619      	mov	r1, r3
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 f897 	bl	8007654 <SetLineCoding>
 8007526:	4603      	mov	r3, r0
 8007528:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800752a:	7bbb      	ldrb	r3, [r7, #14]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d104      	bne.n	800753a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	2202      	movs	r2, #2
 8007534:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007538:	e058      	b.n	80075ec <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800753a:	7bbb      	ldrb	r3, [r7, #14]
 800753c:	2b01      	cmp	r3, #1
 800753e:	d055      	beq.n	80075ec <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	2204      	movs	r2, #4
 8007544:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007548:	e050      	b.n	80075ec <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	3340      	adds	r3, #64	; 0x40
 800754e:	4619      	mov	r1, r3
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 f860 	bl	8007616 <GetLineCoding>
 8007556:	4603      	mov	r3, r0
 8007558:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800755a:	7bbb      	ldrb	r3, [r7, #14]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d126      	bne.n	80075ae <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	2200      	movs	r2, #0
 8007564:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007572:	791b      	ldrb	r3, [r3, #4]
 8007574:	429a      	cmp	r2, r3
 8007576:	d13b      	bne.n	80075f0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007582:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007584:	429a      	cmp	r2, r3
 8007586:	d133      	bne.n	80075f0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007592:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007594:	429a      	cmp	r2, r3
 8007596:	d12b      	bne.n	80075f0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075a0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d124      	bne.n	80075f0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 f958 	bl	800785c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80075ac:	e020      	b.n	80075f0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80075ae:	7bbb      	ldrb	r3, [r7, #14]
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d01d      	beq.n	80075f0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	2204      	movs	r2, #4
 80075b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80075bc:	e018      	b.n	80075f0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 f867 	bl	8007692 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 f8da 	bl	800777e <CDC_ProcessReception>
      break;
 80075ca:	e014      	b.n	80075f6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80075cc:	2100      	movs	r1, #0
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 fb08 	bl	8007be4 <USBH_ClrFeature>
 80075d4:	4603      	mov	r3, r0
 80075d6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80075d8:	7bbb      	ldrb	r3, [r7, #14]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d10a      	bne.n	80075f4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80075e6:	e005      	b.n	80075f4 <USBH_CDC_Process+0x120>

    default:
      break;
 80075e8:	bf00      	nop
 80075ea:	e004      	b.n	80075f6 <USBH_CDC_Process+0x122>
      break;
 80075ec:	bf00      	nop
 80075ee:	e002      	b.n	80075f6 <USBH_CDC_Process+0x122>
      break;
 80075f0:	bf00      	nop
 80075f2:	e000      	b.n	80075f6 <USBH_CDC_Process+0x122>
      break;
 80075f4:	bf00      	nop

  }

  return status;
 80075f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3710      	adds	r7, #16
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007600:	b480      	push	{r7}
 8007602:	b083      	sub	sp, #12
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007608:	2300      	movs	r3, #0
}
 800760a:	4618      	mov	r0, r3
 800760c:	370c      	adds	r7, #12
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr

08007616 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007616:	b580      	push	{r7, lr}
 8007618:	b082      	sub	sp, #8
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
 800761e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	22a1      	movs	r2, #161	; 0xa1
 8007624:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2221      	movs	r2, #33	; 0x21
 800762a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2207      	movs	r2, #7
 800763c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	2207      	movs	r2, #7
 8007642:	4619      	mov	r1, r3
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 faf1 	bl	8007c2c <USBH_CtlReq>
 800764a:	4603      	mov	r3, r0
}
 800764c:	4618      	mov	r0, r3
 800764e:	3708      	adds	r7, #8
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2221      	movs	r2, #33	; 0x21
 8007662:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2220      	movs	r2, #32
 8007668:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2207      	movs	r2, #7
 800767a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	2207      	movs	r2, #7
 8007680:	4619      	mov	r1, r3
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 fad2 	bl	8007c2c <USBH_CtlReq>
 8007688:	4603      	mov	r3, r0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3708      	adds	r7, #8
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}

08007692 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007692:	b580      	push	{r7, lr}
 8007694:	b086      	sub	sp, #24
 8007696:	af02      	add	r7, sp, #8
 8007698:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076a0:	69db      	ldr	r3, [r3, #28]
 80076a2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80076a4:	2300      	movs	r3, #0
 80076a6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d002      	beq.n	80076b8 <CDC_ProcessTransmission+0x26>
 80076b2:	2b02      	cmp	r3, #2
 80076b4:	d023      	beq.n	80076fe <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80076b6:	e05e      	b.n	8007776 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076bc:	68fa      	ldr	r2, [r7, #12]
 80076be:	8b12      	ldrh	r2, [r2, #24]
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d90b      	bls.n	80076dc <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	69d9      	ldr	r1, [r3, #28]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	8b1a      	ldrh	r2, [r3, #24]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	7b5b      	ldrb	r3, [r3, #13]
 80076d0:	2001      	movs	r0, #1
 80076d2:	9000      	str	r0, [sp, #0]
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 fcb8 	bl	800804a <USBH_BulkSendData>
 80076da:	e00b      	b.n	80076f4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80076e4:	b29a      	uxth	r2, r3
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	7b5b      	ldrb	r3, [r3, #13]
 80076ea:	2001      	movs	r0, #1
 80076ec:	9000      	str	r0, [sp, #0]
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 fcab 	bl	800804a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2202      	movs	r2, #2
 80076f8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80076fc:	e03b      	b.n	8007776 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	7b5b      	ldrb	r3, [r3, #13]
 8007702:	4619      	mov	r1, r3
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 ff83 	bl	8008610 <USBH_LL_GetURBState>
 800770a:	4603      	mov	r3, r0
 800770c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800770e:	7afb      	ldrb	r3, [r7, #11]
 8007710:	2b01      	cmp	r3, #1
 8007712:	d128      	bne.n	8007766 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007718:	68fa      	ldr	r2, [r7, #12]
 800771a:	8b12      	ldrh	r2, [r2, #24]
 800771c:	4293      	cmp	r3, r2
 800771e:	d90e      	bls.n	800773e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007724:	68fa      	ldr	r2, [r7, #12]
 8007726:	8b12      	ldrh	r2, [r2, #24]
 8007728:	1a9a      	subs	r2, r3, r2
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	69db      	ldr	r3, [r3, #28]
 8007732:	68fa      	ldr	r2, [r7, #12]
 8007734:	8b12      	ldrh	r2, [r2, #24]
 8007736:	441a      	add	r2, r3
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	61da      	str	r2, [r3, #28]
 800773c:	e002      	b.n	8007744 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2200      	movs	r2, #0
 8007742:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007748:	2b00      	cmp	r3, #0
 800774a:	d004      	beq.n	8007756 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007754:	e00e      	b.n	8007774 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2200      	movs	r2, #0
 800775a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 f868 	bl	8007834 <USBH_CDC_TransmitCallback>
      break;
 8007764:	e006      	b.n	8007774 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007766:	7afb      	ldrb	r3, [r7, #11]
 8007768:	2b02      	cmp	r3, #2
 800776a:	d103      	bne.n	8007774 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007774:	bf00      	nop
  }
}
 8007776:	bf00      	nop
 8007778:	3710      	adds	r7, #16
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}

0800777e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800777e:	b580      	push	{r7, lr}
 8007780:	b086      	sub	sp, #24
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800778c:	69db      	ldr	r3, [r3, #28]
 800778e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007790:	2300      	movs	r3, #0
 8007792:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800779a:	2b03      	cmp	r3, #3
 800779c:	d002      	beq.n	80077a4 <CDC_ProcessReception+0x26>
 800779e:	2b04      	cmp	r3, #4
 80077a0:	d00e      	beq.n	80077c0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80077a2:	e043      	b.n	800782c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	6a19      	ldr	r1, [r3, #32]
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	8b5a      	ldrh	r2, [r3, #26]
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	7b1b      	ldrb	r3, [r3, #12]
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 fc6f 	bl	8008094 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	2204      	movs	r2, #4
 80077ba:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80077be:	e035      	b.n	800782c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	7b1b      	ldrb	r3, [r3, #12]
 80077c4:	4619      	mov	r1, r3
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 ff22 	bl	8008610 <USBH_LL_GetURBState>
 80077cc:	4603      	mov	r3, r0
 80077ce:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80077d0:	7cfb      	ldrb	r3, [r7, #19]
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d129      	bne.n	800782a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	7b1b      	ldrb	r3, [r3, #12]
 80077da:	4619      	mov	r1, r3
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 fe85 	bl	80084ec <USBH_LL_GetLastXferSize>
 80077e2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e8:	68fa      	ldr	r2, [r7, #12]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d016      	beq.n	800781c <CDC_ProcessReception+0x9e>
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	8b5b      	ldrh	r3, [r3, #26]
 80077f2:	461a      	mov	r2, r3
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d910      	bls.n	800781c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	1ad2      	subs	r2, r2, r3
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	6a1a      	ldr	r2, [r3, #32]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	441a      	add	r2, r3
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	2203      	movs	r2, #3
 8007816:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800781a:	e006      	b.n	800782a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	2200      	movs	r2, #0
 8007820:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 f80f 	bl	8007848 <USBH_CDC_ReceiveCallback>
      break;
 800782a:	bf00      	nop
  }
}
 800782c:	bf00      	nop
 800782e:	3718      	adds	r7, #24
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800783c:	bf00      	nop
 800783e:	370c      	adds	r7, #12
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr

08007848 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007850:	bf00      	nop
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007864:	bf00      	nop
 8007866:	370c      	adds	r7, #12
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr

08007870 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	4613      	mov	r3, r2
 800787c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d101      	bne.n	8007888 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007884:	2302      	movs	r3, #2
 8007886:	e029      	b.n	80078dc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	79fa      	ldrb	r2, [r7, #7]
 800788c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2200      	movs	r2, #0
 8007894:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2200      	movs	r2, #0
 800789c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80078a0:	68f8      	ldr	r0, [r7, #12]
 80078a2:	f000 f81f 	bl	80078e4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2200      	movs	r2, #0
 80078aa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2200      	movs	r2, #0
 80078b2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2200      	movs	r2, #0
 80078ba:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d003      	beq.n	80078d4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	68ba      	ldr	r2, [r7, #8]
 80078d0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80078d4:	68f8      	ldr	r0, [r7, #12]
 80078d6:	f000 fd97 	bl	8008408 <USBH_LL_Init>

  return USBH_OK;
 80078da:	2300      	movs	r3, #0
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3710      	adds	r7, #16
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b085      	sub	sp, #20
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80078ec:	2300      	movs	r3, #0
 80078ee:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80078f0:	2300      	movs	r3, #0
 80078f2:	60fb      	str	r3, [r7, #12]
 80078f4:	e009      	b.n	800790a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	33e0      	adds	r3, #224	; 0xe0
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	4413      	add	r3, r2
 8007900:	2200      	movs	r2, #0
 8007902:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	3301      	adds	r3, #1
 8007908:	60fb      	str	r3, [r7, #12]
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2b0f      	cmp	r3, #15
 800790e:	d9f2      	bls.n	80078f6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007910:	2300      	movs	r3, #0
 8007912:	60fb      	str	r3, [r7, #12]
 8007914:	e009      	b.n	800792a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	4413      	add	r3, r2
 800791c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007920:	2200      	movs	r2, #0
 8007922:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	3301      	adds	r3, #1
 8007928:	60fb      	str	r3, [r7, #12]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007930:	d3f1      	bcc.n	8007916 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2201      	movs	r2, #1
 8007942:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2240      	movs	r2, #64	; 0x40
 8007956:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2201      	movs	r2, #1
 800796a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800797e:	2300      	movs	r3, #0
}
 8007980:	4618      	mov	r0, r3
 8007982:	3714      	adds	r7, #20
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr

0800798c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800798c:	b480      	push	{r7}
 800798e:	b085      	sub	sp, #20
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007996:	2300      	movs	r3, #0
 8007998:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d016      	beq.n	80079ce <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d10e      	bne.n	80079c8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80079b0:	1c59      	adds	r1, r3, #1
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	33de      	adds	r3, #222	; 0xde
 80079bc:	6839      	ldr	r1, [r7, #0]
 80079be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80079c2:	2300      	movs	r3, #0
 80079c4:	73fb      	strb	r3, [r7, #15]
 80079c6:	e004      	b.n	80079d2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80079c8:	2302      	movs	r3, #2
 80079ca:	73fb      	strb	r3, [r7, #15]
 80079cc:	e001      	b.n	80079d2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80079ce:	2302      	movs	r3, #2
 80079d0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80079d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3714      	adds	r7, #20
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b085      	sub	sp, #20
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	460b      	mov	r3, r1
 80079ea:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80079ec:	2300      	movs	r3, #0
 80079ee:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80079f6:	78fa      	ldrb	r2, [r7, #3]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d204      	bcs.n	8007a06 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	78fa      	ldrb	r2, [r7, #3]
 8007a00:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007a04:	e001      	b.n	8007a0a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007a06:	2302      	movs	r3, #2
 8007a08:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3714      	adds	r7, #20
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b087      	sub	sp, #28
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	4608      	mov	r0, r1
 8007a22:	4611      	mov	r1, r2
 8007a24:	461a      	mov	r2, r3
 8007a26:	4603      	mov	r3, r0
 8007a28:	70fb      	strb	r3, [r7, #3]
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	70bb      	strb	r3, [r7, #2]
 8007a2e:	4613      	mov	r3, r2
 8007a30:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007a32:	2300      	movs	r3, #0
 8007a34:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007a36:	2300      	movs	r3, #0
 8007a38:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007a40:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007a42:	e025      	b.n	8007a90 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007a44:	7dfb      	ldrb	r3, [r7, #23]
 8007a46:	221a      	movs	r2, #26
 8007a48:	fb02 f303 	mul.w	r3, r2, r3
 8007a4c:	3308      	adds	r3, #8
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	4413      	add	r3, r2
 8007a52:	3302      	adds	r3, #2
 8007a54:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	795b      	ldrb	r3, [r3, #5]
 8007a5a:	78fa      	ldrb	r2, [r7, #3]
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d002      	beq.n	8007a66 <USBH_FindInterface+0x4e>
 8007a60:	78fb      	ldrb	r3, [r7, #3]
 8007a62:	2bff      	cmp	r3, #255	; 0xff
 8007a64:	d111      	bne.n	8007a8a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007a6a:	78ba      	ldrb	r2, [r7, #2]
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d002      	beq.n	8007a76 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007a70:	78bb      	ldrb	r3, [r7, #2]
 8007a72:	2bff      	cmp	r3, #255	; 0xff
 8007a74:	d109      	bne.n	8007a8a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007a7a:	787a      	ldrb	r2, [r7, #1]
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d002      	beq.n	8007a86 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007a80:	787b      	ldrb	r3, [r7, #1]
 8007a82:	2bff      	cmp	r3, #255	; 0xff
 8007a84:	d101      	bne.n	8007a8a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007a86:	7dfb      	ldrb	r3, [r7, #23]
 8007a88:	e006      	b.n	8007a98 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007a8a:	7dfb      	ldrb	r3, [r7, #23]
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007a90:	7dfb      	ldrb	r3, [r7, #23]
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d9d6      	bls.n	8007a44 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007a96:	23ff      	movs	r3, #255	; 0xff
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	371c      	adds	r7, #28
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b082      	sub	sp, #8
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 fce7 	bl	8008480 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007ab2:	2101      	movs	r1, #1
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 fdbe 	bl	8008636 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3708      	adds	r7, #8
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	683a      	ldr	r2, [r7, #0]
 8007ad2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007ad6:	bf00      	nop
 8007ad8:	370c      	adds	r7, #12
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr

08007ae2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007ae2:	b580      	push	{r7, lr}
 8007ae4:	b082      	sub	sp, #8
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007af0:	1c5a      	adds	r2, r3, #1
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 f804 	bl	8007b06 <USBH_HandleSof>
}
 8007afe:	bf00      	nop
 8007b00:	3708      	adds	r7, #8
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b082      	sub	sp, #8
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	2b0b      	cmp	r3, #11
 8007b16:	d10a      	bne.n	8007b2e <USBH_HandleSof+0x28>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d005      	beq.n	8007b2e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b28:	699b      	ldr	r3, [r3, #24]
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	4798      	blx	r3
  }
}
 8007b2e:	bf00      	nop
 8007b30:	3708      	adds	r7, #8
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007b36:	b480      	push	{r7}
 8007b38:	b083      	sub	sp, #12
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2201      	movs	r2, #1
 8007b42:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007b46:	bf00      	nop
}
 8007b48:	370c      	adds	r7, #12
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr

08007b52 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007b52:	b480      	push	{r7}
 8007b54:	b083      	sub	sp, #12
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007b62:	bf00      	nop
}
 8007b64:	370c      	adds	r7, #12
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr

08007b6e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007b6e:	b480      	push	{r7}
 8007b70:	b083      	sub	sp, #12
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007b8e:	2300      	movs	r3, #0
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	370c      	adds	r7, #12
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr

08007b9c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 fc7a 	bl	80084b6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	791b      	ldrb	r3, [r3, #4]
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 fad1 	bl	8008170 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	795b      	ldrb	r3, [r3, #5]
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 facb 	bl	8008170 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007bda:	2300      	movs	r3, #0
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3708      	adds	r7, #8
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	460b      	mov	r3, r1
 8007bee:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	789b      	ldrb	r3, [r3, #2]
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d10f      	bne.n	8007c18 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2202      	movs	r2, #2
 8007bfc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2201      	movs	r2, #1
 8007c02:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007c0a:	78fb      	ldrb	r3, [r7, #3]
 8007c0c:	b29a      	uxth	r2, r3
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007c18:	2200      	movs	r2, #0
 8007c1a:	2100      	movs	r1, #0
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 f805 	bl	8007c2c <USBH_CtlReq>
 8007c22:	4603      	mov	r3, r0
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3708      	adds	r7, #8
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b086      	sub	sp, #24
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	60b9      	str	r1, [r7, #8]
 8007c36:	4613      	mov	r3, r2
 8007c38:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	789b      	ldrb	r3, [r3, #2]
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d002      	beq.n	8007c4c <USBH_CtlReq+0x20>
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	d00f      	beq.n	8007c6a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007c4a:	e027      	b.n	8007c9c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	68ba      	ldr	r2, [r7, #8]
 8007c50:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	88fa      	ldrh	r2, [r7, #6]
 8007c56:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2202      	movs	r2, #2
 8007c62:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007c64:	2301      	movs	r3, #1
 8007c66:	75fb      	strb	r3, [r7, #23]
      break;
 8007c68:	e018      	b.n	8007c9c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007c6a:	68f8      	ldr	r0, [r7, #12]
 8007c6c:	f000 f81c 	bl	8007ca8 <USBH_HandleControl>
 8007c70:	4603      	mov	r3, r0
 8007c72:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007c74:	7dfb      	ldrb	r3, [r7, #23]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d002      	beq.n	8007c80 <USBH_CtlReq+0x54>
 8007c7a:	7dfb      	ldrb	r3, [r7, #23]
 8007c7c:	2b03      	cmp	r3, #3
 8007c7e:	d106      	bne.n	8007c8e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2201      	movs	r2, #1
 8007c84:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	761a      	strb	r2, [r3, #24]
      break;
 8007c8c:	e005      	b.n	8007c9a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007c8e:	7dfb      	ldrb	r3, [r7, #23]
 8007c90:	2b02      	cmp	r3, #2
 8007c92:	d102      	bne.n	8007c9a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2201      	movs	r2, #1
 8007c98:	709a      	strb	r2, [r3, #2]
      break;
 8007c9a:	bf00      	nop
  }
  return status;
 8007c9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3718      	adds	r7, #24
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
	...

08007ca8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b086      	sub	sp, #24
 8007cac:	af02      	add	r7, sp, #8
 8007cae:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	7e1b      	ldrb	r3, [r3, #24]
 8007cbc:	3b01      	subs	r3, #1
 8007cbe:	2b0a      	cmp	r3, #10
 8007cc0:	f200 8156 	bhi.w	8007f70 <USBH_HandleControl+0x2c8>
 8007cc4:	a201      	add	r2, pc, #4	; (adr r2, 8007ccc <USBH_HandleControl+0x24>)
 8007cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cca:	bf00      	nop
 8007ccc:	08007cf9 	.word	0x08007cf9
 8007cd0:	08007d13 	.word	0x08007d13
 8007cd4:	08007d7d 	.word	0x08007d7d
 8007cd8:	08007da3 	.word	0x08007da3
 8007cdc:	08007ddb 	.word	0x08007ddb
 8007ce0:	08007e05 	.word	0x08007e05
 8007ce4:	08007e57 	.word	0x08007e57
 8007ce8:	08007e79 	.word	0x08007e79
 8007cec:	08007eb5 	.word	0x08007eb5
 8007cf0:	08007edb 	.word	0x08007edb
 8007cf4:	08007f19 	.word	0x08007f19
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f103 0110 	add.w	r1, r3, #16
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	795b      	ldrb	r3, [r3, #5]
 8007d02:	461a      	mov	r2, r3
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 f943 	bl	8007f90 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2202      	movs	r2, #2
 8007d0e:	761a      	strb	r2, [r3, #24]
      break;
 8007d10:	e139      	b.n	8007f86 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	795b      	ldrb	r3, [r3, #5]
 8007d16:	4619      	mov	r1, r3
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 fc79 	bl	8008610 <USBH_LL_GetURBState>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007d22:	7bbb      	ldrb	r3, [r7, #14]
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d11e      	bne.n	8007d66 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	7c1b      	ldrb	r3, [r3, #16]
 8007d2c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007d30:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	8adb      	ldrh	r3, [r3, #22]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d00a      	beq.n	8007d50 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007d3a:	7b7b      	ldrb	r3, [r7, #13]
 8007d3c:	2b80      	cmp	r3, #128	; 0x80
 8007d3e:	d103      	bne.n	8007d48 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2203      	movs	r2, #3
 8007d44:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007d46:	e115      	b.n	8007f74 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2205      	movs	r2, #5
 8007d4c:	761a      	strb	r2, [r3, #24]
      break;
 8007d4e:	e111      	b.n	8007f74 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007d50:	7b7b      	ldrb	r3, [r7, #13]
 8007d52:	2b80      	cmp	r3, #128	; 0x80
 8007d54:	d103      	bne.n	8007d5e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2209      	movs	r2, #9
 8007d5a:	761a      	strb	r2, [r3, #24]
      break;
 8007d5c:	e10a      	b.n	8007f74 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2207      	movs	r2, #7
 8007d62:	761a      	strb	r2, [r3, #24]
      break;
 8007d64:	e106      	b.n	8007f74 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007d66:	7bbb      	ldrb	r3, [r7, #14]
 8007d68:	2b04      	cmp	r3, #4
 8007d6a:	d003      	beq.n	8007d74 <USBH_HandleControl+0xcc>
 8007d6c:	7bbb      	ldrb	r3, [r7, #14]
 8007d6e:	2b02      	cmp	r3, #2
 8007d70:	f040 8100 	bne.w	8007f74 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	220b      	movs	r2, #11
 8007d78:	761a      	strb	r2, [r3, #24]
      break;
 8007d7a:	e0fb      	b.n	8007f74 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007d82:	b29a      	uxth	r2, r3
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6899      	ldr	r1, [r3, #8]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	899a      	ldrh	r2, [r3, #12]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	791b      	ldrb	r3, [r3, #4]
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 f93a 	bl	800800e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2204      	movs	r2, #4
 8007d9e:	761a      	strb	r2, [r3, #24]
      break;
 8007da0:	e0f1      	b.n	8007f86 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	791b      	ldrb	r3, [r3, #4]
 8007da6:	4619      	mov	r1, r3
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 fc31 	bl	8008610 <USBH_LL_GetURBState>
 8007dae:	4603      	mov	r3, r0
 8007db0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007db2:	7bbb      	ldrb	r3, [r7, #14]
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d102      	bne.n	8007dbe <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2209      	movs	r2, #9
 8007dbc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007dbe:	7bbb      	ldrb	r3, [r7, #14]
 8007dc0:	2b05      	cmp	r3, #5
 8007dc2:	d102      	bne.n	8007dca <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007dc4:	2303      	movs	r3, #3
 8007dc6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007dc8:	e0d6      	b.n	8007f78 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007dca:	7bbb      	ldrb	r3, [r7, #14]
 8007dcc:	2b04      	cmp	r3, #4
 8007dce:	f040 80d3 	bne.w	8007f78 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	220b      	movs	r2, #11
 8007dd6:	761a      	strb	r2, [r3, #24]
      break;
 8007dd8:	e0ce      	b.n	8007f78 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6899      	ldr	r1, [r3, #8]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	899a      	ldrh	r2, [r3, #12]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	795b      	ldrb	r3, [r3, #5]
 8007de6:	2001      	movs	r0, #1
 8007de8:	9000      	str	r0, [sp, #0]
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 f8ea 	bl	8007fc4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007df6:	b29a      	uxth	r2, r3
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2206      	movs	r2, #6
 8007e00:	761a      	strb	r2, [r3, #24]
      break;
 8007e02:	e0c0      	b.n	8007f86 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	795b      	ldrb	r3, [r3, #5]
 8007e08:	4619      	mov	r1, r3
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 fc00 	bl	8008610 <USBH_LL_GetURBState>
 8007e10:	4603      	mov	r3, r0
 8007e12:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007e14:	7bbb      	ldrb	r3, [r7, #14]
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d103      	bne.n	8007e22 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2207      	movs	r2, #7
 8007e1e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007e20:	e0ac      	b.n	8007f7c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007e22:	7bbb      	ldrb	r3, [r7, #14]
 8007e24:	2b05      	cmp	r3, #5
 8007e26:	d105      	bne.n	8007e34 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	220c      	movs	r2, #12
 8007e2c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007e2e:	2303      	movs	r3, #3
 8007e30:	73fb      	strb	r3, [r7, #15]
      break;
 8007e32:	e0a3      	b.n	8007f7c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007e34:	7bbb      	ldrb	r3, [r7, #14]
 8007e36:	2b02      	cmp	r3, #2
 8007e38:	d103      	bne.n	8007e42 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2205      	movs	r2, #5
 8007e3e:	761a      	strb	r2, [r3, #24]
      break;
 8007e40:	e09c      	b.n	8007f7c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007e42:	7bbb      	ldrb	r3, [r7, #14]
 8007e44:	2b04      	cmp	r3, #4
 8007e46:	f040 8099 	bne.w	8007f7c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	220b      	movs	r2, #11
 8007e4e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007e50:	2302      	movs	r3, #2
 8007e52:	73fb      	strb	r3, [r7, #15]
      break;
 8007e54:	e092      	b.n	8007f7c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	791b      	ldrb	r3, [r3, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	2100      	movs	r1, #0
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 f8d5 	bl	800800e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e6a:	b29a      	uxth	r2, r3
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2208      	movs	r2, #8
 8007e74:	761a      	strb	r2, [r3, #24]

      break;
 8007e76:	e086      	b.n	8007f86 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	791b      	ldrb	r3, [r3, #4]
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 fbc6 	bl	8008610 <USBH_LL_GetURBState>
 8007e84:	4603      	mov	r3, r0
 8007e86:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007e88:	7bbb      	ldrb	r3, [r7, #14]
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d105      	bne.n	8007e9a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	220d      	movs	r2, #13
 8007e92:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007e94:	2300      	movs	r3, #0
 8007e96:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007e98:	e072      	b.n	8007f80 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007e9a:	7bbb      	ldrb	r3, [r7, #14]
 8007e9c:	2b04      	cmp	r3, #4
 8007e9e:	d103      	bne.n	8007ea8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	220b      	movs	r2, #11
 8007ea4:	761a      	strb	r2, [r3, #24]
      break;
 8007ea6:	e06b      	b.n	8007f80 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007ea8:	7bbb      	ldrb	r3, [r7, #14]
 8007eaa:	2b05      	cmp	r3, #5
 8007eac:	d168      	bne.n	8007f80 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007eae:	2303      	movs	r3, #3
 8007eb0:	73fb      	strb	r3, [r7, #15]
      break;
 8007eb2:	e065      	b.n	8007f80 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	795b      	ldrb	r3, [r3, #5]
 8007eb8:	2201      	movs	r2, #1
 8007eba:	9200      	str	r2, [sp, #0]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	2100      	movs	r1, #0
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 f87f 	bl	8007fc4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007ecc:	b29a      	uxth	r2, r3
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	220a      	movs	r2, #10
 8007ed6:	761a      	strb	r2, [r3, #24]
      break;
 8007ed8:	e055      	b.n	8007f86 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	795b      	ldrb	r3, [r3, #5]
 8007ede:	4619      	mov	r1, r3
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 fb95 	bl	8008610 <USBH_LL_GetURBState>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007eea:	7bbb      	ldrb	r3, [r7, #14]
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d105      	bne.n	8007efc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	220d      	movs	r2, #13
 8007ef8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007efa:	e043      	b.n	8007f84 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007efc:	7bbb      	ldrb	r3, [r7, #14]
 8007efe:	2b02      	cmp	r3, #2
 8007f00:	d103      	bne.n	8007f0a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2209      	movs	r2, #9
 8007f06:	761a      	strb	r2, [r3, #24]
      break;
 8007f08:	e03c      	b.n	8007f84 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007f0a:	7bbb      	ldrb	r3, [r7, #14]
 8007f0c:	2b04      	cmp	r3, #4
 8007f0e:	d139      	bne.n	8007f84 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	220b      	movs	r2, #11
 8007f14:	761a      	strb	r2, [r3, #24]
      break;
 8007f16:	e035      	b.n	8007f84 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	7e5b      	ldrb	r3, [r3, #25]
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	b2da      	uxtb	r2, r3
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	765a      	strb	r2, [r3, #25]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	7e5b      	ldrb	r3, [r3, #25]
 8007f28:	2b02      	cmp	r3, #2
 8007f2a:	d806      	bhi.n	8007f3a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2201      	movs	r2, #1
 8007f36:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007f38:	e025      	b.n	8007f86 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f40:	2106      	movs	r1, #6
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	795b      	ldrb	r3, [r3, #5]
 8007f50:	4619      	mov	r1, r3
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 f90c 	bl	8008170 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	791b      	ldrb	r3, [r3, #4]
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 f906 	bl	8008170 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007f6a:	2302      	movs	r3, #2
 8007f6c:	73fb      	strb	r3, [r7, #15]
      break;
 8007f6e:	e00a      	b.n	8007f86 <USBH_HandleControl+0x2de>

    default:
      break;
 8007f70:	bf00      	nop
 8007f72:	e008      	b.n	8007f86 <USBH_HandleControl+0x2de>
      break;
 8007f74:	bf00      	nop
 8007f76:	e006      	b.n	8007f86 <USBH_HandleControl+0x2de>
      break;
 8007f78:	bf00      	nop
 8007f7a:	e004      	b.n	8007f86 <USBH_HandleControl+0x2de>
      break;
 8007f7c:	bf00      	nop
 8007f7e:	e002      	b.n	8007f86 <USBH_HandleControl+0x2de>
      break;
 8007f80:	bf00      	nop
 8007f82:	e000      	b.n	8007f86 <USBH_HandleControl+0x2de>
      break;
 8007f84:	bf00      	nop
  }

  return status;
 8007f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3710      	adds	r7, #16
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b088      	sub	sp, #32
 8007f94:	af04      	add	r7, sp, #16
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007f9e:	79f9      	ldrb	r1, [r7, #7]
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	9303      	str	r3, [sp, #12]
 8007fa4:	2308      	movs	r3, #8
 8007fa6:	9302      	str	r3, [sp, #8]
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	9301      	str	r3, [sp, #4]
 8007fac:	2300      	movs	r3, #0
 8007fae:	9300      	str	r3, [sp, #0]
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	68f8      	ldr	r0, [r7, #12]
 8007fb6:	f000 fafa 	bl	80085ae <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007fba:	2300      	movs	r3, #0
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3710      	adds	r7, #16
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b088      	sub	sp, #32
 8007fc8:	af04      	add	r7, sp, #16
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	60b9      	str	r1, [r7, #8]
 8007fce:	4611      	mov	r1, r2
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	80fb      	strh	r3, [r7, #6]
 8007fd6:	4613      	mov	r3, r2
 8007fd8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d001      	beq.n	8007fe8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007fe8:	7979      	ldrb	r1, [r7, #5]
 8007fea:	7e3b      	ldrb	r3, [r7, #24]
 8007fec:	9303      	str	r3, [sp, #12]
 8007fee:	88fb      	ldrh	r3, [r7, #6]
 8007ff0:	9302      	str	r3, [sp, #8]
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	9301      	str	r3, [sp, #4]
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	9300      	str	r3, [sp, #0]
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	68f8      	ldr	r0, [r7, #12]
 8008000:	f000 fad5 	bl	80085ae <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008004:	2300      	movs	r3, #0
}
 8008006:	4618      	mov	r0, r3
 8008008:	3710      	adds	r7, #16
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}

0800800e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800800e:	b580      	push	{r7, lr}
 8008010:	b088      	sub	sp, #32
 8008012:	af04      	add	r7, sp, #16
 8008014:	60f8      	str	r0, [r7, #12]
 8008016:	60b9      	str	r1, [r7, #8]
 8008018:	4611      	mov	r1, r2
 800801a:	461a      	mov	r2, r3
 800801c:	460b      	mov	r3, r1
 800801e:	80fb      	strh	r3, [r7, #6]
 8008020:	4613      	mov	r3, r2
 8008022:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008024:	7979      	ldrb	r1, [r7, #5]
 8008026:	2300      	movs	r3, #0
 8008028:	9303      	str	r3, [sp, #12]
 800802a:	88fb      	ldrh	r3, [r7, #6]
 800802c:	9302      	str	r3, [sp, #8]
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	9301      	str	r3, [sp, #4]
 8008032:	2301      	movs	r3, #1
 8008034:	9300      	str	r3, [sp, #0]
 8008036:	2300      	movs	r3, #0
 8008038:	2201      	movs	r2, #1
 800803a:	68f8      	ldr	r0, [r7, #12]
 800803c:	f000 fab7 	bl	80085ae <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008040:	2300      	movs	r3, #0

}
 8008042:	4618      	mov	r0, r3
 8008044:	3710      	adds	r7, #16
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800804a:	b580      	push	{r7, lr}
 800804c:	b088      	sub	sp, #32
 800804e:	af04      	add	r7, sp, #16
 8008050:	60f8      	str	r0, [r7, #12]
 8008052:	60b9      	str	r1, [r7, #8]
 8008054:	4611      	mov	r1, r2
 8008056:	461a      	mov	r2, r3
 8008058:	460b      	mov	r3, r1
 800805a:	80fb      	strh	r3, [r7, #6]
 800805c:	4613      	mov	r3, r2
 800805e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008066:	2b00      	cmp	r3, #0
 8008068:	d001      	beq.n	800806e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800806a:	2300      	movs	r3, #0
 800806c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800806e:	7979      	ldrb	r1, [r7, #5]
 8008070:	7e3b      	ldrb	r3, [r7, #24]
 8008072:	9303      	str	r3, [sp, #12]
 8008074:	88fb      	ldrh	r3, [r7, #6]
 8008076:	9302      	str	r3, [sp, #8]
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	9301      	str	r3, [sp, #4]
 800807c:	2301      	movs	r3, #1
 800807e:	9300      	str	r3, [sp, #0]
 8008080:	2302      	movs	r3, #2
 8008082:	2200      	movs	r2, #0
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f000 fa92 	bl	80085ae <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800808a:	2300      	movs	r3, #0
}
 800808c:	4618      	mov	r0, r3
 800808e:	3710      	adds	r7, #16
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b088      	sub	sp, #32
 8008098:	af04      	add	r7, sp, #16
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	4611      	mov	r1, r2
 80080a0:	461a      	mov	r2, r3
 80080a2:	460b      	mov	r3, r1
 80080a4:	80fb      	strh	r3, [r7, #6]
 80080a6:	4613      	mov	r3, r2
 80080a8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80080aa:	7979      	ldrb	r1, [r7, #5]
 80080ac:	2300      	movs	r3, #0
 80080ae:	9303      	str	r3, [sp, #12]
 80080b0:	88fb      	ldrh	r3, [r7, #6]
 80080b2:	9302      	str	r3, [sp, #8]
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	9301      	str	r3, [sp, #4]
 80080b8:	2301      	movs	r3, #1
 80080ba:	9300      	str	r3, [sp, #0]
 80080bc:	2302      	movs	r3, #2
 80080be:	2201      	movs	r2, #1
 80080c0:	68f8      	ldr	r0, [r7, #12]
 80080c2:	f000 fa74 	bl	80085ae <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80080c6:	2300      	movs	r3, #0
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3710      	adds	r7, #16
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b086      	sub	sp, #24
 80080d4:	af04      	add	r7, sp, #16
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	4608      	mov	r0, r1
 80080da:	4611      	mov	r1, r2
 80080dc:	461a      	mov	r2, r3
 80080de:	4603      	mov	r3, r0
 80080e0:	70fb      	strb	r3, [r7, #3]
 80080e2:	460b      	mov	r3, r1
 80080e4:	70bb      	strb	r3, [r7, #2]
 80080e6:	4613      	mov	r3, r2
 80080e8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80080ea:	7878      	ldrb	r0, [r7, #1]
 80080ec:	78ba      	ldrb	r2, [r7, #2]
 80080ee:	78f9      	ldrb	r1, [r7, #3]
 80080f0:	8b3b      	ldrh	r3, [r7, #24]
 80080f2:	9302      	str	r3, [sp, #8]
 80080f4:	7d3b      	ldrb	r3, [r7, #20]
 80080f6:	9301      	str	r3, [sp, #4]
 80080f8:	7c3b      	ldrb	r3, [r7, #16]
 80080fa:	9300      	str	r3, [sp, #0]
 80080fc:	4603      	mov	r3, r0
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 fa07 	bl	8008512 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008104:	2300      	movs	r3, #0
}
 8008106:	4618      	mov	r0, r3
 8008108:	3708      	adds	r7, #8
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}

0800810e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800810e:	b580      	push	{r7, lr}
 8008110:	b082      	sub	sp, #8
 8008112:	af00      	add	r7, sp, #0
 8008114:	6078      	str	r0, [r7, #4]
 8008116:	460b      	mov	r3, r1
 8008118:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800811a:	78fb      	ldrb	r3, [r7, #3]
 800811c:	4619      	mov	r1, r3
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 fa26 	bl	8008570 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008124:	2300      	movs	r3, #0
}
 8008126:	4618      	mov	r0, r3
 8008128:	3708      	adds	r7, #8
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}

0800812e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800812e:	b580      	push	{r7, lr}
 8008130:	b084      	sub	sp, #16
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
 8008136:	460b      	mov	r3, r1
 8008138:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 f836 	bl	80081ac <USBH_GetFreePipe>
 8008140:	4603      	mov	r3, r0
 8008142:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008144:	89fb      	ldrh	r3, [r7, #14]
 8008146:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800814a:	4293      	cmp	r3, r2
 800814c:	d00a      	beq.n	8008164 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800814e:	78fa      	ldrb	r2, [r7, #3]
 8008150:	89fb      	ldrh	r3, [r7, #14]
 8008152:	f003 030f 	and.w	r3, r3, #15
 8008156:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800815a:	6879      	ldr	r1, [r7, #4]
 800815c:	33e0      	adds	r3, #224	; 0xe0
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	440b      	add	r3, r1
 8008162:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008164:	89fb      	ldrh	r3, [r7, #14]
 8008166:	b2db      	uxtb	r3, r3
}
 8008168:	4618      	mov	r0, r3
 800816a:	3710      	adds	r7, #16
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008170:	b480      	push	{r7}
 8008172:	b083      	sub	sp, #12
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	460b      	mov	r3, r1
 800817a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800817c:	78fb      	ldrb	r3, [r7, #3]
 800817e:	2b0f      	cmp	r3, #15
 8008180:	d80d      	bhi.n	800819e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008182:	78fb      	ldrb	r3, [r7, #3]
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	33e0      	adds	r3, #224	; 0xe0
 8008188:	009b      	lsls	r3, r3, #2
 800818a:	4413      	add	r3, r2
 800818c:	685a      	ldr	r2, [r3, #4]
 800818e:	78fb      	ldrb	r3, [r7, #3]
 8008190:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008194:	6879      	ldr	r1, [r7, #4]
 8008196:	33e0      	adds	r3, #224	; 0xe0
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	440b      	add	r3, r1
 800819c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800819e:	2300      	movs	r3, #0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	370c      	adds	r7, #12
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b085      	sub	sp, #20
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80081b4:	2300      	movs	r3, #0
 80081b6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80081b8:	2300      	movs	r3, #0
 80081ba:	73fb      	strb	r3, [r7, #15]
 80081bc:	e00f      	b.n	80081de <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80081be:	7bfb      	ldrb	r3, [r7, #15]
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	33e0      	adds	r3, #224	; 0xe0
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	4413      	add	r3, r2
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d102      	bne.n	80081d8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80081d2:	7bfb      	ldrb	r3, [r7, #15]
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	e007      	b.n	80081e8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80081d8:	7bfb      	ldrb	r3, [r7, #15]
 80081da:	3301      	adds	r3, #1
 80081dc:	73fb      	strb	r3, [r7, #15]
 80081de:	7bfb      	ldrb	r3, [r7, #15]
 80081e0:	2b0f      	cmp	r3, #15
 80081e2:	d9ec      	bls.n	80081be <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80081e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3714      	adds	r7, #20
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80081f8:	2201      	movs	r2, #1
 80081fa:	490e      	ldr	r1, [pc, #56]	; (8008234 <MX_USB_HOST_Init+0x40>)
 80081fc:	480e      	ldr	r0, [pc, #56]	; (8008238 <MX_USB_HOST_Init+0x44>)
 80081fe:	f7ff fb37 	bl	8007870 <USBH_Init>
 8008202:	4603      	mov	r3, r0
 8008204:	2b00      	cmp	r3, #0
 8008206:	d001      	beq.n	800820c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008208:	f7f8 fc28 	bl	8000a5c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800820c:	490b      	ldr	r1, [pc, #44]	; (800823c <MX_USB_HOST_Init+0x48>)
 800820e:	480a      	ldr	r0, [pc, #40]	; (8008238 <MX_USB_HOST_Init+0x44>)
 8008210:	f7ff fbbc 	bl	800798c <USBH_RegisterClass>
 8008214:	4603      	mov	r3, r0
 8008216:	2b00      	cmp	r3, #0
 8008218:	d001      	beq.n	800821e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800821a:	f7f8 fc1f 	bl	8000a5c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800821e:	4806      	ldr	r0, [pc, #24]	; (8008238 <MX_USB_HOST_Init+0x44>)
 8008220:	f7ff fc40 	bl	8007aa4 <USBH_Start>
 8008224:	4603      	mov	r3, r0
 8008226:	2b00      	cmp	r3, #0
 8008228:	d001      	beq.n	800822e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800822a:	f7f8 fc17 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800822e:	bf00      	nop
 8008230:	bd80      	pop	{r7, pc}
 8008232:	bf00      	nop
 8008234:	08008241 	.word	0x08008241
 8008238:	20000270 	.word	0x20000270
 800823c:	20000014 	.word	0x20000014

08008240 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008240:	b480      	push	{r7}
 8008242:	b083      	sub	sp, #12
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	460b      	mov	r3, r1
 800824a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800824c:	78fb      	ldrb	r3, [r7, #3]
 800824e:	3b01      	subs	r3, #1
 8008250:	2b04      	cmp	r3, #4
 8008252:	d819      	bhi.n	8008288 <USBH_UserProcess+0x48>
 8008254:	a201      	add	r2, pc, #4	; (adr r2, 800825c <USBH_UserProcess+0x1c>)
 8008256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800825a:	bf00      	nop
 800825c:	08008289 	.word	0x08008289
 8008260:	08008279 	.word	0x08008279
 8008264:	08008289 	.word	0x08008289
 8008268:	08008281 	.word	0x08008281
 800826c:	08008271 	.word	0x08008271
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008270:	4b09      	ldr	r3, [pc, #36]	; (8008298 <USBH_UserProcess+0x58>)
 8008272:	2203      	movs	r2, #3
 8008274:	701a      	strb	r2, [r3, #0]
  break;
 8008276:	e008      	b.n	800828a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008278:	4b07      	ldr	r3, [pc, #28]	; (8008298 <USBH_UserProcess+0x58>)
 800827a:	2202      	movs	r2, #2
 800827c:	701a      	strb	r2, [r3, #0]
  break;
 800827e:	e004      	b.n	800828a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008280:	4b05      	ldr	r3, [pc, #20]	; (8008298 <USBH_UserProcess+0x58>)
 8008282:	2201      	movs	r2, #1
 8008284:	701a      	strb	r2, [r3, #0]
  break;
 8008286:	e000      	b.n	800828a <USBH_UserProcess+0x4a>

  default:
  break;
 8008288:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800828a:	bf00      	nop
 800828c:	370c      	adds	r7, #12
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr
 8008296:	bf00      	nop
 8008298:	20000648 	.word	0x20000648

0800829c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b08a      	sub	sp, #40	; 0x28
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082a4:	f107 0314 	add.w	r3, r7, #20
 80082a8:	2200      	movs	r2, #0
 80082aa:	601a      	str	r2, [r3, #0]
 80082ac:	605a      	str	r2, [r3, #4]
 80082ae:	609a      	str	r2, [r3, #8]
 80082b0:	60da      	str	r2, [r3, #12]
 80082b2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80082bc:	d147      	bne.n	800834e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80082be:	2300      	movs	r3, #0
 80082c0:	613b      	str	r3, [r7, #16]
 80082c2:	4b25      	ldr	r3, [pc, #148]	; (8008358 <HAL_HCD_MspInit+0xbc>)
 80082c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082c6:	4a24      	ldr	r2, [pc, #144]	; (8008358 <HAL_HCD_MspInit+0xbc>)
 80082c8:	f043 0301 	orr.w	r3, r3, #1
 80082cc:	6313      	str	r3, [r2, #48]	; 0x30
 80082ce:	4b22      	ldr	r3, [pc, #136]	; (8008358 <HAL_HCD_MspInit+0xbc>)
 80082d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d2:	f003 0301 	and.w	r3, r3, #1
 80082d6:	613b      	str	r3, [r7, #16]
 80082d8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80082da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80082e0:	2300      	movs	r3, #0
 80082e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082e4:	2300      	movs	r3, #0
 80082e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80082e8:	f107 0314 	add.w	r3, r7, #20
 80082ec:	4619      	mov	r1, r3
 80082ee:	481b      	ldr	r0, [pc, #108]	; (800835c <HAL_HCD_MspInit+0xc0>)
 80082f0:	f7f9 f962 	bl	80015b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80082f4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80082f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082fa:	2302      	movs	r3, #2
 80082fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082fe:	2300      	movs	r3, #0
 8008300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008302:	2300      	movs	r3, #0
 8008304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008306:	230a      	movs	r3, #10
 8008308:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800830a:	f107 0314 	add.w	r3, r7, #20
 800830e:	4619      	mov	r1, r3
 8008310:	4812      	ldr	r0, [pc, #72]	; (800835c <HAL_HCD_MspInit+0xc0>)
 8008312:	f7f9 f951 	bl	80015b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008316:	4b10      	ldr	r3, [pc, #64]	; (8008358 <HAL_HCD_MspInit+0xbc>)
 8008318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800831a:	4a0f      	ldr	r2, [pc, #60]	; (8008358 <HAL_HCD_MspInit+0xbc>)
 800831c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008320:	6353      	str	r3, [r2, #52]	; 0x34
 8008322:	2300      	movs	r3, #0
 8008324:	60fb      	str	r3, [r7, #12]
 8008326:	4b0c      	ldr	r3, [pc, #48]	; (8008358 <HAL_HCD_MspInit+0xbc>)
 8008328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800832a:	4a0b      	ldr	r2, [pc, #44]	; (8008358 <HAL_HCD_MspInit+0xbc>)
 800832c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008330:	6453      	str	r3, [r2, #68]	; 0x44
 8008332:	4b09      	ldr	r3, [pc, #36]	; (8008358 <HAL_HCD_MspInit+0xbc>)
 8008334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008336:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800833a:	60fb      	str	r3, [r7, #12]
 800833c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800833e:	2200      	movs	r2, #0
 8008340:	2100      	movs	r1, #0
 8008342:	2043      	movs	r0, #67	; 0x43
 8008344:	f7f9 f8df 	bl	8001506 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008348:	2043      	movs	r0, #67	; 0x43
 800834a:	f7f9 f8f8 	bl	800153e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800834e:	bf00      	nop
 8008350:	3728      	adds	r7, #40	; 0x28
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	40023800 	.word	0x40023800
 800835c:	40020000 	.word	0x40020000

08008360 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800836e:	4618      	mov	r0, r3
 8008370:	f7ff fbb7 	bl	8007ae2 <USBH_LL_IncTimer>
}
 8008374:	bf00      	nop
 8008376:	3708      	adds	r7, #8
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b082      	sub	sp, #8
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800838a:	4618      	mov	r0, r3
 800838c:	f7ff fbef 	bl	8007b6e <USBH_LL_Connect>
}
 8008390:	bf00      	nop
 8008392:	3708      	adds	r7, #8
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b082      	sub	sp, #8
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80083a6:	4618      	mov	r0, r3
 80083a8:	f7ff fbf8 	bl	8007b9c <USBH_LL_Disconnect>
}
 80083ac:	bf00      	nop
 80083ae:	3708      	adds	r7, #8
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b083      	sub	sp, #12
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	460b      	mov	r3, r1
 80083be:	70fb      	strb	r3, [r7, #3]
 80083c0:	4613      	mov	r3, r2
 80083c2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80083c4:	bf00      	nop
 80083c6:	370c      	adds	r7, #12
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr

080083d0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b082      	sub	sp, #8
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80083de:	4618      	mov	r0, r3
 80083e0:	f7ff fba9 	bl	8007b36 <USBH_LL_PortEnabled>
}
 80083e4:	bf00      	nop
 80083e6:	3708      	adds	r7, #8
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80083fa:	4618      	mov	r0, r3
 80083fc:	f7ff fba9 	bl	8007b52 <USBH_LL_PortDisabled>
}
 8008400:	bf00      	nop
 8008402:	3708      	adds	r7, #8
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008416:	2b01      	cmp	r3, #1
 8008418:	d12a      	bne.n	8008470 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800841a:	4a18      	ldr	r2, [pc, #96]	; (800847c <USBH_LL_Init+0x74>)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4a15      	ldr	r2, [pc, #84]	; (800847c <USBH_LL_Init+0x74>)
 8008426:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800842a:	4b14      	ldr	r3, [pc, #80]	; (800847c <USBH_LL_Init+0x74>)
 800842c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008430:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008432:	4b12      	ldr	r3, [pc, #72]	; (800847c <USBH_LL_Init+0x74>)
 8008434:	2208      	movs	r2, #8
 8008436:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008438:	4b10      	ldr	r3, [pc, #64]	; (800847c <USBH_LL_Init+0x74>)
 800843a:	2201      	movs	r2, #1
 800843c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800843e:	4b0f      	ldr	r3, [pc, #60]	; (800847c <USBH_LL_Init+0x74>)
 8008440:	2200      	movs	r2, #0
 8008442:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008444:	4b0d      	ldr	r3, [pc, #52]	; (800847c <USBH_LL_Init+0x74>)
 8008446:	2202      	movs	r2, #2
 8008448:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800844a:	4b0c      	ldr	r3, [pc, #48]	; (800847c <USBH_LL_Init+0x74>)
 800844c:	2200      	movs	r2, #0
 800844e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008450:	480a      	ldr	r0, [pc, #40]	; (800847c <USBH_LL_Init+0x74>)
 8008452:	f7f9 fa66 	bl	8001922 <HAL_HCD_Init>
 8008456:	4603      	mov	r3, r0
 8008458:	2b00      	cmp	r3, #0
 800845a:	d001      	beq.n	8008460 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800845c:	f7f8 fafe 	bl	8000a5c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008460:	4806      	ldr	r0, [pc, #24]	; (800847c <USBH_LL_Init+0x74>)
 8008462:	f7f9 fe3c 	bl	80020de <HAL_HCD_GetCurrentFrame>
 8008466:	4603      	mov	r3, r0
 8008468:	4619      	mov	r1, r3
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f7ff fb2a 	bl	8007ac4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008470:	2300      	movs	r3, #0
}
 8008472:	4618      	mov	r0, r3
 8008474:	3708      	adds	r7, #8
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}
 800847a:	bf00      	nop
 800847c:	2000064c 	.word	0x2000064c

08008480 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b084      	sub	sp, #16
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008488:	2300      	movs	r3, #0
 800848a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800848c:	2300      	movs	r3, #0
 800848e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008496:	4618      	mov	r0, r3
 8008498:	f7f9 fdb9 	bl	800200e <HAL_HCD_Start>
 800849c:	4603      	mov	r3, r0
 800849e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80084a0:	7bfb      	ldrb	r3, [r7, #15]
 80084a2:	4618      	mov	r0, r3
 80084a4:	f000 f90e 	bl	80086c4 <USBH_Get_USB_Status>
 80084a8:	4603      	mov	r3, r0
 80084aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3710      	adds	r7, #16
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b084      	sub	sp, #16
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084be:	2300      	movs	r3, #0
 80084c0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80084c2:	2300      	movs	r3, #0
 80084c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80084cc:	4618      	mov	r0, r3
 80084ce:	f7f9 fdc1 	bl	8002054 <HAL_HCD_Stop>
 80084d2:	4603      	mov	r3, r0
 80084d4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80084d6:	7bfb      	ldrb	r3, [r7, #15]
 80084d8:	4618      	mov	r0, r3
 80084da:	f000 f8f3 	bl	80086c4 <USBH_Get_USB_Status>
 80084de:	4603      	mov	r3, r0
 80084e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3710      	adds	r7, #16
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b082      	sub	sp, #8
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	460b      	mov	r3, r1
 80084f6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80084fe:	78fa      	ldrb	r2, [r7, #3]
 8008500:	4611      	mov	r1, r2
 8008502:	4618      	mov	r0, r3
 8008504:	f7f9 fdd7 	bl	80020b6 <HAL_HCD_HC_GetXferCount>
 8008508:	4603      	mov	r3, r0
}
 800850a:	4618      	mov	r0, r3
 800850c:	3708      	adds	r7, #8
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008512:	b590      	push	{r4, r7, lr}
 8008514:	b089      	sub	sp, #36	; 0x24
 8008516:	af04      	add	r7, sp, #16
 8008518:	6078      	str	r0, [r7, #4]
 800851a:	4608      	mov	r0, r1
 800851c:	4611      	mov	r1, r2
 800851e:	461a      	mov	r2, r3
 8008520:	4603      	mov	r3, r0
 8008522:	70fb      	strb	r3, [r7, #3]
 8008524:	460b      	mov	r3, r1
 8008526:	70bb      	strb	r3, [r7, #2]
 8008528:	4613      	mov	r3, r2
 800852a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800852c:	2300      	movs	r3, #0
 800852e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008530:	2300      	movs	r3, #0
 8008532:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800853a:	787c      	ldrb	r4, [r7, #1]
 800853c:	78ba      	ldrb	r2, [r7, #2]
 800853e:	78f9      	ldrb	r1, [r7, #3]
 8008540:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008542:	9302      	str	r3, [sp, #8]
 8008544:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008548:	9301      	str	r3, [sp, #4]
 800854a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800854e:	9300      	str	r3, [sp, #0]
 8008550:	4623      	mov	r3, r4
 8008552:	f7f9 fa48 	bl	80019e6 <HAL_HCD_HC_Init>
 8008556:	4603      	mov	r3, r0
 8008558:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800855a:	7bfb      	ldrb	r3, [r7, #15]
 800855c:	4618      	mov	r0, r3
 800855e:	f000 f8b1 	bl	80086c4 <USBH_Get_USB_Status>
 8008562:	4603      	mov	r3, r0
 8008564:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008566:	7bbb      	ldrb	r3, [r7, #14]
}
 8008568:	4618      	mov	r0, r3
 800856a:	3714      	adds	r7, #20
 800856c:	46bd      	mov	sp, r7
 800856e:	bd90      	pop	{r4, r7, pc}

08008570 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b084      	sub	sp, #16
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	460b      	mov	r3, r1
 800857a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800857c:	2300      	movs	r3, #0
 800857e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008580:	2300      	movs	r3, #0
 8008582:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800858a:	78fa      	ldrb	r2, [r7, #3]
 800858c:	4611      	mov	r1, r2
 800858e:	4618      	mov	r0, r3
 8008590:	f7f9 fab8 	bl	8001b04 <HAL_HCD_HC_Halt>
 8008594:	4603      	mov	r3, r0
 8008596:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008598:	7bfb      	ldrb	r3, [r7, #15]
 800859a:	4618      	mov	r0, r3
 800859c:	f000 f892 	bl	80086c4 <USBH_Get_USB_Status>
 80085a0:	4603      	mov	r3, r0
 80085a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3710      	adds	r7, #16
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}

080085ae <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80085ae:	b590      	push	{r4, r7, lr}
 80085b0:	b089      	sub	sp, #36	; 0x24
 80085b2:	af04      	add	r7, sp, #16
 80085b4:	6078      	str	r0, [r7, #4]
 80085b6:	4608      	mov	r0, r1
 80085b8:	4611      	mov	r1, r2
 80085ba:	461a      	mov	r2, r3
 80085bc:	4603      	mov	r3, r0
 80085be:	70fb      	strb	r3, [r7, #3]
 80085c0:	460b      	mov	r3, r1
 80085c2:	70bb      	strb	r3, [r7, #2]
 80085c4:	4613      	mov	r3, r2
 80085c6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085c8:	2300      	movs	r3, #0
 80085ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80085cc:	2300      	movs	r3, #0
 80085ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80085d6:	787c      	ldrb	r4, [r7, #1]
 80085d8:	78ba      	ldrb	r2, [r7, #2]
 80085da:	78f9      	ldrb	r1, [r7, #3]
 80085dc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80085e0:	9303      	str	r3, [sp, #12]
 80085e2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80085e4:	9302      	str	r3, [sp, #8]
 80085e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e8:	9301      	str	r3, [sp, #4]
 80085ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80085ee:	9300      	str	r3, [sp, #0]
 80085f0:	4623      	mov	r3, r4
 80085f2:	f7f9 faab 	bl	8001b4c <HAL_HCD_HC_SubmitRequest>
 80085f6:	4603      	mov	r3, r0
 80085f8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80085fa:	7bfb      	ldrb	r3, [r7, #15]
 80085fc:	4618      	mov	r0, r3
 80085fe:	f000 f861 	bl	80086c4 <USBH_Get_USB_Status>
 8008602:	4603      	mov	r3, r0
 8008604:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008606:	7bbb      	ldrb	r3, [r7, #14]
}
 8008608:	4618      	mov	r0, r3
 800860a:	3714      	adds	r7, #20
 800860c:	46bd      	mov	sp, r7
 800860e:	bd90      	pop	{r4, r7, pc}

08008610 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b082      	sub	sp, #8
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	460b      	mov	r3, r1
 800861a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008622:	78fa      	ldrb	r2, [r7, #3]
 8008624:	4611      	mov	r1, r2
 8008626:	4618      	mov	r0, r3
 8008628:	f7f9 fd31 	bl	800208e <HAL_HCD_HC_GetURBState>
 800862c:	4603      	mov	r3, r0
}
 800862e:	4618      	mov	r0, r3
 8008630:	3708      	adds	r7, #8
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}

08008636 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008636:	b580      	push	{r7, lr}
 8008638:	b082      	sub	sp, #8
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
 800863e:	460b      	mov	r3, r1
 8008640:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008648:	2b01      	cmp	r3, #1
 800864a:	d103      	bne.n	8008654 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800864c:	78fb      	ldrb	r3, [r7, #3]
 800864e:	4618      	mov	r0, r3
 8008650:	f000 f864 	bl	800871c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008654:	20c8      	movs	r0, #200	; 0xc8
 8008656:	f7f8 fe57 	bl	8001308 <HAL_Delay>
  return USBH_OK;
 800865a:	2300      	movs	r3, #0
}
 800865c:	4618      	mov	r0, r3
 800865e:	3708      	adds	r7, #8
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008664:	b480      	push	{r7}
 8008666:	b085      	sub	sp, #20
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	460b      	mov	r3, r1
 800866e:	70fb      	strb	r3, [r7, #3]
 8008670:	4613      	mov	r3, r2
 8008672:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800867a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800867c:	78fb      	ldrb	r3, [r7, #3]
 800867e:	68fa      	ldr	r2, [r7, #12]
 8008680:	212c      	movs	r1, #44	; 0x2c
 8008682:	fb01 f303 	mul.w	r3, r1, r3
 8008686:	4413      	add	r3, r2
 8008688:	333b      	adds	r3, #59	; 0x3b
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d009      	beq.n	80086a4 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008690:	78fb      	ldrb	r3, [r7, #3]
 8008692:	68fa      	ldr	r2, [r7, #12]
 8008694:	212c      	movs	r1, #44	; 0x2c
 8008696:	fb01 f303 	mul.w	r3, r1, r3
 800869a:	4413      	add	r3, r2
 800869c:	3354      	adds	r3, #84	; 0x54
 800869e:	78ba      	ldrb	r2, [r7, #2]
 80086a0:	701a      	strb	r2, [r3, #0]
 80086a2:	e008      	b.n	80086b6 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80086a4:	78fb      	ldrb	r3, [r7, #3]
 80086a6:	68fa      	ldr	r2, [r7, #12]
 80086a8:	212c      	movs	r1, #44	; 0x2c
 80086aa:	fb01 f303 	mul.w	r3, r1, r3
 80086ae:	4413      	add	r3, r2
 80086b0:	3355      	adds	r3, #85	; 0x55
 80086b2:	78ba      	ldrb	r2, [r7, #2]
 80086b4:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80086b6:	2300      	movs	r3, #0
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3714      	adds	r7, #20
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b085      	sub	sp, #20
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	4603      	mov	r3, r0
 80086cc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80086ce:	2300      	movs	r3, #0
 80086d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80086d2:	79fb      	ldrb	r3, [r7, #7]
 80086d4:	2b03      	cmp	r3, #3
 80086d6:	d817      	bhi.n	8008708 <USBH_Get_USB_Status+0x44>
 80086d8:	a201      	add	r2, pc, #4	; (adr r2, 80086e0 <USBH_Get_USB_Status+0x1c>)
 80086da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086de:	bf00      	nop
 80086e0:	080086f1 	.word	0x080086f1
 80086e4:	080086f7 	.word	0x080086f7
 80086e8:	080086fd 	.word	0x080086fd
 80086ec:	08008703 	.word	0x08008703
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80086f0:	2300      	movs	r3, #0
 80086f2:	73fb      	strb	r3, [r7, #15]
    break;
 80086f4:	e00b      	b.n	800870e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80086f6:	2302      	movs	r3, #2
 80086f8:	73fb      	strb	r3, [r7, #15]
    break;
 80086fa:	e008      	b.n	800870e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80086fc:	2301      	movs	r3, #1
 80086fe:	73fb      	strb	r3, [r7, #15]
    break;
 8008700:	e005      	b.n	800870e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008702:	2302      	movs	r3, #2
 8008704:	73fb      	strb	r3, [r7, #15]
    break;
 8008706:	e002      	b.n	800870e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008708:	2302      	movs	r3, #2
 800870a:	73fb      	strb	r3, [r7, #15]
    break;
 800870c:	bf00      	nop
  }
  return usb_status;
 800870e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008710:	4618      	mov	r0, r3
 8008712:	3714      	adds	r7, #20
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	4603      	mov	r3, r0
 8008724:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008726:	79fb      	ldrb	r3, [r7, #7]
 8008728:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800872a:	79fb      	ldrb	r3, [r7, #7]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d102      	bne.n	8008736 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008730:	2300      	movs	r3, #0
 8008732:	73fb      	strb	r3, [r7, #15]
 8008734:	e001      	b.n	800873a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008736:	2301      	movs	r3, #1
 8008738:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800873a:	7bfb      	ldrb	r3, [r7, #15]
 800873c:	461a      	mov	r2, r3
 800873e:	2101      	movs	r1, #1
 8008740:	4803      	ldr	r0, [pc, #12]	; (8008750 <MX_DriverVbusFS+0x34>)
 8008742:	f7f9 f8d5 	bl	80018f0 <HAL_GPIO_WritePin>
}
 8008746:	bf00      	nop
 8008748:	3710      	adds	r7, #16
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	40020800 	.word	0x40020800

08008754 <__errno>:
 8008754:	4b01      	ldr	r3, [pc, #4]	; (800875c <__errno+0x8>)
 8008756:	6818      	ldr	r0, [r3, #0]
 8008758:	4770      	bx	lr
 800875a:	bf00      	nop
 800875c:	20000034 	.word	0x20000034

08008760 <__libc_init_array>:
 8008760:	b570      	push	{r4, r5, r6, lr}
 8008762:	4d0d      	ldr	r5, [pc, #52]	; (8008798 <__libc_init_array+0x38>)
 8008764:	4c0d      	ldr	r4, [pc, #52]	; (800879c <__libc_init_array+0x3c>)
 8008766:	1b64      	subs	r4, r4, r5
 8008768:	10a4      	asrs	r4, r4, #2
 800876a:	2600      	movs	r6, #0
 800876c:	42a6      	cmp	r6, r4
 800876e:	d109      	bne.n	8008784 <__libc_init_array+0x24>
 8008770:	4d0b      	ldr	r5, [pc, #44]	; (80087a0 <__libc_init_array+0x40>)
 8008772:	4c0c      	ldr	r4, [pc, #48]	; (80087a4 <__libc_init_array+0x44>)
 8008774:	f000 f92e 	bl	80089d4 <_init>
 8008778:	1b64      	subs	r4, r4, r5
 800877a:	10a4      	asrs	r4, r4, #2
 800877c:	2600      	movs	r6, #0
 800877e:	42a6      	cmp	r6, r4
 8008780:	d105      	bne.n	800878e <__libc_init_array+0x2e>
 8008782:	bd70      	pop	{r4, r5, r6, pc}
 8008784:	f855 3b04 	ldr.w	r3, [r5], #4
 8008788:	4798      	blx	r3
 800878a:	3601      	adds	r6, #1
 800878c:	e7ee      	b.n	800876c <__libc_init_array+0xc>
 800878e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008792:	4798      	blx	r3
 8008794:	3601      	adds	r6, #1
 8008796:	e7f2      	b.n	800877e <__libc_init_array+0x1e>
 8008798:	08008a10 	.word	0x08008a10
 800879c:	08008a10 	.word	0x08008a10
 80087a0:	08008a10 	.word	0x08008a10
 80087a4:	08008a14 	.word	0x08008a14

080087a8 <malloc>:
 80087a8:	4b02      	ldr	r3, [pc, #8]	; (80087b4 <malloc+0xc>)
 80087aa:	4601      	mov	r1, r0
 80087ac:	6818      	ldr	r0, [r3, #0]
 80087ae:	f000 b87f 	b.w	80088b0 <_malloc_r>
 80087b2:	bf00      	nop
 80087b4:	20000034 	.word	0x20000034

080087b8 <free>:
 80087b8:	4b02      	ldr	r3, [pc, #8]	; (80087c4 <free+0xc>)
 80087ba:	4601      	mov	r1, r0
 80087bc:	6818      	ldr	r0, [r3, #0]
 80087be:	f000 b80b 	b.w	80087d8 <_free_r>
 80087c2:	bf00      	nop
 80087c4:	20000034 	.word	0x20000034

080087c8 <memset>:
 80087c8:	4402      	add	r2, r0
 80087ca:	4603      	mov	r3, r0
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d100      	bne.n	80087d2 <memset+0xa>
 80087d0:	4770      	bx	lr
 80087d2:	f803 1b01 	strb.w	r1, [r3], #1
 80087d6:	e7f9      	b.n	80087cc <memset+0x4>

080087d8 <_free_r>:
 80087d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80087da:	2900      	cmp	r1, #0
 80087dc:	d044      	beq.n	8008868 <_free_r+0x90>
 80087de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087e2:	9001      	str	r0, [sp, #4]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	f1a1 0404 	sub.w	r4, r1, #4
 80087ea:	bfb8      	it	lt
 80087ec:	18e4      	addlt	r4, r4, r3
 80087ee:	f000 f8e3 	bl	80089b8 <__malloc_lock>
 80087f2:	4a1e      	ldr	r2, [pc, #120]	; (800886c <_free_r+0x94>)
 80087f4:	9801      	ldr	r0, [sp, #4]
 80087f6:	6813      	ldr	r3, [r2, #0]
 80087f8:	b933      	cbnz	r3, 8008808 <_free_r+0x30>
 80087fa:	6063      	str	r3, [r4, #4]
 80087fc:	6014      	str	r4, [r2, #0]
 80087fe:	b003      	add	sp, #12
 8008800:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008804:	f000 b8de 	b.w	80089c4 <__malloc_unlock>
 8008808:	42a3      	cmp	r3, r4
 800880a:	d908      	bls.n	800881e <_free_r+0x46>
 800880c:	6825      	ldr	r5, [r4, #0]
 800880e:	1961      	adds	r1, r4, r5
 8008810:	428b      	cmp	r3, r1
 8008812:	bf01      	itttt	eq
 8008814:	6819      	ldreq	r1, [r3, #0]
 8008816:	685b      	ldreq	r3, [r3, #4]
 8008818:	1949      	addeq	r1, r1, r5
 800881a:	6021      	streq	r1, [r4, #0]
 800881c:	e7ed      	b.n	80087fa <_free_r+0x22>
 800881e:	461a      	mov	r2, r3
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	b10b      	cbz	r3, 8008828 <_free_r+0x50>
 8008824:	42a3      	cmp	r3, r4
 8008826:	d9fa      	bls.n	800881e <_free_r+0x46>
 8008828:	6811      	ldr	r1, [r2, #0]
 800882a:	1855      	adds	r5, r2, r1
 800882c:	42a5      	cmp	r5, r4
 800882e:	d10b      	bne.n	8008848 <_free_r+0x70>
 8008830:	6824      	ldr	r4, [r4, #0]
 8008832:	4421      	add	r1, r4
 8008834:	1854      	adds	r4, r2, r1
 8008836:	42a3      	cmp	r3, r4
 8008838:	6011      	str	r1, [r2, #0]
 800883a:	d1e0      	bne.n	80087fe <_free_r+0x26>
 800883c:	681c      	ldr	r4, [r3, #0]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	6053      	str	r3, [r2, #4]
 8008842:	4421      	add	r1, r4
 8008844:	6011      	str	r1, [r2, #0]
 8008846:	e7da      	b.n	80087fe <_free_r+0x26>
 8008848:	d902      	bls.n	8008850 <_free_r+0x78>
 800884a:	230c      	movs	r3, #12
 800884c:	6003      	str	r3, [r0, #0]
 800884e:	e7d6      	b.n	80087fe <_free_r+0x26>
 8008850:	6825      	ldr	r5, [r4, #0]
 8008852:	1961      	adds	r1, r4, r5
 8008854:	428b      	cmp	r3, r1
 8008856:	bf04      	itt	eq
 8008858:	6819      	ldreq	r1, [r3, #0]
 800885a:	685b      	ldreq	r3, [r3, #4]
 800885c:	6063      	str	r3, [r4, #4]
 800885e:	bf04      	itt	eq
 8008860:	1949      	addeq	r1, r1, r5
 8008862:	6021      	streq	r1, [r4, #0]
 8008864:	6054      	str	r4, [r2, #4]
 8008866:	e7ca      	b.n	80087fe <_free_r+0x26>
 8008868:	b003      	add	sp, #12
 800886a:	bd30      	pop	{r4, r5, pc}
 800886c:	20000950 	.word	0x20000950

08008870 <sbrk_aligned>:
 8008870:	b570      	push	{r4, r5, r6, lr}
 8008872:	4e0e      	ldr	r6, [pc, #56]	; (80088ac <sbrk_aligned+0x3c>)
 8008874:	460c      	mov	r4, r1
 8008876:	6831      	ldr	r1, [r6, #0]
 8008878:	4605      	mov	r5, r0
 800887a:	b911      	cbnz	r1, 8008882 <sbrk_aligned+0x12>
 800887c:	f000 f88c 	bl	8008998 <_sbrk_r>
 8008880:	6030      	str	r0, [r6, #0]
 8008882:	4621      	mov	r1, r4
 8008884:	4628      	mov	r0, r5
 8008886:	f000 f887 	bl	8008998 <_sbrk_r>
 800888a:	1c43      	adds	r3, r0, #1
 800888c:	d00a      	beq.n	80088a4 <sbrk_aligned+0x34>
 800888e:	1cc4      	adds	r4, r0, #3
 8008890:	f024 0403 	bic.w	r4, r4, #3
 8008894:	42a0      	cmp	r0, r4
 8008896:	d007      	beq.n	80088a8 <sbrk_aligned+0x38>
 8008898:	1a21      	subs	r1, r4, r0
 800889a:	4628      	mov	r0, r5
 800889c:	f000 f87c 	bl	8008998 <_sbrk_r>
 80088a0:	3001      	adds	r0, #1
 80088a2:	d101      	bne.n	80088a8 <sbrk_aligned+0x38>
 80088a4:	f04f 34ff 	mov.w	r4, #4294967295
 80088a8:	4620      	mov	r0, r4
 80088aa:	bd70      	pop	{r4, r5, r6, pc}
 80088ac:	20000954 	.word	0x20000954

080088b0 <_malloc_r>:
 80088b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088b4:	1ccd      	adds	r5, r1, #3
 80088b6:	f025 0503 	bic.w	r5, r5, #3
 80088ba:	3508      	adds	r5, #8
 80088bc:	2d0c      	cmp	r5, #12
 80088be:	bf38      	it	cc
 80088c0:	250c      	movcc	r5, #12
 80088c2:	2d00      	cmp	r5, #0
 80088c4:	4607      	mov	r7, r0
 80088c6:	db01      	blt.n	80088cc <_malloc_r+0x1c>
 80088c8:	42a9      	cmp	r1, r5
 80088ca:	d905      	bls.n	80088d8 <_malloc_r+0x28>
 80088cc:	230c      	movs	r3, #12
 80088ce:	603b      	str	r3, [r7, #0]
 80088d0:	2600      	movs	r6, #0
 80088d2:	4630      	mov	r0, r6
 80088d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088d8:	4e2e      	ldr	r6, [pc, #184]	; (8008994 <_malloc_r+0xe4>)
 80088da:	f000 f86d 	bl	80089b8 <__malloc_lock>
 80088de:	6833      	ldr	r3, [r6, #0]
 80088e0:	461c      	mov	r4, r3
 80088e2:	bb34      	cbnz	r4, 8008932 <_malloc_r+0x82>
 80088e4:	4629      	mov	r1, r5
 80088e6:	4638      	mov	r0, r7
 80088e8:	f7ff ffc2 	bl	8008870 <sbrk_aligned>
 80088ec:	1c43      	adds	r3, r0, #1
 80088ee:	4604      	mov	r4, r0
 80088f0:	d14d      	bne.n	800898e <_malloc_r+0xde>
 80088f2:	6834      	ldr	r4, [r6, #0]
 80088f4:	4626      	mov	r6, r4
 80088f6:	2e00      	cmp	r6, #0
 80088f8:	d140      	bne.n	800897c <_malloc_r+0xcc>
 80088fa:	6823      	ldr	r3, [r4, #0]
 80088fc:	4631      	mov	r1, r6
 80088fe:	4638      	mov	r0, r7
 8008900:	eb04 0803 	add.w	r8, r4, r3
 8008904:	f000 f848 	bl	8008998 <_sbrk_r>
 8008908:	4580      	cmp	r8, r0
 800890a:	d13a      	bne.n	8008982 <_malloc_r+0xd2>
 800890c:	6821      	ldr	r1, [r4, #0]
 800890e:	3503      	adds	r5, #3
 8008910:	1a6d      	subs	r5, r5, r1
 8008912:	f025 0503 	bic.w	r5, r5, #3
 8008916:	3508      	adds	r5, #8
 8008918:	2d0c      	cmp	r5, #12
 800891a:	bf38      	it	cc
 800891c:	250c      	movcc	r5, #12
 800891e:	4629      	mov	r1, r5
 8008920:	4638      	mov	r0, r7
 8008922:	f7ff ffa5 	bl	8008870 <sbrk_aligned>
 8008926:	3001      	adds	r0, #1
 8008928:	d02b      	beq.n	8008982 <_malloc_r+0xd2>
 800892a:	6823      	ldr	r3, [r4, #0]
 800892c:	442b      	add	r3, r5
 800892e:	6023      	str	r3, [r4, #0]
 8008930:	e00e      	b.n	8008950 <_malloc_r+0xa0>
 8008932:	6822      	ldr	r2, [r4, #0]
 8008934:	1b52      	subs	r2, r2, r5
 8008936:	d41e      	bmi.n	8008976 <_malloc_r+0xc6>
 8008938:	2a0b      	cmp	r2, #11
 800893a:	d916      	bls.n	800896a <_malloc_r+0xba>
 800893c:	1961      	adds	r1, r4, r5
 800893e:	42a3      	cmp	r3, r4
 8008940:	6025      	str	r5, [r4, #0]
 8008942:	bf18      	it	ne
 8008944:	6059      	strne	r1, [r3, #4]
 8008946:	6863      	ldr	r3, [r4, #4]
 8008948:	bf08      	it	eq
 800894a:	6031      	streq	r1, [r6, #0]
 800894c:	5162      	str	r2, [r4, r5]
 800894e:	604b      	str	r3, [r1, #4]
 8008950:	4638      	mov	r0, r7
 8008952:	f104 060b 	add.w	r6, r4, #11
 8008956:	f000 f835 	bl	80089c4 <__malloc_unlock>
 800895a:	f026 0607 	bic.w	r6, r6, #7
 800895e:	1d23      	adds	r3, r4, #4
 8008960:	1af2      	subs	r2, r6, r3
 8008962:	d0b6      	beq.n	80088d2 <_malloc_r+0x22>
 8008964:	1b9b      	subs	r3, r3, r6
 8008966:	50a3      	str	r3, [r4, r2]
 8008968:	e7b3      	b.n	80088d2 <_malloc_r+0x22>
 800896a:	6862      	ldr	r2, [r4, #4]
 800896c:	42a3      	cmp	r3, r4
 800896e:	bf0c      	ite	eq
 8008970:	6032      	streq	r2, [r6, #0]
 8008972:	605a      	strne	r2, [r3, #4]
 8008974:	e7ec      	b.n	8008950 <_malloc_r+0xa0>
 8008976:	4623      	mov	r3, r4
 8008978:	6864      	ldr	r4, [r4, #4]
 800897a:	e7b2      	b.n	80088e2 <_malloc_r+0x32>
 800897c:	4634      	mov	r4, r6
 800897e:	6876      	ldr	r6, [r6, #4]
 8008980:	e7b9      	b.n	80088f6 <_malloc_r+0x46>
 8008982:	230c      	movs	r3, #12
 8008984:	603b      	str	r3, [r7, #0]
 8008986:	4638      	mov	r0, r7
 8008988:	f000 f81c 	bl	80089c4 <__malloc_unlock>
 800898c:	e7a1      	b.n	80088d2 <_malloc_r+0x22>
 800898e:	6025      	str	r5, [r4, #0]
 8008990:	e7de      	b.n	8008950 <_malloc_r+0xa0>
 8008992:	bf00      	nop
 8008994:	20000950 	.word	0x20000950

08008998 <_sbrk_r>:
 8008998:	b538      	push	{r3, r4, r5, lr}
 800899a:	4d06      	ldr	r5, [pc, #24]	; (80089b4 <_sbrk_r+0x1c>)
 800899c:	2300      	movs	r3, #0
 800899e:	4604      	mov	r4, r0
 80089a0:	4608      	mov	r0, r1
 80089a2:	602b      	str	r3, [r5, #0]
 80089a4:	f7f8 fbcc 	bl	8001140 <_sbrk>
 80089a8:	1c43      	adds	r3, r0, #1
 80089aa:	d102      	bne.n	80089b2 <_sbrk_r+0x1a>
 80089ac:	682b      	ldr	r3, [r5, #0]
 80089ae:	b103      	cbz	r3, 80089b2 <_sbrk_r+0x1a>
 80089b0:	6023      	str	r3, [r4, #0]
 80089b2:	bd38      	pop	{r3, r4, r5, pc}
 80089b4:	20000958 	.word	0x20000958

080089b8 <__malloc_lock>:
 80089b8:	4801      	ldr	r0, [pc, #4]	; (80089c0 <__malloc_lock+0x8>)
 80089ba:	f000 b809 	b.w	80089d0 <__retarget_lock_acquire_recursive>
 80089be:	bf00      	nop
 80089c0:	2000095c 	.word	0x2000095c

080089c4 <__malloc_unlock>:
 80089c4:	4801      	ldr	r0, [pc, #4]	; (80089cc <__malloc_unlock+0x8>)
 80089c6:	f000 b804 	b.w	80089d2 <__retarget_lock_release_recursive>
 80089ca:	bf00      	nop
 80089cc:	2000095c 	.word	0x2000095c

080089d0 <__retarget_lock_acquire_recursive>:
 80089d0:	4770      	bx	lr

080089d2 <__retarget_lock_release_recursive>:
 80089d2:	4770      	bx	lr

080089d4 <_init>:
 80089d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089d6:	bf00      	nop
 80089d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089da:	bc08      	pop	{r3}
 80089dc:	469e      	mov	lr, r3
 80089de:	4770      	bx	lr

080089e0 <_fini>:
 80089e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089e2:	bf00      	nop
 80089e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089e6:	bc08      	pop	{r3}
 80089e8:	469e      	mov	lr, r3
 80089ea:	4770      	bx	lr
